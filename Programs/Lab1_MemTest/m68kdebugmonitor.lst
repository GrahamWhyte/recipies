680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 24 Jan 2019      Time: 17:33:04          Source: C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\LAB1_MEMTEST\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2940      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     471   ; #include "DebugMonitor.h"
                     472   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     473   ; #define StartOfExceptionVectorTable 0x08030000
                     474   ; //#define StartOfExceptionVectorTable 0x0B000000
                     475   ; // use 0C000000 for dram or hex 08040000 for sram
                     476   ; #define TopOfStack 0x08040000
                     477   ; //#define TopOfStack 0x0C000000
                     478   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     479   ; unsigned int i, x, y, z, PortA_Count;
                     480   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     481   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     482   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     483   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     484   ; unsigned int PC, SSP, USP ;
                     485   ; unsigned short int SR;
                     486   ; // Breakpoint variables
                     487   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     488   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     489   ; unsigned int BreakPointSetOrCleared[8] ;
                     490   ; unsigned int InstructionSize ;
                     491   ; // watchpoint variables
                     492   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     493   ; unsigned int WatchPointSetOrCleared[8] ;
                     494   ; char WatchPointString[8][100] ;
                     495   ; // Types
                     496   ; typedef enum {FALSE, TRUE} bool; 
                     497   ; // for disassembly of program
                     498   ; char    Instruction[100] ;
                     499   ; char    TempString[100] ;
                     500   ; /************************************************************************************
                     501   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     502   ; ************************************************************************************/
                     503   ; void Wait1ms(void)
                     504   ; {
                     505   _Wait1ms:
00000932  2F02       506          move.l    D2,-(A7)
                     507   ; long int  i ;
                     508   ; for(i = 0; i < 1000; i ++)
00000934  4282       509          clr.l     D2
                     510   Wait1ms_1:
00000936  0C82 0000  511          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       512          bge.s     Wait1ms_3
0000093E  5282       513          addq.l    #1,D2
00000940  60F4       514          bra       Wait1ms_1
                     515   Wait1ms_3:
00000942  241F       516          move.l    (A7)+,D2
00000944  4E75       517          rts
                     518   ; ;
                     519   ; }
                     520   ; /************************************************************************************
                     521   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     522   ; **************************************************************************************/
                     523   ; void Wait3ms(void)
                     524   ; {
                     525   _Wait3ms:
00000946  2F02       526          move.l    D2,-(A7)
                     527   ; int i ;
                     528   ; for(i = 0; i < 3; i++)
00000948  4282       529          clr.l     D2
                     530   Wait3ms_1:
0000094A  0C82 0000  531          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       532          bge.s     Wait3ms_3
                     533   ; Wait1ms() ;
00000952  4EB8 0932  534          jsr       _Wait1ms
00000956  5282       535          addq.l    #1,D2
00000958  60F0       536          bra       Wait3ms_1
                     537   Wait3ms_3:
0000095A  241F       538          move.l    (A7)+,D2
0000095C  4E75       539          rts
                     540   ; }
                     541   ; /*********************************************************************************************
                     542   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     543   ; *********************************************************************************************/
                     544   ; void Init_LCD(void)
                     545   ; {
                     546   _Init_LCD:
                     547   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  548          move.b    #12,4194336
00000962  0040 0020 
                     549   ; Wait3ms() ;
00000966  4EB8 0946  550          jsr       _Wait3ms
                     551   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  552          move.b    #56,4194336
0000096E  0040 0020 
                     553   ; Wait3ms() ;
00000972  4EB8 0946  554          jsr       _Wait3ms
00000976  4E75       555          rts
                     556   ; }
                     557   ; /******************************************************************************
                     558   ; *subroutine to output a single character held in d1 to the LCD display
                     559   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     560   ; *current cursor position
                     561   ; *******************************************************************************/
                     562   ; void Outchar(int c)
                     563   ; {
                     564   _Outchar:
00000978  4E56 0000  565          link      A6,#0
                     566   ; LCDdata = (char)(c);
0000097C  202E 0008  567          move.l    8(A6),D0
00000980  13C0 0040  568          move.b    D0,4194338
00000984  0022      
                     569   ; Wait1ms() ;
00000986  4EB8 0932  570          jsr       _Wait1ms
0000098A  4E5E       571          unlk      A6
0000098C  4E75       572          rts
                     573   ; }
                     574   ; /**********************************************************************************
                     575   ; *subroutine to output a message at the current cursor position of the LCD display
                     576   ; ************************************************************************************/
                     577   ; void OutMess(char *theMessage)
                     578   ; {
                     579   _OutMess:
0000098E  4E56 FFFC  580          link      A6,#-4
                     581   ; char c ;
                     582   ; while((c = *theMessage++) != (char)(0))
                     583   OutMess_1:
00000992  206E 0008  584          move.l    8(A6),A0
00000996  52AE 0008  585          addq.l    #1,8(A6)
0000099A  1D50 FFFF  586          move.b    (A0),-1(A6)
0000099E  1010       587          move.b    (A0),D0
000009A0  6712       588          beq.s     OutMess_3
                     589   ; Outchar(c) ;
000009A2  122E FFFF  590          move.b    -1(A6),D1
000009A6  4881       591          ext.w     D1
000009A8  48C1       592          ext.l     D1
000009AA  2F01       593          move.l    D1,-(A7)
000009AC  4EB8 0978  594          jsr       _Outchar
000009B0  584F       595          addq.w    #4,A7
000009B2  60DE       596          bra       OutMess_1
                     597   OutMess_3:
000009B4  4E5E       598          unlk      A6
000009B6  4E75       599          rts
                     600   ; }
                     601   ; /******************************************************************************
                     602   ; *subroutine to clear the line by issuing 24 space characters
                     603   ; *******************************************************************************/
                     604   ; void Clearln(void)
                     605   ; {
                     606   _Clearln:
000009B8  2F02       607          move.l    D2,-(A7)
                     608   ; unsigned char i ;
                     609   ; for(i = 0; i < 24; i ++)
000009BA  4202       610          clr.b     D2
                     611   Clearln_1:
000009BC  0C02 0018  612          cmp.b     #24,D2
000009C0  640E       613          bhs.s     Clearln_3
                     614   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  615          pea       32
000009C6  4EB8 0978  616          jsr       _Outchar
000009CA  584F       617          addq.w    #4,A7
000009CC  5202       618          addq.b    #1,D2
000009CE  60EC       619          bra       Clearln_1
                     620   Clearln_3:
000009D0  241F       621          move.l    (A7)+,D2
000009D2  4E75       622          rts
                     623   ; }
                     624   ; /******************************************************************************
                     625   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     626   ; *******************************************************************************/
                     627   ; void Oline0(char *theMessage)
                     628   ; {
                     629   _Oline0:
000009D4  4E56 0000  630          link      A6,#0
                     631   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  632          move.b    #128,4194336
000009DC  0040 0020 
                     633   ; Wait3ms();
000009E0  4EB8 0946  634          jsr       _Wait3ms
                     635   ; Clearln() ;
000009E4  4EB8 09B8  636          jsr       _Clearln
                     637   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  638          move.b    #128,4194336
000009EC  0040 0020 
                     639   ; Wait3ms() ;
000009F0  4EB8 0946  640          jsr       _Wait3ms
                     641   ; OutMess(theMessage) ;
000009F4  2F2E 0008  642          move.l    8(A6),-(A7)
000009F8  4EB8 098E  643          jsr       _OutMess
000009FC  584F       644          addq.w    #4,A7
000009FE  4E5E       645          unlk      A6
00000A00  4E75       646          rts
                     647   ; }
                     648   ; /******************************************************************************
                     649   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     650   ; *******************************************************************************/
                     651   ; void Oline1(char *theMessage)
                     652   ; {
                     653   _Oline1:
00000A02  4E56 0000  654          link      A6,#0
                     655   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  656          move.b    #192,4194336
00000A0A  0040 0020 
                     657   ; Wait3ms();
00000A0E  4EB8 0946  658          jsr       _Wait3ms
                     659   ; Clearln() ;
00000A12  4EB8 09B8  660          jsr       _Clearln
                     661   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  662          move.b    #192,4194336
00000A1A  0040 0020 
                     663   ; Wait3ms() ;
00000A1E  4EB8 0946  664          jsr       _Wait3ms
                     665   ; OutMess(theMessage) ;
00000A22  2F2E 0008  666          move.l    8(A6),-(A7)
00000A26  4EB8 098E  667          jsr       _OutMess
00000A2A  584F       668          addq.w    #4,A7
00000A2C  4E5E       669          unlk      A6
00000A2E  4E75       670          rts
                     671   ; }
                     672   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     673   ; {
                     674   _InstallExceptionHandler:
00000A30  4E56 FFFC  675          link      A6,#-4
                     676   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  677          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     678   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  679          move.l    -4(A6),A0
00000A40  202E 000C  680          move.l    12(A6),D0
00000A44  E588       681          lsl.l     #2,D0
00000A46  21AE 0008  682          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       683          unlk      A6
00000A4E  4E75       684          rts
                     685   ; }
                     686   ; void TestLEDS(void)
                     687   ; {
                     688   _TestLEDS:
00000A50  48E7 3000  689          movem.l   D2/D3,-(A7)
                     690   ; int delay ;
                     691   ; unsigned char count = 0 ;
00000A54  4202       692          clr.b     D2
                     693   ; while(1)    {
                     694   TestLEDS_1:
                     695   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       696          move.b    D2,D0
00000A58  E908       697          lsl.b     #4,D0
00000A5A  1202       698          move.b    D2,D1
00000A5C  C23C 000F  699          and.b     #15,D1
00000A60  D001       700          add.b     D1,D0
00000A62  13C0 0040  701          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  702          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  703          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  704          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  705          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  706          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  707          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  708          move.b    D0,4194304
00000A90  0000      
                     709   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       710          clr.l     D3
                     711   TestLEDS_4:
00000A94  0C83 0003  712          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       713          bge.s     TestLEDS_6
00000A9C  5283       714          addq.l    #1,D3
00000A9E  60F4       715          bra       TestLEDS_4
                     716   TestLEDS_6:
                     717   ; ;
                     718   ; count ++;
00000AA0  5202       719          addq.b    #1,D2
00000AA2  60B2       720          bra       TestLEDS_1
                     721   ; }
                     722   ; }
                     723   ; void SwitchTest(void)
                     724   ; {
                     725   _SwitchTest:
00000AA4  48E7 3020  726          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  727          lea       _printf.L,A2
00000AAC  559E      
                     728   ; int i, switches = 0 ;
00000AAE  4283       729          clr.l     D3
                     730   ; printf("\r\n") ;
00000AB0  4879 0000  731          pea       @m68kde~1_1.L
00000AB4  5EB0      
00000AB6  4E92       732          jsr       (A2)
00000AB8  584F       733          addq.w    #4,A7
                     734   ; while(1)    {
                     735   SwitchTest_1:
                     736   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  737          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  738          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       739          lsl.l     #8,D0
00000AC8  1239 0040  740          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  741          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       742          or.l      D1,D0
00000AD6  2600       743          move.l    D0,D3
                     744   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  745          pea       @m68kde~1_2.L
00000ADC  5EB4      
00000ADE  4E92       746          jsr       (A2)
00000AE0  584F       747          addq.w    #4,A7
                     748   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  749          move.l    #128,D2
00000AE6  0080      
                     750   SwitchTest_4:
00000AE8  0C82 0000  751          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       752          ble.s     SwitchTest_6
                     753   ; if((switches & i) == 0)
00000AF0  2003       754          move.l    D3,D0
00000AF2  C082       755          and.l     D2,D0
00000AF4  660C       756          bne.s     SwitchTest_7
                     757   ; printf("0") ;
00000AF6  4879 0000  758          pea       @m68kde~1_3.L
00000AFA  5ECA      
00000AFC  4E92       759          jsr       (A2)
00000AFE  584F       760          addq.w    #4,A7
00000B00  600A       761          bra.s     SwitchTest_8
                     762   SwitchTest_7:
                     763   ; else
                     764   ; printf("1") ;
00000B02  4879 0000  765          pea       @m68kde~1_4.L
00000B06  5ECC      
00000B08  4E92       766          jsr       (A2)
00000B0A  584F       767          addq.w    #4,A7
                     768   SwitchTest_8:
00000B0C  E282       769          asr.l     #1,D2
00000B0E  60D8       770          bra       SwitchTest_4
                     771   SwitchTest_6:
00000B10  60A8       772          bra       SwitchTest_1
                     773   ; }
                     774   ; }
                     775   ; }
                     776   ; /*********************************************************************************************
                     777   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     778   ; *********************************************************************************************/
                     779   ; void Init_RS232(void)
                     780   ; {
                     781   _Init_RS232:
                     782   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  783          move.b    #21,4194368
00000B16  0040 0040 
                     784   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  785          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       786          rts
                     787   ; }
                     788   ; int kbhit(void)
                     789   ; {
                     790   _kbhit:
                     791   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  792          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  793          and.b     #1,D0
00000B2E  0C00 0001  794          cmp.b     #1,D0
00000B32  6604       795          bne.s     kbhit_1
                     796   ; return 1 ;
00000B34  7001       797          moveq     #1,D0
00000B36  6002       798          bra.s     kbhit_3
                     799   kbhit_1:
                     800   ; else
                     801   ; return 0 ;
00000B38  4280       802          clr.l     D0
                     803   kbhit_3:
00000B3A  4E75       804          rts
                     805   ; }
                     806   ; /*********************************************************************************************************
                     807   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     808   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     809   ; **  to allow the board to communicate with HyperTerminal Program
                     810   ; **
                     811   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     812   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     813   ; **  call _putch() also
                     814   ; *********************************************************************************************************/
                     815   ; int _putch( int c)
                     816   ; {
                     817   __putch:
00000B3C  4E56 0000  818          link      A6,#0
                     819   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     820   _putch_1:
00000B40  1039 0040  821          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  822          and.b     #2,D0
00000B4A  0C00 0002  823          cmp.b     #2,D0
00000B4E  6702       824          beq.s     _putch_3
00000B50  60EE       825          bra       _putch_1
                     826   _putch_3:
                     827   ; ;
                     828   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  829          move.l    8(A6),D0
00000B56  C03C 007F  830          and.b     #127,D0
00000B5A  13C0 0040  831          move.b    D0,4194370
00000B5E  0042      
                     832   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  833          move.l    8(A6),D0
00000B64  4E5E       834          unlk      A6
00000B66  4E75       835          rts
                     836   ; }
                     837   ; /*********************************************************************************************************
                     838   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     839   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     840   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     841   ; **
                     842   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     843   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     844   ; **  call _getch() also
                     845   ; *********************************************************************************************************/
                     846   ; int _getch( void )
                     847   ; {
                     848   __getch:
00000B68  2F02       849          move.l    D2,-(A7)
                     850   ; int c ;
                     851   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     852   _getch_1:
00000B6A  1039 0040  853          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  854          and.b     #1,D0
00000B74  0C00 0001  855          cmp.b     #1,D0
00000B78  6702       856          beq.s     _getch_3
00000B7A  60EE       857          bra       _getch_1
                     858   _getch_3:
                     859   ; ;
                     860   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  861          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  862          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  863          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       864          move.l    D0,D2
                     865   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     866   ; if(Echo)
00000B90  4AB9 0803  867          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       868          beq.s     _getch_4
                     869   ; _putch(c);
00000B98  2F02       870          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  871          jsr       __putch
00000B9E  584F       872          addq.w    #4,A7
                     873   _getch_4:
                     874   ; return c ;
00000BA0  2002       875          move.l    D2,D0
00000BA2  241F       876          move.l    (A7)+,D2
00000BA4  4E75       877          rts
                     878   ; }
                     879   ; // flush the input stream for any unread characters
                     880   ; void FlushKeyboard(void)
                     881   ; {
                     882   _FlushKeyboard:
00000BA6  4E56 FFFC  883          link      A6,#-4
                     884   ; char c ;
                     885   ; while(1)    {
                     886   FlushKeyboard_1:
                     887   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  888          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  889          and.b     #1,D0
00000BB4  0C00 0001  890          cmp.b     #1,D0
00000BB8  6610       891          bne.s     FlushKeyboard_4
                     892   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  893          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  894          and.b     #127,D0
00000BC4  1D40 FFFF  895          move.b    D0,-1(A6)
00000BC8  6002       896          bra.s     FlushKeyboard_5
                     897   FlushKeyboard_4:
                     898   ; else
                     899   ; return ;
00000BCA  6002       900          bra.s     FlushKeyboard_6
                     901   FlushKeyboard_5:
00000BCC  60DC       902          bra       FlushKeyboard_1
                     903   FlushKeyboard_6:
00000BCE  4E5E       904          unlk      A6
00000BD0  4E75       905          rts
                     906   ; }
                     907   ; }
                     908   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     909   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     910   ; char xtod(int c)
                     911   ; {
                     912   _xtod:
00000BD2  4E56 0000  913          link      A6,#0
00000BD6  2F02       914          move.l    D2,-(A7)
00000BD8  242E 0008  915          move.l    8(A6),D2
                     916   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  917          cmp.b     #57,D2
00000BE0  6E08       918          bgt.s     xtod_1
                     919   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       920          move.b    D2,D0
00000BE4  0400 0030  921          sub.b     #48,D0
00000BE8  6014       922          bra.s     xtod_3
                     923   xtod_1:
                     924   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  925          cmp.b     #70,D2
00000BEE  6F08       926          ble.s     xtod_4
                     927   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       928          move.b    D2,D0
00000BF2  0400 0057  929          sub.b     #87,D0
00000BF6  6006       930          bra.s     xtod_3
                     931   xtod_4:
                     932   ; else
                     933   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       934          move.b    D2,D0
00000BFA  0400 0037  935          sub.b     #55,D0
                     936   xtod_3:
00000BFE  241F       937          move.l    (A7)+,D2
00000C00  4E5E       938          unlk      A6
00000C02  4E75       939          rts
                     940   ; }
                     941   ; int Get2HexDigits(char *CheckSumPtr)
                     942   ; {
                     943   _Get2HexDigits:
00000C04  4E56 0000  944          link      A6,#0
00000C08  2F02       945          move.l    D2,-(A7)
                     946   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       947          move.l    D0,-(A7)
00000C0C  4EB8 0B68  948          jsr       __getch
00000C10  2200       949          move.l    D0,D1
00000C12  201F       950          move.l    (A7)+,D0
00000C14  2F01       951          move.l    D1,-(A7)
00000C16  4EB8 0BD2  952          jsr       _xtod
00000C1A  584F       953          addq.w    #4,A7
00000C1C  C0BC 0000  954          and.l     #255,D0
00000C20  00FF      
00000C22  E980       955          asl.l     #4,D0
00000C24  2F00       956          move.l    D0,-(A7)
00000C26  2F01       957          move.l    D1,-(A7)
00000C28  4EB8 0B68  958          jsr       __getch
00000C2C  221F       959          move.l    (A7)+,D1
00000C2E  2F00       960          move.l    D0,-(A7)
00000C30  4EB8 0BD2  961          jsr       _xtod
00000C34  584F       962          addq.w    #4,A7
00000C36  2200       963          move.l    D0,D1
00000C38  201F       964          move.l    (A7)+,D0
00000C3A  C2BC 0000  965          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       966          or.l      D1,D0
00000C42  2400       967          move.l    D0,D2
                     968   ; if(CheckSumPtr)
00000C44  4AAE 0008  969          tst.l     8(A6)
00000C48  6706       970          beq.s     Get2HexDigits_1
                     971   ; *CheckSumPtr += i ;
00000C4A  206E 0008  972          move.l    8(A6),A0
00000C4E  D510       973          add.b     D2,(A0)
                     974   Get2HexDigits_1:
                     975   ; return i ;
00000C50  2002       976          move.l    D2,D0
00000C52  241F       977          move.l    (A7)+,D2
00000C54  4E5E       978          unlk      A6
00000C56  4E75       979          rts
                     980   ; }
                     981   ; int Get4HexDigits(char *CheckSumPtr)
                     982   ; {
                     983   _Get4HexDigits:
00000C58  4E56 0000  984          link      A6,#0
                     985   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  986          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  987          jsr       _Get2HexDigits
00000C64  584F       988          addq.w    #4,A7
00000C66  E180       989          asl.l     #8,D0
00000C68  2F00       990          move.l    D0,-(A7)
00000C6A  2F2E 0008  991          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  992          jsr       _Get2HexDigits
00000C72  584F       993          addq.w    #4,A7
00000C74  2200       994          move.l    D0,D1
00000C76  201F       995          move.l    (A7)+,D0
00000C78  8081       996          or.l      D1,D0
00000C7A  4E5E       997          unlk      A6
00000C7C  4E75       998          rts
                     999   ; }
                    1000   ; int Get6HexDigits(char *CheckSumPtr)
                    1001   ; {
                    1002   _Get6HexDigits:
00000C7E  4E56 0000 1003          link      A6,#0
                    1004   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1006          jsr       _Get4HexDigits
00000C8A  584F      1007          addq.w    #4,A7
00000C8C  E180      1008          asl.l     #8,D0
00000C8E  2F00      1009          move.l    D0,-(A7)
00000C90  2F2E 0008 1010          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1011          jsr       _Get2HexDigits
00000C98  584F      1012          addq.w    #4,A7
00000C9A  2200      1013          move.l    D0,D1
00000C9C  201F      1014          move.l    (A7)+,D0
00000C9E  8081      1015          or.l      D1,D0
00000CA0  4E5E      1016          unlk      A6
00000CA2  4E75      1017          rts
                    1018   ; }
                    1019   ; int Get8HexDigits(char *CheckSumPtr)
                    1020   ; {
                    1021   _Get8HexDigits:
00000CA4  4E56 0000 1022          link      A6,#0
                    1023   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1024          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1025          jsr       _Get4HexDigits
00000CB0  584F      1026          addq.w    #4,A7
00000CB2  E180      1027          asl.l     #8,D0
00000CB4  E180      1028          asl.l     #8,D0
00000CB6  2F00      1029          move.l    D0,-(A7)
00000CB8  2F2E 0008 1030          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1031          jsr       _Get4HexDigits
00000CC0  584F      1032          addq.w    #4,A7
00000CC2  2200      1033          move.l    D0,D1
00000CC4  201F      1034          move.l    (A7)+,D0
00000CC6  8081      1035          or.l      D1,D0
00000CC8  4E5E      1036          unlk      A6
00000CCA  4E75      1037          rts
                    1038   ; }
                    1039   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1040   _strcatInstruction:
00000CCC  4E56 0000 1041          link      A6,#0
00000CD0  2F2E 0008 1042          move.l    8(A6),-(A7)
00000CD4  4879 0803 1043          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1044          jsr       _strcat
00000CDE  556C      
00000CE0  504F      1045          addq.w    #8,A7
00000CE2  4E5E      1046          unlk      A6
00000CE4  4E75      1047          rts
                    1048   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1049   _strcpyInstruction:
00000CE6  4E56 0000 1050          link      A6,#0
00000CEA  2F2E 0008 1051          move.l    8(A6),-(A7)
00000CEE  4879 0803 1052          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1053          jsr       _strcpy
00000CF8  53CC      
00000CFA  504F      1054          addq.w    #8,A7
00000CFC  4E5E      1055          unlk      A6
00000CFE  4E75      1056          rts
                    1057   ; void DisassembleProgram(void )
                    1058   ; {
                    1059   _DisassembleProgram:
00000D00  4E56 FFF8 1060          link      A6,#-8
00000D04  48E7 3038 1061          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1062          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1063          lea       _printf.L,A3
00000D12  559E      
00000D14  49F9 0803 1064          lea       _Instruction.L,A4
00000D18  04E2      
                    1065   ; char c ;
                    1066   ; int i, j ;
                    1067   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1068   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1069          pea       @m68kde~1_5.L
00000D1E  5ECE      
00000D20  4E93      1070          jsr       (A3)
00000D22  584F      1071          addq.w    #4,A7
                    1072   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1073          clr.l     -(A7)
00000D26  4EB8 0CA4 1074          jsr       _Get8HexDigits
00000D2A  584F      1075          addq.w    #4,A7
00000D2C  2400      1076          move.l    D0,D2
                    1077   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1078          pea       @m68kde~1_6.L
00000D32  5EE6      
00000D34  4E93      1079          jsr       (A3)
00000D36  584F      1080          addq.w    #4,A7
                    1081   ; while(1)    {
                    1082   DisassembleProgram_1:
                    1083   ; for(i = 0; i < 20; i ++)
00000D38  4283      1084          clr.l     D3
                    1085   DisassembleProgram_4:
00000D3A  0C83 0000 1086          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1087          bge       DisassembleProgram_6
                    1088   ; {
                    1089   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1090          move.l    #1,(A2)
00000D48  0001      
                    1091   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1092          move.l    D2,-(A7)
00000D4C  4EB9 0000 1093          jsr       _DisassembleInstruction
00000D50  352A      
00000D52  584F      1094          addq.w    #4,A7
                    1095   ; if(InstructionSize == 1)
00000D54  2012      1096          move.l    (A2),D0
00000D56  0C80 0000 1097          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1098          bne.s     DisassembleProgram_7
                    1099   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1100          move.l    A4,-(A7)
00000D60  2042      1101          move.l    D2,A0
00000D62  3210      1102          move.w    (A0),D1
00000D64  C2BC 0000 1103          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1104          move.l    D1,-(A7)
00000D6C  2F02      1105          move.l    D2,-(A7)
00000D6E  4879 0000 1106          pea       @m68kde~1_7.L
00000D72  5F0A      
00000D74  4E93      1107          jsr       (A3)
00000D76  DEFC 0010 1108          add.w     #16,A7
00000D7A  6000 0138 1109          bra       DisassembleProgram_15
                    1110   DisassembleProgram_7:
                    1111   ; else if(InstructionSize == 2)
00000D7E  2012      1112          move.l    (A2),D0
00000D80  0C80 0000 1113          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1114          bne.s     DisassembleProgram_9
                    1115   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1116          move.l    A4,-(A7)
00000D8A  2042      1117          move.l    D2,A0
00000D8C  3228 0002 1118          move.w    2(A0),D1
00000D90  C2BC 0000 1119          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1120          move.l    D1,-(A7)
00000D98  2042      1121          move.l    D2,A0
00000D9A  3210      1122          move.w    (A0),D1
00000D9C  C2BC 0000 1123          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1124          move.l    D1,-(A7)
00000DA4  2F02      1125          move.l    D2,-(A7)
00000DA6  4879 0000 1126          pea       @m68kde~1_8.L
00000DAA  5F32      
00000DAC  4E93      1127          jsr       (A3)
00000DAE  DEFC 0014 1128          add.w     #20,A7
00000DB2  6000 0100 1129          bra       DisassembleProgram_15
                    1130   DisassembleProgram_9:
                    1131   ; else if(InstructionSize == 3)
00000DB6  2012      1132          move.l    (A2),D0
00000DB8  0C80 0000 1133          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1134          bne       DisassembleProgram_11
                    1135   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1136          move.l    A4,-(A7)
00000DC4  2042      1137          move.l    D2,A0
00000DC6  3228 0004 1138          move.w    4(A0),D1
00000DCA  C2BC 0000 1139          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1140          move.l    D1,-(A7)
00000DD2  2042      1141          move.l    D2,A0
00000DD4  3228 0002 1142          move.w    2(A0),D1
00000DD8  C2BC 0000 1143          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1144          move.l    D1,-(A7)
00000DE0  2042      1145          move.l    D2,A0
00000DE2  3210      1146          move.w    (A0),D1
00000DE4  C2BC 0000 1147          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1148          move.l    D1,-(A7)
00000DEC  2F02      1149          move.l    D2,-(A7)
00000DEE  4879 0000 1150          pea       @m68kde~1_9.L
00000DF2  5F5A      
00000DF4  4E93      1151          jsr       (A3)
00000DF6  DEFC 0018 1152          add.w     #24,A7
00000DFA  6000 00B8 1153          bra       DisassembleProgram_15
                    1154   DisassembleProgram_11:
                    1155   ; else if(InstructionSize == 4)
00000DFE  2012      1156          move.l    (A2),D0
00000E00  0C80 0000 1157          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1158          bne       DisassembleProgram_13
                    1159   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1160          move.l    A4,-(A7)
00000E0C  2042      1161          move.l    D2,A0
00000E0E  3228 0006 1162          move.w    6(A0),D1
00000E12  C2BC 0000 1163          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1164          move.l    D1,-(A7)
00000E1A  2042      1165          move.l    D2,A0
00000E1C  3228 0004 1166          move.w    4(A0),D1
00000E20  C2BC 0000 1167          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1168          move.l    D1,-(A7)
00000E28  2042      1169          move.l    D2,A0
00000E2A  3228 0002 1170          move.w    2(A0),D1
00000E2E  C2BC 0000 1171          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1172          move.l    D1,-(A7)
00000E36  2042      1173          move.l    D2,A0
00000E38  3210      1174          move.w    (A0),D1
00000E3A  C2BC 0000 1175          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1176          move.l    D1,-(A7)
00000E42  2F02      1177          move.l    D2,-(A7)
00000E44  4879 0000 1178          pea       @m68kde~1_10.L
00000E48  5F82      
00000E4A  4E93      1179          jsr       (A3)
00000E4C  DEFC 001C 1180          add.w     #28,A7
00000E50  6000 0062 1181          bra       DisassembleProgram_15
                    1182   DisassembleProgram_13:
                    1183   ; else if(InstructionSize == 5)
00000E54  2012      1184          move.l    (A2),D0
00000E56  0C80 0000 1185          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1186          bne       DisassembleProgram_15
                    1187   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1188          move.l    A4,-(A7)
00000E62  2042      1189          move.l    D2,A0
00000E64  3228 0008 1190          move.w    8(A0),D1
00000E68  C2BC 0000 1191          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1192          move.l    D1,-(A7)
00000E70  2042      1193          move.l    D2,A0
00000E72  3228 0006 1194          move.w    6(A0),D1
00000E76  C2BC 0000 1195          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1196          move.l    D1,-(A7)
00000E7E  2042      1197          move.l    D2,A0
00000E80  3228 0004 1198          move.w    4(A0),D1
00000E84  C2BC 0000 1199          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1200          move.l    D1,-(A7)
00000E8C  2042      1201          move.l    D2,A0
00000E8E  3228 0002 1202          move.w    2(A0),D1
00000E92  C2BC 0000 1203          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1204          move.l    D1,-(A7)
00000E9A  2042      1205          move.l    D2,A0
00000E9C  3210      1206          move.w    (A0),D1
00000E9E  C2BC 0000 1207          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1208          move.l    D1,-(A7)
00000EA6  2F02      1209          move.l    D2,-(A7)
00000EA8  4879 0000 1210          pea       @m68kde~1_11.L
00000EAC  5FAA      
00000EAE  4E93      1211          jsr       (A3)
00000EB0  DEFC 0020 1212          add.w     #32,A7
                    1213   DisassembleProgram_15:
                    1214   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1215          move.l    (A2),D0
00000EB6  E388      1216          lsl.l     #1,D0
00000EB8  D480      1217          add.l     D0,D2
00000EBA  5283      1218          addq.l    #1,D3
00000EBC  6000 FE7C 1219          bra       DisassembleProgram_4
                    1220   DisassembleProgram_6:
                    1221   ; }
                    1222   ; c = _getch() ;
00000EC0  4EB8 0B68 1223          jsr       __getch
00000EC4  1D40 FFFB 1224          move.b    D0,-5(A6)
                    1225   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1226          move.b    -5(A6),D0
00000ECC  0C00 001B 1227          cmp.b     #27,D0
00000ED0  6602      1228          bne.s     DisassembleProgram_17
                    1229   ; return ;
00000ED2  6004      1230          bra.s     DisassembleProgram_19
                    1231   DisassembleProgram_17:
00000ED4  6000 FE62 1232          bra       DisassembleProgram_1
                    1233   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1234          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1235          unlk      A6
00000EDE  4E75      1236          rts
                    1237   ; }
                    1238   ; }
                    1239   ; void DumpMemory(void)   // simple dump memory fn
                    1240   ; {
                    1241   _DumpMemory:
00000EE0  48E7 3C30 1242          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1243          lea       _printf.L,A2
00000EE8  559E      
00000EEA  47F9 0000 1244          lea       _putch.L,A3
00000EEE  54BA      
                    1245   ; int i, j ;
                    1246   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1247   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1248          pea       @m68kde~1_12.L
00000EF4  5FD2      
00000EF6  4E92      1249          jsr       (A2)
00000EF8  584F      1250          addq.w    #4,A7
                    1251   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1252          pea       @m68kde~1_5.L
00000EFE  5ECE      
00000F00  4E92      1253          jsr       (A2)
00000F02  584F      1254          addq.w    #4,A7
                    1255   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1256          clr.l     -(A7)
00000F06  4EB8 0CA4 1257          jsr       _Get8HexDigits
00000F0A  584F      1258          addq.w    #4,A7
00000F0C  2600      1259          move.l    D0,D3
                    1260   ; while(1)    {
                    1261   DumpMemory_1:
                    1262   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1263          clr.l     D5
                    1264   DumpMemory_4:
00000F10  0C85 0000 1265          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1266          bge       DumpMemory_6
                    1267   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1268          move.l    D3,-(A7)
00000F1C  4879 0000 1269          pea       @m68kde~1_13.L
00000F20  600C      
00000F22  4E92      1270          jsr       (A2)
00000F24  504F      1271          addq.w    #8,A7
                    1272   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1273          clr.l     D2
                    1274   DumpMemory_7:
00000F28  0C82 0000 1275          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1276          bge.s     DumpMemory_9
                    1277   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1278          move.l    D3,A0
00000F32  1230 2800 1279          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1280          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1281          move.l    D1,-(A7)
00000F3E  4879 0000 1282          pea       @m68kde~1_14.L
00000F42  6014      
00000F44  4E92      1283          jsr       (A2)
00000F46  504F      1284          addq.w    #8,A7
                    1285   ; putchar(' ') ;
00000F48  4878 0020 1286          pea       32
00000F4C  4E93      1287          jsr       (A3)
00000F4E  584F      1288          addq.w    #4,A7
00000F50  5282      1289          addq.l    #1,D2
00000F52  60D4      1290          bra       DumpMemory_7
                    1291   DumpMemory_9:
                    1292   ; }
                    1293   ; // now display the data as ASCII at the end
                    1294   ; printf("  ") ;
00000F54  4879 0000 1295          pea       @m68kde~1_15.L
00000F58  601A      
00000F5A  4E92      1296          jsr       (A2)
00000F5C  584F      1297          addq.w    #4,A7
                    1298   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1299          clr.l     D2
                    1300   DumpMemory_10:
00000F60  0C82 0000 1301          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1302          bge       DumpMemory_12
                    1303   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1304          move.l    D3,A0
00000F6C  1030 2800 1305          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1306          and.b     #127,D0
00000F74  1800      1307          move.b    D0,D4
                    1308   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1309          cmp.b     #127,D4
00000F7A  6206      1310          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1311          cmp.b     #32,D4
00000F80  640A      1312          bhs.s     DumpMemory_13
                    1313   DumpMemory_15:
                    1314   ; putchar('.') ;
00000F82  4878 002E 1315          pea       46
00000F86  4E93      1316          jsr       (A3)
00000F88  584F      1317          addq.w    #4,A7
00000F8A  6012      1318          bra.s     DumpMemory_14
                    1319   DumpMemory_13:
                    1320   ; else
                    1321   ; putchar(RamPtr[j]) ;
00000F8C  2043      1322          move.l    D3,A0
00000F8E  1230 2800 1323          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1324          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1325          move.l    D1,-(A7)
00000F9A  4E93      1326          jsr       (A3)
00000F9C  584F      1327          addq.w    #4,A7
                    1328   DumpMemory_14:
00000F9E  5282      1329          addq.l    #1,D2
00000FA0  60BE      1330          bra       DumpMemory_10
                    1331   DumpMemory_12:
                    1332   ; }
                    1333   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1334          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1335          addq.l    #1,D5
00000FAA  6000 FF64 1336          bra       DumpMemory_4
                    1337   DumpMemory_6:
                    1338   ; }
                    1339   ; printf("\r\n") ;
00000FAE  4879 0000 1340          pea       @m68kde~1_1.L
00000FB2  5EB0      
00000FB4  4E92      1341          jsr       (A2)
00000FB6  584F      1342          addq.w    #4,A7
                    1343   ; c = _getch() ;
00000FB8  4EB8 0B68 1344          jsr       __getch
00000FBC  1800      1345          move.b    D0,D4
                    1346   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1347          cmp.b     #27,D4
00000FC2  6602      1348          bne.s     DumpMemory_16
                    1349   ; break ;
00000FC4  6004      1350          bra.s     DumpMemory_3
                    1351   DumpMemory_16:
00000FC6  6000 FF46 1352          bra       DumpMemory_1
                    1353   DumpMemory_3:
00000FCA  4CDF 0C3C 1354          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1355          rts
                    1356   ; }
                    1357   ; }
                    1358   ; void FillMemory()
                    1359   ; {
                    1360   _FillMemory:
00000FD0  48E7 3820 1361          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1362          lea       _printf.L,A2
00000FD8  559E      
                    1363   ; char *StartRamPtr, *EndRamPtr ;
                    1364   ; unsigned char FillData ;
                    1365   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1366          pea       @m68kde~1_16.L
00000FDE  601E      
00000FE0  4E92      1367          jsr       (A2)
00000FE2  584F      1368          addq.w    #4,A7
                    1369   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1370          pea       @m68kde~1_5.L
00000FE8  5ECE      
00000FEA  4E92      1371          jsr       (A2)
00000FEC  584F      1372          addq.w    #4,A7
                    1373   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1374          clr.l     -(A7)
00000FF0  4EB8 0CA4 1375          jsr       _Get8HexDigits
00000FF4  584F      1376          addq.w    #4,A7
00000FF6  2400      1377          move.l    D0,D2
                    1378   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1379          pea       @m68kde~1_17.L
00000FFC  6032      
00000FFE  4E92      1380          jsr       (A2)
00001000  584F      1381          addq.w    #4,A7
                    1382   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1383          clr.l     -(A7)
00001004  4EB8 0CA4 1384          jsr       _Get8HexDigits
00001008  584F      1385          addq.w    #4,A7
0000100A  2800      1386          move.l    D0,D4
                    1387   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1388          pea       @m68kde~1_18.L
00001010  6048      
00001012  4E92      1389          jsr       (A2)
00001014  584F      1390          addq.w    #4,A7
                    1391   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1392          clr.l     -(A7)
00001018  4EB8 0C04 1393          jsr       _Get2HexDigits
0000101C  584F      1394          addq.w    #4,A7
0000101E  1600      1395          move.b    D0,D3
                    1396   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1397          and.l     #255,D3
00001024  00FF      
00001026  2F03      1398          move.l    D3,-(A7)
00001028  2F04      1399          move.l    D4,-(A7)
0000102A  2F02      1400          move.l    D2,-(A7)
0000102C  4879 0000 1401          pea       @m68kde~1_19.L
00001030  605C      
00001032  4E92      1402          jsr       (A2)
00001034  DEFC 0010 1403          add.w     #16,A7
                    1404   ; while(StartRamPtr < EndRamPtr)
                    1405   FillMemory_1:
00001038  B484      1406          cmp.l     D4,D2
0000103A  6408      1407          bhs.s     FillMemory_3
                    1408   ; *StartRamPtr++ = FillData ;
0000103C  2042      1409          move.l    D2,A0
0000103E  5282      1410          addq.l    #1,D2
00001040  1083      1411          move.b    D3,(A0)
00001042  60F4      1412          bra       FillMemory_1
                    1413   FillMemory_3:
00001044  4CDF 041C 1414          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1415          rts
                    1416   ; }
                    1417   ; void Load_SRecordFile()
                    1418   ; {
                    1419   _Load_SRecordFile:
0000104A  4E56 FFDC 1420          link      A6,#-36
0000104E  48E7 3F3C 1421          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1422          lea       -6(A6),A2
00001056  47F8 0C04 1423          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1424          lea       _printf.L,A4
0000105E  559E      
                    1425   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1426          clr.l     -18(A6)
00001064  3A7C 0000 1427          move.w    #0,A5
                    1428   ; int result, ByteCount ;
                    1429   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1430   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1431   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1432          moveq     #0,D7
                    1433   ; AddressFail = 0 ;
0000106A  42AE FFEA 1434          clr.l     -22(A6)
                    1435   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1436          clr.l     _Echo.L
00001072  00E0      
                    1437   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1438          pea       @m68kde~1_20.L
00001078  608C      
0000107A  4E94      1439          jsr       (A4)
0000107C  584F      1440          addq.w    #4,A7
                    1441   ; while(1)    {
                    1442   Load_SRecordFile_1:
                    1443   ; CheckSum = 0 ;
0000107E  4212      1444          clr.b     (A2)
                    1445   ; do {
                    1446   Load_SRecordFile_4:
                    1447   ; c = toupper(_getch()) ;
00001080  2F00      1448          move.l    D0,-(A7)
00001082  4EB8 0B68 1449          jsr       __getch
00001086  2200      1450          move.l    D0,D1
00001088  201F      1451          move.l    (A7)+,D0
0000108A  2F01      1452          move.l    D1,-(A7)
0000108C  4EB9 0000 1453          jsr       _toupper
00001090  5582      
00001092  584F      1454          addq.w    #4,A7
00001094  1C00      1455          move.b    D0,D6
                    1456   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1457          cmp.b     #27,D6
0000109A  6604      1458          bne.s     Load_SRecordFile_6
                    1459   ; return;
0000109C  6000 0132 1460          bra       Load_SRecordFile_8
                    1461   Load_SRecordFile_6:
000010A0  0C06 0053 1462          cmp.b     #83,D6
000010A4  66DA      1463          bne       Load_SRecordFile_4
                    1464   ; }while(c != (char)('S'));   // wait for S start of header
                    1465   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1466          jsr       __getch
000010AA  1600      1467          move.b    D0,D3
                    1468   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1469          cmp.b     #48,D3
000010B0  6706      1470          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1471          cmp.b     #53,D3
000010B6  6604      1472          bne.s     Load_SRecordFile_9
                    1473   Load_SRecordFile_11:
                    1474   ; continue ;
000010B8  6000 00D2 1475          bra       Load_SRecordFile_23
                    1476   Load_SRecordFile_9:
                    1477   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1478          cmp.b     #55,D3
000010C0  6D04      1479          blt.s     Load_SRecordFile_12
                    1480   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1481          bra       Load_SRecordFile_3
                    1482   Load_SRecordFile_12:
                    1483   ; // get the bytecount
                    1484   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1485          move.l    A2,-(A7)
000010C8  4E93      1486          jsr       (A3)
000010CA  584F      1487          addq.w    #4,A7
000010CC  2D40 FFF6 1488          move.l    D0,-10(A6)
                    1489   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1490   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1491          cmp.b     #49,D3
000010D4  660E      1492          bne.s     Load_SRecordFile_14
                    1493   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1494          moveq     #2,D5
                    1495   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1496          move.l    A2,-(A7)
000010DA  4EB8 0C58 1497          jsr       _Get4HexDigits
000010DE  584F      1498          addq.w    #4,A7
000010E0  2800      1499          move.l    D0,D4
000010E2  6020      1500          bra.s     Load_SRecordFile_17
                    1501   Load_SRecordFile_14:
                    1502   ; }
                    1503   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1504          cmp.b     #50,D3
000010E8  660E      1505          bne.s     Load_SRecordFile_16
                    1506   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1507          moveq     #3,D5
                    1508   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1509          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1510          jsr       _Get6HexDigits
000010F2  584F      1511          addq.w    #4,A7
000010F4  2800      1512          move.l    D0,D4
000010F6  600C      1513          bra.s     Load_SRecordFile_17
                    1514   Load_SRecordFile_16:
                    1515   ; }
                    1516   ; else    {
                    1517   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1518          moveq     #4,D5
                    1519   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1520          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1521          jsr       _Get8HexDigits
00001100  584F      1522          addq.w    #4,A7
00001102  2800      1523          move.l    D0,D4
                    1524   Load_SRecordFile_17:
                    1525   ; }
                    1526   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1527          move.l    D4,-4(A6)
                    1528   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1529          move.l    -10(A6),D0
0000110C  9085      1530          sub.l     D5,D0
0000110E  5380      1531          subq.l    #1,D0
00001110  2D40 FFE2 1532          move.l    D0,-30(A6)
                    1533   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1534          clr.l     D2
                    1535   Load_SRecordFile_18:
00001116  B4AE FFE2 1536          cmp.l     -30(A6),D2
0000111A  6C1E      1537          bge.s     Load_SRecordFile_20
                    1538   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1539          move.l    A2,-(A7)
0000111E  4E93      1540          jsr       (A3)
00001120  584F      1541          addq.w    #4,A7
00001122  2D40 FFDE 1542          move.l    D0,-34(A6)
                    1543   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1544          move.l    -34(A6),D0
0000112A  206E FFFC 1545          move.l    -4(A6),A0
0000112E  52AE FFFC 1546          addq.l    #1,-4(A6)
00001132  1080      1547          move.b    D0,(A0)
                    1548   ; ByteTotal++;
00001134  524D      1549          addq.w    #1,A5
00001136  5282      1550          addq.l    #1,D2
00001138  60DC      1551          bra       Load_SRecordFile_18
                    1552   Load_SRecordFile_20:
                    1553   ; }
                    1554   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1555   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1556          clr.l     -(A7)
0000113C  4E93      1557          jsr       (A3)
0000113E  584F      1558          addq.w    #4,A7
00001140  1D40 FFFB 1559          move.b    D0,-5(A6)
                    1560   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1561          move.b    (A2),D0
00001146  4600      1562          not.b     D0
00001148  4880      1563          ext.w     D0
0000114A  C07C 00FF 1564          and.w     #255,D0
0000114E  122E FFFB 1565          move.b    -5(A6),D1
00001152  4881      1566          ext.w     D1
00001154  C27C 00FF 1567          and.w     #255,D1
00001158  B041      1568          cmp.w     D1,D0
0000115A  6708      1569          beq.s     Load_SRecordFile_21
                    1570   ; LoadFailed = 1 ;
0000115C  7E01      1571          moveq     #1,D7
                    1572   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1573          move.l    D4,-26(A6)
                    1574   ; break;
00001162  602C      1575          bra.s     Load_SRecordFile_3
                    1576   Load_SRecordFile_21:
                    1577   ; }
                    1578   ; SRecordCount++ ;
00001164  52AE FFEE 1579          addq.l    #1,-18(A6)
                    1580   ; // display feedback on progress
                    1581   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1582          move.l    -18(A6),-(A7)
0000116C  4878 0019 1583          pea       25
00001170  4EB9 0000 1584          jsr       LDIV
00001174  53EE      
00001176  202F 0004 1585          move.l    4(A7),D0
0000117A  504F      1586          addq.w    #8,A7
0000117C  4A80      1587          tst.l     D0
0000117E  660C      1588          bne.s     Load_SRecordFile_23
                    1589   ; putchar('.') ;
00001180  4878 002E 1590          pea       46
00001184  4EB9 0000 1591          jsr       _putch
00001188  54BA      
0000118A  584F      1592          addq.w    #4,A7
                    1593   Load_SRecordFile_23:
0000118C  6000 FEF0 1594          bra       Load_SRecordFile_1
                    1595   Load_SRecordFile_3:
                    1596   ; }
                    1597   ; if(LoadFailed == 1) {
00001190  0C87 0000 1598          cmp.l     #1,D7
00001194  0001      
00001196  6610      1599          bne.s     Load_SRecordFile_25
                    1600   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1601          move.l    -26(A6),-(A7)
0000119C  4879 0000 1602          pea       @m68kde~1_21.L
000011A0  60BC      
000011A2  4E94      1603          jsr       (A4)
000011A4  504F      1604          addq.w    #8,A7
000011A6  600C      1605          bra.s     Load_SRecordFile_26
                    1606   Load_SRecordFile_25:
                    1607   ; }
                    1608   ; else
                    1609   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1610          move.l    A5,-(A7)
000011AA  4879 0000 1611          pea       @m68kde~1_22.L
000011AE  60E2      
000011B0  4E94      1612          jsr       (A4)
000011B2  504F      1613          addq.w    #8,A7
                    1614   Load_SRecordFile_26:
                    1615   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1616   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1617          clr.l     D2
                    1618   Load_SRecordFile_27:
000011B6  0C82 0006 1619          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1620          bge.s     Load_SRecordFile_29
000011BE  5282      1621          addq.l    #1,D2
000011C0  60F4      1622          bra       Load_SRecordFile_27
                    1623   Load_SRecordFile_29:
                    1624   ; ;
                    1625   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1626          jsr       _FlushKeyboard
                    1627   ; Echo = 1;
000011C6  23FC 0000 1628          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1629   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1630          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1631          unlk      A6
000011D6  4E75      1632          rts
                    1633   ; }
                    1634   ; void MemoryChange(void)
                    1635   ; {
                    1636   _MemoryChange:
000011D8  48E7 3820 1637          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1638          lea       _printf.L,A2
000011E0  559E      
                    1639   ; unsigned char *RamPtr,c ; // pointer to memory
                    1640   ; int Data ;
                    1641   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1642          pea       @m68kde~1_23.L
000011E6  6104      
000011E8  4E92      1643          jsr       (A2)
000011EA  584F      1644          addq.w    #4,A7
                    1645   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1646          pea       @m68kde~1_24.L
000011F0  6120      
000011F2  4E92      1647          jsr       (A2)
000011F4  584F      1648          addq.w    #4,A7
                    1649   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1650          pea       @m68kde~1_25.L
000011FA  6166      
000011FC  4E92      1651          jsr       (A2)
000011FE  584F      1652          addq.w    #4,A7
                    1653   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1654          clr.l     -(A7)
00001202  4EB8 0CA4 1655          jsr       _Get8HexDigits
00001206  584F      1656          addq.w    #4,A7
00001208  2600      1657          move.l    D0,D3
                    1658   ; while(1)    {
                    1659   MemoryChange_1:
                    1660   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1661          move.l    D3,A0
0000120C  1210      1662          move.b    (A0),D1
0000120E  C2BC 0000 1663          and.l     #255,D1
00001212  00FF      
00001214  2F01      1664          move.l    D1,-(A7)
00001216  2F03      1665          move.l    D3,-(A7)
00001218  4879 0000 1666          pea       @m68kde~1_26.L
0000121C  6178      
0000121E  4E92      1667          jsr       (A2)
00001220  DEFC 000C 1668          add.w     #12,A7
                    1669   ; c = tolower(_getch()) ;
00001224  2F00      1670          move.l    D0,-(A7)
00001226  4EB8 0B68 1671          jsr       __getch
0000122A  2200      1672          move.l    D0,D1
0000122C  201F      1673          move.l    (A7)+,D0
0000122E  2F01      1674          move.l    D1,-(A7)
00001230  4EB9 0000 1675          jsr       _tolower
00001234  551E      
00001236  584F      1676          addq.w    #4,A7
00001238  1400      1677          move.b    D0,D2
                    1678   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1679          cmp.b     #27,D2
0000123E  6604      1680          bne.s     MemoryChange_4
                    1681   ; return ;                                // abort on escape
00001240  6000 0090 1682          bra       MemoryChange_6
                    1683   MemoryChange_4:
                    1684   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1685          cmp.b     #48,D2
00001248  6506      1686          blo.s     MemoryChange_10
0000124A  0C02 0039 1687          cmp.b     #57,D2
0000124E  6310      1688          bls.s     MemoryChange_9
                    1689   MemoryChange_10:
00001250  0C02 0061 1690          cmp.b     #97,D2
00001254  6500 006E 1691          blo       MemoryChange_7
00001258  0C02 0066 1692          cmp.b     #102,D2
0000125C  6200 0066 1693          bhi       MemoryChange_7
                    1694   MemoryChange_9:
                    1695   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1696          and.l     #255,D2
00001264  00FF      
00001266  2F02      1697          move.l    D2,-(A7)
00001268  4EB8 0BD2 1698          jsr       _xtod
0000126C  584F      1699          addq.w    #4,A7
0000126E  C0BC 0000 1700          and.l     #255,D0
00001272  00FF      
00001274  E980      1701          asl.l     #4,D0
00001276  2F00      1702          move.l    D0,-(A7)
00001278  2F01      1703          move.l    D1,-(A7)
0000127A  4EB8 0B68 1704          jsr       __getch
0000127E  221F      1705          move.l    (A7)+,D1
00001280  2F00      1706          move.l    D0,-(A7)
00001282  4EB8 0BD2 1707          jsr       _xtod
00001286  584F      1708          addq.w    #4,A7
00001288  2200      1709          move.l    D0,D1
0000128A  201F      1710          move.l    (A7)+,D0
0000128C  C2BC 0000 1711          and.l     #255,D1
00001290  00FF      
00001292  8081      1712          or.l      D1,D0
00001294  2800      1713          move.l    D0,D4
                    1714   ; *RamPtr = (char)(Data) ;
00001296  2043      1715          move.l    D3,A0
00001298  1084      1716          move.b    D4,(A0)
                    1717   ; if(*RamPtr != Data) {
0000129A  2043      1718          move.l    D3,A0
0000129C  1010      1719          move.b    (A0),D0
0000129E  C0BC 0000 1720          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1721          cmp.l     D4,D0
000012A6  671A      1722          beq.s     MemoryChange_11
                    1723   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1724          move.l    D3,A0
000012AA  1210      1725          move.b    (A0),D1
000012AC  C2BC 0000 1726          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1727          move.l    D1,-(A7)
000012B4  2F04      1728          move.l    D4,-(A7)
000012B6  4879 0000 1729          pea       @m68kde~1_27.L
000012BA  618A      
000012BC  4E92      1730          jsr       (A2)
000012BE  DEFC 000C 1731          add.w     #12,A7
                    1732   MemoryChange_11:
000012C2  6008      1733          bra.s     MemoryChange_13
                    1734   MemoryChange_7:
                    1735   ; }
                    1736   ; }
                    1737   ; else if(c == (char)('-'))
000012C4  0C02 002D 1738          cmp.b     #45,D2
000012C8  6602      1739          bne.s     MemoryChange_13
                    1740   ; RamPtr -= 2 ; ;
000012CA  5583      1741          subq.l    #2,D3
                    1742   MemoryChange_13:
                    1743   ; RamPtr ++ ;
000012CC  5283      1744          addq.l    #1,D3
000012CE  6000 FF3A 1745          bra       MemoryChange_1
                    1746   MemoryChange_6:
000012D2  4CDF 041C 1747          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1748          rts
                    1749   ; }
                    1750   ; }
                    1751   ; /*******************************************************************
                    1752   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1753   ; ********************************************************************/
                    1754   ; void ProgramFlashChip(void)
                    1755   ; {
                    1756   _ProgramFlashChip:
000012D8  4E75      1757          rts
                    1758   ; //
                    1759   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1760   ; // TODO : then verify by reading it back and comparing to memory
                    1761   ; //
                    1762   ; }
                    1763   ; /*************************************************************************
                    1764   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1765   ; **************************************************************************/
                    1766   ; void LoadFromFlashChip(void)
                    1767   ; {
                    1768   _LoadFromFlashChip:
                    1769   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1770          pea       @m68kde~1_28.L
000012DE  61BE      
000012E0  4EB9 0000 1771          jsr       _printf
000012E4  559E      
000012E6  584F      1772          addq.w    #4,A7
000012E8  4E75      1773          rts
                    1774   ; //
                    1775   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1776   ; //
                    1777   ; }
                    1778   ; // get rid of excess spaces
                    1779   ; void FormatInstructionForTrace(void)
                    1780   ; {
                    1781   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1782          link      A6,#-100
000012EE  48E7 3C20 1783          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1784          lea       -100(A6),A2
                    1785   ; unsigned short int i ;
                    1786   ; char c, temp[100], *iptr, *tempptr ;
                    1787   ; for(i=0; i < 100; i++)
000012F6  4244      1788          clr.w     D4
                    1789   FormatInstructionForTrace_1:
000012F8  0C44 0064 1790          cmp.w     #100,D4
000012FC  640E      1791          bhs.s     FormatInstructionForTrace_3
                    1792   ; temp[i] = 0 ;
000012FE  C8BC 0000 1793          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1794          clr.b     0(A2,D4.L)
00001308  5244      1795          addq.w    #1,D4
0000130A  60EC      1796          bra       FormatInstructionForTrace_1
                    1797   FormatInstructionForTrace_3:
                    1798   ; iptr = Instruction ;
0000130C  41F9 0803 1799          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1800          move.l    A0,D2
                    1801   ; tempptr = temp ;
00001314  2A0A      1802          move.l    A2,D5
                    1803   ; do{
                    1804   FormatInstructionForTrace_4:
                    1805   ; c = *iptr++ ;
00001316  2042      1806          move.l    D2,A0
00001318  5282      1807          addq.l    #1,D2
0000131A  1610      1808          move.b    (A0),D3
                    1809   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1810          move.l    D5,A0
0000131E  5285      1811          addq.l    #1,D5
00001320  1083      1812          move.b    D3,(A0)
                    1813   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1814          cmp.b     #32,D3
00001326  6622      1815          bne.s     FormatInstructionForTrace_6
                    1816   ; while(*iptr == ' ') {
                    1817   FormatInstructionForTrace_8:
00001328  2042      1818          move.l    D2,A0
0000132A  1010      1819          move.b    (A0),D0
0000132C  0C00 0020 1820          cmp.b     #32,D0
00001330  660C      1821          bne.s     FormatInstructionForTrace_10
                    1822   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1823          move.l    D2,A0
00001334  1010      1824          move.b    (A0),D0
00001336  6602      1825          bne.s     FormatInstructionForTrace_11
                    1826   ; break ;
00001338  6004      1827          bra.s     FormatInstructionForTrace_10
                    1828   FormatInstructionForTrace_11:
                    1829   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1830          addq.l    #1,D2
0000133C  60EA      1831          bra       FormatInstructionForTrace_8
                    1832   FormatInstructionForTrace_10:
                    1833   ; }
                    1834   ; strcat(tempptr,iptr) ;
0000133E  2F02      1835          move.l    D2,-(A7)
00001340  2F05      1836          move.l    D5,-(A7)
00001342  4EB9 0000 1837          jsr       _strcat
00001346  556C      
00001348  504F      1838          addq.w    #8,A7
                    1839   FormatInstructionForTrace_6:
0000134A  4A03      1840          tst.b     D3
0000134C  66C8      1841          bne       FormatInstructionForTrace_4
                    1842   ; }
                    1843   ; }while(c != 0) ;
                    1844   ; strcpyInstruction(temp) ;
0000134E  2F0A      1845          move.l    A2,-(A7)
00001350  4EB8 0CE6 1846          jsr       _strcpyInstruction
00001354  584F      1847          addq.w    #4,A7
00001356  4CDF 043C 1848          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1849          unlk      A6
0000135C  4E75      1850          rts
                    1851   ; }
                    1852   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1853   ; // IMPORTANT
                    1854   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1855   ; // has to be done with an interrupt (IRQ Level 6)
                    1856   ; //
                    1857   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1858   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1859   ; //
                    1860   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1861   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1862   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1863   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1864   ; // program area
                    1865   ; //
                    1866   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1867   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1868   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1869   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1870   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1871   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1872   ; void DumpRegisters()
                    1873   ; {
                    1874   _DumpRegisters:
0000135E  48E7 3F3C 1875          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1876          lea       _putch.L,A2
00001366  54BA      
00001368  47F9 0000 1877          lea       _printf.L,A3
0000136C  559E      
0000136E  49F9 0803 1878          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1879          lea       _WatchPointString.L,A5
00001378  01C2      
                    1880   ; short i, x, j, k ;
                    1881   ; unsigned char c, *BytePointer;
                    1882   ; // buld up strings for displaying watchpoints
                    1883   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1884          clr.w     D2
                    1885   DumpRegisters_1:
0000137C  0C42 0008 1886          cmp.w     #8,D2
00001380  6C00 01C6 1887          bge       DumpRegisters_3
                    1888   ; {
                    1889   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1890          ext.l     D2
00001386  2002      1891          move.l    D2,D0
00001388  E588      1892          lsl.l     #2,D0
0000138A  41F9 0803 1893          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1894          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1895          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1896          bne       DumpRegisters_4
                    1897   ; {
                    1898   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1899          ext.l     D2
000013A0  2202      1900          move.l    D2,D1
000013A2  E589      1901          lsl.l     #2,D1
000013A4  41F9 0803 1902          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1903          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1904          pea       @m68kde~1_29.L
000013B2  61E4      
000013B4  220D      1905          move.l    A5,D1
000013B6  48C2      1906          ext.l     D2
000013B8  2F00      1907          move.l    D0,-(A7)
000013BA  2002      1908          move.l    D2,D0
000013BC  C1FC 0064 1909          muls      #100,D0
000013C0  D280      1910          add.l     D0,D1
000013C2  201F      1911          move.l    (A7)+,D0
000013C4  2F01      1912          move.l    D1,-(A7)
000013C6  4EB9 0000 1913          jsr       _sprintf
000013CA  553A      
000013CC  DEFC 000C 1914          add.w     #12,A7
                    1915   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1916          ext.l     D2
000013D2  2002      1917          move.l    D2,D0
000013D4  E588      1918          lsl.l     #2,D0
000013D6  41F9 0803 1919          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1920          move.l    0(A0,D0.L),D5
                    1921   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1922          clr.w     D3
                    1923   DumpRegisters_6:
000013E2  0C43 0010 1924          cmp.w     #16,D3
000013E6  6C00 0082 1925          bge       DumpRegisters_8
                    1926   ; {
                    1927   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1928          clr.w     D6
                    1929   DumpRegisters_9:
000013EC  0C46 0002 1930          cmp.w     #2,D6
000013F0  6C00 0052 1931          bge       DumpRegisters_11
                    1932   ; {
                    1933   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1934          move.l    D5,A0
000013F6  48C3      1935          ext.l     D3
000013F8  2203      1936          move.l    D3,D1
000013FA  48C6      1937          ext.l     D6
000013FC  D286      1938          add.l     D6,D1
000013FE  1230 1800 1939          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1940          and.l     #255,D1
00001406  00FF      
00001408  2F01      1941          move.l    D1,-(A7)
0000140A  4879 0000 1942          pea       @m68kde~1_14.L
0000140E  6014      
00001410  4879 0803 1943          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1944          jsr       _sprintf
0000141A  553A      
0000141C  DEFC 000C 1945          add.w     #12,A7
                    1946   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1947          pea       _TempString.L
00001424  0546      
00001426  220D      1948          move.l    A5,D1
00001428  48C2      1949          ext.l     D2
0000142A  2F00      1950          move.l    D0,-(A7)
0000142C  2002      1951          move.l    D2,D0
0000142E  C1FC 0064 1952          muls      #100,D0
00001432  D280      1953          add.l     D0,D1
00001434  201F      1954          move.l    (A7)+,D0
00001436  2F01      1955          move.l    D1,-(A7)
00001438  4EB9 0000 1956          jsr       _strcat
0000143C  556C      
0000143E  504F      1957          addq.w    #8,A7
00001440  5246      1958          addq.w    #1,D6
00001442  60A8      1959          bra       DumpRegisters_9
                    1960   DumpRegisters_11:
                    1961   ; }
                    1962   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1963          pea       @m68kde~1_30.L
00001448  61EC      
0000144A  220D      1964          move.l    A5,D1
0000144C  48C2      1965          ext.l     D2
0000144E  2F00      1966          move.l    D0,-(A7)
00001450  2002      1967          move.l    D2,D0
00001452  C1FC 0064 1968          muls      #100,D0
00001456  D280      1969          add.l     D0,D1
00001458  201F      1970          move.l    (A7)+,D0
0000145A  2F01      1971          move.l    D1,-(A7)
0000145C  4EB9 0000 1972          jsr       _strcat
00001460  556C      
00001462  504F      1973          addq.w    #8,A7
00001464  5443      1974          addq.w    #2,D3
00001466  6000 FF7A 1975          bra       DumpRegisters_6
                    1976   DumpRegisters_8:
                    1977   ; }
                    1978   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1979          pea       @m68kde~1_15.L
0000146E  601A      
00001470  220D      1980          move.l    A5,D1
00001472  48C2      1981          ext.l     D2
00001474  2F00      1982          move.l    D0,-(A7)
00001476  2002      1983          move.l    D2,D0
00001478  C1FC 0064 1984          muls      #100,D0
0000147C  D280      1985          add.l     D0,D1
0000147E  201F      1986          move.l    (A7)+,D0
00001480  2F01      1987          move.l    D1,-(A7)
00001482  4EB9 0000 1988          jsr       _strcat
00001486  556C      
00001488  504F      1989          addq.w    #8,A7
                    1990   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1991          ext.l     D2
0000148C  2002      1992          move.l    D2,D0
0000148E  E588      1993          lsl.l     #2,D0
00001490  41F9 0803 1994          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1995          move.l    0(A0,D0.L),D5
                    1996   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1997          clr.w     D3
                    1998   DumpRegisters_12:
0000149C  0C43 0010 1999          cmp.w     #16,D3
000014A0  6C00 007E 2000          bge       DumpRegisters_14
                    2001   ; {
                    2002   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2003          move.l    D5,A0
000014A6  48C3      2004          ext.l     D3
000014A8  1030 3800 2005          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2006          and.b     #127,D0
000014B0  1E00      2007          move.b    D0,D7
                    2008   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2009          cmp.b     #127,D7
000014B6  6206      2010          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2011          cmp.b     #32,D7
000014BC  6416      2012          bhs.s     DumpRegisters_15
                    2013   DumpRegisters_17:
                    2014   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2015          pea       @m68kde~1_31.L
000014C2  61EE      
000014C4  4879 0803 2016          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2017          jsr       _sprintf
000014CE  553A      
000014D0  504F      2018          addq.w    #8,A7
000014D2  6026      2019          bra.s     DumpRegisters_16
                    2020   DumpRegisters_15:
                    2021   ; else
                    2022   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2023          move.l    D5,A0
000014D6  48C3      2024          ext.l     D3
000014D8  1230 3800 2025          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2026          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2027          move.l    D1,-(A7)
000014E4  4879 0000 2028          pea       @m68kde~1_32.L
000014E8  61F0      
000014EA  4879 0803 2029          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2030          jsr       _sprintf
000014F4  553A      
000014F6  DEFC 000C 2031          add.w     #12,A7
                    2032   DumpRegisters_16:
                    2033   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2034          pea       _TempString.L
000014FE  0546      
00001500  220D      2035          move.l    A5,D1
00001502  48C2      2036          ext.l     D2
00001504  2F00      2037          move.l    D0,-(A7)
00001506  2002      2038          move.l    D2,D0
00001508  C1FC 0064 2039          muls      #100,D0
0000150C  D280      2040          add.l     D0,D1
0000150E  201F      2041          move.l    (A7)+,D0
00001510  2F01      2042          move.l    D1,-(A7)
00001512  4EB9 0000 2043          jsr       _strcat
00001516  556C      
00001518  504F      2044          addq.w    #8,A7
0000151A  5243      2045          addq.w    #1,D3
0000151C  6000 FF7E 2046          bra       DumpRegisters_12
                    2047   DumpRegisters_14:
00001520  6020      2048          bra.s     DumpRegisters_5
                    2049   DumpRegisters_4:
                    2050   ; }
                    2051   ; }
                    2052   ; else
                    2053   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2054          pea       @m68kde~1_33.L
00001526  61F4      
00001528  220D      2055          move.l    A5,D1
0000152A  48C2      2056          ext.l     D2
0000152C  2F00      2057          move.l    D0,-(A7)
0000152E  2002      2058          move.l    D2,D0
00001530  C1FC 0064 2059          muls      #100,D0
00001534  D280      2060          add.l     D0,D1
00001536  201F      2061          move.l    (A7)+,D0
00001538  2F01      2062          move.l    D1,-(A7)
0000153A  4EB9 0000 2063          jsr       _strcpy
0000153E  53CC      
00001540  504F      2064          addq.w    #8,A7
                    2065   DumpRegisters_5:
00001542  5242      2066          addq.w    #1,D2
00001544  6000 FE36 2067          bra       DumpRegisters_1
                    2068   DumpRegisters_3:
                    2069   ; }
                    2070   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2071          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2072          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2073          pea       @m68kde~1_34.L
00001558  61F6      
0000155A  4E93      2074          jsr       (A3)
0000155C  DEFC 000C 2075          add.w     #12,A7
                    2076   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2077          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2078          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2079          pea       @m68kde~1_35.L
00001570  6212      
00001572  4E93      2080          jsr       (A3)
00001574  DEFC 000C 2081          add.w     #12,A7
                    2082   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2083          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2084          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2085          pea       @m68kde~1_36.L
00001588  622C      
0000158A  4E93      2086          jsr       (A3)
0000158C  DEFC 000C 2087          add.w     #12,A7
                    2088   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2089          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2090          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2091          pea       @m68kde~1_37.L
000015A0  6246      
000015A2  4E93      2092          jsr       (A3)
000015A4  DEFC 000C 2093          add.w     #12,A7
                    2094   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2095          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2096          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2097          pea       @m68kde~1_38.L
000015B8  6260      
000015BA  4E93      2098          jsr       (A3)
000015BC  DEFC 000C 2099          add.w     #12,A7
                    2100   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2101          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2102          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2103          pea       @m68kde~1_39.L
000015D0  627A      
000015D2  4E93      2104          jsr       (A3)
000015D4  DEFC 000C 2105          add.w     #12,A7
                    2106   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2107          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2108          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2109          pea       @m68kde~1_40.L
000015E8  6294      
000015EA  4E93      2110          jsr       (A3)
000015EC  DEFC 000C 2111          add.w     #12,A7
                    2112   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2113          move.w    (A4),D1
000015F2  C27C 2000 2114          and.w     #8192,D1
000015F6  0C41 2000 2115          cmp.w     #8192,D1
000015FA  6608      2116          bne.s     DumpRegisters_18
000015FC  2239 0803 2117          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2118          bra.s     DumpRegisters_19
                    2119   DumpRegisters_18:
00001604  2239 0803 2120          move.l    _USP.L,D1
00001608  0128      
                    2121   DumpRegisters_19:
0000160A  2F01      2122          move.l    D1,-(A7)
0000160C  2F39 0803 2123          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2124          pea       @m68kde~1_41.L
00001616  62AE      
00001618  4E93      2125          jsr       (A3)
0000161A  DEFC 000C 2126          add.w     #12,A7
                    2127   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2128          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2129          pea       @m68kde~1_42.L
00001628  62C8      
0000162A  4E93      2130          jsr       (A3)
0000162C  504F      2131          addq.w    #8,A7
                    2132   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2133          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2134          pea       @m68kde~1_43.L
00001638  62E6      
0000163A  4E93      2135          jsr       (A3)
0000163C  504F      2136          addq.w    #8,A7
                    2137   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2138          move.w    (A4),D1
00001640  C2BC 0000 2139          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2140          move.l    D1,-(A7)
00001648  4879 0000 2141          pea       @m68kde~1_44.L
0000164C  6308      
0000164E  4E93      2142          jsr       (A3)
00001650  504F      2143          addq.w    #8,A7
                    2144   ; // display the status word in characters etc.
                    2145   ; printf("   [") ;
00001652  4879 0000 2146          pea       @m68kde~1_45.L
00001656  631A      
00001658  4E93      2147          jsr       (A3)
0000165A  584F      2148          addq.w    #4,A7
                    2149   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2150          move.w    (A4),D0
0000165E  C07C 8000 2151          and.w     #32768,D0
00001662  0C40 8000 2152          cmp.w     #32768,D0
00001666  660A      2153          bne.s     DumpRegisters_20
00001668  4878 0054 2154          pea       84
0000166C  4E92      2155          jsr       (A2)
0000166E  584F      2156          addq.w    #4,A7
00001670  6008      2157          bra.s     DumpRegisters_21
                    2158   DumpRegisters_20:
00001672  4878 002D 2159          pea       45
00001676  4E92      2160          jsr       (A2)
00001678  584F      2161          addq.w    #4,A7
                    2162   DumpRegisters_21:
                    2163   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2164          move.w    (A4),D0
0000167C  C07C 2000 2165          and.w     #8192,D0
00001680  0C40 2000 2166          cmp.w     #8192,D0
00001684  660A      2167          bne.s     DumpRegisters_22
00001686  4878 0053 2168          pea       83
0000168A  4E92      2169          jsr       (A2)
0000168C  584F      2170          addq.w    #4,A7
0000168E  6008      2171          bra.s     DumpRegisters_23
                    2172   DumpRegisters_22:
00001690  4878 0055 2173          pea       85
00001694  4E92      2174          jsr       (A2)
00001696  584F      2175          addq.w    #4,A7
                    2176   DumpRegisters_23:
                    2177   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2178          move.w    (A4),D0
0000169A  C07C 0400 2179          and.w     #1024,D0
0000169E  0C40 0400 2180          cmp.w     #1024,D0
000016A2  660A      2181          bne.s     DumpRegisters_24
000016A4  4878 0031 2182          pea       49
000016A8  4E92      2183          jsr       (A2)
000016AA  584F      2184          addq.w    #4,A7
000016AC  6008      2185          bra.s     DumpRegisters_25
                    2186   DumpRegisters_24:
000016AE  4878 0030 2187          pea       48
000016B2  4E92      2188          jsr       (A2)
000016B4  584F      2189          addq.w    #4,A7
                    2190   DumpRegisters_25:
                    2191   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2192          move.w    (A4),D0
000016B8  C07C 0200 2193          and.w     #512,D0
000016BC  0C40 0200 2194          cmp.w     #512,D0
000016C0  660A      2195          bne.s     DumpRegisters_26
000016C2  4878 0031 2196          pea       49
000016C6  4E92      2197          jsr       (A2)
000016C8  584F      2198          addq.w    #4,A7
000016CA  6008      2199          bra.s     DumpRegisters_27
                    2200   DumpRegisters_26:
000016CC  4878 0030 2201          pea       48
000016D0  4E92      2202          jsr       (A2)
000016D2  584F      2203          addq.w    #4,A7
                    2204   DumpRegisters_27:
                    2205   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2206          move.w    (A4),D0
000016D6  C07C 0100 2207          and.w     #256,D0
000016DA  0C40 0100 2208          cmp.w     #256,D0
000016DE  660A      2209          bne.s     DumpRegisters_28
000016E0  4878 0031 2210          pea       49
000016E4  4E92      2211          jsr       (A2)
000016E6  584F      2212          addq.w    #4,A7
000016E8  6008      2213          bra.s     DumpRegisters_29
                    2214   DumpRegisters_28:
000016EA  4878 0030 2215          pea       48
000016EE  4E92      2216          jsr       (A2)
000016F0  584F      2217          addq.w    #4,A7
                    2218   DumpRegisters_29:
                    2219   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2220          move.w    (A4),D0
000016F4  C07C 0010 2221          and.w     #16,D0
000016F8  0C40 0010 2222          cmp.w     #16,D0
000016FC  660A      2223          bne.s     DumpRegisters_30
000016FE  4878 0058 2224          pea       88
00001702  4E92      2225          jsr       (A2)
00001704  584F      2226          addq.w    #4,A7
00001706  6008      2227          bra.s     DumpRegisters_31
                    2228   DumpRegisters_30:
00001708  4878 002D 2229          pea       45
0000170C  4E92      2230          jsr       (A2)
0000170E  584F      2231          addq.w    #4,A7
                    2232   DumpRegisters_31:
                    2233   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2234          move.w    (A4),D0
00001712  C07C 0008 2235          and.w     #8,D0
00001716  0C40 0008 2236          cmp.w     #8,D0
0000171A  660A      2237          bne.s     DumpRegisters_32
0000171C  4878 004E 2238          pea       78
00001720  4E92      2239          jsr       (A2)
00001722  584F      2240          addq.w    #4,A7
00001724  6008      2241          bra.s     DumpRegisters_33
                    2242   DumpRegisters_32:
00001726  4878 002D 2243          pea       45
0000172A  4E92      2244          jsr       (A2)
0000172C  584F      2245          addq.w    #4,A7
                    2246   DumpRegisters_33:
                    2247   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2248          move.w    (A4),D0
00001730  C07C 0004 2249          and.w     #4,D0
00001734  0C40 0004 2250          cmp.w     #4,D0
00001738  660A      2251          bne.s     DumpRegisters_34
0000173A  4878 005A 2252          pea       90
0000173E  4E92      2253          jsr       (A2)
00001740  584F      2254          addq.w    #4,A7
00001742  6008      2255          bra.s     DumpRegisters_35
                    2256   DumpRegisters_34:
00001744  4878 002D 2257          pea       45
00001748  4E92      2258          jsr       (A2)
0000174A  584F      2259          addq.w    #4,A7
                    2260   DumpRegisters_35:
                    2261   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2262          move.w    (A4),D0
0000174E  C07C 0002 2263          and.w     #2,D0
00001752  0C40 0002 2264          cmp.w     #2,D0
00001756  660A      2265          bne.s     DumpRegisters_36
00001758  4878 0056 2266          pea       86
0000175C  4E92      2267          jsr       (A2)
0000175E  584F      2268          addq.w    #4,A7
00001760  6008      2269          bra.s     DumpRegisters_37
                    2270   DumpRegisters_36:
00001762  4878 002D 2271          pea       45
00001766  4E92      2272          jsr       (A2)
00001768  584F      2273          addq.w    #4,A7
                    2274   DumpRegisters_37:
                    2275   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2276          move.w    (A4),D0
0000176C  C07C 0001 2277          and.w     #1,D0
00001770  0C40 0001 2278          cmp.w     #1,D0
00001774  660A      2279          bne.s     DumpRegisters_38
00001776  4878 0043 2280          pea       67
0000177A  4E92      2281          jsr       (A2)
0000177C  584F      2282          addq.w    #4,A7
0000177E  6008      2283          bra.s     DumpRegisters_39
                    2284   DumpRegisters_38:
00001780  4878 002D 2285          pea       45
00001784  4E92      2286          jsr       (A2)
00001786  584F      2287          addq.w    #4,A7
                    2288   DumpRegisters_39:
                    2289   ; putchar(']') ;
00001788  4878 005D 2290          pea       93
0000178C  4E92      2291          jsr       (A2)
0000178E  584F      2292          addq.w    #4,A7
                    2293   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2294          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2295          pea       @m68kde~1_46.L
0000179A  6320      
0000179C  4E93      2296          jsr       (A3)
0000179E  504F      2297          addq.w    #8,A7
                    2298   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2299          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2300          move.l    D0,A0
000017A8  3010      2301          move.w    (A0),D0
000017AA  0C40 4E4E 2302          cmp.w     #20046,D0
000017AE  6724      2303          beq.s     DumpRegisters_40
                    2304   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2305          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2306          jsr       _DisassembleInstruction
000017BA  352A      
000017BC  584F      2307          addq.w    #4,A7
                    2308   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2309          jsr       _FormatInstructionForTrace
                    2310   ; printf("%s", Instruction) ;
000017C2  4879 0803 2311          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2312          pea       @m68kde~1_47.L
000017CC  6330      
000017CE  4E93      2313          jsr       (A3)
000017D0  504F      2314          addq.w    #8,A7
000017D2  600A      2315          bra.s     DumpRegisters_41
                    2316   DumpRegisters_40:
                    2317   ; }
                    2318   ; else
                    2319   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2320          pea       @m68kde~1_48.L
000017D8  6334      
000017DA  4E93      2321          jsr       (A3)
000017DC  584F      2322          addq.w    #4,A7
                    2323   DumpRegisters_41:
                    2324   ; printf("\r\n") ;
000017DE  4879 0000 2325          pea       @m68kde~1_1.L
000017E2  5EB0      
000017E4  4E93      2326          jsr       (A3)
000017E6  584F      2327          addq.w    #4,A7
                    2328   ; for(i=0; i < 8; i++)    {
000017E8  4244      2329          clr.w     D4
                    2330   DumpRegisters_42:
000017EA  0C44 0008 2331          cmp.w     #8,D4
000017EE  6C00 0040 2332          bge       DumpRegisters_44
                    2333   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2334          ext.l     D4
000017F4  2004      2335          move.l    D4,D0
000017F6  E588      2336          lsl.l     #2,D0
000017F8  41F9 0803 2337          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2338          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2339          cmp.l     #1,D0
00001806  0001      
00001808  6622      2340          bne.s     DumpRegisters_45
                    2341   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2342          move.l    A5,D1
0000180C  48C4      2343          ext.l     D4
0000180E  2F00      2344          move.l    D0,-(A7)
00001810  2004      2345          move.l    D4,D0
00001812  C1FC 0064 2346          muls      #100,D0
00001816  D280      2347          add.l     D0,D1
00001818  201F      2348          move.l    (A7)+,D0
0000181A  2F01      2349          move.l    D1,-(A7)
0000181C  48C4      2350          ext.l     D4
0000181E  2F04      2351          move.l    D4,-(A7)
00001820  4879 0000 2352          pea       @m68kde~1_49.L
00001824  6342      
00001826  4E93      2353          jsr       (A3)
00001828  DEFC 000C 2354          add.w     #12,A7
                    2355   DumpRegisters_45:
0000182C  5244      2356          addq.w    #1,D4
0000182E  60BA      2357          bra       DumpRegisters_42
                    2358   DumpRegisters_44:
00001830  4CDF 3CFC 2359          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2360          rts
                    2361   ; }
                    2362   ; }
                    2363   ; // Trace Exception Handler
                    2364   ; void DumpRegistersandPause(void)
                    2365   ; {
                    2366   _DumpRegistersandPause:
00001836  2F0A      2367          move.l    A2,-(A7)
00001838  45F9 0000 2368          lea       _printf.L,A2
0000183C  559E      
                    2369   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2370          pea       @m68kde~1_50.L
00001842  634E      
00001844  4E92      2371          jsr       (A2)
00001846  584F      2372          addq.w    #4,A7
                    2373   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2374          pea       @m68kde~1_51.L
0000184C  636E      
0000184E  4E92      2375          jsr       (A2)
00001850  584F      2376          addq.w    #4,A7
                    2377   ; DumpRegisters() ;
00001852  4EB8 135E 2378          jsr       _DumpRegisters
                    2379   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2380          pea       @m68kde~1_52.L
0000185A  638A      
0000185C  4E92      2381          jsr       (A2)
0000185E  584F      2382          addq.w    #4,A7
                    2383   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2384          pea       @m68kde~1_53.L
00001864  63B6      
00001866  4E92      2385          jsr       (A2)
00001868  584F      2386          addq.w    #4,A7
                    2387   ; menu() ;
0000186A  4EB9 0000 2388          jsr       _menu
0000186E  24A0      
00001870  245F      2389          move.l    (A7)+,A2
00001872  4E75      2390          rts
                    2391   ; }
                    2392   ; void ChangeRegisters(void)
                    2393   ; {
                    2394   _ChangeRegisters:
00001874  4E56 FFFC 2395          link      A6,#-4
00001878  48E7 303C 2396          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2397          lea       _printf.L,A2
00001880  559E      
00001882  47EE FFFC 2398          lea       -4(A6),A3
00001886  49F8 0CA4 2399          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2400          lea       __getch.L,A5
                    2401   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2402   ; int reg_val ;
                    2403   ; char c, reg[3] ;
                    2404   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2405          move.l    D0,-(A7)
00001890  4E95      2406          jsr       (A5)
00001892  2200      2407          move.l    D0,D1
00001894  201F      2408          move.l    (A7)+,D0
00001896  2F01      2409          move.l    D1,-(A7)
00001898  4EB9 0000 2410          jsr       _tolower
0000189C  551E      
0000189E  584F      2411          addq.w    #4,A7
000018A0  1680      2412          move.b    D0,(A3)
                    2413   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2414          move.l    D0,-(A7)
000018A4  4E95      2415          jsr       (A5)
000018A6  2200      2416          move.l    D0,D1
000018A8  201F      2417          move.l    (A7)+,D0
000018AA  2F01      2418          move.l    D1,-(A7)
000018AC  4EB9 0000 2419          jsr       _tolower
000018B0  551E      
000018B2  584F      2420          addq.w    #4,A7
000018B4  1400      2421          move.b    D0,D2
000018B6  1740 0001 2422          move.b    D0,1(A3)
                    2423   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2424          move.b    (A3),D0
000018BC  0C00 0064 2425          cmp.b     #100,D0
000018C0  6600 00AE 2426          bne       ChangeRegisters_1
                    2427   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2428          move.b    1(A3),D0
000018C8  0C00 0037 2429          cmp.b     #55,D0
000018CC  6E0A      2430          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2431          move.b    1(A3),D0
000018D2  0C00 0030 2432          cmp.b     #48,D0
000018D6  6C0E      2433          bge.s     ChangeRegisters_3
                    2434   ChangeRegisters_5:
                    2435   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2436          pea       @m68kde~1_54.L
000018DC  63D6      
000018DE  4E92      2437          jsr       (A2)
000018E0  584F      2438          addq.w    #4,A7
                    2439   ; return ;
000018E2  6000 0244 2440          bra       ChangeRegisters_6
                    2441   ChangeRegisters_3:
                    2442   ; }
                    2443   ; else {
                    2444   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2445          ext.w     D2
000018E8  48C2      2446          ext.l     D2
000018EA  2F02      2447          move.l    D2,-(A7)
000018EC  4879 0000 2448          pea       @m68kde~1_55.L
000018F0  6402      
000018F2  4E92      2449          jsr       (A2)
000018F4  504F      2450          addq.w    #8,A7
                    2451   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2452          clr.l     -(A7)
000018F8  4E94      2453          jsr       (A4)
000018FA  584F      2454          addq.w    #4,A7
000018FC  2600      2455          move.l    D0,D3
                    2456   ; }
                    2457   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2458   ; if(c == (char)('0'))
000018FE  0C02 0030 2459          cmp.b     #48,D2
00001902  660A      2460          bne.s     ChangeRegisters_7
                    2461   ; d0 = reg_val ;
00001904  23C3 0803 2462          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2463          bra       ChangeRegisters_20
                    2464   ChangeRegisters_7:
                    2465   ; else if(c == (char)('1'))
0000190E  0C02 0031 2466          cmp.b     #49,D2
00001912  660A      2467          bne.s     ChangeRegisters_9
                    2468   ; d1 = reg_val ;
00001914  23C3 0803 2469          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2470          bra       ChangeRegisters_20
                    2471   ChangeRegisters_9:
                    2472   ; else if(c == (char)('2'))
0000191E  0C02 0032 2473          cmp.b     #50,D2
00001922  660A      2474          bne.s     ChangeRegisters_11
                    2475   ; d2 = reg_val ;
00001924  23C3 0803 2476          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2477          bra       ChangeRegisters_20
                    2478   ChangeRegisters_11:
                    2479   ; else if(c == (char)('3'))
0000192E  0C02 0033 2480          cmp.b     #51,D2
00001932  6608      2481          bne.s     ChangeRegisters_13
                    2482   ; d3 = reg_val ;
00001934  23C3 0803 2483          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2484          bra.s     ChangeRegisters_20
                    2485   ChangeRegisters_13:
                    2486   ; else if(c == (char)('4'))
0000193C  0C02 0034 2487          cmp.b     #52,D2
00001940  6608      2488          bne.s     ChangeRegisters_15
                    2489   ; d4 = reg_val ;
00001942  23C3 0803 2490          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2491          bra.s     ChangeRegisters_20
                    2492   ChangeRegisters_15:
                    2493   ; else if(c == (char)('5'))
0000194A  0C02 0035 2494          cmp.b     #53,D2
0000194E  6608      2495          bne.s     ChangeRegisters_17
                    2496   ; d5 = reg_val ;
00001950  23C3 0803 2497          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2498          bra.s     ChangeRegisters_20
                    2499   ChangeRegisters_17:
                    2500   ; else if(c == (char)('6'))
00001958  0C02 0036 2501          cmp.b     #54,D2
0000195C  6608      2502          bne.s     ChangeRegisters_19
                    2503   ; d6 = reg_val ;
0000195E  23C3 0803 2504          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2505          bra.s     ChangeRegisters_20
                    2506   ChangeRegisters_19:
                    2507   ; else
                    2508   ; d7 = reg_val ;
00001966  23C3 0803 2509          move.l    D3,_d7.L
0000196A  0100      
                    2510   ChangeRegisters_20:
0000196C  6000 01B6 2511          bra       ChangeRegisters_51
                    2512   ChangeRegisters_1:
                    2513   ; }
                    2514   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2515          move.b    (A3),D0
00001972  0C00 0061 2516          cmp.b     #97,D0
00001976  6600 00A6 2517          bne       ChangeRegisters_21
                    2518   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2519          cmp.b     #55,D2
0000197E  6E06      2520          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2521          cmp.b     #48,D2
00001984  6C0E      2522          bge.s     ChangeRegisters_23
                    2523   ChangeRegisters_25:
                    2524   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2525          pea       @m68kde~1_56.L
0000198A  640C      
0000198C  4E92      2526          jsr       (A2)
0000198E  584F      2527          addq.w    #4,A7
                    2528   ; return ;
00001990  6000 0196 2529          bra       ChangeRegisters_6
                    2530   ChangeRegisters_23:
                    2531   ; }
                    2532   ; else {
                    2533   ; printf("\r\nA%c = ", c) ;
00001994  4882      2534          ext.w     D2
00001996  48C2      2535          ext.l     D2
00001998  2F02      2536          move.l    D2,-(A7)
0000199A  4879 0000 2537          pea       @m68kde~1_57.L
0000199E  643A      
000019A0  4E92      2538          jsr       (A2)
000019A2  504F      2539          addq.w    #8,A7
                    2540   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2541          clr.l     -(A7)
000019A6  4E94      2542          jsr       (A4)
000019A8  584F      2543          addq.w    #4,A7
000019AA  2600      2544          move.l    D0,D3
                    2545   ; }
                    2546   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2547   ; if(c == (char)('0'))
000019AC  0C02 0030 2548          cmp.b     #48,D2
000019B0  660A      2549          bne.s     ChangeRegisters_26
                    2550   ; a0 = reg_val ;
000019B2  23C3 0803 2551          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2552          bra       ChangeRegisters_39
                    2553   ChangeRegisters_26:
                    2554   ; else if(c == (char)('1'))
000019BC  0C02 0031 2555          cmp.b     #49,D2
000019C0  660A      2556          bne.s     ChangeRegisters_28
                    2557   ; a1 = reg_val ;
000019C2  23C3 0803 2558          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2559          bra       ChangeRegisters_39
                    2560   ChangeRegisters_28:
                    2561   ; else if(c == (char)('2'))
000019CC  0C02 0032 2562          cmp.b     #50,D2
000019D0  660A      2563          bne.s     ChangeRegisters_30
                    2564   ; a2 = reg_val ;
000019D2  23C3 0803 2565          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2566          bra       ChangeRegisters_39
                    2567   ChangeRegisters_30:
                    2568   ; else if(c == (char)('3'))
000019DC  0C02 0033 2569          cmp.b     #51,D2
000019E0  6608      2570          bne.s     ChangeRegisters_32
                    2571   ; a3 = reg_val ;
000019E2  23C3 0803 2572          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2573          bra.s     ChangeRegisters_39
                    2574   ChangeRegisters_32:
                    2575   ; else if(c == (char)('4'))
000019EA  0C02 0034 2576          cmp.b     #52,D2
000019EE  6608      2577          bne.s     ChangeRegisters_34
                    2578   ; a4 = reg_val ;
000019F0  23C3 0803 2579          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2580          bra.s     ChangeRegisters_39
                    2581   ChangeRegisters_34:
                    2582   ; else if(c == (char)('5'))
000019F8  0C02 0035 2583          cmp.b     #53,D2
000019FC  6608      2584          bne.s     ChangeRegisters_36
                    2585   ; a5 = reg_val ;
000019FE  23C3 0803 2586          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2587          bra.s     ChangeRegisters_39
                    2588   ChangeRegisters_36:
                    2589   ; else if(c == (char)('6'))
00001A06  0C02 0036 2590          cmp.b     #54,D2
00001A0A  6608      2591          bne.s     ChangeRegisters_38
                    2592   ; a6 = reg_val ;
00001A0C  23C3 0803 2593          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2594          bra.s     ChangeRegisters_39
                    2595   ChangeRegisters_38:
                    2596   ; else
                    2597   ; USP = reg_val ;
00001A14  23C3 0803 2598          move.l    D3,_USP.L
00001A18  0128      
                    2599   ChangeRegisters_39:
00001A1A  6000 0108 2600          bra       ChangeRegisters_51
                    2601   ChangeRegisters_21:
                    2602   ; }
                    2603   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2604          move.b    (A3),D0
00001A20  0C00 0075 2605          cmp.b     #117,D0
00001A24  6600 004E 2606          bne       ChangeRegisters_40
00001A28  0C02 0073 2607          cmp.b     #115,D2
00001A2C  6600 0046 2608          bne       ChangeRegisters_40
                    2609   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2610          move.l    D0,-(A7)
00001A32  4E95      2611          jsr       (A5)
00001A34  2200      2612          move.l    D0,D1
00001A36  201F      2613          move.l    (A7)+,D0
00001A38  2F01      2614          move.l    D1,-(A7)
00001A3A  4EB9 0000 2615          jsr       _tolower
00001A3E  551E      
00001A40  584F      2616          addq.w    #4,A7
00001A42  0C80 0000 2617          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2618          bne.s     ChangeRegisters_42
                    2619   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2620          pea       @m68kde~1_58.L
00001A4E  6444      
00001A50  4E92      2621          jsr       (A2)
00001A52  584F      2622          addq.w    #4,A7
                    2623   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2624          clr.l     -(A7)
00001A56  4E94      2625          jsr       (A4)
00001A58  584F      2626          addq.w    #4,A7
00001A5A  23C0 0803 2627          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2628          bra.s     ChangeRegisters_43
                    2629   ChangeRegisters_42:
                    2630   ; }
                    2631   ; else {
                    2632   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2633          pea       @m68kde~1_59.L
00001A66  6452      
00001A68  4E92      2634          jsr       (A2)
00001A6A  584F      2635          addq.w    #4,A7
                    2636   ; return ;
00001A6C  6000 00BA 2637          bra       ChangeRegisters_6
                    2638   ChangeRegisters_43:
00001A70  6000 00B2 2639          bra       ChangeRegisters_51
                    2640   ChangeRegisters_40:
                    2641   ; }
                    2642   ; }
                    2643   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2644          move.b    (A3),D0
00001A76  0C00 0073 2645          cmp.b     #115,D0
00001A7A  6600 004E 2646          bne       ChangeRegisters_44
00001A7E  0C02 0073 2647          cmp.b     #115,D2
00001A82  6600 0046 2648          bne       ChangeRegisters_44
                    2649   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2650          move.l    D0,-(A7)
00001A88  4E95      2651          jsr       (A5)
00001A8A  2200      2652          move.l    D0,D1
00001A8C  201F      2653          move.l    (A7)+,D0
00001A8E  2F01      2654          move.l    D1,-(A7)
00001A90  4EB9 0000 2655          jsr       _tolower
00001A94  551E      
00001A96  584F      2656          addq.w    #4,A7
00001A98  0C80 0000 2657          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2658          bne.s     ChangeRegisters_46
                    2659   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2660          pea       @m68kde~1_60.L
00001AA4  646A      
00001AA6  4E92      2661          jsr       (A2)
00001AA8  584F      2662          addq.w    #4,A7
                    2663   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2664          clr.l     -(A7)
00001AAC  4E94      2665          jsr       (A4)
00001AAE  584F      2666          addq.w    #4,A7
00001AB0  23C0 0803 2667          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2668          bra.s     ChangeRegisters_47
                    2669   ChangeRegisters_46:
                    2670   ; }
                    2671   ; else {
                    2672   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2673          pea       @m68kde~1_59.L
00001ABC  6452      
00001ABE  4E92      2674          jsr       (A2)
00001AC0  584F      2675          addq.w    #4,A7
                    2676   ; return ;
00001AC2  6000 0064 2677          bra       ChangeRegisters_6
                    2678   ChangeRegisters_47:
00001AC6  6000 005C 2679          bra       ChangeRegisters_51
                    2680   ChangeRegisters_44:
                    2681   ; }
                    2682   ; }
                    2683   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2684          move.b    (A3),D0
00001ACC  0C00 0070 2685          cmp.b     #112,D0
00001AD0  6620      2686          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2687          cmp.b     #99,D2
00001AD6  661A      2688          bne.s     ChangeRegisters_48
                    2689   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2690          pea       @m68kde~1_61.L
00001ADC  647A      
00001ADE  4E92      2691          jsr       (A2)
00001AE0  584F      2692          addq.w    #4,A7
                    2693   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2694          clr.l     -(A7)
00001AE4  4E94      2695          jsr       (A4)
00001AE6  584F      2696          addq.w    #4,A7
00001AE8  23C0 0803 2697          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2698          bra       ChangeRegisters_51
                    2699   ChangeRegisters_48:
                    2700   ; }
                    2701   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2702          move.b    (A3),D0
00001AF4  0C00 0073 2703          cmp.b     #115,D0
00001AF8  6620      2704          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2705          cmp.b     #114,D2
00001AFE  661A      2706          bne.s     ChangeRegisters_50
                    2707   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2708          pea       @m68kde~1_62.L
00001B04  6482      
00001B06  4E92      2709          jsr       (A2)
00001B08  584F      2710          addq.w    #4,A7
                    2711   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2712          clr.l     -(A7)
00001B0C  4EB8 0C58 2713          jsr       _Get4HexDigits
00001B10  584F      2714          addq.w    #4,A7
00001B12  33C0 0803 2715          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2716          bra.s     ChangeRegisters_51
                    2717   ChangeRegisters_50:
                    2718   ; }
                    2719   ; else
                    2720   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2721          pea       @m68kde~1_63.L
00001B1E  648A      
00001B20  4E92      2722          jsr       (A2)
00001B22  584F      2723          addq.w    #4,A7
                    2724   ChangeRegisters_51:
                    2725   ; DumpRegisters() ;
00001B24  4EB8 135E 2726          jsr       _DumpRegisters
                    2727   ChangeRegisters_6:
00001B28  4CDF 3C0C 2728          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2729          unlk      A6
00001B2E  4E75      2730          rts
                    2731   ; }
                    2732   ; void BreakPointDisplay(void)
                    2733   ; {
                    2734   _BreakPointDisplay:
00001B30  48E7 3030 2735          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2736          lea       _printf.L,A2
00001B38  559E      
00001B3A  47F9 0803 2737          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2738   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2739          clr.l     D3
                    2740   ; // any break points  set
                    2741   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2742          clr.l     D2
                    2743   BreakPointDisplay_1:
00001B44  0C82 0000 2744          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2745          bge.s     BreakPointDisplay_3
                    2746   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2747          move.l    D2,D0
00001B4E  E588      2748          lsl.l     #2,D0
00001B50  41F9 0803 2749          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2750          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2751          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2752          bne.s     BreakPointDisplay_4
                    2753   ; BreakPointsSet = 1;
00001B62  7601      2754          moveq     #1,D3
                    2755   BreakPointDisplay_4:
00001B64  5282      2756          addq.l    #1,D2
00001B66  60DC      2757          bra       BreakPointDisplay_1
                    2758   BreakPointDisplay_3:
                    2759   ; }
                    2760   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2761          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2762          bne.s     BreakPointDisplay_6
                    2763   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2764          pea       @m68kde~1_64.L
00001B74  64C6      
00001B76  4E92      2765          jsr       (A2)
00001B78  584F      2766          addq.w    #4,A7
                    2767   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2768          pea       @m68kde~1_65.L
00001B7E  64EC      
00001B80  4E92      2769          jsr       (A2)
00001B82  584F      2770          addq.w    #4,A7
00001B84  600A      2771          bra.s     BreakPointDisplay_7
                    2772   BreakPointDisplay_6:
                    2773   ; }
                    2774   ; else
                    2775   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2776          pea       @m68kde~1_66.L
00001B8A  6510      
00001B8C  4E92      2777          jsr       (A2)
00001B8E  584F      2778          addq.w    #4,A7
                    2779   BreakPointDisplay_7:
                    2780   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2781          clr.l     D2
                    2782   BreakPointDisplay_8:
00001B92  0C82 0000 2783          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2784          bge       BreakPointDisplay_10
                    2785   ; // put opcode back to disassemble it, then put break point back
                    2786   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2787          move.l    D2,D0
00001B9E  E588      2788          lsl.l     #2,D0
00001BA0  41F9 0803 2789          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2790          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2791          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2792          bne       BreakPointDisplay_11
                    2793   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2794          move.l    D2,D0
00001BB6  E388      2795          lsl.l     #1,D0
00001BB8  41F9 0803 2796          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2797          move.l    D2,D1
00001BC0  E589      2798          lsl.l     #2,D1
00001BC2  2233 1800 2799          move.l    0(A3,D1.L),D1
00001BC6  2241      2800          move.l    D1,A1
00001BC8  32B0 0800 2801          move.w    0(A0,D0.L),(A1)
                    2802   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2803          move.l    D2,D1
00001BCE  E589      2804          lsl.l     #2,D1
00001BD0  2F33 1800 2805          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2806          jsr       _DisassembleInstruction
00001BD8  352A      
00001BDA  584F      2807          addq.w    #4,A7
                    2808   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2809          jsr       _FormatInstructionForTrace
                    2810   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2811          move.l    D2,D0
00001BE2  E588      2812          lsl.l     #2,D0
00001BE4  2033 0800 2813          move.l    0(A3,D0.L),D0
00001BE8  2040      2814          move.l    D0,A0
00001BEA  30BC 4E4E 2815          move.w    #20046,(A0)
                    2816   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2817          move.l    D2,D1
00001BF0  E589      2818          lsl.l     #2,D1
00001BF2  2F33 1800 2819          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2820          move.l    D2,-(A7)
00001BF8  4879 0000 2821          pea       @m68kde~1_67.L
00001BFC  6526      
00001BFE  4E92      2822          jsr       (A2)
00001C00  DEFC 000C 2823          add.w     #12,A7
                    2824   ; printf("    %s", Instruction);
00001C04  4879 0803 2825          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2826          pea       @m68kde~1_68.L
00001C0E  6536      
00001C10  4E92      2827          jsr       (A2)
00001C12  504F      2828          addq.w    #8,A7
                    2829   BreakPointDisplay_11:
00001C14  5282      2830          addq.l    #1,D2
00001C16  6000 FF7A 2831          bra       BreakPointDisplay_8
                    2832   BreakPointDisplay_10:
                    2833   ; }
                    2834   ; }
                    2835   ; printf("\r\n") ;
00001C1A  4879 0000 2836          pea       @m68kde~1_1.L
00001C1E  5EB0      
00001C20  4E92      2837          jsr       (A2)
00001C22  584F      2838          addq.w    #4,A7
00001C24  4CDF 0C0C 2839          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2840          rts
                    2841   ; }
                    2842   ; void WatchPointDisplay(void)
                    2843   ; {
                    2844   _WatchPointDisplay:
00001C2A  48E7 3020 2845          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2846          lea       _printf.L,A2
00001C32  559E      
                    2847   ; int i ;
                    2848   ; int WatchPointsSet = 0 ;
00001C34  4283      2849          clr.l     D3
                    2850   ; // any watchpoints set
                    2851   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2852          clr.l     D2
                    2853   WatchPointDisplay_1:
00001C38  0C82 0000 2854          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2855          bge.s     WatchPointDisplay_3
                    2856   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2857          move.l    D2,D0
00001C42  E588      2858          lsl.l     #2,D0
00001C44  41F9 0803 2859          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2860          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2861          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2862          bne.s     WatchPointDisplay_4
                    2863   ; WatchPointsSet = 1;
00001C56  7601      2864          moveq     #1,D3
                    2865   WatchPointDisplay_4:
00001C58  5282      2866          addq.l    #1,D2
00001C5A  60DC      2867          bra       WatchPointDisplay_1
                    2868   WatchPointDisplay_3:
                    2869   ; }
                    2870   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2871          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2872          bne.s     WatchPointDisplay_6
                    2873   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2874          pea       @m68kde~1_69.L
00001C68  653E      
00001C6A  4E92      2875          jsr       (A2)
00001C6C  584F      2876          addq.w    #4,A7
                    2877   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2878          pea       @m68kde~1_70.L
00001C72  6550      
00001C74  4E92      2879          jsr       (A2)
00001C76  584F      2880          addq.w    #4,A7
00001C78  600A      2881          bra.s     WatchPointDisplay_7
                    2882   WatchPointDisplay_6:
                    2883   ; }
                    2884   ; else
                    2885   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2886          pea       @m68kde~1_71.L
00001C7E  6564      
00001C80  4E92      2887          jsr       (A2)
00001C82  584F      2888          addq.w    #4,A7
                    2889   WatchPointDisplay_7:
                    2890   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2891          clr.l     D2
                    2892   WatchPointDisplay_8:
00001C86  0C82 0000 2893          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2894          bge       WatchPointDisplay_10
                    2895   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2896          move.l    D2,D0
00001C92  E588      2897          lsl.l     #2,D0
00001C94  41F9 0803 2898          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2899          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2900          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2901          bne.s     WatchPointDisplay_11
                    2902   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2903          move.l    D2,D1
00001CA8  E589      2904          lsl.l     #2,D1
00001CAA  41F9 0803 2905          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2906          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2907          move.l    D2,-(A7)
00001CB6  4879 0000 2908          pea       @m68kde~1_67.L
00001CBA  6526      
00001CBC  4E92      2909          jsr       (A2)
00001CBE  DEFC 000C 2910          add.w     #12,A7
                    2911   WatchPointDisplay_11:
00001CC2  5282      2912          addq.l    #1,D2
00001CC4  60C0      2913          bra       WatchPointDisplay_8
                    2914   WatchPointDisplay_10:
                    2915   ; }
                    2916   ; printf("\r\n") ;
00001CC6  4879 0000 2917          pea       @m68kde~1_1.L
00001CCA  5EB0      
00001CCC  4E92      2918          jsr       (A2)
00001CCE  584F      2919          addq.w    #4,A7
00001CD0  4CDF 040C 2920          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2921          rts
                    2922   ; }
                    2923   ; void BreakPointClear(void)
                    2924   ; {
                    2925   _BreakPointClear:
00001CD6  4E56 FFFC 2926          link      A6,#-4
00001CDA  48E7 2020 2927          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2928          lea       _printf.L,A2
00001CE2  559E      
                    2929   ; unsigned int i ;
                    2930   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2931   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2932          jsr       _BreakPointDisplay
                    2933   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2934          pea       @m68kde~1_72.L
00001CEC  657A      
00001CEE  4E92      2935          jsr       (A2)
00001CF0  584F      2936          addq.w    #4,A7
                    2937   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2938          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2939          jsr       __getch
00001CF8  2200      2940          move.l    D0,D1
00001CFA  201F      2941          move.l    (A7)+,D0
00001CFC  2F01      2942          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2943          jsr       _xtod
00001D02  584F      2944          addq.w    #4,A7
00001D04  C0BC 0000 2945          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2946          move.l    D0,D2
                    2947   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2948          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2949          blo.s     BreakPointClear_3
00001D14  0C82 0000 2950          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2951          bls.s     BreakPointClear_1
                    2952   BreakPointClear_3:
                    2953   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2954          pea       @m68kde~1_73.L
00001D20  6598      
00001D22  4E92      2955          jsr       (A2)
00001D24  584F      2956          addq.w    #4,A7
                    2957   ; return ;
00001D26  6000 0080 2958          bra       BreakPointClear_4
                    2959   BreakPointClear_1:
                    2960   ; }
                    2961   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2962          move.l    D2,D0
00001D2C  E588      2963          lsl.l     #2,D0
00001D2E  41F9 0803 2964          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2965          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2966          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2967          bne       BreakPointClear_5
                    2968   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2969          move.l    D2,D0
00001D44  E588      2970          lsl.l     #2,D0
00001D46  41F9 0803 2971          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2972          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2973   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2974          move.l    D2,D0
00001D54  E588      2975          lsl.l     #2,D0
00001D56  41F9 0803 2976          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2977          clr.l     0(A0,D0.L)
                    2978   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2979          move.l    D2,D0
00001D62  E588      2980          lsl.l     #2,D0
00001D64  41F9 0803 2981          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2982          clr.l     0(A0,D0.L)
                    2983   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2984          move.l    D2,D0
00001D70  E388      2985          lsl.l     #1,D0
00001D72  41F9 0803 2986          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2987          move.l    -4(A6),A1
00001D7C  32B0 0800 2988          move.w    0(A0,D0.L),(A1)
                    2989   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2990          move.l    D2,D0
00001D82  E388      2991          lsl.l     #1,D0
00001D84  41F9 0803 2992          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2993          clr.w     0(A0,D0.L)
                    2994   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2995          pea       @m68kde~1_74.L
00001D92  65B4      
00001D94  4E92      2996          jsr       (A2)
00001D96  584F      2997          addq.w    #4,A7
00001D98  600A      2998          bra.s     BreakPointClear_6
                    2999   BreakPointClear_5:
                    3000   ; }
                    3001   ; else
                    3002   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3003          pea       @m68kde~1_75.L
00001D9E  65D2      
00001DA0  4E92      3004          jsr       (A2)
00001DA2  584F      3005          addq.w    #4,A7
                    3006   BreakPointClear_6:
                    3007   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3008          jsr       _BreakPointDisplay
                    3009   ; return ;
                    3010   BreakPointClear_4:
00001DA8  4CDF 0404 3011          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3012          unlk      A6
00001DAE  4E75      3013          rts
                    3014   ; }
                    3015   ; void WatchPointClear(void)
                    3016   ; {
                    3017   _WatchPointClear:
00001DB0  48E7 2020 3018          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3019          lea       _printf.L,A2
00001DB8  559E      
                    3020   ; unsigned int i ;
                    3021   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3022          jsr       _WatchPointDisplay
                    3023   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3024          pea       @m68kde~1_76.L
00001DC2  65F0      
00001DC4  4E92      3025          jsr       (A2)
00001DC6  584F      3026          addq.w    #4,A7
                    3027   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3028          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3029          jsr       __getch
00001DCE  2200      3030          move.l    D0,D1
00001DD0  201F      3031          move.l    (A7)+,D0
00001DD2  2F01      3032          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3033          jsr       _xtod
00001DD8  584F      3034          addq.w    #4,A7
00001DDA  C0BC 0000 3035          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3036          move.l    D0,D2
                    3037   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3038          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3039          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3040          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3041          bls.s     WatchPointClear_1
                    3042   WatchPointClear_3:
                    3043   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3044          pea       @m68kde~1_73.L
00001DF6  6598      
00001DF8  4E92      3045          jsr       (A2)
00001DFA  584F      3046          addq.w    #4,A7
                    3047   ; return ;
00001DFC  6000 004E 3048          bra       WatchPointClear_4
                    3049   WatchPointClear_1:
                    3050   ; }
                    3051   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3052          move.l    D2,D0
00001E02  E588      3053          lsl.l     #2,D0
00001E04  41F9 0803 3054          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3055          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3056          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3057          bne.s     WatchPointClear_5
                    3058   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3059          move.l    D2,D0
00001E18  E588      3060          lsl.l     #2,D0
00001E1A  41F9 0803 3061          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3062          clr.l     0(A0,D0.L)
                    3063   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3064          move.l    D2,D0
00001E26  E588      3065          lsl.l     #2,D0
00001E28  41F9 0803 3066          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3067          clr.l     0(A0,D0.L)
                    3068   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3069          pea       @m68kde~1_77.L
00001E36  660E      
00001E38  4E92      3070          jsr       (A2)
00001E3A  584F      3071          addq.w    #4,A7
00001E3C  600A      3072          bra.s     WatchPointClear_6
                    3073   WatchPointClear_5:
                    3074   ; }
                    3075   ; else
                    3076   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3077          pea       @m68kde~1_78.L
00001E42  662C      
00001E44  4E92      3078          jsr       (A2)
00001E46  584F      3079          addq.w    #4,A7
                    3080   WatchPointClear_6:
                    3081   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3082          jsr       _WatchPointDisplay
                    3083   ; return ;
                    3084   WatchPointClear_4:
00001E4C  4CDF 0404 3085          movem.l   (A7)+,D2/A2
00001E50  4E75      3086          rts
                    3087   ; }
                    3088   ; void DisableBreakPoints(void)
                    3089   ; {
                    3090   _DisableBreakPoints:
00001E52  4E56 FFFC 3091          link      A6,#-4
00001E56  2F02      3092          move.l    D2,-(A7)
                    3093   ; int i ;
                    3094   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3095   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3096          clr.l     D2
                    3097   DisableBreakPoints_1:
00001E5A  0C82 0000 3098          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3099          bge       DisableBreakPoints_3
                    3100   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3101          move.l    D2,D0
00001E66  E588      3102          lsl.l     #2,D0
00001E68  41F9 0803 3103          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3104          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3105          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3106          bne.s     DisableBreakPoints_4
                    3107   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3108          move.l    D2,D0
00001E7C  E588      3109          lsl.l     #2,D0
00001E7E  41F9 0803 3110          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3111          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3112   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3113          move.l    D2,D0
00001E8C  E388      3114          lsl.l     #1,D0
00001E8E  41F9 0803 3115          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3116          move.l    -4(A6),A1
00001E98  32B0 0800 3117          move.w    0(A0,D0.L),(A1)
                    3118   DisableBreakPoints_4:
00001E9C  5282      3119          addq.l    #1,D2
00001E9E  60BA      3120          bra       DisableBreakPoints_1
                    3121   DisableBreakPoints_3:
00001EA0  241F      3122          move.l    (A7)+,D2
00001EA2  4E5E      3123          unlk      A6
00001EA4  4E75      3124          rts
                    3125   ; }
                    3126   ; }
                    3127   ; }
                    3128   ; void EnableBreakPoints(void)
                    3129   ; {
                    3130   _EnableBreakPoints:
00001EA6  4E56 FFFC 3131          link      A6,#-4
00001EAA  2F02      3132          move.l    D2,-(A7)
                    3133   ; int i ;
                    3134   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3135   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3136          clr.l     D2
                    3137   EnableBreakPoints_1:
00001EAE  0C82 0000 3138          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3139          bge.s     EnableBreakPoints_3
                    3140   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3141          move.l    D2,D0
00001EB8  E588      3142          lsl.l     #2,D0
00001EBA  41F9 0803 3143          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3144          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3145          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3146          bne.s     EnableBreakPoints_4
                    3147   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3148          move.l    D2,D0
00001ECE  E588      3149          lsl.l     #2,D0
00001ED0  41F9 0803 3150          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3151          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3152   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3153          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3154          move.w    #20046,(A0)
                    3155   EnableBreakPoints_4:
00001EE4  5282      3156          addq.l    #1,D2
00001EE6  60C6      3157          bra       EnableBreakPoints_1
                    3158   EnableBreakPoints_3:
00001EE8  241F      3159          move.l    (A7)+,D2
00001EEA  4E5E      3160          unlk      A6
00001EEC  4E75      3161          rts
                    3162   ; }
                    3163   ; }
                    3164   ; }
                    3165   ; void KillAllBreakPoints(void)
                    3166   ; {
                    3167   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3168          link      A6,#-4
00001EF2  2F02      3169          move.l    D2,-(A7)
                    3170   ; int i ;
                    3171   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3172   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3173          clr.l     D2
                    3174   KillAllBreakPoints_1:
00001EF6  0C82 0000 3175          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3176          bge       KillAllBreakPoints_3
                    3177   ; // clear BP
                    3178   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3179          move.l    D2,D0
00001F02  E588      3180          lsl.l     #2,D0
00001F04  41F9 0803 3181          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3182          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3183   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3184          move.l    D2,D0
00001F12  E388      3185          lsl.l     #1,D0
00001F14  41F9 0803 3186          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3187          move.l    -4(A6),A1
00001F1E  32B0 0800 3188          move.w    0(A0,D0.L),(A1)
                    3189   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3190          move.l    D2,D0
00001F24  E588      3191          lsl.l     #2,D0
00001F26  41F9 0803 3192          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3193          clr.l     0(A0,D0.L)
                    3194   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3195          move.l    D2,D0
00001F32  E388      3196          lsl.l     #1,D0
00001F34  41F9 0803 3197          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3198          clr.w     0(A0,D0.L)
                    3199   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3200          move.l    D2,D0
00001F40  E588      3201          lsl.l     #2,D0
00001F42  41F9 0803 3202          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3203          clr.l     0(A0,D0.L)
00001F4C  5282      3204          addq.l    #1,D2
00001F4E  60A6      3205          bra       KillAllBreakPoints_1
                    3206   KillAllBreakPoints_3:
00001F50  241F      3207          move.l    (A7)+,D2
00001F52  4E5E      3208          unlk      A6
00001F54  4E75      3209          rts
                    3210   ; }
                    3211   ; //BreakPointDisplay() ;       // display the break points
                    3212   ; }
                    3213   ; void KillAllWatchPoints(void)
                    3214   ; {
                    3215   _KillAllWatchPoints:
00001F56  2F02      3216          move.l    D2,-(A7)
                    3217   ; int i ;
                    3218   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3219          clr.l     D2
                    3220   KillAllWatchPoints_1:
00001F5A  0C82 0000 3221          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3222          bge.s     KillAllWatchPoints_3
                    3223   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3224          move.l    D2,D0
00001F64  E588      3225          lsl.l     #2,D0
00001F66  41F9 0803 3226          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3227          clr.l     0(A0,D0.L)
                    3228   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3229          move.l    D2,D0
00001F72  E588      3230          lsl.l     #2,D0
00001F74  41F9 0803 3231          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3232          clr.l     0(A0,D0.L)
00001F7E  5282      3233          addq.l    #1,D2
00001F80  60D8      3234          bra       KillAllWatchPoints_1
                    3235   KillAllWatchPoints_3:
00001F82  241F      3236          move.l    (A7)+,D2
00001F84  4E75      3237          rts
                    3238   ; }
                    3239   ; //WatchPointDisplay() ;       // display the break points
                    3240   ; }
                    3241   ; void SetBreakPoint(void)
                    3242   ; {
                    3243   _SetBreakPoint:
00001F86  4E56 FFFC 3244          link      A6,#-4
00001F8A  48E7 3830 3245          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3246          lea       _printf.L,A2
00001F92  559E      
00001F94  47F9 0803 3247          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3248   ; int i ;
                    3249   ; int BPNumber;
                    3250   ; int BPAddress;
                    3251   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3252   ; // see if any free break points
                    3253   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3254          clr.l     D2
                    3255   SetBreakPoint_1:
00001F9C  0C82 0000 3256          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3257          bge.s     SetBreakPoint_3
                    3258   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3259          move.l    D2,D0
00001FA6  E588      3260          lsl.l     #2,D0
00001FA8  2033 0800 3261          move.l    0(A3,D0.L),D0
00001FAC  6602      3262          bne.s     SetBreakPoint_4
                    3263   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3264          bra.s     SetBreakPoint_3
                    3265   SetBreakPoint_4:
00001FB0  5282      3266          addq.l    #1,D2
00001FB2  60E8      3267          bra       SetBreakPoint_1
                    3268   SetBreakPoint_3:
                    3269   ; }
                    3270   ; if(i == 8) {
00001FB4  0C82 0000 3271          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3272          bne.s     SetBreakPoint_6
                    3273   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3274          pea       @m68kde~1_79.L
00001FC0  664C      
00001FC2  4E92      3275          jsr       (A2)
00001FC4  584F      3276          addq.w    #4,A7
                    3277   ; return ;
00001FC6  6000 00EC 3278          bra       SetBreakPoint_15
                    3279   SetBreakPoint_6:
                    3280   ; }
                    3281   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3282          pea       @m68kde~1_80.L
00001FCE  6668      
00001FD0  4E92      3283          jsr       (A2)
00001FD2  584F      3284          addq.w    #4,A7
                    3285   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3286          clr.l     -(A7)
00001FD6  4EB8 0CA4 3287          jsr       _Get8HexDigits
00001FDA  584F      3288          addq.w    #4,A7
00001FDC  2600      3289          move.l    D0,D3
                    3290   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3291          move.l    D3,D4
                    3292   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3293          move.l    D3,D0
00001FE2  C0BC 0000 3294          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3295          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3296          bne.s     SetBreakPoint_9
                    3297   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3298          pea       @m68kde~1_81.L
00001FF4  6680      
00001FF6  4E92      3299          jsr       (A2)
00001FF8  584F      3300          addq.w    #4,A7
                    3301   ; return ;
00001FFA  6000 00B8 3302          bra       SetBreakPoint_15
                    3303   SetBreakPoint_9:
                    3304   ; }
                    3305   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3306          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3307          bhs.s     SetBreakPoint_11
                    3308   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3309          pea       @m68kde~1_82.L
0000200A  66B6      
0000200C  4E92      3310          jsr       (A2)
0000200E  584F      3311          addq.w    #4,A7
                    3312   ; return ;
00002010  6000 00A2 3313          bra       SetBreakPoint_15
                    3314   SetBreakPoint_11:
                    3315   ; }
                    3316   ; // search for first free bp or existing same BP
                    3317   ; for(i = 0; i < 8; i++)  {
00002014  4282      3318          clr.l     D2
                    3319   SetBreakPoint_13:
00002016  0C82 0000 3320          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3321          bge       SetBreakPoint_15
                    3322   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3323          move.l    D2,D0
00002022  E588      3324          lsl.l     #2,D0
00002024  41F9 0803 3325          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3326          cmp.l     0(A0,D0.L),D3
0000202E  6610      3327          bne.s     SetBreakPoint_16
                    3328   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3329          move.l    D3,-(A7)
00002032  4879 0000 3330          pea       @m68kde~1_83.L
00002036  66FE      
00002038  4E92      3331          jsr       (A2)
0000203A  504F      3332          addq.w    #8,A7
                    3333   ; return ;
0000203C  6000 0076 3334          bra       SetBreakPoint_15
                    3335   SetBreakPoint_16:
                    3336   ; }
                    3337   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3338          move.l    D2,D0
00002042  E588      3339          lsl.l     #2,D0
00002044  2033 0800 3340          move.l    0(A3,D0.L),D0
00002048  6600 0064 3341          bne       SetBreakPoint_18
                    3342   ; // set BP here
                    3343   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3344          move.l    D2,D0
0000204E  E588      3345          lsl.l     #2,D0
00002050  27BC 0000 3346          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3347   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3348          move.l    D4,A0
0000205A  2002      3349          move.l    D2,D0
0000205C  E388      3350          lsl.l     #1,D0
0000205E  43F9 0803 3351          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3352          move.w    (A0),0(A1,D0.L)
                    3353   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3354          move.l    D4,-(A7)
0000206A  4EB9 0000 3355          jsr       _DisassembleInstruction
0000206E  352A      
00002070  584F      3356          addq.w    #4,A7
                    3357   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3358          jsr       _FormatInstructionForTrace
                    3359   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3360          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3361          move.l    D4,-(A7)
0000207E  4879 0000 3362          pea       @m68kde~1_84.L
00002082  6736      
00002084  4E92      3363          jsr       (A2)
00002086  DEFC 000C 3364          add.w     #12,A7
                    3365   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3366          move.l    D4,A0
0000208C  30BC 4E4E 3367          move.w    #20046,(A0)
                    3368   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3369          move.l    D2,D0
00002092  E588      3370          lsl.l     #2,D0
00002094  41F9 0803 3371          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3372          move.l    D3,0(A0,D0.L)
                    3373   ; printf("\r\n") ;
0000209E  4879 0000 3374          pea       @m68kde~1_1.L
000020A2  5EB0      
000020A4  4E92      3375          jsr       (A2)
000020A6  584F      3376          addq.w    #4,A7
                    3377   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3378          jsr       _BreakPointDisplay
                    3379   ; return ;
000020AC  6006      3380          bra.s     SetBreakPoint_15
                    3381   SetBreakPoint_18:
000020AE  5282      3382          addq.l    #1,D2
000020B0  6000 FF64 3383          bra       SetBreakPoint_13
                    3384   SetBreakPoint_15:
000020B4  4CDF 0C1C 3385          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3386          unlk      A6
000020BA  4E75      3387          rts
                    3388   ; }
                    3389   ; }
                    3390   ; }
                    3391   ; void SetWatchPoint(void)
                    3392   ; {
                    3393   _SetWatchPoint:
000020BC  4E56 FFF8 3394          link      A6,#-8
000020C0  48E7 3030 3395          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3396          lea       _printf.L,A2
000020C8  559E      
000020CA  47F9 0803 3397          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3398   ; int i ;
                    3399   ; int WPNumber;
                    3400   ; int WPAddress;
                    3401   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3402   ; // see if any free break points
                    3403   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3404          clr.l     D2
                    3405   SetWatchPoint_1:
000020D2  0C82 0000 3406          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3407          bge.s     SetWatchPoint_3
                    3408   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3409          move.l    D2,D0
000020DC  E588      3410          lsl.l     #2,D0
000020DE  2033 0800 3411          move.l    0(A3,D0.L),D0
000020E2  6602      3412          bne.s     SetWatchPoint_4
                    3413   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3414          bra.s     SetWatchPoint_3
                    3415   SetWatchPoint_4:
000020E6  5282      3416          addq.l    #1,D2
000020E8  60E8      3417          bra       SetWatchPoint_1
                    3418   SetWatchPoint_3:
                    3419   ; }
                    3420   ; if(i == 8) {
000020EA  0C82 0000 3421          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3422          bne.s     SetWatchPoint_6
                    3423   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3424          pea       @m68kde~1_85.L
000020F6  676E      
000020F8  4E92      3425          jsr       (A2)
000020FA  584F      3426          addq.w    #4,A7
                    3427   ; return ;
000020FC  6000 008C 3428          bra       SetWatchPoint_11
                    3429   SetWatchPoint_6:
                    3430   ; }
                    3431   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3432          pea       @m68kde~1_86.L
00002104  678A      
00002106  4E92      3433          jsr       (A2)
00002108  584F      3434          addq.w    #4,A7
                    3435   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3436          clr.l     -(A7)
0000210C  4EB8 0CA4 3437          jsr       _Get8HexDigits
00002110  584F      3438          addq.w    #4,A7
00002112  2600      3439          move.l    D0,D3
                    3440   ; // search for first free wp or existing same wp
                    3441   ; for(i = 0; i < 8; i++)  {
00002114  4282      3442          clr.l     D2
                    3443   SetWatchPoint_9:
00002116  0C82 0000 3444          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3445          bge       SetWatchPoint_11
                    3446   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3447          move.l    D2,D0
00002122  E588      3448          lsl.l     #2,D0
00002124  41F9 0803 3449          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3450          cmp.l     0(A0,D0.L),D3
0000212E  6614      3451          bne.s     SetWatchPoint_12
00002130  4A83      3452          tst.l     D3
00002132  6710      3453          beq.s     SetWatchPoint_12
                    3454   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3455          move.l    D3,-(A7)
00002136  4879 0000 3456          pea       @m68kde~1_87.L
0000213A  67A2      
0000213C  4E92      3457          jsr       (A2)
0000213E  504F      3458          addq.w    #8,A7
                    3459   ; return ;
00002140  6000 0048 3460          bra       SetWatchPoint_11
                    3461   SetWatchPoint_12:
                    3462   ; }
                    3463   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3464          move.l    D2,D0
00002146  E588      3465          lsl.l     #2,D0
00002148  2033 0800 3466          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3467          bne       SetWatchPoint_14
                    3468   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3469          move.l    D2,D0
00002152  E588      3470          lsl.l     #2,D0
00002154  27BC 0000 3471          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3472   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3473          move.l    D3,-(A7)
0000215E  4879 0000 3474          pea       @m68kde~1_88.L
00002162  67D8      
00002164  4E92      3475          jsr       (A2)
00002166  504F      3476          addq.w    #8,A7
                    3477   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3478          move.l    D2,D0
0000216A  E588      3479          lsl.l     #2,D0
0000216C  41F9 0803 3480          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3481          move.l    D3,0(A0,D0.L)
                    3482   ; printf("\r\n") ;
00002176  4879 0000 3483          pea       @m68kde~1_1.L
0000217A  5EB0      
0000217C  4E92      3484          jsr       (A2)
0000217E  584F      3485          addq.w    #4,A7
                    3486   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3487          jsr       _WatchPointDisplay
                    3488   ; return ;
00002184  6004      3489          bra.s     SetWatchPoint_11
                    3490   SetWatchPoint_14:
00002186  5282      3491          addq.l    #1,D2
00002188  608C      3492          bra       SetWatchPoint_9
                    3493   SetWatchPoint_11:
0000218A  4CDF 0C0C 3494          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3495          unlk      A6
00002190  4E75      3496          rts
                    3497   ; }
                    3498   ; }
                    3499   ; }
                    3500   ; void HandleBreakPoint(void)
                    3501   ; {
                    3502   _HandleBreakPoint:
00002192  4E56 FFFC 3503          link      A6,#-4
00002196  48E7 0038 3504          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3505          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3506          lea       _printf.L,A3
000021A4  559E      
000021A6  49F9 0803 3507          lea       _PC.L,A4
000021AA  0120      
                    3508   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3509   ; // now we have to put the break point back to run the instruction
                    3510   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3511   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3512          subq.l    #2,(A4)
                    3513   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3514          pea       @m68kde~1_89.L
000021B2  67FE      
000021B4  4E93      3515          jsr       (A3)
000021B6  584F      3516          addq.w    #4,A7
                    3517   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3518          pea       @m68kde~1_90.L
000021BC  6812      
000021BE  4E93      3519          jsr       (A3)
000021C0  584F      3520          addq.w    #4,A7
                    3521   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3522          pea       @m68kde~1_91.L
000021C6  6828      
000021C8  4E93      3523          jsr       (A3)
000021CA  584F      3524          addq.w    #4,A7
                    3525   ; // now clear the break point (put original instruction back)
                    3526   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3527          move.l    (A4),-4(A6)
                    3528   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3529          clr.l     (A2)
                    3530   HandleBreakPoint_1:
000021D2  2012      3531          move.l    (A2),D0
000021D4  0C80 0000 3532          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3533          bhs       HandleBreakPoint_3
                    3534   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3535          move.l    (A2),D0
000021E0  E588      3536          lsl.l     #2,D0
000021E2  41F9 0803 3537          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3538          move.l    0(A0,D0.L),D1
000021EC  B294      3539          cmp.l     (A4),D1
000021EE  6600 003E 3540          bne       HandleBreakPoint_4
                    3541   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3542          move.l    (A2),D0
000021F4  E588      3543          lsl.l     #2,D0
000021F6  41F9 0803 3544          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3545          clr.l     0(A0,D0.L)
                    3546   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3547          move.l    (A2),D0
00002202  E588      3548          lsl.l     #2,D0
00002204  41F9 0803 3549          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3550          clr.l     0(A0,D0.L)
                    3551   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3552          move.l    (A2),D0
00002210  E388      3553          lsl.l     #1,D0
00002212  41F9 0803 3554          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3555          move.l    -4(A6),A1
0000221C  32B0 0800 3556          move.w    0(A0,D0.L),(A1)
                    3557   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3558          move.l    (A2),D0
00002222  E388      3559          lsl.l     #1,D0
00002224  41F9 0803 3560          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3561          clr.w     0(A0,D0.L)
                    3562   HandleBreakPoint_4:
0000222E  5292      3563          addq.l    #1,(A2)
00002230  60A0      3564          bra       HandleBreakPoint_1
                    3565   HandleBreakPoint_3:
                    3566   ; }
                    3567   ; }
                    3568   ; DumpRegisters() ;
00002232  4EB8 135E 3569          jsr       _DumpRegisters
                    3570   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3571          pea       @m68kde~1_52.L
0000223A  638A      
0000223C  4E93      3572          jsr       (A3)
0000223E  584F      3573          addq.w    #4,A7
                    3574   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3575          pea       @m68kde~1_92.L
00002244  6842      
00002246  4E93      3576          jsr       (A3)
00002248  584F      3577          addq.w    #4,A7
                    3578   ; menu() ;
0000224A  4EB9 0000 3579          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3580          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3581          unlk      A6
00002256  4E75      3582          rts
                    3583   ; }
                    3584   ; void UnknownCommand()
                    3585   ; {
                    3586   _UnknownCommand:
                    3587   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3588          pea       @m68kde~1_93.L
0000225C  686A      
0000225E  4EB9 0000 3589          jsr       _printf
00002262  559E      
00002264  584F      3590          addq.w    #4,A7
                    3591   ; Help() ;
00002266  4EB9 0000 3592          jsr       _Help
0000226A  23BC      
0000226C  4E75      3593          rts
                    3594   ; }
                    3595   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3596   ; void CallDebugMonitor(void)
                    3597   ; {
                    3598   _CallDebugMonitor:
                    3599   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3600          pea       @m68kde~1_94.L
00002272  6884      
00002274  4EB9 0000 3601          jsr       _printf
00002278  559E      
0000227A  584F      3602          addq.w    #4,A7
                    3603   ; menu();
0000227C  4EB9 0000 3604          jsr       _menu
00002280  24A0      
00002282  4E75      3605          rts
                    3606   ; }
                    3607   ; void Breakpoint(void)
                    3608   ; {
                    3609   _Breakpoint:
00002284  2F02      3610          move.l    D2,-(A7)
                    3611   ; char c;
                    3612   ; c = toupper(_getch());
00002286  2F00      3613          move.l    D0,-(A7)
00002288  4EB8 0B68 3614          jsr       __getch
0000228C  2200      3615          move.l    D0,D1
0000228E  201F      3616          move.l    (A7)+,D0
00002290  2F01      3617          move.l    D1,-(A7)
00002292  4EB9 0000 3618          jsr       _toupper
00002296  5582      
00002298  584F      3619          addq.w    #4,A7
0000229A  1400      3620          move.b    D0,D2
                    3621   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3622          cmp.b     #68,D2
000022A0  6608      3623          bne.s     Breakpoint_1
                    3624   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3625          jsr       _BreakPointDisplay
000022A6  6000 0054 3626          bra       Breakpoint_10
                    3627   Breakpoint_1:
                    3628   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3629          cmp.b     #75,D2
000022AE  6630      3630          bne.s     Breakpoint_3
                    3631   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3632          pea       @m68kde~1_95.L
000022B4  68A4      
000022B6  4EB9 0000 3633          jsr       _printf
000022BA  559E      
000022BC  584F      3634          addq.w    #4,A7
                    3635   ; c = toupper(_getch());
000022BE  2F00      3636          move.l    D0,-(A7)
000022C0  4EB8 0B68 3637          jsr       __getch
000022C4  2200      3638          move.l    D0,D1
000022C6  201F      3639          move.l    (A7)+,D0
000022C8  2F01      3640          move.l    D1,-(A7)
000022CA  4EB9 0000 3641          jsr       _toupper
000022CE  5582      
000022D0  584F      3642          addq.w    #4,A7
000022D2  1400      3643          move.b    D0,D2
                    3644   ; if(c == (char)('Y'))
000022D4  0C02 0059 3645          cmp.b     #89,D2
000022D8  6604      3646          bne.s     Breakpoint_5
                    3647   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3648          jsr       _KillAllBreakPoints
                    3649   Breakpoint_5:
000022DE  601C      3650          bra.s     Breakpoint_10
                    3651   Breakpoint_3:
                    3652   ; }
                    3653   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3654          cmp.b     #83,D2
000022E4  6606      3655          bne.s     Breakpoint_7
                    3656   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3657          jsr       _SetBreakPoint
000022EA  6010      3658          bra.s     Breakpoint_10
                    3659   Breakpoint_7:
                    3660   ; }
                    3661   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3662          cmp.b     #67,D2
000022F0  6606      3663          bne.s     Breakpoint_9
                    3664   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3665          jsr       _BreakPointClear
000022F6  6004      3666          bra.s     Breakpoint_10
                    3667   Breakpoint_9:
                    3668   ; }
                    3669   ; else
                    3670   ; UnknownCommand() ;
000022F8  4EB8 2258 3671          jsr       _UnknownCommand
                    3672   Breakpoint_10:
000022FC  241F      3673          move.l    (A7)+,D2
000022FE  4E75      3674          rts
                    3675   ; }
                    3676   ; void Watchpoint(void)
                    3677   ; {
                    3678   _Watchpoint:
00002300  2F02      3679          move.l    D2,-(A7)
                    3680   ; char c;
                    3681   ; c = toupper(_getch());
00002302  2F00      3682          move.l    D0,-(A7)
00002304  4EB8 0B68 3683          jsr       __getch
00002308  2200      3684          move.l    D0,D1
0000230A  201F      3685          move.l    (A7)+,D0
0000230C  2F01      3686          move.l    D1,-(A7)
0000230E  4EB9 0000 3687          jsr       _toupper
00002312  5582      
00002314  584F      3688          addq.w    #4,A7
00002316  1400      3689          move.b    D0,D2
                    3690   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3691          cmp.b     #68,D2
0000231C  6608      3692          bne.s     Watchpoint_1
                    3693   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3694          jsr       _WatchPointDisplay
00002322  6000 0054 3695          bra       Watchpoint_10
                    3696   Watchpoint_1:
                    3697   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3698          cmp.b     #75,D2
0000232A  6630      3699          bne.s     Watchpoint_3
                    3700   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3701          pea       @m68kde~1_96.L
00002330  68C6      
00002332  4EB9 0000 3702          jsr       _printf
00002336  559E      
00002338  584F      3703          addq.w    #4,A7
                    3704   ; c = toupper(_getch());
0000233A  2F00      3705          move.l    D0,-(A7)
0000233C  4EB8 0B68 3706          jsr       __getch
00002340  2200      3707          move.l    D0,D1
00002342  201F      3708          move.l    (A7)+,D0
00002344  2F01      3709          move.l    D1,-(A7)
00002346  4EB9 0000 3710          jsr       _toupper
0000234A  5582      
0000234C  584F      3711          addq.w    #4,A7
0000234E  1400      3712          move.b    D0,D2
                    3713   ; if(c == (char)('Y'))
00002350  0C02 0059 3714          cmp.b     #89,D2
00002354  6604      3715          bne.s     Watchpoint_5
                    3716   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3717          jsr       _KillAllWatchPoints
                    3718   Watchpoint_5:
0000235A  601C      3719          bra.s     Watchpoint_10
                    3720   Watchpoint_3:
                    3721   ; }
                    3722   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3723          cmp.b     #83,D2
00002360  6606      3724          bne.s     Watchpoint_7
                    3725   ; SetWatchPoint() ;
00002362  4EB8 20BC 3726          jsr       _SetWatchPoint
00002366  6010      3727          bra.s     Watchpoint_10
                    3728   Watchpoint_7:
                    3729   ; }
                    3730   ; else if(c == (char)('C')) {
00002368  0C02 0043 3731          cmp.b     #67,D2
0000236C  6606      3732          bne.s     Watchpoint_9
                    3733   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3734          jsr       _WatchPointClear
00002372  6004      3735          bra.s     Watchpoint_10
                    3736   Watchpoint_9:
                    3737   ; }
                    3738   ; else
                    3739   ; UnknownCommand() ;
00002374  4EB8 2258 3740          jsr       _UnknownCommand
                    3741   Watchpoint_10:
00002378  241F      3742          move.l    (A7)+,D2
0000237A  4E75      3743          rts
                    3744   ; }
                    3745   ; void DMenu(void)
                    3746   ; {
                    3747   _DMenu:
0000237C  2F02      3748          move.l    D2,-(A7)
                    3749   ; char c;
                    3750   ; c = toupper(_getch());
0000237E  2F00      3751          move.l    D0,-(A7)
00002380  4EB8 0B68 3752          jsr       __getch
00002384  2200      3753          move.l    D0,D1
00002386  201F      3754          move.l    (A7)+,D0
00002388  2F01      3755          move.l    D1,-(A7)
0000238A  4EB9 0000 3756          jsr       _toupper
0000238E  5582      
00002390  584F      3757          addq.w    #4,A7
00002392  1400      3758          move.b    D0,D2
                    3759   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3760          cmp.b     #85,D2
00002398  6606      3761          bne.s     DMenu_1
                    3762   ; DumpMemory() ;
0000239A  4EB8 0EE0 3763          jsr       _DumpMemory
0000239E  6018      3764          bra.s     DMenu_4
                    3765   DMenu_1:
                    3766   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3767          cmp.b     #73,D2
000023A4  660E      3768          bne.s     DMenu_3
                    3769   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3770          jsr       _DisableBreakPoints
                    3771   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3772          jsr       _DisassembleProgram
                    3773   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3774          jsr       _EnableBreakPoints
000023B2  6004      3775          bra.s     DMenu_4
                    3776   DMenu_3:
                    3777   ; }
                    3778   ; else
                    3779   ; UnknownCommand() ;
000023B4  4EB8 2258 3780          jsr       _UnknownCommand
                    3781   DMenu_4:
000023B8  241F      3782          move.l    (A7)+,D2
000023BA  4E75      3783          rts
                    3784   ; }
                    3785   ; void Help(void)
                    3786   ; {
                    3787   _Help:
000023BC  48E7 2020 3788          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3789          lea       _printf.L,A2
000023C4  559E      
                    3790   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3791          lea       @m68kde~1_97.L,A0
000023CA  68E8      
000023CC  2408      3792          move.l    A0,D2
                    3793   ; printf(banner) ;
000023CE  2F02      3794          move.l    D2,-(A7)
000023D0  4E92      3795          jsr       (A2)
000023D2  584F      3796          addq.w    #4,A7
                    3797   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3798          pea       @m68kde~1_98.L
000023D8  692C      
000023DA  4E92      3799          jsr       (A2)
000023DC  584F      3800          addq.w    #4,A7
                    3801   ; printf(banner) ;
000023DE  2F02      3802          move.l    D2,-(A7)
000023E0  4E92      3803          jsr       (A2)
000023E2  584F      3804          addq.w    #4,A7
                    3805   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3806          pea       @m68kde~1_99.L
000023E8  694A      
000023EA  4E92      3807          jsr       (A2)
000023EC  584F      3808          addq.w    #4,A7
                    3809   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3810          pea       @m68kde~1_100.L
000023F2  698E      
000023F4  4E92      3811          jsr       (A2)
000023F6  584F      3812          addq.w    #4,A7
                    3813   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3814          pea       @m68kde~1_101.L
000023FC  69C6      
000023FE  4E92      3815          jsr       (A2)
00002400  584F      3816          addq.w    #4,A7
                    3817   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3818          pea       @m68kde~1_102.L
00002406  6A00      
00002408  4E92      3819          jsr       (A2)
0000240A  584F      3820          addq.w    #4,A7
                    3821   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3822          pea       @m68kde~1_103.L
00002410  6A28      
00002412  4E92      3823          jsr       (A2)
00002414  584F      3824          addq.w    #4,A7
                    3825   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3826          pea       @m68kde~1_104.L
0000241A  6A5A      
0000241C  4E92      3827          jsr       (A2)
0000241E  584F      3828          addq.w    #4,A7
                    3829   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3830          pea       @m68kde~1_105.L
00002424  6A86      
00002426  4E92      3831          jsr       (A2)
00002428  584F      3832          addq.w    #4,A7
                    3833   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3834          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3835          pea       @m68kde~1_106.L
00002434  6AB0      
00002436  4E92      3836          jsr       (A2)
00002438  504F      3837          addq.w    #8,A7
                    3838   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3839          pea       @m68kde~1_107.L
0000243E  6AEA      
00002440  4E92      3840          jsr       (A2)
00002442  584F      3841          addq.w    #4,A7
                    3842   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3843          pea       @m68kde~1_108.L
00002448  6B22      
0000244A  4E92      3844          jsr       (A2)
0000244C  584F      3845          addq.w    #4,A7
                    3846   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3847          pea       @m68kde~1_109.L
00002452  6B50      
00002454  4E92      3848          jsr       (A2)
00002456  584F      3849          addq.w    #4,A7
                    3850   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3851          pea       @m68kde~1_110.L
0000245C  6B8A      
0000245E  4E92      3852          jsr       (A2)
00002460  584F      3853          addq.w    #4,A7
                    3854   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3855          pea       @m68kde~1_111.L
00002466  6BB6      
00002468  4E92      3856          jsr       (A2)
0000246A  584F      3857          addq.w    #4,A7
                    3858   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3859          pea       @m68kde~1_112.L
00002470  6BE8      
00002472  4E92      3860          jsr       (A2)
00002474  584F      3861          addq.w    #4,A7
                    3862   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3863          pea       @m68kde~1_113.L
0000247A  6C08      
0000247C  4E92      3864          jsr       (A2)
0000247E  584F      3865          addq.w    #4,A7
                    3866   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3867          pea       @m68kde~1_114.L
00002484  6C30      
00002486  4E92      3868          jsr       (A2)
00002488  584F      3869          addq.w    #4,A7
                    3870   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3871          pea       @m68kde~1_115.L
0000248E  6C66      
00002490  4E92      3872          jsr       (A2)
00002492  584F      3873          addq.w    #4,A7
                    3874   ; printf(banner) ;
00002494  2F02      3875          move.l    D2,-(A7)
00002496  4E92      3876          jsr       (A2)
00002498  584F      3877          addq.w    #4,A7
0000249A  4CDF 0404 3878          movem.l   (A7)+,D2/A2
0000249E  4E75      3879          rts
                    3880   ; }
                    3881   ; void menu(void)
                    3882   ; {
                    3883   _menu:
000024A0  48E7 303C 3884          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3885          lea       _printf.L,A2
000024A8  559E      
000024AA  47F9 0803 3886          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3887          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3888          lea       _SR.L,A5
000024BA  012C      
                    3889   ; char c,c1 ;
                    3890   ; while(1)    {
                    3891   menu_1:
                    3892   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3893          jsr       _FlushKeyboard
                    3894   ; printf("\r\n#") ;
000024C0  4879 0000 3895          pea       @m68kde~1_116.L
000024C4  6C9E      
000024C6  4E92      3896          jsr       (A2)
000024C8  584F      3897          addq.w    #4,A7
                    3898   ; c = toupper(_getch());
000024CA  2F00      3899          move.l    D0,-(A7)
000024CC  4EB8 0B68 3900          jsr       __getch
000024D0  2200      3901          move.l    D0,D1
000024D2  201F      3902          move.l    (A7)+,D0
000024D4  2F01      3903          move.l    D1,-(A7)
000024D6  4EB9 0000 3904          jsr       _toupper
000024DA  5582      
000024DC  584F      3905          addq.w    #4,A7
000024DE  1400      3906          move.b    D0,D2
                    3907   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3908          cmp.b     #76,D2
000024E4  6608      3909          bne.s     menu_4
                    3910   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3911          jsr       _Load_SRecordFile
000024EA  6000 021E 3912          bra       menu_46
                    3913   menu_4:
                    3914   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3915          cmp.b     #68,D2
000024F2  6608      3916          bne.s     menu_6
                    3917   ; DMenu() ;
000024F4  4EB8 237C 3918          jsr       _DMenu
000024F8  6000 0210 3919          bra       menu_46
                    3920   menu_6:
                    3921   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3922          cmp.b     #69,D2
00002500  660A      3923          bne.s     menu_8
                    3924   ; EnterString() ;
00002502  4EB9 0000 3925          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3926          bra       menu_46
                    3927   menu_8:
                    3928   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3929          cmp.b     #70,D2
00002510  6608      3930          bne.s     menu_10
                    3931   ; FillMemory() ;
00002512  4EB8 0FD0 3932          jsr       _FillMemory
00002516  6000 01F2 3933          bra       menu_46
                    3934   menu_10:
                    3935   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3936          cmp.b     #71,D2
0000251E  6626      3937          bne.s     menu_12
                    3938   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3939          pea       @m68kde~1_117.L
00002524  6CA2      
00002526  4E92      3940          jsr       (A2)
00002528  584F      3941          addq.w    #4,A7
                    3942   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3943          pea       @m68kde~1_118.L
0000252E  6CBA      
00002530  4E92      3944          jsr       (A2)
00002532  584F      3945          addq.w    #4,A7
                    3946   ; GoFlag = 1 ;
00002534  23FC 0000 3947          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3948   ; go() ;
0000253E  4EB8 08B8 3949          jsr       _go
00002542  6000 01C6 3950          bra       menu_46
                    3951   menu_12:
                    3952   ; }
                    3953   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3954          cmp.b     #77,D2
0000254A  6608      3955          bne.s     menu_14
                    3956   ; MemoryChange() ;
0000254C  4EB8 11D8 3957          jsr       _MemoryChange
00002550  6000 01B8 3958          bra       menu_46
                    3959   menu_14:
                    3960   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3961          cmp.b     #80,D2
00002558  6608      3962          bne.s     menu_16
                    3963   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3964          jsr       _ProgramFlashChip
0000255E  6000 01AA 3965          bra       menu_46
                    3966   menu_16:
                    3967   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3968          cmp.b     #67,D2
00002566  6608      3969          bne.s     menu_18
                    3970   ; LoadFromFlashChip();
00002568  4EB8 12DA 3971          jsr       _LoadFromFlashChip
0000256C  6000 019C 3972          bra       menu_46
                    3973   menu_18:
                    3974   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3975          cmp.b     #82,D2
00002574  6608      3976          bne.s     menu_20
                    3977   ; DumpRegisters() ;
00002576  4EB8 135E 3978          jsr       _DumpRegisters
0000257A  6000 018E 3979          bra       menu_46
                    3980   menu_20:
                    3981   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3982          cmp.b     #46,D2
00002582  6608      3983          bne.s     menu_22
                    3984   ; ChangeRegisters() ;
00002584  4EB8 1874 3985          jsr       _ChangeRegisters
00002588  6000 0180 3986          bra       menu_46
                    3987   menu_22:
                    3988   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3989          cmp.b     #66,D2
00002590  6608      3990          bne.s     menu_24
                    3991   ; Breakpoint() ;
00002592  4EB8 2284 3992          jsr       _Breakpoint
00002596  6000 0172 3993          bra       menu_46
                    3994   menu_24:
                    3995   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3996          cmp.b     #84,D2
0000259E  6600 0046 3997          bne       menu_26
                    3998   ; c1 = toupper(_getch()) ;
000025A2  2F00      3999          move.l    D0,-(A7)
000025A4  4EB8 0B68 4000          jsr       __getch
000025A8  2200      4001          move.l    D0,D1
000025AA  201F      4002          move.l    (A7)+,D0
000025AC  2F01      4003          move.l    D1,-(A7)
000025AE  4EB9 0000 4004          jsr       _toupper
000025B2  5582      
000025B4  584F      4005          addq.w    #4,A7
000025B6  1600      4006          move.b    D0,D3
                    4007   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4008          cmp.b     #77,D3
000025BC  6608      4009          bne.s     menu_28
                    4010   ; MemoryTest() ;
000025BE  4EB9 0000 4011          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4012          bra.s     menu_33
                    4013   menu_28:
                    4014   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4015          cmp.b     #83,D3
000025CA  6606      4016          bne.s     menu_30
                    4017   ; SwitchTest() ;
000025CC  4EB8 0AA4 4018          jsr       _SwitchTest
000025D0  6010      4019          bra.s     menu_33
                    4020   menu_30:
                    4021   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4022          cmp.b     #68,D3
000025D6  6606      4023          bne.s     menu_32
                    4024   ; TestLEDS() ;
000025D8  4EB8 0A50 4025          jsr       _TestLEDS
000025DC  6004      4026          bra.s     menu_33
                    4027   menu_32:
                    4028   ; else
                    4029   ; UnknownCommand() ;
000025DE  4EB8 2258 4030          jsr       _UnknownCommand
                    4031   menu_33:
000025E2  6000 0126 4032          bra       menu_46
                    4033   menu_26:
                    4034   ; }
                    4035   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4036          cmp.b     #32,D2
000025EA  6636      4037          bne.s     menu_34
                    4038   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4039          jsr       _DisableBreakPoints
                    4040   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4041          move.l    (A3),D0
000025F2  0C80 0000 4042          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4043          bne.s     menu_36
000025FA  2039 0803 4044          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4045          cmp.l     #1,D0
00002604  0001      
00002606  660C      4046          bne.s     menu_36
                    4047   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4048          move.b    #1,4194314
0000260C  0040 000A 
                    4049   ; return ;
00002610  6000 00FC 4050          bra       menu_38
                    4051   menu_36:
                    4052   ; }
                    4053   ; else
                    4054   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4055          pea       @m68kde~1_119.L
00002618  6CE8      
0000261A  4E92      4056          jsr       (A2)
0000261C  584F      4057          addq.w    #4,A7
0000261E  6000 00EA 4058          bra       menu_46
                    4059   menu_34:
                    4060   ; }
                    4061   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4062          cmp.b     #83,D2
00002626  6600 008C 4063          bne       menu_39
                    4064   ; if(Trace == 0) {
0000262A  2013      4065          move.l    (A3),D0
0000262C  6600 0050 4066          bne       menu_41
                    4067   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4068          jsr       _DisableBreakPoints
                    4069   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4070          pea       @m68kde~1_120.L
00002638  6D12      
0000263A  4E92      4071          jsr       (A2)
0000263C  584F      4072          addq.w    #4,A7
                    4073   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4074          pea       @m68kde~1_51.L
00002642  636E      
00002644  4E92      4075          jsr       (A2)
00002646  584F      4076          addq.w    #4,A7
                    4077   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4078          or.w      #32768,(A5)
                    4079   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4080          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4081          pea       @m68kde~1_121.L
00002656  6D28      
00002658  4E92      4082          jsr       (A2)
0000265A  504F      4083          addq.w    #8,A7
                    4084   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4085          pea       @m68kde~1_122.L
00002660  6D5C      
00002662  4E92      4086          jsr       (A2)
00002664  584F      4087          addq.w    #4,A7
                    4088   ; DumpRegisters() ;
00002666  4EB8 135E 4089          jsr       _DumpRegisters
                    4090   ; Trace = 1;
0000266A  26BC 0000 4091          move.l    #1,(A3)
0000266E  0001      
                    4092   ; TraceException = 1;
00002670  13FC 0001 4093          move.b    #1,4194314
00002674  0040 000A 
                    4094   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4095          move.l    116,(A4)
0000267C  6032      4096          bra.s     menu_42
                    4097   menu_41:
                    4098   ; }
                    4099   ; else {
                    4100   ; Trace = 0 ;
0000267E  4293      4101          clr.l     (A3)
                    4102   ; TraceException = 0 ;
00002680  4239 0040 4103          clr.b     4194314
00002684  000A      
                    4104   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4105          move.l    116,(A4)
                    4106   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4107          jsr       _EnableBreakPoints
                    4108   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4109          and.w     #32767,(A5)
                    4110   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4111          pea       @m68kde~1_123.L
00002696  6D80      
00002698  4E92      4112          jsr       (A2)
0000269A  584F      4113          addq.w    #4,A7
                    4114   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4115          pea       @m68kde~1_124.L
000026A0  6D96      
000026A2  4E92      4116          jsr       (A2)
000026A4  584F      4117          addq.w    #4,A7
                    4118   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4119          pea       @m68kde~1_125.L
000026AA  6DB0      
000026AC  4E92      4120          jsr       (A2)
000026AE  584F      4121          addq.w    #4,A7
                    4122   menu_42:
000026B0  6000 0058 4123          bra       menu_46
                    4124   menu_39:
                    4125   ; }
                    4126   ; }
                    4127   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4128          cmp.b     #27,D2
000026B8  6600 0040 4129          bne       menu_43
                    4130   ; Trace = 0;
000026BC  4293      4131          clr.l     (A3)
                    4132   ; TraceException = 0;
000026BE  4239 0040 4133          clr.b     4194314
000026C2  000A      
                    4134   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4135          move.l    116,(A4)
                    4136   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4137          jsr       _EnableBreakPoints
                    4138   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4139          and.w     #32767,(A5)
                    4140   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4141          pea       @m68kde~1_126.L
000026D4  6DDA      
000026D6  4E92      4142          jsr       (A2)
000026D8  584F      4143          addq.w    #4,A7
                    4144   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4145          pea       @m68kde~1_124.L
000026DE  6D96      
000026E0  4E92      4146          jsr       (A2)
000026E2  584F      4147          addq.w    #4,A7
                    4148   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4149          pea       @m68kde~1_117.L
000026E8  6CA2      
000026EA  4E92      4150          jsr       (A2)
000026EC  584F      4151          addq.w    #4,A7
                    4152   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4153          pea       @m68kde~1_118.L
000026F2  6CBA      
000026F4  4E92      4154          jsr       (A2)
000026F6  584F      4155          addq.w    #4,A7
                    4156   ; return ;
000026F8  6014      4157          bra.s     menu_38
                    4158   menu_43:
                    4159   ; }
                    4160   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4161          cmp.b     #87,D2
000026FE  6606      4162          bne.s     menu_45
                    4163   ; Watchpoint() ;
00002700  4EB8 2300 4164          jsr       _Watchpoint
00002704  6004      4165          bra.s     menu_46
                    4166   menu_45:
                    4167   ; else
                    4168   ; UnknownCommand() ;
00002706  4EB8 2258 4169          jsr       _UnknownCommand
                    4170   menu_46:
0000270A  6000 FDB0 4171          bra       menu_1
                    4172   menu_38:
0000270E  4CDF 3C0C 4173          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4174          rts
                    4175   ; }
                    4176   ; }
                    4177   ; void PrintErrorMessageandAbort(char *string) {
                    4178   _PrintErrorMessageandAbort:
00002714  4E56 0000 4179          link      A6,#0
                    4180   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4181          pea       @m68kde~1_127.L
0000271C  6DF0      
0000271E  4EB9 0000 4182          jsr       _printf
00002722  559E      
00002724  584F      4183          addq.w    #4,A7
                    4184   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4185          move.l    8(A6),-(A7)
0000272A  4879 0000 4186          pea       @m68kde~1_128.L
0000272E  6E0C      
00002730  4EB9 0000 4187          jsr       _printf
00002734  559E      
00002736  504F      4188          addq.w    #8,A7
                    4189   ; menu() ;
00002738  4EB8 24A0 4190          jsr       _menu
0000273C  4E5E      4191          unlk      A6
0000273E  4E75      4192          rts
                    4193   ; }
                    4194   ; void IRQMessage(int level) {
                    4195   _IRQMessage:
00002740  4E56 0000 4196          link      A6,#0
                    4197   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4198          pea       @m68kde~1_129.L
00002748  6E12      
0000274A  4EB9 0000 4199          jsr       _printf
0000274E  559E      
00002750  584F      4200          addq.w    #4,A7
                    4201   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4202          move.l    8(A6),-(A7)
00002756  4879 0000 4203          pea       @m68kde~1_130.L
0000275A  6E2A      
0000275C  4EB9 0000 4204          jsr       _printf
00002760  559E      
00002762  504F      4205          addq.w    #8,A7
                    4206   ; menu() ;
00002764  4EB8 24A0 4207          jsr       _menu
00002768  4E5E      4208          unlk      A6
0000276A  4E75      4209          rts
                    4210   ; }
                    4211   ; void UnhandledIRQ1(void) {
                    4212   _UnhandledIRQ1:
                    4213   ; IRQMessage(1);
0000276C  4878 0001 4214          pea       1
00002770  4EB8 2740 4215          jsr       _IRQMessage
00002774  584F      4216          addq.w    #4,A7
00002776  4E75      4217          rts
                    4218   ; }
                    4219   ; void UnhandledIRQ2(void) {
                    4220   _UnhandledIRQ2:
                    4221   ; IRQMessage(2);
00002778  4878 0002 4222          pea       2
0000277C  4EB8 2740 4223          jsr       _IRQMessage
00002780  584F      4224          addq.w    #4,A7
00002782  4E75      4225          rts
                    4226   ; }
                    4227   ; void UnhandledIRQ3(void){
                    4228   _UnhandledIRQ3:
                    4229   ; IRQMessage(3);
00002784  4878 0003 4230          pea       3
00002788  4EB8 2740 4231          jsr       _IRQMessage
0000278C  584F      4232          addq.w    #4,A7
0000278E  4E75      4233          rts
                    4234   ; }
                    4235   ; void UnhandledIRQ4(void) {
                    4236   _UnhandledIRQ4:
                    4237   ; IRQMessage(4);
00002790  4878 0004 4238          pea       4
00002794  4EB8 2740 4239          jsr       _IRQMessage
00002798  584F      4240          addq.w    #4,A7
0000279A  4E75      4241          rts
                    4242   ; }
                    4243   ; void UnhandledIRQ5(void) {
                    4244   _UnhandledIRQ5:
                    4245   ; IRQMessage(5);
0000279C  4878 0005 4246          pea       5
000027A0  4EB8 2740 4247          jsr       _IRQMessage
000027A4  584F      4248          addq.w    #4,A7
000027A6  4E75      4249          rts
                    4250   ; }
                    4251   ; void UnhandledIRQ6(void) {
                    4252   _UnhandledIRQ6:
                    4253   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4254          pea       @m68kde~1_131.L
000027AC  6E4E      
000027AE  4EB8 2714 4255          jsr       _PrintErrorMessageandAbort
000027B2  584F      4256          addq.w    #4,A7
                    4257   ; menu() ;
000027B4  4EB8 24A0 4258          jsr       _menu
000027B8  4E75      4259          rts
                    4260   ; }
                    4261   ; void UnhandledIRQ7(void) {
                    4262   _UnhandledIRQ7:
                    4263   ; IRQMessage(7);
000027BA  4878 0007 4264          pea       7
000027BE  4EB8 2740 4265          jsr       _IRQMessage
000027C2  584F      4266          addq.w    #4,A7
000027C4  4E75      4267          rts
                    4268   ; }
                    4269   ; void UnhandledTrap(void) {
                    4270   _UnhandledTrap:
                    4271   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4272          pea       @m68kde~1_132.L
000027CA  6E8E      
000027CC  4EB8 2714 4273          jsr       _PrintErrorMessageandAbort
000027D0  584F      4274          addq.w    #4,A7
000027D2  4E75      4275          rts
                    4276   ; }
                    4277   ; void BusError() {
                    4278   _BusError:
                    4279   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4280          pea       @m68kde~1_133.L
000027D8  6EA4      
000027DA  4EB8 2714 4281          jsr       _PrintErrorMessageandAbort
000027DE  584F      4282          addq.w    #4,A7
000027E0  4E75      4283          rts
                    4284   ; }
                    4285   ; void AddressError() {
                    4286   _AddressError:
                    4287   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4288          pea       @m68kde~1_134.L
000027E6  6EB0      
000027E8  4EB8 2714 4289          jsr       _PrintErrorMessageandAbort
000027EC  584F      4290          addq.w    #4,A7
000027EE  4E75      4291          rts
                    4292   ; }
                    4293   ; void IllegalInstruction() {
                    4294   _IllegalInstruction:
                    4295   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4296          pea       @m68kde~1_135.L
000027F4  6EC0      
000027F6  4EB8 2714 4297          jsr       _PrintErrorMessageandAbort
000027FA  584F      4298          addq.w    #4,A7
000027FC  4E75      4299          rts
                    4300   ; }
                    4301   ; void Dividebyzero() {
                    4302   _Dividebyzero:
                    4303   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4304          pea       @m68kde~1_136.L
00002802  6ED4      
00002804  4EB8 2714 4305          jsr       _PrintErrorMessageandAbort
00002808  584F      4306          addq.w    #4,A7
0000280A  4E75      4307          rts
                    4308   ; }
                    4309   ; void Check() {
                    4310   _Check:
                    4311   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4312          pea       @m68kde~1_137.L
00002810  6EE4      
00002812  4EB8 2714 4313          jsr       _PrintErrorMessageandAbort
00002816  584F      4314          addq.w    #4,A7
00002818  4E75      4315          rts
                    4316   ; }
                    4317   ; void Trapv() {
                    4318   _Trapv:
                    4319   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4320          pea       @m68kde~1_138.L
0000281E  6EF6      
00002820  4EB8 2714 4321          jsr       _PrintErrorMessageandAbort
00002824  584F      4322          addq.w    #4,A7
00002826  4E75      4323          rts
                    4324   ; }
                    4325   ; void PrivError() {
                    4326   _PrivError:
                    4327   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4328          pea       @m68kde~1_139.L
0000282C  6F08      
0000282E  4EB8 2714 4329          jsr       _PrintErrorMessageandAbort
00002832  584F      4330          addq.w    #4,A7
00002834  4E75      4331          rts
                    4332   ; }
                    4333   ; void UnitIRQ() {
                    4334   _UnitIRQ:
                    4335   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4336          pea       @m68kde~1_140.L
0000283A  6F1C      
0000283C  4EB8 2714 4337          jsr       _PrintErrorMessageandAbort
00002840  584F      4338          addq.w    #4,A7
00002842  4E75      4339          rts
                    4340   ; }
                    4341   ; void Spurious() {
                    4342   _Spurious:
                    4343   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4344          pea       @m68kde~1_141.L
00002848  6F2E      
0000284A  4EB8 2714 4345          jsr       _PrintErrorMessageandAbort
0000284E  584F      4346          addq.w    #4,A7
00002850  4E75      4347          rts
                    4348   ; }
                    4349   ; void EnterString(void)
                    4350   ; {
                    4351   _EnterString:
00002852  4E56 FFFC 4352          link      A6,#-4
00002856  2F02      4353          move.l    D2,-(A7)
                    4354   ; unsigned char *Start;
                    4355   ; unsigned char c;
                    4356   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4357          pea       @m68kde~1_142.L
0000285C  6F3C      
0000285E  4EB9 0000 4358          jsr       _printf
00002862  559E      
00002864  584F      4359          addq.w    #4,A7
                    4360   ; Start = Get8HexDigits(0) ;
00002866  42A7      4361          clr.l     -(A7)
00002868  4EB8 0CA4 4362          jsr       _Get8HexDigits
0000286C  584F      4363          addq.w    #4,A7
0000286E  2400      4364          move.l    D0,D2
                    4365   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4366          pea       @m68kde~1_143.L
00002874  6F58      
00002876  4EB9 0000 4367          jsr       _printf
0000287A  559E      
0000287C  584F      4368          addq.w    #4,A7
                    4369   ; while((c = getchar()) != 0x1b)
                    4370   EnterString_1:
0000287E  4EB9 0000 4371          jsr       _getch
00002882  54E6      
00002884  1D40 FFFF 4372          move.b    D0,-1(A6)
00002888  0C00 001B 4373          cmp.b     #27,D0
0000288C  670A      4374          beq.s     EnterString_3
                    4375   ; *Start++ = c ;
0000288E  2042      4376          move.l    D2,A0
00002890  5282      4377          addq.l    #1,D2
00002892  10AE FFFF 4378          move.b    -1(A6),(A0)
00002896  60E6      4379          bra       EnterString_1
                    4380   EnterString_3:
                    4381   ; *Start = 0x00;  // terminate with a null
00002898  2042      4382          move.l    D2,A0
0000289A  4210      4383          clr.b     (A0)
0000289C  241F      4384          move.l    (A7)+,D2
0000289E  4E5E      4385          unlk      A6
000028A0  4E75      4386          rts
                    4387   ; }
                    4388   ; void MemoryTest(void)
                    4389   ; {
                    4390   _MemoryTest:
000028A2  4E56 FFF4 4391          link      A6,#-12
000028A6  48E7 3F20 4392          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000028AA  45F9 0000 4393          lea       _printf.L,A2
000028AE  559E      
                    4394   ; unsigned int *RamPtr, counter1=1 ;
000028B0  2D7C 0000 4395          move.l    #1,-10(A6)
000028B4  0001 FFF6 
                    4396   ; register unsigned int i ;
                    4397   ; unsigned int Start, End, writeVal, readVal ;
                    4398   ; char c ;
                    4399   ; bool memTestFail = FALSE; 
000028B8  7E00      4400          moveq     #0,D7
                    4401   ; printf("\rghfhgftyfjyfyj Address: ") ;
000028BA  4879 0000 4402          pea       @m68kde~1_144.L
000028BE  6F76      
000028C0  4E92      4403          jsr       (A2)
000028C2  584F      4404          addq.w    #4,A7
                    4405   ; Start = Get8HexDigits(0) ;
000028C4  42A7      4406          clr.l     -(A7)
000028C6  4EB8 0CA4 4407          jsr       _Get8HexDigits
000028CA  584F      4408          addq.w    #4,A7
000028CC  2C00      4409          move.l    D0,D6
                    4410   ; printf("\r\nEnd Address: ") ;
000028CE  4879 0000 4411          pea       @m68kde~1_145.L
000028D2  6F90      
000028D4  4E92      4412          jsr       (A2)
000028D6  584F      4413          addq.w    #4,A7
                    4414   ; End = Get8HexDigits(0) ;
000028D8  42A7      4415          clr.l     -(A7)
000028DA  4EB8 0CA4 4416          jsr       _Get8HexDigits
000028DE  584F      4417          addq.w    #4,A7
000028E0  2A00      4418          move.l    D0,D5
                    4419   ; // TODO
                    4420   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4421   ; RamPtr = (unsigned int*)Start;
000028E2  2406      4422          move.l    D6,D2
                    4423   ; // Test 1: Write all ones and read them back
                    4424   ; writeVal = 0xFFFFFFFF; 
000028E4  76FF      4425          moveq     #-1,D3
                    4426   ; while (RamPtr<End)
                    4427   MemoryTest_1:
000028E6  B485      4428          cmp.l     D5,D2
000028E8  6408      4429          bhs.s     MemoryTest_3
                    4430   ; {
                    4431   ; *RamPtr = writeVal; 
000028EA  2042      4432          move.l    D2,A0
000028EC  2083      4433          move.l    D3,(A0)
                    4434   ; RamPtr++; 
000028EE  5882      4435          addq.l    #4,D2
000028F0  60F4      4436          bra       MemoryTest_1
                    4437   MemoryTest_3:
                    4438   ; }
                    4439   ; RamPtr = (unsigned int*)Start; 
000028F2  2406      4440          move.l    D6,D2
                    4441   ; while (RamPtr<End)
000028F4  B485      4442          cmp.l     D5,D2
000028F6  640C      4443          bhs.s     MemoryTest_6
                    4444   ; {
                    4445   ; readVal = *RamPtr; 
000028F8  2042      4446          move.l    D2,A0
000028FA  2810      4447          move.l    (A0),D4
                    4448   ; if (readVal != writeVal); 
000028FC  B883      4449          cmp.l     D3,D4
000028FE  6700 0002 4450          beq       MemoryTest_7
                    4451   MemoryTest_7:
                    4452   ; {
                    4453   ; memTestFail = TRUE; 
00002902  7E01      4454          moveq     #1,D7
                    4455   ; break; 
                    4456   MemoryTest_6:
                    4457   ; }
                    4458   ; }
                    4459   ; if (memTestFail)
00002904  4A47      4460          tst.w     D7
00002906  6726      4461          beq.s     MemoryTest_9
                    4462   ; {
                    4463   ; printf("\r\nFailed at address %X", RamPtr); 
00002908  2F02      4464          move.l    D2,-(A7)
0000290A  4879 0000 4465          pea       @m68kde~1_146.L
0000290E  6FA0      
00002910  4E92      4466          jsr       (A2)
00002912  504F      4467          addq.w    #8,A7
                    4468   ; printf("\r\nExpected value: %X", writeVal);
00002914  2F03      4469          move.l    D3,-(A7)
00002916  4879 0000 4470          pea       @m68kde~1_147.L
0000291A  6FB8      
0000291C  4E92      4471          jsr       (A2)
0000291E  504F      4472          addq.w    #8,A7
                    4473   ; printf("\r\nActual Value: %X", readVal); 
00002920  2F04      4474          move.l    D4,-(A7)
00002922  4879 0000 4475          pea       @m68kde~1_148.L
00002926  6FCE      
00002928  4E92      4476          jsr       (A2)
0000292A  504F      4477          addq.w    #8,A7
0000292C  600A      4478          bra.s     MemoryTest_10
                    4479   MemoryTest_9:
                    4480   ; }
                    4481   ; else
                    4482   ; {
                    4483   ; printf("Memory Test Successful"); 
0000292E  4879 0000 4484          pea       @m68kde~1_149.L
00002932  6FE2      
00002934  4E92      4485          jsr       (A2)
00002936  584F      4486          addq.w    #4,A7
                    4487   MemoryTest_10:
00002938  4CDF 04FC 4488          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
0000293C  4E5E      4489          unlk      A6
0000293E  4E75      4490          rts
                    4491   ; }
                    4492   ; }
                    4493   ; void main(void)
                    4494   ; {
                    4495   _main:
00002940  4E56 FFF4 4496          link      A6,#-12
00002944  48E7 3030 4497          movem.l   D2/D3/A2/A3,-(A7)
00002948  45F8 0A30 4498          lea       _InstallExceptionHandler.L,A2
0000294C  47F9 0000 4499          lea       _printf.L,A3
00002950  559E      
                    4500   ; char c ;
                    4501   ; int i, j ;
                    4502   ; char *BugMessage = "DE1-68k Bug V1.77";
00002952  41F9 0000 4503          lea       @m68kde~1_150.L,A0
00002956  6FFA      
00002958  2608      4504          move.l    A0,D3
                    4505   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
0000295A  41F9 0000 4506          lea       @m68kde~1_151.L,A0
0000295E  700C      
00002960  2D48 FFFC 4507          move.l    A0,-4(A6)
                    4508   ; KillAllBreakPoints() ;
00002964  4EB8 1EEE 4509          jsr       _KillAllBreakPoints
                    4510   ; i = x = y = z = PortA_Count = 0;
00002968  42B9 0803 4511          clr.l     _PortA_Count.L
0000296C  00D4      
0000296E  42B9 0803 4512          clr.l     _z.L
00002972  00D0      
00002974  42B9 0803 4513          clr.l     _y.L
00002978  00CC      
0000297A  42B9 0803 4514          clr.l     _x.L
0000297E  00C8      
00002980  4282      4515          clr.l     D2
                    4516   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002982  42B9 0803 4517          clr.l     _GoFlag.L
00002986  00DC      
00002988  42B9 0803 4518          clr.l     _Trace.L
0000298C  00D8      
                    4519   ; Echo = 1 ;
0000298E  23FC 0000 4520          move.l    #1,_Echo.L
00002992  0001 0803 
00002996  00E0      
                    4521   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002998  42B9 0803 4522          clr.l     _d7.L
0000299C  0100      
0000299E  42B9 0803 4523          clr.l     _d6.L
000029A2  00FC      
000029A4  42B9 0803 4524          clr.l     _d5.L
000029A8  00F8      
000029AA  42B9 0803 4525          clr.l     _d4.L
000029AE  00F4      
000029B0  42B9 0803 4526          clr.l     _d3.L
000029B4  00F0      
000029B6  42B9 0803 4527          clr.l     _d2.L
000029BA  00EC      
000029BC  42B9 0803 4528          clr.l     _d1.L
000029C0  00E8      
000029C2  42B9 0803 4529          clr.l     _d0.L
000029C6  00E4      
                    4530   ; a0=a1=a2=a3=a4=a5=a6=0 ;
000029C8  42B9 0803 4531          clr.l     _a6.L
000029CC  011C      
000029CE  42B9 0803 4532          clr.l     _a5.L
000029D2  0118      
000029D4  42B9 0803 4533          clr.l     _a4.L
000029D8  0114      
000029DA  42B9 0803 4534          clr.l     _a3.L
000029DE  0110      
000029E0  42B9 0803 4535          clr.l     _a2.L
000029E4  010C      
000029E6  42B9 0803 4536          clr.l     _a1.L
000029EA  0108      
000029EC  42B9 0803 4537          clr.l     _a0.L
000029F0  0104      
                    4538   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
000029F2  23FC 0800 4539          move.l    #134217728,_PC.L
000029F6  0000 0803 
000029FA  0120      
000029FC  23FC 0804 4540          move.l    #134479872,_SSP.L
00002A00  0000 0803 
00002A04  0124      
00002A06  23FC 0804 4541          move.l    #134479872,_USP.L
00002A0A  0000 0803 
00002A0E  0128      
                    4542   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002A10  33FC 2000 4543          move.w    #8192,_SR.L
00002A14  0803 012C 
                    4544   ; // Initialise Breakpoint variables
                    4545   ; for(i = 0; i < 8; i++)  {
00002A18  4282      4546          clr.l     D2
                    4547   main_1:
00002A1A  0C82 0000 4548          cmp.l     #8,D2
00002A1E  0008      
00002A20  6C00 004C 4549          bge       main_3
                    4550   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002A24  2002      4551          move.l    D2,D0
00002A26  E588      4552          lsl.l     #2,D0
00002A28  41F9 0803 4553          lea       _BreakPointAddress.L,A0
00002A2C  012E      
00002A2E  42B0 0800 4554          clr.l     0(A0,D0.L)
                    4555   ; WatchPointAddress[i] = 0 ;
00002A32  2002      4556          move.l    D2,D0
00002A34  E588      4557          lsl.l     #2,D0
00002A36  41F9 0803 4558          lea       _WatchPointAddress.L,A0
00002A3A  0182      
00002A3C  42B0 0800 4559          clr.l     0(A0,D0.L)
                    4560   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002A40  2002      4561          move.l    D2,D0
00002A42  E388      4562          lsl.l     #1,D0
00002A44  41F9 0803 4563          lea       _BreakPointInstruction.L,A0
00002A48  014E      
00002A4A  4270 0800 4564          clr.w     0(A0,D0.L)
                    4565   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002A4E  2002      4566          move.l    D2,D0
00002A50  E588      4567          lsl.l     #2,D0
00002A52  41F9 0803 4568          lea       _BreakPointSetOrCleared.L,A0
00002A56  015E      
00002A58  42B0 0800 4569          clr.l     0(A0,D0.L)
                    4570   ; WatchPointSetOrCleared[i] = 0;
00002A5C  2002      4571          move.l    D2,D0
00002A5E  E588      4572          lsl.l     #2,D0
00002A60  41F9 0803 4573          lea       _WatchPointSetOrCleared.L,A0
00002A64  01A2      
00002A66  42B0 0800 4574          clr.l     0(A0,D0.L)
00002A6A  5282      4575          addq.l    #1,D2
00002A6C  60AC      4576          bra       main_1
                    4577   main_3:
                    4578   ; }
                    4579   ; Init_RS232() ;     // initialise the RS232 port
00002A6E  4EB8 0B12 4580          jsr       _Init_RS232
                    4581   ; Init_LCD() ;
00002A72  4EB8 095E 4582          jsr       _Init_LCD
                    4583   ; for( i = 32; i < 48; i++)
00002A76  7420      4584          moveq     #32,D2
                    4585   main_4:
00002A78  0C82 0000 4586          cmp.l     #48,D2
00002A7C  0030      
00002A7E  6C0E      4587          bge.s     main_6
                    4588   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002A80  2F02      4589          move.l    D2,-(A7)
00002A82  4878 27C6 4590          pea       _UnhandledTrap.L
00002A86  4E92      4591          jsr       (A2)
00002A88  504F      4592          addq.w    #8,A7
00002A8A  5282      4593          addq.l    #1,D2
00002A8C  60EA      4594          bra       main_4
                    4595   main_6:
                    4596   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A8E  4878 002F 4597          pea       47
00002A92  4878 24A0 4598          pea       _menu.L
00002A96  4E92      4599          jsr       (A2)
00002A98  504F      4600          addq.w    #8,A7
                    4601   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A9A  4878 0019 4602          pea       25
00002A9E  4878 276C 4603          pea       _UnhandledIRQ1.L
00002AA2  4E92      4604          jsr       (A2)
00002AA4  504F      4605          addq.w    #8,A7
                    4606   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002AA6  4878 001A 4607          pea       26
00002AAA  4878 2778 4608          pea       _UnhandledIRQ2.L
00002AAE  4E92      4609          jsr       (A2)
00002AB0  504F      4610          addq.w    #8,A7
                    4611   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002AB2  4878 001B 4612          pea       27
00002AB6  4878 2784 4613          pea       _UnhandledIRQ3.L
00002ABA  4E92      4614          jsr       (A2)
00002ABC  504F      4615          addq.w    #8,A7
                    4616   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002ABE  4878 001C 4617          pea       28
00002AC2  4878 2790 4618          pea       _UnhandledIRQ4.L
00002AC6  4E92      4619          jsr       (A2)
00002AC8  504F      4620          addq.w    #8,A7
                    4621   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002ACA  4878 001D 4622          pea       29
00002ACE  4878 279C 4623          pea       _UnhandledIRQ5.L
00002AD2  4E92      4624          jsr       (A2)
00002AD4  504F      4625          addq.w    #8,A7
                    4626   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002AD6  4878 001E 4627          pea       30
00002ADA  4878 27A8 4628          pea       _UnhandledIRQ6.L
00002ADE  4E92      4629          jsr       (A2)
00002AE0  504F      4630          addq.w    #8,A7
                    4631   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002AE2  4878 001F 4632          pea       31
00002AE6  4878 27BA 4633          pea       _UnhandledIRQ7.L
00002AEA  4E92      4634          jsr       (A2)
00002AEC  504F      4635          addq.w    #8,A7
                    4636   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002AEE  4878 002E 4637          pea       46
00002AF2  4878 2192 4638          pea       _HandleBreakPoint.L
00002AF6  4E92      4639          jsr       (A2)
00002AF8  504F      4640          addq.w    #8,A7
                    4641   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002AFA  4878 001D 4642          pea       29
00002AFE  4878 1836 4643          pea       _DumpRegistersandPause.L
00002B02  4E92      4644          jsr       (A2)
00002B04  504F      4645          addq.w    #8,A7
                    4646   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002B06  4878 0002 4647          pea       2
00002B0A  4878 27D4 4648          pea       _BusError.L
00002B0E  4E92      4649          jsr       (A2)
00002B10  504F      4650          addq.w    #8,A7
                    4651   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002B12  4878 0003 4652          pea       3
00002B16  4878 27E2 4653          pea       _AddressError.L
00002B1A  4E92      4654          jsr       (A2)
00002B1C  504F      4655          addq.w    #8,A7
                    4656   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002B1E  4878 0004 4657          pea       4
00002B22  4878 27F0 4658          pea       _IllegalInstruction.L
00002B26  4E92      4659          jsr       (A2)
00002B28  504F      4660          addq.w    #8,A7
                    4661   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002B2A  4878 0005 4662          pea       5
00002B2E  4878 27FE 4663          pea       _Dividebyzero.L
00002B32  4E92      4664          jsr       (A2)
00002B34  504F      4665          addq.w    #8,A7
                    4666   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002B36  4878 0006 4667          pea       6
00002B3A  4878 280C 4668          pea       _Check.L
00002B3E  4E92      4669          jsr       (A2)
00002B40  504F      4670          addq.w    #8,A7
                    4671   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002B42  4878 0007 4672          pea       7
00002B46  4878 281A 4673          pea       _Trapv.L
00002B4A  4E92      4674          jsr       (A2)
00002B4C  504F      4675          addq.w    #8,A7
                    4676   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002B4E  4878 0008 4677          pea       8
00002B52  4878 2828 4678          pea       _PrivError.L
00002B56  4E92      4679          jsr       (A2)
00002B58  504F      4680          addq.w    #8,A7
                    4681   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002B5A  4878 000F 4682          pea       15
00002B5E  4878 2836 4683          pea       _UnitIRQ.L
00002B62  4E92      4684          jsr       (A2)
00002B64  504F      4685          addq.w    #8,A7
                    4686   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002B66  4878 0018 4687          pea       24
00002B6A  4878 280C 4688          pea       _Check.L
00002B6E  4E92      4689          jsr       (A2)
00002B70  504F      4690          addq.w    #8,A7
                    4691   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002B72  4EB8 0BA6 4692          jsr       _FlushKeyboard
                    4693   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002B76  4239 0040 4694          clr.b     4194314
00002B7A  000A      
                    4695   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4696   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4697   main_7:
00002B7C  1039 0040 4698          move.b    4194306,D0
00002B80  0002      
00002B82  C03C 0002 4699          and.b     #2,D0
00002B86  0C00 0002 4700          cmp.b     #2,D0
00002B8A  662A      4701          bne.s     main_9
                    4702   ; LoadFromFlashChip();
00002B8C  4EB8 12DA 4703          jsr       _LoadFromFlashChip
                    4704   ; printf("\r\nRunning.....") ;
00002B90  4879 0000 4705          pea       @m68kde~1_152.L
00002B94  702A      
00002B96  4E93      4706          jsr       (A3)
00002B98  584F      4707          addq.w    #4,A7
                    4708   ; Oline1("Running.....") ;
00002B9A  4879 0000 4709          pea       @m68kde~1_153.L
00002B9E  703A      
00002BA0  4EB8 0A02 4710          jsr       _Oline1
00002BA4  584F      4711          addq.w    #4,A7
                    4712   ; GoFlag = 1;
00002BA6  23FC 0000 4713          move.l    #1,_GoFlag.L
00002BAA  0001 0803 
00002BAE  00DC      
                    4714   ; go() ;
00002BB0  4EB8 08B8 4715          jsr       _go
00002BB4  60C6      4716          bra       main_7
                    4717   main_9:
                    4718   ; }
                    4719   ; // otherwise start the debug monitor
                    4720   ; Oline0(BugMessage) ;
00002BB6  2F03      4721          move.l    D3,-(A7)
00002BB8  4EB8 09D4 4722          jsr       _Oline0
00002BBC  584F      4723          addq.w    #4,A7
                    4724   ; Oline1("By: PJ Davies") ;
00002BBE  4879 0000 4725          pea       @m68kde~1_154.L
00002BC2  7048      
00002BC4  4EB8 0A02 4726          jsr       _Oline1
00002BC8  584F      4727          addq.w    #4,A7
                    4728   ; printf("\r\n%s", BugMessage) ;
00002BCA  2F03      4729          move.l    D3,-(A7)
00002BCC  4879 0000 4730          pea       @m68kde~1_155.L
00002BD0  7056      
00002BD2  4E93      4731          jsr       (A3)
00002BD4  504F      4732          addq.w    #8,A7
                    4733   ; printf("\r\n%s", CopyrightMessage) ;
00002BD6  2F2E FFFC 4734          move.l    -4(A6),-(A7)
00002BDA  4879 0000 4735          pea       @m68kde~1_155.L
00002BDE  7056      
00002BE0  4E93      4736          jsr       (A3)
00002BE2  504F      4737          addq.w    #8,A7
                    4738   ; menu();
00002BE4  4EB8 24A0 4739          jsr       _menu
00002BE8  4CDF 0C0C 4740          movem.l   (A7)+,D2/D3/A2/A3
00002BEC  4E5E      4741          unlk      A6
00002BEE  4E75      4742          rts
                    4743   ; }
                    4744   ; void FormatInstruction(void)    // for disassembly
                    4745   ; {
                    4746   _FormatInstruction:
00002BF0  4E56 FEC0 4747          link      A6,#-320
00002BF4  48E7 3C20 4748          movem.l   D2/D3/D4/D5/A2,-(A7)
00002BF8  45EE FEC0 4749          lea       -320(A6),A2
                    4750   ; short i, ilen = 0 ;
00002BFC  4245      4751          clr.w     D5
                    4752   ; char *iptr = Instruction ;
00002BFE  41F9 0803 4753          lea       _Instruction.L,A0
00002C02  04E2      
00002C04  2608      4754          move.l    A0,D3
                    4755   ; char *Formatted[80], *fptr ;
                    4756   ; fptr = Formatted ;
00002C06  280A      4757          move.l    A2,D4
                    4758   ; for(i = 0; i < (short)(80); i ++)
00002C08  4242      4759          clr.w     D2
                    4760   FormatInstruction_1:
00002C0A  0C42 0050 4761          cmp.w     #80,D2
00002C0E  6C0E      4762          bge.s     FormatInstruction_3
                    4763   ; Formatted[i] = (char)(0);          // set formatted string to null
00002C10  48C2      4764          ext.l     D2
00002C12  2002      4765          move.l    D2,D0
00002C14  E588      4766          lsl.l     #2,D0
00002C16  42B2 0800 4767          clr.l     0(A2,D0.L)
00002C1A  5242      4768          addq.w    #1,D2
00002C1C  60EC      4769          bra       FormatInstruction_1
                    4770   FormatInstruction_3:
                    4771   ; while((*iptr != ' '))   {   // while ot a space char
                    4772   FormatInstruction_4:
00002C1E  2043      4773          move.l    D3,A0
00002C20  1010      4774          move.b    (A0),D0
00002C22  0C00 0020 4775          cmp.b     #32,D0
00002C26  6718      4776          beq.s     FormatInstruction_6
                    4777   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002C28  2043      4778          move.l    D3,A0
00002C2A  5283      4779          addq.l    #1,D3
00002C2C  2244      4780          move.l    D4,A1
00002C2E  5284      4781          addq.l    #1,D4
00002C30  1290      4782          move.b    (A0),(A1)
                    4783   ; ilen ++ ;               // count length of string as we go
00002C32  5245      4784          addq.w    #1,D5
                    4785   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002C34  2043      4786          move.l    D3,A0
00002C36  1010      4787          move.b    (A0),D0
00002C38  6604      4788          bne.s     FormatInstruction_7
                    4789   ; return ;
00002C3A  6000 003E 4790          bra       FormatInstruction_9
                    4791   FormatInstruction_7:
00002C3E  60DE      4792          bra       FormatInstruction_4
                    4793   FormatInstruction_6:
                    4794   ; }
                    4795   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4796   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002C40  4242      4797          clr.w     D2
                    4798   FormatInstruction_10:
00002C42  7008      4799          moveq     #8,D0
00002C44  4880      4800          ext.w     D0
00002C46  9045      4801          sub.w     D5,D0
00002C48  B440      4802          cmp.w     D0,D2
00002C4A  6C0C      4803          bge.s     FormatInstruction_12
                    4804   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002C4C  2044      4805          move.l    D4,A0
00002C4E  5284      4806          addq.l    #1,D4
00002C50  10BC 0020 4807          move.b    #32,(A0)
00002C54  5242      4808          addq.w    #1,D2
00002C56  60EA      4809          bra       FormatInstruction_10
                    4810   FormatInstruction_12:
                    4811   ; // now skip over any spaces in original unformatted string before copying the rest
                    4812   ; while((*iptr == ' '))
                    4813   FormatInstruction_13:
00002C58  2043      4814          move.l    D3,A0
00002C5A  1010      4815          move.b    (A0),D0
00002C5C  0C00 0020 4816          cmp.b     #32,D0
00002C60  6604      4817          bne.s     FormatInstruction_15
                    4818   ; iptr++ ;
00002C62  5283      4819          addq.l    #1,D3
00002C64  60F2      4820          bra       FormatInstruction_13
                    4821   FormatInstruction_15:
                    4822   ; strcat(fptr,iptr) ;
00002C66  2F03      4823          move.l    D3,-(A7)
00002C68  2F04      4824          move.l    D4,-(A7)
00002C6A  4EB9 0000 4825          jsr       _strcat
00002C6E  556C      
00002C70  504F      4826          addq.w    #8,A7
                    4827   ; strcpyInstruction(Formatted) ;
00002C72  2F0A      4828          move.l    A2,-(A7)
00002C74  4EB8 0CE6 4829          jsr       _strcpyInstruction
00002C78  584F      4830          addq.w    #4,A7
                    4831   FormatInstruction_9:
00002C7A  4CDF 043C 4832          movem.l   (A7)+,D2/D3/D4/D5/A2
00002C7E  4E5E      4833          unlk      A6
00002C80  4E75      4834          rts
                    4835   ; }
                    4836   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4837   ; {
                    4838   _Decode2BitOperandSize:
00002C82  4E56 0000 4839          link      A6,#0
00002C86  48E7 3020 4840          movem.l   D2/D3/A2,-(A7)
00002C8A  362E 000A 4841          move.w    10(A6),D3
00002C8E  C6BC 0000 4842          and.l     #65535,D3
00002C92  FFFF      
00002C94  45F8 0CCC 4843          lea       _strcatInstruction.L,A2
                    4844   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    4845   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002C98  3003      4846          move.w    D3,D0
00002C9A  C07C 00C0 4847          and.w     #192,D0
00002C9E  EC48      4848          lsr.w     #6,D0
00002CA0  3600      4849          move.w    D0,D3
                    4850   ; if(OpCode == (unsigned short int)(0))   {
00002CA2  4A43      4851          tst.w     D3
00002CA4  660E      4852          bne.s     Decode2BitOperandSize_1
                    4853   ; strcatInstruction(".B ") ;
00002CA6  4879 0000 4854          pea       @m68kde~1_156.L
00002CAA  705C      
00002CAC  4E92      4855          jsr       (A2)
00002CAE  584F      4856          addq.w    #4,A7
                    4857   ; DataSize = 1 ;
00002CB0  7401      4858          moveq     #1,D2
00002CB2  6020      4859          bra.s     Decode2BitOperandSize_4
                    4860   Decode2BitOperandSize_1:
                    4861   ; }
                    4862   ; else if(OpCode == (unsigned short int)(1)) {
00002CB4  0C43 0001 4863          cmp.w     #1,D3
00002CB8  660E      4864          bne.s     Decode2BitOperandSize_3
                    4865   ; strcatInstruction(".W ") ;
00002CBA  4879 0000 4866          pea       @m68kde~1_157.L
00002CBE  7060      
00002CC0  4E92      4867          jsr       (A2)
00002CC2  584F      4868          addq.w    #4,A7
                    4869   ; DataSize = 1 ;
00002CC4  7401      4870          moveq     #1,D2
00002CC6  600C      4871          bra.s     Decode2BitOperandSize_4
                    4872   Decode2BitOperandSize_3:
                    4873   ; }
                    4874   ; else {
                    4875   ; strcatInstruction(".L ") ;
00002CC8  4879 0000 4876          pea       @m68kde~1_158.L
00002CCC  7064      
00002CCE  4E92      4877          jsr       (A2)
00002CD0  584F      4878          addq.w    #4,A7
                    4879   ; DataSize = 2 ;
00002CD2  7402      4880          moveq     #2,D2
                    4881   Decode2BitOperandSize_4:
                    4882   ; }
                    4883   ; return DataSize;
00002CD4  3002      4884          move.w    D2,D0
00002CD6  4CDF 040C 4885          movem.l   (A7)+,D2/D3/A2
00002CDA  4E5E      4886          unlk      A6
00002CDC  4E75      4887          rts
                    4888   ; }
                    4889   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    4890   ; {
                    4891   _Decode3BitDataRegister:
00002CDE  4E56 FFFC 4892          link      A6,#-4
00002CE2  2F0A      4893          move.l    A2,-(A7)
00002CE4  45EE FFFC 4894          lea       -4(A6),A2
                    4895   ; unsigned char RegNumber[3] ;
                    4896   ; RegNumber[0] = 'D' ;
00002CE8  14BC 0044 4897          move.b    #68,(A2)
                    4898   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002CEC  7030      4899          moveq     #48,D0
00002CEE  322E 000A 4900          move.w    10(A6),D1
00002CF2  C27C 0E00 4901          and.w     #3584,D1
00002CF6  E049      4902          lsr.w     #8,D1
00002CF8  E249      4903          lsr.w     #1,D1
00002CFA  D001      4904          add.b     D1,D0
00002CFC  1540 0001 4905          move.b    D0,1(A2)
                    4906   ; RegNumber[2] = 0 ;
00002D00  422A 0002 4907          clr.b     2(A2)
                    4908   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002D04  2F0A      4909          move.l    A2,-(A7)
00002D06  4EB8 0CCC 4910          jsr       _strcatInstruction
00002D0A  584F      4911          addq.w    #4,A7
00002D0C  245F      4912          move.l    (A7)+,A2
00002D0E  4E5E      4913          unlk      A6
00002D10  4E75      4914          rts
                    4915   ; }
                    4916   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    4917   ; {
                    4918   _Decode3BitAddressRegister:
00002D12  4E56 FFFC 4919          link      A6,#-4
00002D16  2F0A      4920          move.l    A2,-(A7)
00002D18  45EE FFFC 4921          lea       -4(A6),A2
                    4922   ; unsigned char RegNumber[3];
                    4923   ; RegNumber[0] = 'A' ;
00002D1C  14BC 0041 4924          move.b    #65,(A2)
                    4925   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002D20  7030      4926          moveq     #48,D0
00002D22  322E 000A 4927          move.w    10(A6),D1
00002D26  D001      4928          add.b     D1,D0
00002D28  1540 0001 4929          move.b    D0,1(A2)
                    4930   ; RegNumber[2] = 0 ;
00002D2C  422A 0002 4931          clr.b     2(A2)
                    4932   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002D30  2F0A      4933          move.l    A2,-(A7)
00002D32  4EB8 0CCC 4934          jsr       _strcatInstruction
00002D36  584F      4935          addq.w    #4,A7
00002D38  245F      4936          move.l    (A7)+,A2
00002D3A  4E5E      4937          unlk      A6
00002D3C  4E75      4938          rts
                    4939   ; }
                    4940   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4941   ; // Special function is used to print 8,16, 32 bit operands after move #
                    4942   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4943   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    4944   ; {
                    4945   _DecodeBWLDataAfterOpCodeForMove:
00002D3E  4E56 0000 4946          link      A6,#0
00002D42  48E7 3030 4947          movem.l   D2/D3/A2/A3,-(A7)
00002D46  242E 0008 4948          move.l    8(A6),D2
00002D4A  45F9 0803 4949          lea       _TempString.L,A2
00002D4E  0546      
00002D50  47F9 0000 4950          lea       _sprintf.L,A3
00002D54  553A      
                    4951   ; unsigned char OperandSize ;
                    4952   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002D56  2042      4953          move.l    D2,A0
00002D58  3010      4954          move.w    (A0),D0
00002D5A  E048      4955          lsr.w     #8,D0
00002D5C  E848      4956          lsr.w     #4,D0
00002D5E  C07C 0003 4957          and.w     #3,D0
00002D62  1600      4958          move.b    D0,D3
                    4959   ; InstructionSize += 1;
00002D64  52B9 0803 4960          addq.l    #1,_InstructionSize.L
00002D68  017E      
                    4961   ; if(OperandSize == (char)(1))                // #byte value
00002D6A  0C03 0001 4962          cmp.b     #1,D3
00002D6E  6620      4963          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    4964   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002D70  2042      4965          move.l    D2,A0
00002D72  3228 0002 4966          move.w    2(A0),D1
00002D76  C2BC 0000 4967          and.l     #65535,D1
00002D7A  FFFF      
00002D7C  2F01      4968          move.l    D1,-(A7)
00002D7E  4879 0000 4969          pea       @m68kde~1_159.L
00002D82  7068      
00002D84  2F0A      4970          move.l    A2,-(A7)
00002D86  4E93      4971          jsr       (A3)
00002D88  DEFC 000C 4972          add.w     #12,A7
00002D8C  6000 0068 4973          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4974   DecodeBWLDataAfterOpCodeForMove_1:
                    4975   ; else if(OperandSize == (char)(3))          // #word value
00002D90  0C03 0003 4976          cmp.b     #3,D3
00002D94  6620      4977          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    4978   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002D96  2042      4979          move.l    D2,A0
00002D98  3228 0002 4980          move.w    2(A0),D1
00002D9C  C2BC 0000 4981          and.l     #65535,D1
00002DA0  FFFF      
00002DA2  2F01      4982          move.l    D1,-(A7)
00002DA4  4879 0000 4983          pea       @m68kde~1_159.L
00002DA8  7068      
00002DAA  2F0A      4984          move.l    A2,-(A7)
00002DAC  4E93      4985          jsr       (A3)
00002DAE  DEFC 000C 4986          add.w     #12,A7
00002DB2  6000 0042 4987          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4988   DecodeBWLDataAfterOpCodeForMove_3:
                    4989   ; else if(OperandSize == (char)(2)) {                                       // long value
00002DB6  0C03 0002 4990          cmp.b     #2,D3
00002DBA  6600 003A 4991          bne       DecodeBWLDataAfterOpCodeForMove_5
                    4992   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002DBE  2042      4993          move.l    D2,A0
00002DC0  3228 0002 4994          move.w    2(A0),D1
00002DC4  C2BC 0000 4995          and.l     #65535,D1
00002DC8  FFFF      
00002DCA  E189      4996          lsl.l     #8,D1
00002DCC  E189      4997          lsl.l     #8,D1
00002DCE  2042      4998          move.l    D2,A0
00002DD0  2F00      4999          move.l    D0,-(A7)
00002DD2  3028 0004 5000          move.w    4(A0),D0
00002DD6  C0BC 0000 5001          and.l     #65535,D0
00002DDA  FFFF      
00002DDC  8280      5002          or.l      D0,D1
00002DDE  201F      5003          move.l    (A7)+,D0
00002DE0  2F01      5004          move.l    D1,-(A7)
00002DE2  4879 0000 5005          pea       @m68kde~1_159.L
00002DE6  7068      
00002DE8  2F0A      5006          move.l    A2,-(A7)
00002DEA  4E93      5007          jsr       (A3)
00002DEC  DEFC 000C 5008          add.w     #12,A7
                    5009   ; InstructionSize += 1;
00002DF0  52B9 0803 5010          addq.l    #1,_InstructionSize.L
00002DF4  017E      
                    5011   DecodeBWLDataAfterOpCodeForMove_5:
                    5012   ; }
                    5013   ; strcatInstruction(TempString) ;
00002DF6  2F0A      5014          move.l    A2,-(A7)
00002DF8  4EB8 0CCC 5015          jsr       _strcatInstruction
00002DFC  584F      5016          addq.w    #4,A7
00002DFE  4CDF 0C0C 5017          movem.l   (A7)+,D2/D3/A2/A3
00002E02  4E5E      5018          unlk      A6
00002E04  4E75      5019          rts
                    5020   ; }
                    5021   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5022   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5023   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5024   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5025   ; {
                    5026   _DecodeBWLDataAfterOpCode:
00002E06  4E56 0000 5027          link      A6,#0
00002E0A  48E7 3038 5028          movem.l   D2/D3/A2/A3/A4,-(A7)
00002E0E  262E 0008 5029          move.l    8(A6),D3
00002E12  45F9 0803 5030          lea       _TempString.L,A2
00002E16  0546      
00002E18  47F9 0000 5031          lea       _sprintf.L,A3
00002E1C  553A      
00002E1E  49F9 0803 5032          lea       _InstructionSize.L,A4
00002E22  017E      
                    5033   ; unsigned char OperandSize ;
                    5034   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002E24  2043      5035          move.l    D3,A0
00002E26  3010      5036          move.w    (A0),D0
00002E28  C07C 01C0 5037          and.w     #448,D0
00002E2C  EC48      5038          lsr.w     #6,D0
00002E2E  1400      5039          move.b    D0,D2
                    5040   ; InstructionSize += 1;
00002E30  5294      5041          addq.l    #1,(A4)
                    5042   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002E32  4A02      5043          tst.b     D2
00002E34  6706      5044          beq.s     DecodeBWLDataAfterOpCode_3
00002E36  0C02 0004 5045          cmp.b     #4,D2
00002E3A  6620      5046          bne.s     DecodeBWLDataAfterOpCode_1
                    5047   DecodeBWLDataAfterOpCode_3:
                    5048   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E3C  2043      5049          move.l    D3,A0
00002E3E  3228 0002 5050          move.w    2(A0),D1
00002E42  C2BC 0000 5051          and.l     #65535,D1
00002E46  FFFF      
00002E48  2F01      5052          move.l    D1,-(A7)
00002E4A  4879 0000 5053          pea       @m68kde~1_159.L
00002E4E  7068      
00002E50  2F0A      5054          move.l    A2,-(A7)
00002E52  4E93      5055          jsr       (A3)
00002E54  DEFC 000C 5056          add.w     #12,A7
00002E58  6000 007C 5057          bra       DecodeBWLDataAfterOpCode_7
                    5058   DecodeBWLDataAfterOpCode_1:
                    5059   ; // #word value 7 is used by divs.w instruction (not divu)
                    5060   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5061   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5062   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002E5C  0C02 0001 5063          cmp.b     #1,D2
00002E60  670C      5064          beq.s     DecodeBWLDataAfterOpCode_6
00002E62  0C02 0005 5065          cmp.b     #5,D2
00002E66  6706      5066          beq.s     DecodeBWLDataAfterOpCode_6
00002E68  0C02 0003 5067          cmp.b     #3,D2
00002E6C  6620      5068          bne.s     DecodeBWLDataAfterOpCode_4
                    5069   DecodeBWLDataAfterOpCode_6:
                    5070   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E6E  2043      5071          move.l    D3,A0
00002E70  3228 0002 5072          move.w    2(A0),D1
00002E74  C2BC 0000 5073          and.l     #65535,D1
00002E78  FFFF      
00002E7A  2F01      5074          move.l    D1,-(A7)
00002E7C  4879 0000 5075          pea       @m68kde~1_159.L
00002E80  7068      
00002E82  2F0A      5076          move.l    A2,-(A7)
00002E84  4E93      5077          jsr       (A3)
00002E86  DEFC 000C 5078          add.w     #12,A7
00002E8A  6000 004A 5079          bra       DecodeBWLDataAfterOpCode_7
                    5080   DecodeBWLDataAfterOpCode_4:
                    5081   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00002E8E  0C02 0002 5082          cmp.b     #2,D2
00002E92  670E      5083          beq.s     DecodeBWLDataAfterOpCode_9
00002E94  0C02 0006 5084          cmp.b     #6,D2
00002E98  6708      5085          beq.s     DecodeBWLDataAfterOpCode_9
00002E9A  0C02 0007 5086          cmp.b     #7,D2
00002E9E  6600 0036 5087          bne       DecodeBWLDataAfterOpCode_7
                    5088   DecodeBWLDataAfterOpCode_9:
                    5089   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
00002EA2  2043      5090          move.l    D3,A0
00002EA4  3228 0002 5091          move.w    2(A0),D1
00002EA8  C2BC 0000 5092          and.l     #65535,D1
00002EAC  FFFF      
00002EAE  E189      5093          lsl.l     #8,D1
00002EB0  E189      5094          lsl.l     #8,D1
00002EB2  2043      5095          move.l    D3,A0
00002EB4  2F00      5096          move.l    D0,-(A7)
00002EB6  3028 0004 5097          move.w    4(A0),D0
00002EBA  C0BC 0000 5098          and.l     #65535,D0
00002EBE  FFFF      
00002EC0  8280      5099          or.l      D0,D1
00002EC2  201F      5100          move.l    (A7)+,D0
00002EC4  2F01      5101          move.l    D1,-(A7)
00002EC6  4879 0000 5102          pea       @m68kde~1_159.L
00002ECA  7068      
00002ECC  2F0A      5103          move.l    A2,-(A7)
00002ECE  4E93      5104          jsr       (A3)
00002ED0  DEFC 000C 5105          add.w     #12,A7
                    5106   ; InstructionSize += 1;
00002ED4  5294      5107          addq.l    #1,(A4)
                    5108   DecodeBWLDataAfterOpCode_7:
                    5109   ; }
                    5110   ; // special case for divs - bugger!!!
                    5111   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00002ED6  2043      5112          move.l    D3,A0
00002ED8  3010      5113          move.w    (A0),D0
00002EDA  C07C F1C0 5114          and.w     #61888,D0
00002EDE  0C40 81C0 5115          cmp.w     #33216,D0
00002EE2  6622      5116          bne.s     DecodeBWLDataAfterOpCode_10
                    5117   ; {
                    5118   ; InstructionSize = 2 ;
00002EE4  28BC 0000 5119          move.l    #2,(A4)
00002EE8  0002      
                    5120   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002EEA  2043      5121          move.l    D3,A0
00002EEC  3228 0002 5122          move.w    2(A0),D1
00002EF0  C2BC 0000 5123          and.l     #65535,D1
00002EF4  FFFF      
00002EF6  2F01      5124          move.l    D1,-(A7)
00002EF8  4879 0000 5125          pea       @m68kde~1_159.L
00002EFC  7068      
00002EFE  2F0A      5126          move.l    A2,-(A7)
00002F00  4E93      5127          jsr       (A3)
00002F02  DEFC 000C 5128          add.w     #12,A7
                    5129   DecodeBWLDataAfterOpCode_10:
                    5130   ; }
                    5131   ; strcatInstruction(TempString) ;
00002F06  2F0A      5132          move.l    A2,-(A7)
00002F08  4EB8 0CCC 5133          jsr       _strcatInstruction
00002F0C  584F      5134          addq.w    #4,A7
00002F0E  4CDF 1C0C 5135          movem.l   (A7)+,D2/D3/A2/A3/A4
00002F12  4E5E      5136          unlk      A6
00002F14  4E75      5137          rts
                    5138   ; }
                    5139   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5140   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5141   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5142   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5143   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5144   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5145   ; {
                    5146   _Decode6BitEA:
00002F16  4E56 FFF4 5147          link      A6,#-12
00002F1A  48E7 3F3C 5148          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002F1E  45F8 0CCC 5149          lea       _strcatInstruction.L,A2
00002F22  47F9 0803 5150          lea       _TempString.L,A3
00002F26  0546      
00002F28  282E 0008 5151          move.l    8(A6),D4
00002F2C  49F9 0000 5152          lea       _sprintf.L,A4
00002F30  553A      
00002F32  4BF9 0803 5153          lea       _InstructionSize.L,A5
00002F36  017E      
00002F38  3C2E 0012 5154          move.w    18(A6),D6
00002F3C  CCBC 0000 5155          and.l     #65535,D6
00002F40  FFFF      
                    5156   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5157   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5158   ; unsigned char RegNumber[3];
                    5159   ; signed char offset ;
                    5160   ; unsigned short int Xn, XnSize ;
                    5161   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00002F42  202E 000C 5162          move.l    12(A6),D0
00002F46  6620      5163          bne.s     Decode6BitEA_1
                    5164   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00002F48  2044      5165          move.l    D4,A0
00002F4A  3010      5166          move.w    (A0),D0
00002F4C  E648      5167          lsr.w     #3,D0
00002F4E  C07C 00FF 5168          and.w     #255,D0
00002F52  C07C 0007 5169          and.w     #7,D0
00002F56  1A00      5170          move.b    D0,D5
                    5171   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00002F58  2044      5172          move.l    D4,A0
00002F5A  3010      5173          move.w    (A0),D0
00002F5C  C07C 00FF 5174          and.w     #255,D0
00002F60  C07C 0007 5175          and.w     #7,D0
00002F64  1600      5176          move.b    D0,D3
00002F66  6022      5177          bra.s     Decode6BitEA_2
                    5178   Decode6BitEA_1:
                    5179   ; }
                    5180   ; else    {               // else EA in bits 11-6
                    5181   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00002F68  2044      5182          move.l    D4,A0
00002F6A  3010      5183          move.w    (A0),D0
00002F6C  EC48      5184          lsr.w     #6,D0
00002F6E  C07C 00FF 5185          and.w     #255,D0
00002F72  C07C 0007 5186          and.w     #7,D0
00002F76  1A00      5187          move.b    D0,D5
                    5188   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00002F78  2044      5189          move.l    D4,A0
00002F7A  3010      5190          move.w    (A0),D0
00002F7C  E048      5191          lsr.w     #8,D0
00002F7E  E248      5192          lsr.w     #1,D0
00002F80  C07C 00FF 5193          and.w     #255,D0
00002F84  C07C 0007 5194          and.w     #7,D0
00002F88  1600      5195          move.b    D0,D3
                    5196   Decode6BitEA_2:
                    5197   ; }
                    5198   ; if(EAChoice == 0)    {
00002F8A  202E 000C 5199          move.l    12(A6),D0
00002F8E  6600 0034 5200          bne       Decode6BitEA_3
                    5201   ; ExWord1 = OpCode[1+DataSize] ;
00002F92  2044      5202          move.l    D4,A0
00002F94  7001      5203          moveq     #1,D0
00002F96  4880      5204          ext.w     D0
00002F98  48C0      5205          ext.l     D0
00002F9A  CCBC 0000 5206          and.l     #65535,D6
00002F9E  FFFF      
00002FA0  D086      5207          add.l     D6,D0
00002FA2  E388      5208          lsl.l     #1,D0
00002FA4  3430 0800 5209          move.w    0(A0,D0.L),D2
                    5210   ; ExWord2 = OpCode[2+DataSize] ;
00002FA8  2044      5211          move.l    D4,A0
00002FAA  7002      5212          moveq     #2,D0
00002FAC  4880      5213          ext.w     D0
00002FAE  48C0      5214          ext.l     D0
00002FB0  CCBC 0000 5215          and.l     #65535,D6
00002FB4  FFFF      
00002FB6  D086      5216          add.l     D6,D0
00002FB8  E388      5217          lsl.l     #1,D0
00002FBA  3D70 0800 5218          move.w    0(A0,D0.L),-8(A6)
00002FBE  FFF8      
00002FC0  6000 007E 5219          bra       Decode6BitEA_7
                    5220   Decode6BitEA_3:
                    5221   ; }
                    5222   ; else if(EAChoice == 1)   {
00002FC4  202E 000C 5223          move.l    12(A6),D0
00002FC8  0C80 0000 5224          cmp.l     #1,D0
00002FCC  0001      
00002FCE  6600 0034 5225          bne       Decode6BitEA_5
                    5226   ; ExWord1 = OpCode[3+DataSize] ;
00002FD2  2044      5227          move.l    D4,A0
00002FD4  7003      5228          moveq     #3,D0
00002FD6  4880      5229          ext.w     D0
00002FD8  48C0      5230          ext.l     D0
00002FDA  CCBC 0000 5231          and.l     #65535,D6
00002FDE  FFFF      
00002FE0  D086      5232          add.l     D6,D0
00002FE2  E388      5233          lsl.l     #1,D0
00002FE4  3430 0800 5234          move.w    0(A0,D0.L),D2
                    5235   ; ExWord2 = OpCode[4+DataSize] ;
00002FE8  2044      5236          move.l    D4,A0
00002FEA  7004      5237          moveq     #4,D0
00002FEC  4880      5238          ext.w     D0
00002FEE  48C0      5239          ext.l     D0
00002FF0  CCBC 0000 5240          and.l     #65535,D6
00002FF4  FFFF      
00002FF6  D086      5241          add.l     D6,D0
00002FF8  E388      5242          lsl.l     #1,D0
00002FFA  3D70 0800 5243          move.w    0(A0,D0.L),-8(A6)
00002FFE  FFF8      
00003000  6000 003E 5244          bra       Decode6BitEA_7
                    5245   Decode6BitEA_5:
                    5246   ; }
                    5247   ; else if(EAChoice == 2)   {  // for move instruction
00003004  202E 000C 5248          move.l    12(A6),D0
00003008  0C80 0000 5249          cmp.l     #2,D0
0000300C  0002      
0000300E  6600 0030 5250          bne       Decode6BitEA_7
                    5251   ; ExWord1 = OpCode[1+DataSize] ;
00003012  2044      5252          move.l    D4,A0
00003014  7001      5253          moveq     #1,D0
00003016  4880      5254          ext.w     D0
00003018  48C0      5255          ext.l     D0
0000301A  CCBC 0000 5256          and.l     #65535,D6
0000301E  FFFF      
00003020  D086      5257          add.l     D6,D0
00003022  E388      5258          lsl.l     #1,D0
00003024  3430 0800 5259          move.w    0(A0,D0.L),D2
                    5260   ; ExWord2 = OpCode[2+DataSize] ;
00003028  2044      5261          move.l    D4,A0
0000302A  7002      5262          moveq     #2,D0
0000302C  4880      5263          ext.w     D0
0000302E  48C0      5264          ext.l     D0
00003030  CCBC 0000 5265          and.l     #65535,D6
00003034  FFFF      
00003036  D086      5266          add.l     D6,D0
00003038  E388      5267          lsl.l     #1,D0
0000303A  3D70 0800 5268          move.w    0(A0,D0.L),-8(A6)
0000303E  FFF8      
                    5269   Decode6BitEA_7:
                    5270   ; }
                    5271   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00003040  4A05      5272          tst.b     D5
00003042  661E      5273          bne.s     Decode6BitEA_9
                    5274   ; RegNumber[0] = 'D' ;
00003044  1D7C 0044 5275          move.b    #68,-6+0(A6)
00003048  FFFA      
                    5276   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
0000304A  7030      5277          moveq     #48,D0
0000304C  D003      5278          add.b     D3,D0
0000304E  1D40 FFFB 5279          move.b    D0,-6+1(A6)
                    5280   ; RegNumber[2] = 0 ;
00003052  422E FFFC 5281          clr.b     -6+2(A6)
                    5282   ; strcatInstruction(RegNumber) ;
00003056  486E FFFA 5283          pea       -6(A6)
0000305A  4E92      5284          jsr       (A2)
0000305C  584F      5285          addq.w    #4,A7
0000305E  6000 02D6 5286          bra       Decode6BitEA_44
                    5287   Decode6BitEA_9:
                    5288   ; }
                    5289   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003062  0C05 0001 5290          cmp.b     #1,D5
00003066  6616      5291          bne.s     Decode6BitEA_11
                    5292   ; Decode3BitAddressRegister(OperandRegister) ;
00003068  C67C 00FF 5293          and.w     #255,D3
0000306C  C6BC 0000 5294          and.l     #65535,D3
00003070  FFFF      
00003072  2F03      5295          move.l    D3,-(A7)
00003074  4EB8 2D12 5296          jsr       _Decode3BitAddressRegister
00003078  584F      5297          addq.w    #4,A7
0000307A  6000 02BA 5298          bra       Decode6BitEA_44
                    5299   Decode6BitEA_11:
                    5300   ; }
                    5301   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
0000307E  0C05 0002 5302          cmp.b     #2,D5
00003082  662A      5303          bne.s     Decode6BitEA_13
                    5304   ; strcatInstruction("(") ;
00003084  4879 0000 5305          pea       @m68kde~1_160.L
00003088  706E      
0000308A  4E92      5306          jsr       (A2)
0000308C  584F      5307          addq.w    #4,A7
                    5308   ; Decode3BitAddressRegister(OperandRegister) ;
0000308E  C67C 00FF 5309          and.w     #255,D3
00003092  C6BC 0000 5310          and.l     #65535,D3
00003096  FFFF      
00003098  2F03      5311          move.l    D3,-(A7)
0000309A  4EB8 2D12 5312          jsr       _Decode3BitAddressRegister
0000309E  584F      5313          addq.w    #4,A7
                    5314   ; strcatInstruction(")") ;
000030A0  4879 0000 5315          pea       @m68kde~1_161.L
000030A4  7070      
000030A6  4E92      5316          jsr       (A2)
000030A8  584F      5317          addq.w    #4,A7
000030AA  6000 028A 5318          bra       Decode6BitEA_44
                    5319   Decode6BitEA_13:
                    5320   ; }
                    5321   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000030AE  0C05 0003 5322          cmp.b     #3,D5
000030B2  662A      5323          bne.s     Decode6BitEA_15
                    5324   ; strcatInstruction("(") ;
000030B4  4879 0000 5325          pea       @m68kde~1_160.L
000030B8  706E      
000030BA  4E92      5326          jsr       (A2)
000030BC  584F      5327          addq.w    #4,A7
                    5328   ; Decode3BitAddressRegister(OperandRegister) ;
000030BE  C67C 00FF 5329          and.w     #255,D3
000030C2  C6BC 0000 5330          and.l     #65535,D3
000030C6  FFFF      
000030C8  2F03      5331          move.l    D3,-(A7)
000030CA  4EB8 2D12 5332          jsr       _Decode3BitAddressRegister
000030CE  584F      5333          addq.w    #4,A7
                    5334   ; strcatInstruction(")+") ;
000030D0  4879 0000 5335          pea       @m68kde~1_162.L
000030D4  7072      
000030D6  4E92      5336          jsr       (A2)
000030D8  584F      5337          addq.w    #4,A7
000030DA  6000 025A 5338          bra       Decode6BitEA_44
                    5339   Decode6BitEA_15:
                    5340   ; }
                    5341   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
000030DE  0C05 0004 5342          cmp.b     #4,D5
000030E2  662A      5343          bne.s     Decode6BitEA_17
                    5344   ; strcatInstruction("-(") ;
000030E4  4879 0000 5345          pea       @m68kde~1_163.L
000030E8  7076      
000030EA  4E92      5346          jsr       (A2)
000030EC  584F      5347          addq.w    #4,A7
                    5348   ; Decode3BitAddressRegister(OperandRegister) ;
000030EE  C67C 00FF 5349          and.w     #255,D3
000030F2  C6BC 0000 5350          and.l     #65535,D3
000030F6  FFFF      
000030F8  2F03      5351          move.l    D3,-(A7)
000030FA  4EB8 2D12 5352          jsr       _Decode3BitAddressRegister
000030FE  584F      5353          addq.w    #4,A7
                    5354   ; strcatInstruction(")") ;
00003100  4879 0000 5355          pea       @m68kde~1_161.L
00003104  7070      
00003106  4E92      5356          jsr       (A2)
00003108  584F      5357          addq.w    #4,A7
0000310A  6000 022A 5358          bra       Decode6BitEA_44
                    5359   Decode6BitEA_17:
                    5360   ; }
                    5361   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
0000310E  0C05 0005 5362          cmp.b     #5,D5
00003112  6626      5363          bne.s     Decode6BitEA_19
                    5364   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
00003114  C6BC 0000 5365          and.l     #255,D3
00003118  00FF      
0000311A  2F03      5366          move.l    D3,-(A7)
0000311C  48C2      5367          ext.l     D2
0000311E  2F02      5368          move.l    D2,-(A7)
00003120  4879 0000 5369          pea       @m68kde~1_164.L
00003124  707A      
00003126  2F0B      5370          move.l    A3,-(A7)
00003128  4E94      5371          jsr       (A4)
0000312A  DEFC 0010 5372          add.w     #16,A7
                    5373   ; strcatInstruction(TempString) ;
0000312E  2F0B      5374          move.l    A3,-(A7)
00003130  4E92      5375          jsr       (A2)
00003132  584F      5376          addq.w    #4,A7
                    5377   ; InstructionSize += 1;
00003134  5295      5378          addq.l    #1,(A5)
00003136  6000 01FE 5379          bra       Decode6BitEA_44
                    5380   Decode6BitEA_19:
                    5381   ; }
                    5382   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
0000313A  0C05 0006 5383          cmp.b     #6,D5
0000313E  6600 00AA 5384          bne       Decode6BitEA_21
                    5385   ; offset = ExWord1 & (short int)(0x00FF);
00003142  3002      5386          move.w    D2,D0
00003144  C07C 00FF 5387          and.w     #255,D0
00003148  1D40 FFFD 5388          move.b    D0,-3(A6)
                    5389   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
0000314C  C6BC 0000 5390          and.l     #255,D3
00003150  00FF      
00003152  2F03      5391          move.l    D3,-(A7)
00003154  122E FFFD 5392          move.b    -3(A6),D1
00003158  4881      5393          ext.w     D1
0000315A  48C1      5394          ext.l     D1
0000315C  2F01      5395          move.l    D1,-(A7)
0000315E  4879 0000 5396          pea       @m68kde~1_165.L
00003162  7082      
00003164  2F0B      5397          move.l    A3,-(A7)
00003166  4E94      5398          jsr       (A4)
00003168  DEFC 0010 5399          add.w     #16,A7
                    5400   ; strcatInstruction(TempString) ;
0000316C  2F0B      5401          move.l    A3,-(A7)
0000316E  4E92      5402          jsr       (A2)
00003170  584F      5403          addq.w    #4,A7
                    5404   ; InstructionSize += 1;
00003172  5295      5405          addq.l    #1,(A5)
                    5406   ; // decode the Xn bit
                    5407   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003174  3002      5408          move.w    D2,D0
00003176  C07C 8000 5409          and.w     #32768,D0
0000317A  660C      5410          bne.s     Decode6BitEA_23
                    5411   ; strcatInstruction("D") ;
0000317C  4879 0000 5412          pea       @m68kde~1_166.L
00003180  708A      
00003182  4E92      5413          jsr       (A2)
00003184  584F      5414          addq.w    #4,A7
00003186  600A      5415          bra.s     Decode6BitEA_24
                    5416   Decode6BitEA_23:
                    5417   ; else
                    5418   ; strcatInstruction("A") ;
00003188  4879 0000 5419          pea       @m68kde~1_167.L
0000318C  708C      
0000318E  4E92      5420          jsr       (A2)
00003190  584F      5421          addq.w    #4,A7
                    5422   Decode6BitEA_24:
                    5423   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003192  3002      5424          move.w    D2,D0
00003194  C07C 7000 5425          and.w     #28672,D0
00003198  E048      5426          lsr.w     #8,D0
0000319A  E848      5427          lsr.w     #4,D0
0000319C  3D40 FFFE 5428          move.w    D0,-2(A6)
                    5429   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000031A0  322E FFFE 5430          move.w    -2(A6),D1
000031A4  C2BC 0000 5431          and.l     #65535,D1
000031A8  FFFF      
000031AA  2F01      5432          move.l    D1,-(A7)
000031AC  4879 0000 5433          pea       @m68kde~1_168.L
000031B0  708E      
000031B2  2F0B      5434          move.l    A3,-(A7)
000031B4  4E94      5435          jsr       (A4)
000031B6  DEFC 000C 5436          add.w     #12,A7
                    5437   ; strcatInstruction(TempString) ;
000031BA  2F0B      5438          move.l    A3,-(A7)
000031BC  4E92      5439          jsr       (A2)
000031BE  584F      5440          addq.w    #4,A7
                    5441   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000031C0  3002      5442          move.w    D2,D0
000031C2  C07C 0800 5443          and.w     #2048,D0
000031C6  E048      5444          lsr.w     #8,D0
000031C8  E648      5445          lsr.w     #3,D0
000031CA  3E00      5446          move.w    D0,D7
                    5447   ; if(XnSize == 0)
000031CC  4A47      5448          tst.w     D7
000031CE  660C      5449          bne.s     Decode6BitEA_25
                    5450   ; strcatInstruction(".W)") ;
000031D0  4879 0000 5451          pea       @m68kde~1_169.L
000031D4  7092      
000031D6  4E92      5452          jsr       (A2)
000031D8  584F      5453          addq.w    #4,A7
000031DA  600A      5454          bra.s     Decode6BitEA_26
                    5455   Decode6BitEA_25:
                    5456   ; else
                    5457   ; strcatInstruction(".L)") ;
000031DC  4879 0000 5458          pea       @m68kde~1_170.L
000031E0  7096      
000031E2  4E92      5459          jsr       (A2)
000031E4  584F      5460          addq.w    #4,A7
                    5461   Decode6BitEA_26:
000031E6  6000 014E 5462          bra       Decode6BitEA_44
                    5463   Decode6BitEA_21:
                    5464   ; }
                    5465   ; else if(OperandMode == (unsigned char)(7)) {
000031EA  0C05 0007 5466          cmp.b     #7,D5
000031EE  6600 0146 5467          bne       Decode6BitEA_44
                    5468   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000031F2  4A03      5469          tst.b     D3
000031F4  661E      5470          bne.s     Decode6BitEA_29
                    5471   ; sprintf(TempString, "$%X", ExWord1) ;
000031F6  48C2      5472          ext.l     D2
000031F8  2F02      5473          move.l    D2,-(A7)
000031FA  4879 0000 5474          pea       @m68kde~1_171.L
000031FE  709A      
00003200  2F0B      5475          move.l    A3,-(A7)
00003202  4E94      5476          jsr       (A4)
00003204  DEFC 000C 5477          add.w     #12,A7
                    5478   ; strcatInstruction(TempString) ;
00003208  2F0B      5479          move.l    A3,-(A7)
0000320A  4E92      5480          jsr       (A2)
0000320C  584F      5481          addq.w    #4,A7
                    5482   ; InstructionSize += 1;
0000320E  5295      5483          addq.l    #1,(A5)
00003210  6000 0124 5484          bra       Decode6BitEA_44
                    5485   Decode6BitEA_29:
                    5486   ; }
                    5487   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
00003214  0C03 0001 5488          cmp.b     #1,D3
00003218  6600 0032 5489          bne       Decode6BitEA_31
                    5490   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
0000321C  3202      5491          move.w    D2,D1
0000321E  48C1      5492          ext.l     D1
00003220  E189      5493          lsl.l     #8,D1
00003222  E189      5494          lsl.l     #8,D1
00003224  2F00      5495          move.l    D0,-(A7)
00003226  302E FFF8 5496          move.w    -8(A6),D0
0000322A  48C0      5497          ext.l     D0
0000322C  8280      5498          or.l      D0,D1
0000322E  201F      5499          move.l    (A7)+,D0
00003230  2F01      5500          move.l    D1,-(A7)
00003232  4879 0000 5501          pea       @m68kde~1_171.L
00003236  709A      
00003238  2F0B      5502          move.l    A3,-(A7)
0000323A  4E94      5503          jsr       (A4)
0000323C  DEFC 000C 5504          add.w     #12,A7
                    5505   ; strcatInstruction(TempString) ;
00003240  2F0B      5506          move.l    A3,-(A7)
00003242  4E92      5507          jsr       (A2)
00003244  584F      5508          addq.w    #4,A7
                    5509   ; InstructionSize += 2;
00003246  5495      5510          addq.l    #2,(A5)
00003248  6000 00EC 5511          bra       Decode6BitEA_44
                    5512   Decode6BitEA_31:
                    5513   ; }
                    5514   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
0000324C  0C03 0004 5515          cmp.b     #4,D3
00003250  661C      5516          bne.s     Decode6BitEA_33
                    5517   ; if(IsItMoveInstruction == 0)        //not move instruction
00003252  302E 0016 5518          move.w    22(A6),D0
00003256  660A      5519          bne.s     Decode6BitEA_35
                    5520   ; DecodeBWLDataAfterOpCode(OpCode);
00003258  2F04      5521          move.l    D4,-(A7)
0000325A  4EB8 2E06 5522          jsr       _DecodeBWLDataAfterOpCode
0000325E  584F      5523          addq.w    #4,A7
00003260  6008      5524          bra.s     Decode6BitEA_36
                    5525   Decode6BitEA_35:
                    5526   ; else
                    5527   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003262  2F04      5528          move.l    D4,-(A7)
00003264  4EB8 2D3E 5529          jsr       _DecodeBWLDataAfterOpCodeForMove
00003268  584F      5530          addq.w    #4,A7
                    5531   Decode6BitEA_36:
0000326A  6000 00CA 5532          bra       Decode6BitEA_44
                    5533   Decode6BitEA_33:
                    5534   ; }
                    5535   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
0000326E  0C03 0002 5536          cmp.b     #2,D3
00003272  661E      5537          bne.s     Decode6BitEA_37
                    5538   ; sprintf(TempString, "%d(PC)", ExWord1) ;
00003274  48C2      5539          ext.l     D2
00003276  2F02      5540          move.l    D2,-(A7)
00003278  4879 0000 5541          pea       @m68kde~1_172.L
0000327C  709E      
0000327E  2F0B      5542          move.l    A3,-(A7)
00003280  4E94      5543          jsr       (A4)
00003282  DEFC 000C 5544          add.w     #12,A7
                    5545   ; strcatInstruction(TempString) ;
00003286  2F0B      5546          move.l    A3,-(A7)
00003288  4E92      5547          jsr       (A2)
0000328A  584F      5548          addq.w    #4,A7
                    5549   ; InstructionSize += 1;
0000328C  5295      5550          addq.l    #1,(A5)
0000328E  6000 00A6 5551          bra       Decode6BitEA_44
                    5552   Decode6BitEA_37:
                    5553   ; }
                    5554   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
00003292  0C03 0003 5555          cmp.b     #3,D3
00003296  6600 009E 5556          bne       Decode6BitEA_44
                    5557   ; offset = ExWord1 & (short int)(0x00FF);
0000329A  3002      5558          move.w    D2,D0
0000329C  C07C 00FF 5559          and.w     #255,D0
000032A0  1D40 FFFD 5560          move.b    D0,-3(A6)
                    5561   ; sprintf(TempString, "%d(PC,", offset ) ;
000032A4  122E FFFD 5562          move.b    -3(A6),D1
000032A8  4881      5563          ext.w     D1
000032AA  48C1      5564          ext.l     D1
000032AC  2F01      5565          move.l    D1,-(A7)
000032AE  4879 0000 5566          pea       @m68kde~1_173.L
000032B2  70A6      
000032B4  2F0B      5567          move.l    A3,-(A7)
000032B6  4E94      5568          jsr       (A4)
000032B8  DEFC 000C 5569          add.w     #12,A7
                    5570   ; strcatInstruction(TempString) ;
000032BC  2F0B      5571          move.l    A3,-(A7)
000032BE  4E92      5572          jsr       (A2)
000032C0  584F      5573          addq.w    #4,A7
                    5574   ; InstructionSize += 1;
000032C2  5295      5575          addq.l    #1,(A5)
                    5576   ; // decode the Xn bit
                    5577   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000032C4  3002      5578          move.w    D2,D0
000032C6  C07C 8000 5579          and.w     #32768,D0
000032CA  660C      5580          bne.s     Decode6BitEA_41
                    5581   ; strcatInstruction("D") ;
000032CC  4879 0000 5582          pea       @m68kde~1_166.L
000032D0  708A      
000032D2  4E92      5583          jsr       (A2)
000032D4  584F      5584          addq.w    #4,A7
000032D6  600A      5585          bra.s     Decode6BitEA_42
                    5586   Decode6BitEA_41:
                    5587   ; else
                    5588   ; strcatInstruction("A") ;
000032D8  4879 0000 5589          pea       @m68kde~1_167.L
000032DC  708C      
000032DE  4E92      5590          jsr       (A2)
000032E0  584F      5591          addq.w    #4,A7
                    5592   Decode6BitEA_42:
                    5593   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000032E2  3002      5594          move.w    D2,D0
000032E4  C07C 7000 5595          and.w     #28672,D0
000032E8  E048      5596          lsr.w     #8,D0
000032EA  E848      5597          lsr.w     #4,D0
000032EC  3D40 FFFE 5598          move.w    D0,-2(A6)
                    5599   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000032F0  322E FFFE 5600          move.w    -2(A6),D1
000032F4  C2BC 0000 5601          and.l     #65535,D1
000032F8  FFFF      
000032FA  2F01      5602          move.l    D1,-(A7)
000032FC  4879 0000 5603          pea       @m68kde~1_168.L
00003300  708E      
00003302  2F0B      5604          move.l    A3,-(A7)
00003304  4E94      5605          jsr       (A4)
00003306  DEFC 000C 5606          add.w     #12,A7
                    5607   ; strcatInstruction(TempString) ;
0000330A  2F0B      5608          move.l    A3,-(A7)
0000330C  4E92      5609          jsr       (A2)
0000330E  584F      5610          addq.w    #4,A7
                    5611   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003310  3002      5612          move.w    D2,D0
00003312  C07C 0800 5613          and.w     #2048,D0
00003316  E048      5614          lsr.w     #8,D0
00003318  E648      5615          lsr.w     #3,D0
0000331A  3E00      5616          move.w    D0,D7
                    5617   ; if(XnSize == 0)
0000331C  4A47      5618          tst.w     D7
0000331E  660C      5619          bne.s     Decode6BitEA_43
                    5620   ; strcatInstruction(".W)") ;
00003320  4879 0000 5621          pea       @m68kde~1_169.L
00003324  7092      
00003326  4E92      5622          jsr       (A2)
00003328  584F      5623          addq.w    #4,A7
0000332A  600A      5624          bra.s     Decode6BitEA_44
                    5625   Decode6BitEA_43:
                    5626   ; else
                    5627   ; strcatInstruction(".L)") ;
0000332C  4879 0000 5628          pea       @m68kde~1_170.L
00003330  7096      
00003332  4E92      5629          jsr       (A2)
00003334  584F      5630          addq.w    #4,A7
                    5631   Decode6BitEA_44:
00003336  4CDF 3CFC 5632          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000333A  4E5E      5633          unlk      A6
0000333C  4E75      5634          rts
                    5635   ; }
                    5636   ; }
                    5637   ; }
                    5638   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5639   ; {
                    5640   _Decode3BitOperandMode:
0000333E  4E56 FFFC 5641          link      A6,#-4
00003342  2F02      5642          move.l    D2,-(A7)
00003344  242E 0008 5643          move.l    8(A6),D2
                    5644   ; unsigned short int OperandMode;
                    5645   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003348  2042      5646          move.l    D2,A0
0000334A  3010      5647          move.w    (A0),D0
0000334C  C07C 0100 5648          and.w     #256,D0
00003350  E048      5649          lsr.w     #8,D0
00003352  3D40 FFFE 5650          move.w    D0,-2(A6)
                    5651   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003356  2042      5652          move.l    D2,A0
00003358  3210      5653          move.w    (A0),D1
0000335A  C2BC 0000 5654          and.l     #65535,D1
0000335E  FFFF      
00003360  2F01      5655          move.l    D1,-(A7)
00003362  4EB8 2C82 5656          jsr       _Decode2BitOperandSize
00003366  584F      5657          addq.w    #4,A7
                    5658   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003368  302E FFFE 5659          move.w    -2(A6),D0
0000336C  6600 0032 5660          bne       Decode3BitOperandMode_1
                    5661   ; Decode6BitEA(OpCode,0,0,0) ;
00003370  42A7      5662          clr.l     -(A7)
00003372  42A7      5663          clr.l     -(A7)
00003374  42A7      5664          clr.l     -(A7)
00003376  2F02      5665          move.l    D2,-(A7)
00003378  4EB8 2F16 5666          jsr       _Decode6BitEA
0000337C  DEFC 0010 5667          add.w     #16,A7
                    5668   ; strcatInstruction(",") ;
00003380  4879 0000 5669          pea       @m68kde~1_174.L
00003384  70AE      
00003386  4EB8 0CCC 5670          jsr       _strcatInstruction
0000338A  584F      5671          addq.w    #4,A7
                    5672   ; Decode3BitDataRegister(*OpCode) ;
0000338C  2042      5673          move.l    D2,A0
0000338E  3210      5674          move.w    (A0),D1
00003390  C2BC 0000 5675          and.l     #65535,D1
00003394  FFFF      
00003396  2F01      5676          move.l    D1,-(A7)
00003398  4EB8 2CDE 5677          jsr       _Decode3BitDataRegister
0000339C  584F      5678          addq.w    #4,A7
0000339E  602E      5679          bra.s     Decode3BitOperandMode_2
                    5680   Decode3BitOperandMode_1:
                    5681   ; }
                    5682   ; else {                                                         // Destination is in EA
                    5683   ; Decode3BitDataRegister(*OpCode) ;
000033A0  2042      5684          move.l    D2,A0
000033A2  3210      5685          move.w    (A0),D1
000033A4  C2BC 0000 5686          and.l     #65535,D1
000033A8  FFFF      
000033AA  2F01      5687          move.l    D1,-(A7)
000033AC  4EB8 2CDE 5688          jsr       _Decode3BitDataRegister
000033B0  584F      5689          addq.w    #4,A7
                    5690   ; strcatInstruction(",") ;
000033B2  4879 0000 5691          pea       @m68kde~1_174.L
000033B6  70AE      
000033B8  4EB8 0CCC 5692          jsr       _strcatInstruction
000033BC  584F      5693          addq.w    #4,A7
                    5694   ; Decode6BitEA(OpCode,0,0,0) ;
000033BE  42A7      5695          clr.l     -(A7)
000033C0  42A7      5696          clr.l     -(A7)
000033C2  42A7      5697          clr.l     -(A7)
000033C4  2F02      5698          move.l    D2,-(A7)
000033C6  4EB8 2F16 5699          jsr       _Decode6BitEA
000033CA  DEFC 0010 5700          add.w     #16,A7
                    5701   Decode3BitOperandMode_2:
000033CE  241F      5702          move.l    (A7)+,D2
000033D0  4E5E      5703          unlk      A6
000033D2  4E75      5704          rts
                    5705   ; }
                    5706   ; }
                    5707   ; void DecodeBranchCondition(unsigned short int Condition)
                    5708   ; {
                    5709   _DecodeBranchCondition:
000033D4  4E56 0000 5710          link      A6,#0
000033D8  48E7 2020 5711          movem.l   D2/A2,-(A7)
000033DC  45F8 0CCC 5712          lea       _strcatInstruction.L,A2
000033E0  342E 000A 5713          move.w    10(A6),D2
000033E4  C4BC 0000 5714          and.l     #65535,D2
000033E8  FFFF      
                    5715   ; if(Condition == (unsigned short int)(0x04))
000033EA  0C42 0004 5716          cmp.w     #4,D2
000033EE  660E      5717          bne.s     DecodeBranchCondition_1
                    5718   ; strcatInstruction("CC") ;
000033F0  4879 0000 5719          pea       @m68kde~1_175.L
000033F4  70B0      
000033F6  4E92      5720          jsr       (A2)
000033F8  584F      5721          addq.w    #4,A7
000033FA  6000 011C 5722          bra       DecodeBranchCondition_30
                    5723   DecodeBranchCondition_1:
                    5724   ; else if(Condition == (unsigned short int)(0x05))
000033FE  0C42 0005 5725          cmp.w     #5,D2
00003402  660E      5726          bne.s     DecodeBranchCondition_3
                    5727   ; strcatInstruction("CS") ;
00003404  4879 0000 5728          pea       @m68kde~1_176.L
00003408  70B4      
0000340A  4E92      5729          jsr       (A2)
0000340C  584F      5730          addq.w    #4,A7
0000340E  6000 0108 5731          bra       DecodeBranchCondition_30
                    5732   DecodeBranchCondition_3:
                    5733   ; else if(Condition == (unsigned short int)(0x07))
00003412  0C42 0007 5734          cmp.w     #7,D2
00003416  660E      5735          bne.s     DecodeBranchCondition_5
                    5736   ; strcatInstruction("EQ") ;
00003418  4879 0000 5737          pea       @m68kde~1_177.L
0000341C  70B8      
0000341E  4E92      5738          jsr       (A2)
00003420  584F      5739          addq.w    #4,A7
00003422  6000 00F4 5740          bra       DecodeBranchCondition_30
                    5741   DecodeBranchCondition_5:
                    5742   ; else if(Condition == (unsigned short int)(0x0C))
00003426  0C42 000C 5743          cmp.w     #12,D2
0000342A  660E      5744          bne.s     DecodeBranchCondition_7
                    5745   ; strcatInstruction("GE") ;
0000342C  4879 0000 5746          pea       @m68kde~1_178.L
00003430  70BC      
00003432  4E92      5747          jsr       (A2)
00003434  584F      5748          addq.w    #4,A7
00003436  6000 00E0 5749          bra       DecodeBranchCondition_30
                    5750   DecodeBranchCondition_7:
                    5751   ; else if(Condition == (unsigned short int)(0x0E))
0000343A  0C42 000E 5752          cmp.w     #14,D2
0000343E  660E      5753          bne.s     DecodeBranchCondition_9
                    5754   ; strcatInstruction("GT") ;
00003440  4879 0000 5755          pea       @m68kde~1_179.L
00003444  70C0      
00003446  4E92      5756          jsr       (A2)
00003448  584F      5757          addq.w    #4,A7
0000344A  6000 00CC 5758          bra       DecodeBranchCondition_30
                    5759   DecodeBranchCondition_9:
                    5760   ; else if(Condition == (unsigned short int)(0x02))
0000344E  0C42 0002 5761          cmp.w     #2,D2
00003452  660E      5762          bne.s     DecodeBranchCondition_11
                    5763   ; strcatInstruction("HI") ;
00003454  4879 0000 5764          pea       @m68kde~1_180.L
00003458  70C4      
0000345A  4E92      5765          jsr       (A2)
0000345C  584F      5766          addq.w    #4,A7
0000345E  6000 00B8 5767          bra       DecodeBranchCondition_30
                    5768   DecodeBranchCondition_11:
                    5769   ; else if(Condition == (unsigned short int)(0x0F))
00003462  0C42 000F 5770          cmp.w     #15,D2
00003466  660E      5771          bne.s     DecodeBranchCondition_13
                    5772   ; strcatInstruction("LE") ;
00003468  4879 0000 5773          pea       @m68kde~1_181.L
0000346C  70C8      
0000346E  4E92      5774          jsr       (A2)
00003470  584F      5775          addq.w    #4,A7
00003472  6000 00A4 5776          bra       DecodeBranchCondition_30
                    5777   DecodeBranchCondition_13:
                    5778   ; else if(Condition == (unsigned short int)(0x03))
00003476  0C42 0003 5779          cmp.w     #3,D2
0000347A  660E      5780          bne.s     DecodeBranchCondition_15
                    5781   ; strcatInstruction("LS") ;
0000347C  4879 0000 5782          pea       @m68kde~1_182.L
00003480  70CC      
00003482  4E92      5783          jsr       (A2)
00003484  584F      5784          addq.w    #4,A7
00003486  6000 0090 5785          bra       DecodeBranchCondition_30
                    5786   DecodeBranchCondition_15:
                    5787   ; else if(Condition == (unsigned short int)(0x0D))
0000348A  0C42 000D 5788          cmp.w     #13,D2
0000348E  660E      5789          bne.s     DecodeBranchCondition_17
                    5790   ; strcatInstruction("LT") ;
00003490  4879 0000 5791          pea       @m68kde~1_183.L
00003494  70D0      
00003496  4E92      5792          jsr       (A2)
00003498  584F      5793          addq.w    #4,A7
0000349A  6000 007C 5794          bra       DecodeBranchCondition_30
                    5795   DecodeBranchCondition_17:
                    5796   ; else if(Condition == (unsigned short int)(0x0B))
0000349E  0C42 000B 5797          cmp.w     #11,D2
000034A2  660E      5798          bne.s     DecodeBranchCondition_19
                    5799   ; strcatInstruction("MI") ;
000034A4  4879 0000 5800          pea       @m68kde~1_184.L
000034A8  70D4      
000034AA  4E92      5801          jsr       (A2)
000034AC  584F      5802          addq.w    #4,A7
000034AE  6000 0068 5803          bra       DecodeBranchCondition_30
                    5804   DecodeBranchCondition_19:
                    5805   ; else if(Condition == (unsigned short int)(0x06))
000034B2  0C42 0006 5806          cmp.w     #6,D2
000034B6  660E      5807          bne.s     DecodeBranchCondition_21
                    5808   ; strcatInstruction("NE") ;
000034B8  4879 0000 5809          pea       @m68kde~1_185.L
000034BC  70D8      
000034BE  4E92      5810          jsr       (A2)
000034C0  584F      5811          addq.w    #4,A7
000034C2  6000 0054 5812          bra       DecodeBranchCondition_30
                    5813   DecodeBranchCondition_21:
                    5814   ; else if(Condition == (unsigned short int)(0x0A))
000034C6  0C42 000A 5815          cmp.w     #10,D2
000034CA  660E      5816          bne.s     DecodeBranchCondition_23
                    5817   ; strcatInstruction("PL") ;
000034CC  4879 0000 5818          pea       @m68kde~1_186.L
000034D0  70DC      
000034D2  4E92      5819          jsr       (A2)
000034D4  584F      5820          addq.w    #4,A7
000034D6  6000 0040 5821          bra       DecodeBranchCondition_30
                    5822   DecodeBranchCondition_23:
                    5823   ; else if(Condition == (unsigned short int)(0x09))
000034DA  0C42 0009 5824          cmp.w     #9,D2
000034DE  660C      5825          bne.s     DecodeBranchCondition_25
                    5826   ; strcatInstruction("VS") ;
000034E0  4879 0000 5827          pea       @m68kde~1_187.L
000034E4  70E0      
000034E6  4E92      5828          jsr       (A2)
000034E8  584F      5829          addq.w    #4,A7
000034EA  602C      5830          bra.s     DecodeBranchCondition_30
                    5831   DecodeBranchCondition_25:
                    5832   ; else if(Condition == (unsigned short int)(0x08))
000034EC  0C42 0008 5833          cmp.w     #8,D2
000034F0  660C      5834          bne.s     DecodeBranchCondition_27
                    5835   ; strcatInstruction("VC") ;
000034F2  4879 0000 5836          pea       @m68kde~1_188.L
000034F6  70E4      
000034F8  4E92      5837          jsr       (A2)
000034FA  584F      5838          addq.w    #4,A7
000034FC  601A      5839          bra.s     DecodeBranchCondition_30
                    5840   DecodeBranchCondition_27:
                    5841   ; else if(Condition == (unsigned short int)(0))
000034FE  4A42      5842          tst.w     D2
00003500  660C      5843          bne.s     DecodeBranchCondition_29
                    5844   ; strcatInstruction("RA") ;
00003502  4879 0000 5845          pea       @m68kde~1_189.L
00003506  70E8      
00003508  4E92      5846          jsr       (A2)
0000350A  584F      5847          addq.w    #4,A7
0000350C  600A      5848          bra.s     DecodeBranchCondition_30
                    5849   DecodeBranchCondition_29:
                    5850   ; else
                    5851   ; strcatInstruction("SR");
0000350E  4879 0000 5852          pea       @m68kde~1_190.L
00003512  70EC      
00003514  4E92      5853          jsr       (A2)
00003516  584F      5854          addq.w    #4,A7
                    5855   DecodeBranchCondition_30:
                    5856   ; strcatInstruction(" ") ;
00003518  4879 0000 5857          pea       @m68kde~1_30.L
0000351C  61EC      
0000351E  4E92      5858          jsr       (A2)
00003520  584F      5859          addq.w    #4,A7
00003522  4CDF 0404 5860          movem.l   (A7)+,D2/A2
00003526  4E5E      5861          unlk      A6
00003528  4E75      5862          rts
                    5863   ; }
                    5864   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    5865   ; {
                    5866   _DisassembleInstruction:
0000352A  4E56 FFD8 5867          link      A6,#-40
0000352E  48E7 3F3C 5868          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003532  242E 0008 5869          move.l    8(A6),D2
00003536  45F9 0803 5870          lea       _InstructionSize.L,A2
0000353A  017E      
0000353C  47F8 0CE6 5871          lea       _strcpyInstruction.L,A3
00003540  49F9 0803 5872          lea       _TempString.L,A4
00003544  0546      
00003546  4BF9 0000 5873          lea       _sprintf.L,A5
0000354A  553A      
                    5874   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
0000354C  2042      5875          move.l    D2,A0
0000354E  3010      5876          move.w    (A0),D0
00003550  E040      5877          asr.w     #8,D0
00003552  E840      5878          asr.w     #4,D0
00003554  3D40 FFDA 5879          move.w    D0,-38(A6)
                    5880   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003558  2042      5881          move.l    D2,A0
0000355A  3010      5882          move.w    (A0),D0
0000355C  C07C 0FFF 5883          and.w     #4095,D0
00003560  3D40 FFDC 5884          move.w    D0,-36(A6)
                    5885   ; unsigned short int SourceBits, DestBits, Size ;
                    5886   ; unsigned char *Mode, Condition;
                    5887   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    5888   ; unsigned short int DataRegister, AddressRegister;
                    5889   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    5890   ; signed short int Displacement16Bit;
                    5891   ; short int Mask, DoneSlash;
                    5892   ; int i;
                    5893   ; strcpyInstruction("Unknown") ;
00003564  4879 0000 5894          pea       @m68kde~1_191.L
00003568  70F0      
0000356A  4E93      5895          jsr       (A3)
0000356C  584F      5896          addq.w    #4,A7
                    5897   ; /////////////////////////////////////////////////////////////////////////////////
                    5898   ; // if instruction is ABCD
                    5899   ; /////////////////////////////////////////////////////////////////////////////////
                    5900   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
0000356E  2042      5901          move.l    D2,A0
00003570  3010      5902          move.w    (A0),D0
00003572  C07C F1F0 5903          and.w     #61936,D0
00003576  0C40 C100 5904          cmp.w     #49408,D0
0000357A  6600 008C 5905          bne       DisassembleInstruction_4
                    5906   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000357E  2042      5907          move.l    D2,A0
00003580  3010      5908          move.w    (A0),D0
00003582  E040      5909          asr.w     #8,D0
00003584  E240      5910          asr.w     #1,D0
00003586  C07C 0007 5911          and.w     #7,D0
0000358A  3D40 FFE0 5912          move.w    D0,-32(A6)
                    5913   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000358E  2042      5914          move.l    D2,A0
00003590  3010      5915          move.w    (A0),D0
00003592  C07C 0007 5916          and.w     #7,D0
00003596  3D40 FFDE 5917          move.w    D0,-34(A6)
                    5918   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000359A  2042      5919          move.l    D2,A0
0000359C  3010      5920          move.w    (A0),D0
0000359E  E640      5921          asr.w     #3,D0
000035A0  48C0      5922          ext.l     D0
000035A2  C0BC 0000 5923          and.l     #1,D0
000035A6  0001      
000035A8  2D40 FFE4 5924          move.l    D0,-28(A6)
                    5925   ; if(Mode == 0)
000035AC  202E FFE4 5926          move.l    -28(A6),D0
000035B0  662C      5927          bne.s     DisassembleInstruction_3
                    5928   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
000035B2  322E FFE0 5929          move.w    -32(A6),D1
000035B6  C2BC 0000 5930          and.l     #65535,D1
000035BA  FFFF      
000035BC  2F01      5931          move.l    D1,-(A7)
000035BE  322E FFDE 5932          move.w    -34(A6),D1
000035C2  C2BC 0000 5933          and.l     #65535,D1
000035C6  FFFF      
000035C8  2F01      5934          move.l    D1,-(A7)
000035CA  4879 0000 5935          pea       @m68kde~1_192.L
000035CE  70F8      
000035D0  4879 0803 5936          pea       _Instruction.L
000035D4  04E2      
000035D6  4E95      5937          jsr       (A5)
000035D8  DEFC 0010 5938          add.w     #16,A7
000035DC  602A      5939          bra.s     DisassembleInstruction_4
                    5940   DisassembleInstruction_3:
                    5941   ; else
                    5942   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000035DE  322E FFE0 5943          move.w    -32(A6),D1
000035E2  C2BC 0000 5944          and.l     #65535,D1
000035E6  FFFF      
000035E8  2F01      5945          move.l    D1,-(A7)
000035EA  322E FFDE 5946          move.w    -34(A6),D1
000035EE  C2BC 0000 5947          and.l     #65535,D1
000035F2  FFFF      
000035F4  2F01      5948          move.l    D1,-(A7)
000035F6  4879 0000 5949          pea       @m68kde~1_193.L
000035FA  7106      
000035FC  4879 0803 5950          pea       _Instruction.L
00003600  04E2      
00003602  4E95      5951          jsr       (A5)
00003604  DEFC 0010 5952          add.w     #16,A7
                    5953   DisassembleInstruction_4:
                    5954   ; }
                    5955   ; /////////////////////////////////////////////////////////////////////////////////
                    5956   ; // if instruction is ADD or ADDA
                    5957   ; /////////////////////////////////////////////////////////////////////////////////
                    5958   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003608  2042      5959          move.l    D2,A0
0000360A  3010      5960          move.w    (A0),D0
0000360C  C07C F000 5961          and.w     #61440,D0
00003610  0C40 D000 5962          cmp.w     #53248,D0
00003614  6600 008C 5963          bne       DisassembleInstruction_8
                    5964   ; InstructionSize = 1;
00003618  24BC 0000 5965          move.l    #1,(A2)
0000361C  0001      
                    5966   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
0000361E  2042      5967          move.l    D2,A0
00003620  3010      5968          move.w    (A0),D0
00003622  EC40      5969          asr.w     #6,D0
00003624  C07C 0007 5970          and.w     #7,D0
00003628  3600      5971          move.w    D0,D3
                    5972   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
0000362A  0C43 0003 5973          cmp.w     #3,D3
0000362E  6708      5974          beq.s     DisassembleInstruction_9
00003630  0C43 0007 5975          cmp.w     #7,D3
00003634  6600 005A 5976          bne       DisassembleInstruction_7
                    5977   DisassembleInstruction_9:
                    5978   ; {
                    5979   ; if(OpMode == (unsigned short int)(0x0003))
00003638  0C43 0003 5980          cmp.w     #3,D3
0000363C  660C      5981          bne.s     DisassembleInstruction_10
                    5982   ; strcpyInstruction("ADDA.W ") ;
0000363E  4879 0000 5983          pea       @m68kde~1_194.L
00003642  711A      
00003644  4E93      5984          jsr       (A3)
00003646  584F      5985          addq.w    #4,A7
00003648  600A      5986          bra.s     DisassembleInstruction_11
                    5987   DisassembleInstruction_10:
                    5988   ; else
                    5989   ; strcpyInstruction("ADDA.L ") ;
0000364A  4879 0000 5990          pea       @m68kde~1_195.L
0000364E  7122      
00003650  4E93      5991          jsr       (A3)
00003652  584F      5992          addq.w    #4,A7
                    5993   DisassembleInstruction_11:
                    5994   ; Decode6BitEA(OpCode,0,0,0)  ;
00003654  42A7      5995          clr.l     -(A7)
00003656  42A7      5996          clr.l     -(A7)
00003658  42A7      5997          clr.l     -(A7)
0000365A  2F02      5998          move.l    D2,-(A7)
0000365C  4EB8 2F16 5999          jsr       _Decode6BitEA
00003660  DEFC 0010 6000          add.w     #16,A7
                    6001   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003664  2042      6002          move.l    D2,A0
00003666  3210      6003          move.w    (A0),D1
00003668  E041      6004          asr.w     #8,D1
0000366A  E241      6005          asr.w     #1,D1
0000366C  C27C 0007 6006          and.w     #7,D1
00003670  C2BC 0000 6007          and.l     #65535,D1
00003674  FFFF      
00003676  2F01      6008          move.l    D1,-(A7)
00003678  4879 0000 6009          pea       @m68kde~1_196.L
0000367C  712A      
0000367E  2F0C      6010          move.l    A4,-(A7)
00003680  4E95      6011          jsr       (A5)
00003682  DEFC 000C 6012          add.w     #12,A7
                    6013   ; strcatInstruction(TempString) ;
00003686  2F0C      6014          move.l    A4,-(A7)
00003688  4EB8 0CCC 6015          jsr       _strcatInstruction
0000368C  584F      6016          addq.w    #4,A7
0000368E  6012      6017          bra.s     DisassembleInstruction_8
                    6018   DisassembleInstruction_7:
                    6019   ; }
                    6020   ; else {
                    6021   ; strcpyInstruction("ADD") ;
00003690  4879 0000 6022          pea       @m68kde~1_197.L
00003694  7130      
00003696  4E93      6023          jsr       (A3)
00003698  584F      6024          addq.w    #4,A7
                    6025   ; Decode3BitOperandMode(OpCode) ;
0000369A  2F02      6026          move.l    D2,-(A7)
0000369C  4EB8 333E 6027          jsr       _Decode3BitOperandMode
000036A0  584F      6028          addq.w    #4,A7
                    6029   DisassembleInstruction_8:
                    6030   ; }
                    6031   ; }
                    6032   ; /////////////////////////////////////////////////////////////////////////////////
                    6033   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6034   ; /////////////////////////////////////////////////////////////////////////////////
                    6035   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
000036A2  2042      6036          move.l    D2,A0
000036A4  3010      6037          move.w    (A0),D0
000036A6  C07C FF00 6038          and.w     #65280,D0
000036AA  0C40 0600 6039          cmp.w     #1536,D0
000036AE  6604      6040          bne.s     DisassembleInstruction_14
000036B0  7001      6041          moveq     #1,D0
000036B2  6002      6042          bra.s     DisassembleInstruction_15
                    6043   DisassembleInstruction_14:
000036B4  4280      6044          clr.l     D0
                    6045   DisassembleInstruction_15:
000036B6  2042      6046          move.l    D2,A0
000036B8  3210      6047          move.w    (A0),D1
000036BA  C27C FF00 6048          and.w     #65280,D1
000036BE  0C41 0200 6049          cmp.w     #512,D1
000036C2  6604      6050          bne.s     DisassembleInstruction_16
000036C4  7201      6051          moveq     #1,D1
000036C6  6002      6052          bra.s     DisassembleInstruction_17
                    6053   DisassembleInstruction_16:
000036C8  4281      6054          clr.l     D1
                    6055   DisassembleInstruction_17:
000036CA  8041      6056          or.w      D1,D0
000036CC  2042      6057          move.l    D2,A0
000036CE  3210      6058          move.w    (A0),D1
000036D0  C27C FF00 6059          and.w     #65280,D1
000036D4  0C41 0C00 6060          cmp.w     #3072,D1
000036D8  6604      6061          bne.s     DisassembleInstruction_18
000036DA  7201      6062          moveq     #1,D1
000036DC  6002      6063          bra.s     DisassembleInstruction_19
                    6064   DisassembleInstruction_18:
000036DE  4281      6065          clr.l     D1
                    6066   DisassembleInstruction_19:
000036E0  8041      6067          or.w      D1,D0
000036E2  2042      6068          move.l    D2,A0
000036E4  3210      6069          move.w    (A0),D1
000036E6  C27C FF00 6070          and.w     #65280,D1
000036EA  0C41 0A00 6071          cmp.w     #2560,D1
000036EE  6604      6072          bne.s     DisassembleInstruction_20
000036F0  7201      6073          moveq     #1,D1
000036F2  6002      6074          bra.s     DisassembleInstruction_21
                    6075   DisassembleInstruction_20:
000036F4  4281      6076          clr.l     D1
                    6077   DisassembleInstruction_21:
000036F6  8041      6078          or.w      D1,D0
000036F8  2042      6079          move.l    D2,A0
000036FA  3210      6080          move.w    (A0),D1
000036FC  C27C FF00 6081          and.w     #65280,D1
00003700  6604      6082          bne.s     DisassembleInstruction_22
00003702  7201      6083          moveq     #1,D1
00003704  6002      6084          bra.s     DisassembleInstruction_23
                    6085   DisassembleInstruction_22:
00003706  4281      6086          clr.l     D1
                    6087   DisassembleInstruction_23:
00003708  8041      6088          or.w      D1,D0
0000370A  2042      6089          move.l    D2,A0
0000370C  3210      6090          move.w    (A0),D1
0000370E  C27C FF00 6091          and.w     #65280,D1
00003712  0C41 0400 6092          cmp.w     #1024,D1
00003716  6604      6093          bne.s     DisassembleInstruction_24
00003718  7201      6094          moveq     #1,D1
0000371A  6002      6095          bra.s     DisassembleInstruction_25
                    6096   DisassembleInstruction_24:
0000371C  4281      6097          clr.l     D1
                    6098   DisassembleInstruction_25:
0000371E  8041      6099          or.w      D1,D0
00003720  6700 00E4 6100          beq       DisassembleInstruction_12
                    6101   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6102   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6103   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6104   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6105   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6106   ; {
                    6107   ; InstructionSize = 1;
00003724  24BC 0000 6108          move.l    #1,(A2)
00003728  0001      
                    6109   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
0000372A  2042      6110          move.l    D2,A0
0000372C  3010      6111          move.w    (A0),D0
0000372E  C07C FF00 6112          and.w     #65280,D0
00003732  0C40 0600 6113          cmp.w     #1536,D0
00003736  660E      6114          bne.s     DisassembleInstruction_26
                    6115   ; strcpyInstruction("ADDI") ;
00003738  4879 0000 6116          pea       @m68kde~1_198.L
0000373C  7134      
0000373E  4E93      6117          jsr       (A3)
00003740  584F      6118          addq.w    #4,A7
00003742  6000 0084 6119          bra       DisassembleInstruction_36
                    6120   DisassembleInstruction_26:
                    6121   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003746  2042      6122          move.l    D2,A0
00003748  3010      6123          move.w    (A0),D0
0000374A  C07C FF00 6124          and.w     #65280,D0
0000374E  0C40 0200 6125          cmp.w     #512,D0
00003752  660E      6126          bne.s     DisassembleInstruction_28
                    6127   ; strcpyInstruction("ANDI") ;
00003754  4879 0000 6128          pea       @m68kde~1_199.L
00003758  713A      
0000375A  4E93      6129          jsr       (A3)
0000375C  584F      6130          addq.w    #4,A7
0000375E  6000 0068 6131          bra       DisassembleInstruction_36
                    6132   DisassembleInstruction_28:
                    6133   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003762  2042      6134          move.l    D2,A0
00003764  3010      6135          move.w    (A0),D0
00003766  C07C FF00 6136          and.w     #65280,D0
0000376A  0C40 0C00 6137          cmp.w     #3072,D0
0000376E  660E      6138          bne.s     DisassembleInstruction_30
                    6139   ; strcpyInstruction("CMPI") ;
00003770  4879 0000 6140          pea       @m68kde~1_200.L
00003774  7140      
00003776  4E93      6141          jsr       (A3)
00003778  584F      6142          addq.w    #4,A7
0000377A  6000 004C 6143          bra       DisassembleInstruction_36
                    6144   DisassembleInstruction_30:
                    6145   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
0000377E  2042      6146          move.l    D2,A0
00003780  3010      6147          move.w    (A0),D0
00003782  C07C FF00 6148          and.w     #65280,D0
00003786  0C40 0A00 6149          cmp.w     #2560,D0
0000378A  660E      6150          bne.s     DisassembleInstruction_32
                    6151   ; strcpyInstruction("EORI") ;
0000378C  4879 0000 6152          pea       @m68kde~1_201.L
00003790  7146      
00003792  4E93      6153          jsr       (A3)
00003794  584F      6154          addq.w    #4,A7
00003796  6000 0030 6155          bra       DisassembleInstruction_36
                    6156   DisassembleInstruction_32:
                    6157   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
0000379A  2042      6158          move.l    D2,A0
0000379C  3010      6159          move.w    (A0),D0
0000379E  C07C FF00 6160          and.w     #65280,D0
000037A2  660C      6161          bne.s     DisassembleInstruction_34
                    6162   ; strcpyInstruction("ORI") ;
000037A4  4879 0000 6163          pea       @m68kde~1_202.L
000037A8  714C      
000037AA  4E93      6164          jsr       (A3)
000037AC  584F      6165          addq.w    #4,A7
000037AE  6018      6166          bra.s     DisassembleInstruction_36
                    6167   DisassembleInstruction_34:
                    6168   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
000037B0  2042      6169          move.l    D2,A0
000037B2  3010      6170          move.w    (A0),D0
000037B4  C07C FF00 6171          and.w     #65280,D0
000037B8  0C40 0400 6172          cmp.w     #1024,D0
000037BC  660A      6173          bne.s     DisassembleInstruction_36
                    6174   ; strcpyInstruction("SUBI") ;
000037BE  4879 0000 6175          pea       @m68kde~1_203.L
000037C2  7150      
000037C4  4E93      6176          jsr       (A3)
000037C6  584F      6177          addq.w    #4,A7
                    6178   DisassembleInstruction_36:
                    6179   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000037C8  2042      6180          move.l    D2,A0
000037CA  3210      6181          move.w    (A0),D1
000037CC  C2BC 0000 6182          and.l     #65535,D1
000037D0  FFFF      
000037D2  2F01      6183          move.l    D1,-(A7)
000037D4  4EB8 2C82 6184          jsr       _Decode2BitOperandSize
000037D8  584F      6185          addq.w    #4,A7
000037DA  3E00      6186          move.w    D0,D7
                    6187   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
000037DC  2F02      6188          move.l    D2,-(A7)
000037DE  4EB8 2E06 6189          jsr       _DecodeBWLDataAfterOpCode
000037E2  584F      6190          addq.w    #4,A7
                    6191   ; strcatInstruction(",") ;
000037E4  4879 0000 6192          pea       @m68kde~1_174.L
000037E8  70AE      
000037EA  4EB8 0CCC 6193          jsr       _strcatInstruction
000037EE  584F      6194          addq.w    #4,A7
                    6195   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
000037F0  42A7      6196          clr.l     -(A7)
000037F2  CEBC 0000 6197          and.l     #65535,D7
000037F6  FFFF      
000037F8  2F07      6198          move.l    D7,-(A7)
000037FA  42A7      6199          clr.l     -(A7)
000037FC  2F02      6200          move.l    D2,-(A7)
000037FE  4EB8 2F16 6201          jsr       _Decode6BitEA
00003802  DEFC 0010 6202          add.w     #16,A7
                    6203   DisassembleInstruction_12:
                    6204   ; }
                    6205   ; /////////////////////////////////////////////////////////////////////////////////
                    6206   ; // if instruction is ADDI #data,SR
                    6207   ; /////////////////////////////////////////////////////////////////////////////////
                    6208   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003806  2042      6209          move.l    D2,A0
00003808  3010      6210          move.w    (A0),D0
0000380A  0C40 027C 6211          cmp.w     #636,D0
0000380E  6622      6212          bne.s     DisassembleInstruction_38
                    6213   ; InstructionSize = 2;
00003810  24BC 0000 6214          move.l    #2,(A2)
00003814  0002      
                    6215   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003816  2042      6216          move.l    D2,A0
00003818  3228 0002 6217          move.w    2(A0),D1
0000381C  48C1      6218          ext.l     D1
0000381E  2F01      6219          move.l    D1,-(A7)
00003820  4879 0000 6220          pea       @m68kde~1_204.L
00003824  7156      
00003826  4879 0803 6221          pea       _Instruction.L
0000382A  04E2      
0000382C  4E95      6222          jsr       (A5)
0000382E  DEFC 000C 6223          add.w     #12,A7
                    6224   DisassembleInstruction_38:
                    6225   ; }
                    6226   ; /////////////////////////////////////////////////////////////////////////////////
                    6227   ; // if instruction is ADDQ
                    6228   ; /////////////////////////////////////////////////////////////////////////////////
                    6229   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003832  2042      6230          move.l    D2,A0
00003834  3010      6231          move.w    (A0),D0
00003836  C07C F100 6232          and.w     #61696,D0
0000383A  0C40 5000 6233          cmp.w     #20480,D0
0000383E  6600 005E 6234          bne       DisassembleInstruction_40
                    6235   ; InstructionSize = 1;
00003842  24BC 0000 6236          move.l    #1,(A2)
00003846  0001      
                    6237   ; strcpyInstruction("ADDQ") ;
00003848  4879 0000 6238          pea       @m68kde~1_205.L
0000384C  7164      
0000384E  4E93      6239          jsr       (A3)
00003850  584F      6240          addq.w    #4,A7
                    6241   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003852  2042      6242          move.l    D2,A0
00003854  3210      6243          move.w    (A0),D1
00003856  C2BC 0000 6244          and.l     #65535,D1
0000385A  FFFF      
0000385C  2F01      6245          move.l    D1,-(A7)
0000385E  4EB8 2C82 6246          jsr       _Decode2BitOperandSize
00003862  584F      6247          addq.w    #4,A7
                    6248   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003864  2042      6249          move.l    D2,A0
00003866  3210      6250          move.w    (A0),D1
00003868  E041      6251          asr.w     #8,D1
0000386A  E241      6252          asr.w     #1,D1
0000386C  C27C 0007 6253          and.w     #7,D1
00003870  C2BC 0000 6254          and.l     #65535,D1
00003874  FFFF      
00003876  2F01      6255          move.l    D1,-(A7)
00003878  4879 0000 6256          pea       @m68kde~1_206.L
0000387C  716A      
0000387E  2F0C      6257          move.l    A4,-(A7)
00003880  4E95      6258          jsr       (A5)
00003882  DEFC 000C 6259          add.w     #12,A7
                    6260   ; strcatInstruction(TempString) ;
00003886  2F0C      6261          move.l    A4,-(A7)
00003888  4EB8 0CCC 6262          jsr       _strcatInstruction
0000388C  584F      6263          addq.w    #4,A7
                    6264   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
0000388E  42A7      6265          clr.l     -(A7)
00003890  42A7      6266          clr.l     -(A7)
00003892  42A7      6267          clr.l     -(A7)
00003894  2F02      6268          move.l    D2,-(A7)
00003896  4EB8 2F16 6269          jsr       _Decode6BitEA
0000389A  DEFC 0010 6270          add.w     #16,A7
                    6271   DisassembleInstruction_40:
                    6272   ; }
                    6273   ; /////////////////////////////////////////////////////////////////////////////////
                    6274   ; // if instruction is ADDX
                    6275   ; /////////////////////////////////////////////////////////////////////////////////
                    6276   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
0000389E  2042      6277          move.l    D2,A0
000038A0  3010      6278          move.w    (A0),D0
000038A2  C07C F130 6279          and.w     #61744,D0
000038A6  0C40 D100 6280          cmp.w     #53504,D0
000038AA  6600 00A4 6281          bne       DisassembleInstruction_44
                    6282   ; InstructionSize = 1;
000038AE  24BC 0000 6283          move.l    #1,(A2)
000038B2  0001      
                    6284   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000038B4  2042      6285          move.l    D2,A0
000038B6  3010      6286          move.w    (A0),D0
000038B8  EC40      6287          asr.w     #6,D0
000038BA  C07C 0003 6288          and.w     #3,D0
000038BE  3600      6289          move.w    D0,D3
                    6290   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
000038C0  0C43 0003 6291          cmp.w     #3,D3
000038C4  6700 008A 6292          beq       DisassembleInstruction_44
                    6293   ; {
                    6294   ; strcpyInstruction("ADDX") ;
000038C8  4879 0000 6295          pea       @m68kde~1_207.L
000038CC  7170      
000038CE  4E93      6296          jsr       (A3)
000038D0  584F      6297          addq.w    #4,A7
                    6298   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000038D2  2042      6299          move.l    D2,A0
000038D4  3210      6300          move.w    (A0),D1
000038D6  C2BC 0000 6301          and.l     #65535,D1
000038DA  FFFF      
000038DC  2F01      6302          move.l    D1,-(A7)
000038DE  4EB8 2C82 6303          jsr       _Decode2BitOperandSize
000038E2  584F      6304          addq.w    #4,A7
                    6305   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000038E4  2042      6306          move.l    D2,A0
000038E6  3010      6307          move.w    (A0),D0
000038E8  C07C 0008 6308          and.w     #8,D0
000038EC  6600 0030 6309          bne       DisassembleInstruction_46
                    6310   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000038F0  2042      6311          move.l    D2,A0
000038F2  3210      6312          move.w    (A0),D1
000038F4  E041      6313          asr.w     #8,D1
000038F6  E241      6314          asr.w     #1,D1
000038F8  C27C 0007 6315          and.w     #7,D1
000038FC  48C1      6316          ext.l     D1
000038FE  2F01      6317          move.l    D1,-(A7)
00003900  2042      6318          move.l    D2,A0
00003902  3210      6319          move.w    (A0),D1
00003904  C27C 0007 6320          and.w     #7,D1
00003908  48C1      6321          ext.l     D1
0000390A  2F01      6322          move.l    D1,-(A7)
0000390C  4879 0000 6323          pea       @m68kde~1_208.L
00003910  7176      
00003912  2F0C      6324          move.l    A4,-(A7)
00003914  4E95      6325          jsr       (A5)
00003916  DEFC 0010 6326          add.w     #16,A7
0000391A  6000 002C 6327          bra       DisassembleInstruction_47
                    6328   DisassembleInstruction_46:
                    6329   ; else        // -(ax),-(ay) mode used
                    6330   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000391E  2042      6331          move.l    D2,A0
00003920  3210      6332          move.w    (A0),D1
00003922  E041      6333          asr.w     #8,D1
00003924  E241      6334          asr.w     #1,D1
00003926  C27C 0007 6335          and.w     #7,D1
0000392A  48C1      6336          ext.l     D1
0000392C  2F01      6337          move.l    D1,-(A7)
0000392E  2042      6338          move.l    D2,A0
00003930  3210      6339          move.w    (A0),D1
00003932  C27C 0007 6340          and.w     #7,D1
00003936  48C1      6341          ext.l     D1
00003938  2F01      6342          move.l    D1,-(A7)
0000393A  4879 0000 6343          pea       @m68kde~1_209.L
0000393E  717E      
00003940  2F0C      6344          move.l    A4,-(A7)
00003942  4E95      6345          jsr       (A5)
00003944  DEFC 0010 6346          add.w     #16,A7
                    6347   DisassembleInstruction_47:
                    6348   ; strcatInstruction(TempString) ;
00003948  2F0C      6349          move.l    A4,-(A7)
0000394A  4EB8 0CCC 6350          jsr       _strcatInstruction
0000394E  584F      6351          addq.w    #4,A7
                    6352   DisassembleInstruction_44:
                    6353   ; }
                    6354   ; }
                    6355   ; /////////////////////////////////////////////////////////////////////////////////
                    6356   ; // if instruction is AND
                    6357   ; /////////////////////////////////////////////////////////////////////////////////
                    6358   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003950  2042      6359          move.l    D2,A0
00003952  3010      6360          move.w    (A0),D0
00003954  C07C F000 6361          and.w     #61440,D0
00003958  0C40 C000 6362          cmp.w     #49152,D0
0000395C  662A      6363          bne.s     DisassembleInstruction_50
                    6364   ; InstructionSize = 1;
0000395E  24BC 0000 6365          move.l    #1,(A2)
00003962  0001      
                    6366   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6367   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003964  2042      6368          move.l    D2,A0
00003966  3010      6369          move.w    (A0),D0
00003968  E840      6370          asr.w     #4,D0
0000396A  C07C 001F 6371          and.w     #31,D0
0000396E  3600      6372          move.w    D0,D3
                    6373   ; if(OpMode != (unsigned short int)(0x0010))   {
00003970  0C43 0010 6374          cmp.w     #16,D3
00003974  6712      6375          beq.s     DisassembleInstruction_50
                    6376   ; strcpyInstruction("AND") ;
00003976  4879 0000 6377          pea       @m68kde~1_210.L
0000397A  718C      
0000397C  4E93      6378          jsr       (A3)
0000397E  584F      6379          addq.w    #4,A7
                    6380   ; Decode3BitOperandMode(OpCode) ;
00003980  2F02      6381          move.l    D2,-(A7)
00003982  4EB8 333E 6382          jsr       _Decode3BitOperandMode
00003986  584F      6383          addq.w    #4,A7
                    6384   DisassembleInstruction_50:
                    6385   ; }
                    6386   ; }
                    6387   ; /////////////////////////////////////////////////////////////////////////////////
                    6388   ; // if instruction is ANDI to CCR
                    6389   ; /////////////////////////////////////////////////////////////////////////////////
                    6390   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003988  2042      6391          move.l    D2,A0
0000398A  3010      6392          move.w    (A0),D0
0000398C  0C40 023C 6393          cmp.w     #572,D0
00003990  662A      6394          bne.s     DisassembleInstruction_52
                    6395   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003992  2042      6396          move.l    D2,A0
00003994  3228 0002 6397          move.w    2(A0),D1
00003998  C27C 00FF 6398          and.w     #255,D1
0000399C  C2BC 0000 6399          and.l     #65535,D1
000039A0  FFFF      
000039A2  2F01      6400          move.l    D1,-(A7)
000039A4  4879 0000 6401          pea       @m68kde~1_211.L
000039A8  7190      
000039AA  4879 0803 6402          pea       _Instruction.L
000039AE  04E2      
000039B0  4E95      6403          jsr       (A5)
000039B2  DEFC 000C 6404          add.w     #12,A7
                    6405   ; InstructionSize = 2;
000039B6  24BC 0000 6406          move.l    #2,(A2)
000039BA  0002      
                    6407   DisassembleInstruction_52:
                    6408   ; }
                    6409   ; /////////////////////////////////////////////////////////////////////////////////
                    6410   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6411   ; /////////////////////////////////////////////////////////////////////////////////
                    6412   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
000039BC  2042      6413          move.l    D2,A0
000039BE  3010      6414          move.w    (A0),D0
000039C0  C07C F018 6415          and.w     #61464,D0
000039C4  0C40 E000 6416          cmp.w     #57344,D0
000039C8  6604      6417          bne.s     DisassembleInstruction_56
000039CA  7001      6418          moveq     #1,D0
000039CC  6002      6419          bra.s     DisassembleInstruction_57
                    6420   DisassembleInstruction_56:
000039CE  4280      6421          clr.l     D0
                    6422   DisassembleInstruction_57:
000039D0  2042      6423          move.l    D2,A0
000039D2  3210      6424          move.w    (A0),D1
000039D4  C27C FEC0 6425          and.w     #65216,D1
000039D8  0C41 E0C0 6426          cmp.w     #57536,D1
000039DC  6604      6427          bne.s     DisassembleInstruction_58
000039DE  7201      6428          moveq     #1,D1
000039E0  6002      6429          bra.s     DisassembleInstruction_59
                    6430   DisassembleInstruction_58:
000039E2  4281      6431          clr.l     D1
                    6432   DisassembleInstruction_59:
000039E4  8041      6433          or.w      D1,D0
000039E6  2042      6434          move.l    D2,A0
000039E8  3210      6435          move.w    (A0),D1
000039EA  C27C F018 6436          and.w     #61464,D1
000039EE  0C41 E008 6437          cmp.w     #57352,D1
000039F2  6604      6438          bne.s     DisassembleInstruction_60
000039F4  7201      6439          moveq     #1,D1
000039F6  6002      6440          bra.s     DisassembleInstruction_61
                    6441   DisassembleInstruction_60:
000039F8  4281      6442          clr.l     D1
                    6443   DisassembleInstruction_61:
000039FA  8041      6444          or.w      D1,D0
000039FC  2042      6445          move.l    D2,A0
000039FE  3210      6446          move.w    (A0),D1
00003A00  C27C FEC0 6447          and.w     #65216,D1
00003A04  0C41 E2C0 6448          cmp.w     #58048,D1
00003A08  6604      6449          bne.s     DisassembleInstruction_62
00003A0A  7201      6450          moveq     #1,D1
00003A0C  6002      6451          bra.s     DisassembleInstruction_63
                    6452   DisassembleInstruction_62:
00003A0E  4281      6453          clr.l     D1
                    6454   DisassembleInstruction_63:
00003A10  8041      6455          or.w      D1,D0
00003A12  2042      6456          move.l    D2,A0
00003A14  3210      6457          move.w    (A0),D1
00003A16  C27C F018 6458          and.w     #61464,D1
00003A1A  0C41 E018 6459          cmp.w     #57368,D1
00003A1E  6604      6460          bne.s     DisassembleInstruction_64
00003A20  7201      6461          moveq     #1,D1
00003A22  6002      6462          bra.s     DisassembleInstruction_65
                    6463   DisassembleInstruction_64:
00003A24  4281      6464          clr.l     D1
                    6465   DisassembleInstruction_65:
00003A26  8041      6466          or.w      D1,D0
00003A28  2042      6467          move.l    D2,A0
00003A2A  3210      6468          move.w    (A0),D1
00003A2C  C27C FEC0 6469          and.w     #65216,D1
00003A30  0C41 E6C0 6470          cmp.w     #59072,D1
00003A34  6604      6471          bne.s     DisassembleInstruction_66
00003A36  7201      6472          moveq     #1,D1
00003A38  6002      6473          bra.s     DisassembleInstruction_67
                    6474   DisassembleInstruction_66:
00003A3A  4281      6475          clr.l     D1
                    6476   DisassembleInstruction_67:
00003A3C  8041      6477          or.w      D1,D0
00003A3E  2042      6478          move.l    D2,A0
00003A40  3210      6479          move.w    (A0),D1
00003A42  C27C F018 6480          and.w     #61464,D1
00003A46  0C41 E010 6481          cmp.w     #57360,D1
00003A4A  6604      6482          bne.s     DisassembleInstruction_68
00003A4C  7201      6483          moveq     #1,D1
00003A4E  6002      6484          bra.s     DisassembleInstruction_69
                    6485   DisassembleInstruction_68:
00003A50  4281      6486          clr.l     D1
                    6487   DisassembleInstruction_69:
00003A52  8041      6488          or.w      D1,D0
00003A54  2042      6489          move.l    D2,A0
00003A56  3210      6490          move.w    (A0),D1
00003A58  C27C FEC0 6491          and.w     #65216,D1
00003A5C  0C41 E4C0 6492          cmp.w     #58560,D1
00003A60  6604      6493          bne.s     DisassembleInstruction_70
00003A62  7201      6494          moveq     #1,D1
00003A64  6002      6495          bra.s     DisassembleInstruction_71
                    6496   DisassembleInstruction_70:
00003A66  4281      6497          clr.l     D1
                    6498   DisassembleInstruction_71:
00003A68  8041      6499          or.w      D1,D0
00003A6A  6700 0252 6500          beq       DisassembleInstruction_73
                    6501   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6502   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6503   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6504   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6505   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6506   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6507   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6508   ; {
                    6509   ; InstructionSize = 1;
00003A6E  24BC 0000 6510          move.l    #1,(A2)
00003A72  0001      
                    6511   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6512   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003A74  2042      6513          move.l    D2,A0
00003A76  3010      6514          move.w    (A0),D0
00003A78  C07C 00C0 6515          and.w     #192,D0
00003A7C  0C40 00C0 6516          cmp.w     #192,D0
00003A80  6600 00EA 6517          bne       DisassembleInstruction_72
                    6518   ; {
                    6519   ; // test direction by testing bit 8
                    6520   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003A84  2042      6521          move.l    D2,A0
00003A86  3010      6522          move.w    (A0),D0
00003A88  C07C FEC0 6523          and.w     #65216,D0
00003A8C  0C40 E0C0 6524          cmp.w     #57536,D0
00003A90  6624      6525          bne.s     DisassembleInstruction_77
                    6526   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003A92  2042      6527          move.l    D2,A0
00003A94  3010      6528          move.w    (A0),D0
00003A96  C07C 0100 6529          and.w     #256,D0
00003A9A  0C40 0100 6530          cmp.w     #256,D0
00003A9E  660C      6531          bne.s     DisassembleInstruction_76
                    6532   ; strcpyInstruction("ASL") ;
00003AA0  4879 0000 6533          pea       @m68kde~1_212.L
00003AA4  71A0      
00003AA6  4E93      6534          jsr       (A3)
00003AA8  584F      6535          addq.w    #4,A7
00003AAA  600A      6536          bra.s     DisassembleInstruction_77
                    6537   DisassembleInstruction_76:
                    6538   ; else
                    6539   ; strcpyInstruction("ASR") ;
00003AAC  4879 0000 6540          pea       @m68kde~1_213.L
00003AB0  71A4      
00003AB2  4E93      6541          jsr       (A3)
00003AB4  584F      6542          addq.w    #4,A7
                    6543   DisassembleInstruction_77:
                    6544   ; // test direction by testing bit 8
                    6545   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003AB6  2042      6546          move.l    D2,A0
00003AB8  3010      6547          move.w    (A0),D0
00003ABA  C07C FEC0 6548          and.w     #65216,D0
00003ABE  0C40 E2C0 6549          cmp.w     #58048,D0
00003AC2  6624      6550          bne.s     DisassembleInstruction_81
                    6551   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003AC4  2042      6552          move.l    D2,A0
00003AC6  3010      6553          move.w    (A0),D0
00003AC8  C07C 0100 6554          and.w     #256,D0
00003ACC  0C40 0100 6555          cmp.w     #256,D0
00003AD0  660C      6556          bne.s     DisassembleInstruction_80
                    6557   ; strcpyInstruction("LSL") ;
00003AD2  4879 0000 6558          pea       @m68kde~1_214.L
00003AD6  71A8      
00003AD8  4E93      6559          jsr       (A3)
00003ADA  584F      6560          addq.w    #4,A7
00003ADC  600A      6561          bra.s     DisassembleInstruction_81
                    6562   DisassembleInstruction_80:
                    6563   ; else
                    6564   ; strcpyInstruction("LSR") ;
00003ADE  4879 0000 6565          pea       @m68kde~1_215.L
00003AE2  71AC      
00003AE4  4E93      6566          jsr       (A3)
00003AE6  584F      6567          addq.w    #4,A7
                    6568   DisassembleInstruction_81:
                    6569   ; // test direction by testing bit 8
                    6570   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003AE8  2042      6571          move.l    D2,A0
00003AEA  3010      6572          move.w    (A0),D0
00003AEC  C07C FEC0 6573          and.w     #65216,D0
00003AF0  0C40 E6C0 6574          cmp.w     #59072,D0
00003AF4  6624      6575          bne.s     DisassembleInstruction_85
                    6576   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003AF6  2042      6577          move.l    D2,A0
00003AF8  3010      6578          move.w    (A0),D0
00003AFA  C07C 0100 6579          and.w     #256,D0
00003AFE  0C40 0100 6580          cmp.w     #256,D0
00003B02  660C      6581          bne.s     DisassembleInstruction_84
                    6582   ; strcpyInstruction("ROL") ;
00003B04  4879 0000 6583          pea       @m68kde~1_216.L
00003B08  71B0      
00003B0A  4E93      6584          jsr       (A3)
00003B0C  584F      6585          addq.w    #4,A7
00003B0E  600A      6586          bra.s     DisassembleInstruction_85
                    6587   DisassembleInstruction_84:
                    6588   ; else
                    6589   ; strcpyInstruction("ROR") ;
00003B10  4879 0000 6590          pea       @m68kde~1_217.L
00003B14  71B4      
00003B16  4E93      6591          jsr       (A3)
00003B18  584F      6592          addq.w    #4,A7
                    6593   DisassembleInstruction_85:
                    6594   ; // test direction by testing bit 8
                    6595   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003B1A  2042      6596          move.l    D2,A0
00003B1C  3010      6597          move.w    (A0),D0
00003B1E  C07C FEC0 6598          and.w     #65216,D0
00003B22  0C40 E4C0 6599          cmp.w     #58560,D0
00003B26  6624      6600          bne.s     DisassembleInstruction_89
                    6601   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B28  2042      6602          move.l    D2,A0
00003B2A  3010      6603          move.w    (A0),D0
00003B2C  C07C 0100 6604          and.w     #256,D0
00003B30  0C40 0100 6605          cmp.w     #256,D0
00003B34  660C      6606          bne.s     DisassembleInstruction_88
                    6607   ; strcpyInstruction("ROXL") ;
00003B36  4879 0000 6608          pea       @m68kde~1_218.L
00003B3A  71B8      
00003B3C  4E93      6609          jsr       (A3)
00003B3E  584F      6610          addq.w    #4,A7
00003B40  600A      6611          bra.s     DisassembleInstruction_89
                    6612   DisassembleInstruction_88:
                    6613   ; else
                    6614   ; strcpyInstruction("ROXR") ;
00003B42  4879 0000 6615          pea       @m68kde~1_219.L
00003B46  71BE      
00003B48  4E93      6616          jsr       (A3)
00003B4A  584F      6617          addq.w    #4,A7
                    6618   DisassembleInstruction_89:
                    6619   ; strcatInstruction("  ") ;
00003B4C  4879 0000 6620          pea       @m68kde~1_15.L
00003B50  601A      
00003B52  4EB8 0CCC 6621          jsr       _strcatInstruction
00003B56  584F      6622          addq.w    #4,A7
                    6623   ; Decode6BitEA(OpCode,0, 0,0) ;
00003B58  42A7      6624          clr.l     -(A7)
00003B5A  42A7      6625          clr.l     -(A7)
00003B5C  42A7      6626          clr.l     -(A7)
00003B5E  2F02      6627          move.l    D2,-(A7)
00003B60  4EB8 2F16 6628          jsr       _Decode6BitEA
00003B64  DEFC 0010 6629          add.w     #16,A7
00003B68  6000 0154 6630          bra       DisassembleInstruction_73
                    6631   DisassembleInstruction_72:
                    6632   ; }
                    6633   ; // first version of above instructions, bit 5 is 0
                    6634   ; else
                    6635   ; {
                    6636   ; // test instruction and direction by testing bits 4,3
                    6637   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003B6C  2042      6638          move.l    D2,A0
00003B6E  3010      6639          move.w    (A0),D0
00003B70  C07C 0018 6640          and.w     #24,D0
00003B74  6624      6641          bne.s     DisassembleInstruction_93
                    6642   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B76  2042      6643          move.l    D2,A0
00003B78  3010      6644          move.w    (A0),D0
00003B7A  C07C 0100 6645          and.w     #256,D0
00003B7E  0C40 0100 6646          cmp.w     #256,D0
00003B82  660C      6647          bne.s     DisassembleInstruction_92
                    6648   ; strcpyInstruction("ASL") ;
00003B84  4879 0000 6649          pea       @m68kde~1_212.L
00003B88  71A0      
00003B8A  4E93      6650          jsr       (A3)
00003B8C  584F      6651          addq.w    #4,A7
00003B8E  600A      6652          bra.s     DisassembleInstruction_93
                    6653   DisassembleInstruction_92:
                    6654   ; else
                    6655   ; strcpyInstruction("ASR") ;
00003B90  4879 0000 6656          pea       @m68kde~1_213.L
00003B94  71A4      
00003B96  4E93      6657          jsr       (A3)
00003B98  584F      6658          addq.w    #4,A7
                    6659   DisassembleInstruction_93:
                    6660   ; // test instruction and direction by testing bits 4,3
                    6661   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003B9A  2042      6662          move.l    D2,A0
00003B9C  3010      6663          move.w    (A0),D0
00003B9E  C07C 0018 6664          and.w     #24,D0
00003BA2  0C40 0008 6665          cmp.w     #8,D0
00003BA6  6624      6666          bne.s     DisassembleInstruction_97
                    6667   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BA8  2042      6668          move.l    D2,A0
00003BAA  3010      6669          move.w    (A0),D0
00003BAC  C07C 0100 6670          and.w     #256,D0
00003BB0  0C40 0100 6671          cmp.w     #256,D0
00003BB4  660C      6672          bne.s     DisassembleInstruction_96
                    6673   ; strcpyInstruction("LSL") ;
00003BB6  4879 0000 6674          pea       @m68kde~1_214.L
00003BBA  71A8      
00003BBC  4E93      6675          jsr       (A3)
00003BBE  584F      6676          addq.w    #4,A7
00003BC0  600A      6677          bra.s     DisassembleInstruction_97
                    6678   DisassembleInstruction_96:
                    6679   ; else
                    6680   ; strcpyInstruction("LSR") ;
00003BC2  4879 0000 6681          pea       @m68kde~1_215.L
00003BC6  71AC      
00003BC8  4E93      6682          jsr       (A3)
00003BCA  584F      6683          addq.w    #4,A7
                    6684   DisassembleInstruction_97:
                    6685   ; // test instruction and direction by testing bits 4,3
                    6686   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003BCC  2042      6687          move.l    D2,A0
00003BCE  3010      6688          move.w    (A0),D0
00003BD0  C07C 0018 6689          and.w     #24,D0
00003BD4  0C40 0018 6690          cmp.w     #24,D0
00003BD8  6624      6691          bne.s     DisassembleInstruction_101
                    6692   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BDA  2042      6693          move.l    D2,A0
00003BDC  3010      6694          move.w    (A0),D0
00003BDE  C07C 0100 6695          and.w     #256,D0
00003BE2  0C40 0100 6696          cmp.w     #256,D0
00003BE6  660C      6697          bne.s     DisassembleInstruction_100
                    6698   ; strcpyInstruction("ROL") ;
00003BE8  4879 0000 6699          pea       @m68kde~1_216.L
00003BEC  71B0      
00003BEE  4E93      6700          jsr       (A3)
00003BF0  584F      6701          addq.w    #4,A7
00003BF2  600A      6702          bra.s     DisassembleInstruction_101
                    6703   DisassembleInstruction_100:
                    6704   ; else
                    6705   ; strcpyInstruction("ROR") ;
00003BF4  4879 0000 6706          pea       @m68kde~1_217.L
00003BF8  71B4      
00003BFA  4E93      6707          jsr       (A3)
00003BFC  584F      6708          addq.w    #4,A7
                    6709   DisassembleInstruction_101:
                    6710   ; // test instruction and direction by testing bits 4,3
                    6711   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003BFE  2042      6712          move.l    D2,A0
00003C00  3010      6713          move.w    (A0),D0
00003C02  C07C 0018 6714          and.w     #24,D0
00003C06  0C40 0010 6715          cmp.w     #16,D0
00003C0A  6624      6716          bne.s     DisassembleInstruction_105
                    6717   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C0C  2042      6718          move.l    D2,A0
00003C0E  3010      6719          move.w    (A0),D0
00003C10  C07C 0100 6720          and.w     #256,D0
00003C14  0C40 0100 6721          cmp.w     #256,D0
00003C18  660C      6722          bne.s     DisassembleInstruction_104
                    6723   ; strcpyInstruction("ROXL") ;
00003C1A  4879 0000 6724          pea       @m68kde~1_218.L
00003C1E  71B8      
00003C20  4E93      6725          jsr       (A3)
00003C22  584F      6726          addq.w    #4,A7
00003C24  600A      6727          bra.s     DisassembleInstruction_105
                    6728   DisassembleInstruction_104:
                    6729   ; else
                    6730   ; strcpyInstruction("ROXR") ;
00003C26  4879 0000 6731          pea       @m68kde~1_219.L
00003C2A  71BE      
00003C2C  4E93      6732          jsr       (A3)
00003C2E  584F      6733          addq.w    #4,A7
                    6734   DisassembleInstruction_105:
                    6735   ; Decode2BitOperandSize(*OpCode) ;
00003C30  2042      6736          move.l    D2,A0
00003C32  3210      6737          move.w    (A0),D1
00003C34  C2BC 0000 6738          and.l     #65535,D1
00003C38  FFFF      
00003C3A  2F01      6739          move.l    D1,-(A7)
00003C3C  4EB8 2C82 6740          jsr       _Decode2BitOperandSize
00003C40  584F      6741          addq.w    #4,A7
                    6742   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003C42  2042      6743          move.l    D2,A0
00003C44  3010      6744          move.w    (A0),D0
00003C46  C07C 0020 6745          and.w     #32,D0
00003C4A  6600 0038 6746          bne       DisassembleInstruction_106
                    6747   ; sprintf(TempString,"#$%X,D%X",
00003C4E  2042      6748          move.l    D2,A0
00003C50  3210      6749          move.w    (A0),D1
00003C52  C27C 0007 6750          and.w     #7,D1
00003C56  C2BC 0000 6751          and.l     #65535,D1
00003C5A  FFFF      
00003C5C  2F01      6752          move.l    D1,-(A7)
00003C5E  2042      6753          move.l    D2,A0
00003C60  3210      6754          move.w    (A0),D1
00003C62  E041      6755          asr.w     #8,D1
00003C64  E241      6756          asr.w     #1,D1
00003C66  C27C 0007 6757          and.w     #7,D1
00003C6A  C2BC 0000 6758          and.l     #65535,D1
00003C6E  FFFF      
00003C70  2F01      6759          move.l    D1,-(A7)
00003C72  4879 0000 6760          pea       @m68kde~1_220.L
00003C76  71C4      
00003C78  2F0C      6761          move.l    A4,-(A7)
00003C7A  4E95      6762          jsr       (A5)
00003C7C  DEFC 0010 6763          add.w     #16,A7
00003C80  6000 0034 6764          bra       DisassembleInstruction_107
                    6765   DisassembleInstruction_106:
                    6766   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6767   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6768   ; }
                    6769   ; else {                                                                      // if shift is for example ASR D1,D2
                    6770   ; sprintf(TempString,"D%X,D%X",
00003C84  2042      6771          move.l    D2,A0
00003C86  3210      6772          move.w    (A0),D1
00003C88  C27C 0007 6773          and.w     #7,D1
00003C8C  C2BC 0000 6774          and.l     #65535,D1
00003C90  FFFF      
00003C92  2F01      6775          move.l    D1,-(A7)
00003C94  2042      6776          move.l    D2,A0
00003C96  3210      6777          move.w    (A0),D1
00003C98  E041      6778          asr.w     #8,D1
00003C9A  E241      6779          asr.w     #1,D1
00003C9C  C27C 0007 6780          and.w     #7,D1
00003CA0  C2BC 0000 6781          and.l     #65535,D1
00003CA4  FFFF      
00003CA6  2F01      6782          move.l    D1,-(A7)
00003CA8  4879 0000 6783          pea       @m68kde~1_208.L
00003CAC  7176      
00003CAE  2F0C      6784          move.l    A4,-(A7)
00003CB0  4E95      6785          jsr       (A5)
00003CB2  DEFC 0010 6786          add.w     #16,A7
                    6787   DisassembleInstruction_107:
                    6788   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6789   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6790   ; }
                    6791   ; strcatInstruction(TempString) ;
00003CB6  2F0C      6792          move.l    A4,-(A7)
00003CB8  4EB8 0CCC 6793          jsr       _strcatInstruction
00003CBC  584F      6794          addq.w    #4,A7
                    6795   DisassembleInstruction_73:
                    6796   ; }
                    6797   ; }
                    6798   ; /////////////////////////////////////////////////////////////////////////////////
                    6799   ; // if instruction is BCC and BSR and BRA
                    6800   ; /////////////////////////////////////////////////////////////////////////////////
                    6801   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003CBE  2042      6802          move.l    D2,A0
00003CC0  3010      6803          move.w    (A0),D0
00003CC2  C07C F000 6804          and.w     #61440,D0
00003CC6  0C40 6000 6805          cmp.w     #24576,D0
00003CCA  6600 00A0 6806          bne       DisassembleInstruction_108
                    6807   ; {
                    6808   ; InstructionSize = 1;
00003CCE  24BC 0000 6809          move.l    #1,(A2)
00003CD2  0001      
                    6810   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003CD4  2042      6811          move.l    D2,A0
00003CD6  3010      6812          move.w    (A0),D0
00003CD8  E040      6813          asr.w     #8,D0
00003CDA  C07C 000F 6814          and.w     #15,D0
00003CDE  1D40 FFE9 6815          move.b    D0,-23(A6)
                    6816   ; strcpyInstruction("B") ;
00003CE2  4879 0000 6817          pea       @m68kde~1_221.L
00003CE6  71CE      
00003CE8  4E93      6818          jsr       (A3)
00003CEA  584F      6819          addq.w    #4,A7
                    6820   ; DecodeBranchCondition(Condition) ;
00003CEC  122E FFE9 6821          move.b    -23(A6),D1
00003CF0  C27C 00FF 6822          and.w     #255,D1
00003CF4  C2BC 0000 6823          and.l     #65535,D1
00003CF8  FFFF      
00003CFA  2F01      6824          move.l    D1,-(A7)
00003CFC  4EB8 33D4 6825          jsr       _DecodeBranchCondition
00003D00  584F      6826          addq.w    #4,A7
                    6827   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003D02  2042      6828          move.l    D2,A0
00003D04  3010      6829          move.w    (A0),D0
00003D06  C07C 00FF 6830          and.w     #255,D0
00003D0A  1D40 FFFB 6831          move.b    D0,-5(A6)
                    6832   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003D0E  102E FFFB 6833          move.b    -5(A6),D0
00003D12  4880      6834          ext.w     D0
00003D14  4A40      6835          tst.w     D0
00003D16  662A      6836          bne.s     DisassembleInstruction_110
                    6837   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003D18  2202      6838          move.l    D2,D1
00003D1A  2042      6839          move.l    D2,A0
00003D1C  2F00      6840          move.l    D0,-(A7)
00003D1E  3028 0002 6841          move.w    2(A0),D0
00003D22  48C0      6842          ext.l     D0
00003D24  D280      6843          add.l     D0,D1
00003D26  201F      6844          move.l    (A7)+,D0
00003D28  5481      6845          addq.l    #2,D1
00003D2A  2F01      6846          move.l    D1,-(A7)
00003D2C  4879 0000 6847          pea       @m68kde~1_171.L
00003D30  709A      
00003D32  2F0C      6848          move.l    A4,-(A7)
00003D34  4E95      6849          jsr       (A5)
00003D36  DEFC 000C 6850          add.w     #12,A7
                    6851   ; InstructionSize = 2 ;
00003D3A  24BC 0000 6852          move.l    #2,(A2)
00003D3E  0002      
00003D40  6022      6853          bra.s     DisassembleInstruction_111
                    6854   DisassembleInstruction_110:
                    6855   ; }
                    6856   ; else
                    6857   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003D42  2202      6858          move.l    D2,D1
00003D44  2F00      6859          move.l    D0,-(A7)
00003D46  102E FFFB 6860          move.b    -5(A6),D0
00003D4A  4880      6861          ext.w     D0
00003D4C  48C0      6862          ext.l     D0
00003D4E  D280      6863          add.l     D0,D1
00003D50  201F      6864          move.l    (A7)+,D0
00003D52  5481      6865          addq.l    #2,D1
00003D54  2F01      6866          move.l    D1,-(A7)
00003D56  4879 0000 6867          pea       @m68kde~1_171.L
00003D5A  709A      
00003D5C  2F0C      6868          move.l    A4,-(A7)
00003D5E  4E95      6869          jsr       (A5)
00003D60  DEFC 000C 6870          add.w     #12,A7
                    6871   DisassembleInstruction_111:
                    6872   ; strcatInstruction(TempString) ;
00003D64  2F0C      6873          move.l    A4,-(A7)
00003D66  4EB8 0CCC 6874          jsr       _strcatInstruction
00003D6A  584F      6875          addq.w    #4,A7
                    6876   DisassembleInstruction_108:
                    6877   ; }
                    6878   ; /////////////////////////////////////////////////////////////////////////////////
                    6879   ; // if instruction is BCHG dn,<EA>
                    6880   ; /////////////////////////////////////////////////////////////////////////////////
                    6881   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003D6C  2042      6882          move.l    D2,A0
00003D6E  3010      6883          move.w    (A0),D0
00003D70  C07C F1C0 6884          and.w     #61888,D0
00003D74  0C40 0140 6885          cmp.w     #320,D0
00003D78  6600 004C 6886          bne       DisassembleInstruction_112
                    6887   ; InstructionSize = 1;
00003D7C  24BC 0000 6888          move.l    #1,(A2)
00003D80  0001      
                    6889   ; strcpyInstruction("BCHG ") ;
00003D82  4879 0000 6890          pea       @m68kde~1_222.L
00003D86  71D0      
00003D88  4E93      6891          jsr       (A3)
00003D8A  584F      6892          addq.w    #4,A7
                    6893   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003D8C  2042      6894          move.l    D2,A0
00003D8E  3210      6895          move.w    (A0),D1
00003D90  E041      6896          asr.w     #8,D1
00003D92  E241      6897          asr.w     #1,D1
00003D94  C27C 0007 6898          and.w     #7,D1
00003D98  C2BC 0000 6899          and.l     #65535,D1
00003D9C  FFFF      
00003D9E  2F01      6900          move.l    D1,-(A7)
00003DA0  4879 0000 6901          pea       @m68kde~1_223.L
00003DA4  71D6      
00003DA6  2F0C      6902          move.l    A4,-(A7)
00003DA8  4E95      6903          jsr       (A5)
00003DAA  DEFC 000C 6904          add.w     #12,A7
                    6905   ; strcatInstruction(TempString) ;
00003DAE  2F0C      6906          move.l    A4,-(A7)
00003DB0  4EB8 0CCC 6907          jsr       _strcatInstruction
00003DB4  584F      6908          addq.w    #4,A7
                    6909   ; Decode6BitEA(OpCode,0,0,0) ;
00003DB6  42A7      6910          clr.l     -(A7)
00003DB8  42A7      6911          clr.l     -(A7)
00003DBA  42A7      6912          clr.l     -(A7)
00003DBC  2F02      6913          move.l    D2,-(A7)
00003DBE  4EB8 2F16 6914          jsr       _Decode6BitEA
00003DC2  DEFC 0010 6915          add.w     #16,A7
                    6916   DisassembleInstruction_112:
                    6917   ; }
                    6918   ; /////////////////////////////////////////////////////////////////////////////////
                    6919   ; // if instruction is BCHG #data,<EA>
                    6920   ; /////////////////////////////////////////////////////////////////////////////////
                    6921   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003DC6  2042      6922          move.l    D2,A0
00003DC8  3010      6923          move.w    (A0),D0
00003DCA  C07C FFC0 6924          and.w     #65472,D0
00003DCE  0C40 0840 6925          cmp.w     #2112,D0
00003DD2  6600 0044 6926          bne       DisassembleInstruction_114
                    6927   ; strcpyInstruction("BCHG ") ;
00003DD6  4879 0000 6928          pea       @m68kde~1_222.L
00003DDA  71D0      
00003DDC  4E93      6929          jsr       (A3)
00003DDE  584F      6930          addq.w    #4,A7
                    6931   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003DE0  2042      6932          move.l    D2,A0
00003DE2  3228 0002 6933          move.w    2(A0),D1
00003DE6  48C1      6934          ext.l     D1
00003DE8  2F01      6935          move.l    D1,-(A7)
00003DEA  4879 0000 6936          pea       @m68kde~1_224.L
00003DEE  71DC      
00003DF0  2F0C      6937          move.l    A4,-(A7)
00003DF2  4E95      6938          jsr       (A5)
00003DF4  DEFC 000C 6939          add.w     #12,A7
                    6940   ; InstructionSize = 2 ;
00003DF8  24BC 0000 6941          move.l    #2,(A2)
00003DFC  0002      
                    6942   ; strcatInstruction(TempString) ;
00003DFE  2F0C      6943          move.l    A4,-(A7)
00003E00  4EB8 0CCC 6944          jsr       _strcatInstruction
00003E04  584F      6945          addq.w    #4,A7
                    6946   ; Decode6BitEA(OpCode,0,1,0) ;
00003E06  42A7      6947          clr.l     -(A7)
00003E08  4878 0001 6948          pea       1
00003E0C  42A7      6949          clr.l     -(A7)
00003E0E  2F02      6950          move.l    D2,-(A7)
00003E10  4EB8 2F16 6951          jsr       _Decode6BitEA
00003E14  DEFC 0010 6952          add.w     #16,A7
                    6953   DisassembleInstruction_114:
                    6954   ; }
                    6955   ; /////////////////////////////////////////////////////////////////////////////////
                    6956   ; // if instruction is BCLR  dn,<EA>
                    6957   ; /////////////////////////////////////////////////////////////////////////////////
                    6958   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003E18  2042      6959          move.l    D2,A0
00003E1A  3010      6960          move.w    (A0),D0
00003E1C  C07C F1C0 6961          and.w     #61888,D0
00003E20  0C40 0180 6962          cmp.w     #384,D0
00003E24  6600 004C 6963          bne       DisassembleInstruction_116
                    6964   ; InstructionSize = 1;
00003E28  24BC 0000 6965          move.l    #1,(A2)
00003E2C  0001      
                    6966   ; strcpyInstruction("BCLR ") ;
00003E2E  4879 0000 6967          pea       @m68kde~1_225.L
00003E32  71E2      
00003E34  4E93      6968          jsr       (A3)
00003E36  584F      6969          addq.w    #4,A7
                    6970   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003E38  2042      6971          move.l    D2,A0
00003E3A  3210      6972          move.w    (A0),D1
00003E3C  E041      6973          asr.w     #8,D1
00003E3E  E241      6974          asr.w     #1,D1
00003E40  C27C 0007 6975          and.w     #7,D1
00003E44  C2BC 0000 6976          and.l     #65535,D1
00003E48  FFFF      
00003E4A  2F01      6977          move.l    D1,-(A7)
00003E4C  4879 0000 6978          pea       @m68kde~1_223.L
00003E50  71D6      
00003E52  2F0C      6979          move.l    A4,-(A7)
00003E54  4E95      6980          jsr       (A5)
00003E56  DEFC 000C 6981          add.w     #12,A7
                    6982   ; strcatInstruction(TempString) ;
00003E5A  2F0C      6983          move.l    A4,-(A7)
00003E5C  4EB8 0CCC 6984          jsr       _strcatInstruction
00003E60  584F      6985          addq.w    #4,A7
                    6986   ; Decode6BitEA(OpCode,0,0,0) ;
00003E62  42A7      6987          clr.l     -(A7)
00003E64  42A7      6988          clr.l     -(A7)
00003E66  42A7      6989          clr.l     -(A7)
00003E68  2F02      6990          move.l    D2,-(A7)
00003E6A  4EB8 2F16 6991          jsr       _Decode6BitEA
00003E6E  DEFC 0010 6992          add.w     #16,A7
                    6993   DisassembleInstruction_116:
                    6994   ; }
                    6995   ; /////////////////////////////////////////////////////////////////////////////////
                    6996   ; // if instruction is BCLR #data,<EA>
                    6997   ; /////////////////////////////////////////////////////////////////////////////////
                    6998   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003E72  2042      6999          move.l    D2,A0
00003E74  3010      7000          move.w    (A0),D0
00003E76  C07C FFC0 7001          and.w     #65472,D0
00003E7A  0C40 0880 7002          cmp.w     #2176,D0
00003E7E  6600 0044 7003          bne       DisassembleInstruction_118
                    7004   ; strcpyInstruction("BCLR ") ;
00003E82  4879 0000 7005          pea       @m68kde~1_225.L
00003E86  71E2      
00003E88  4E93      7006          jsr       (A3)
00003E8A  584F      7007          addq.w    #4,A7
                    7008   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003E8C  2042      7009          move.l    D2,A0
00003E8E  3228 0002 7010          move.w    2(A0),D1
00003E92  48C1      7011          ext.l     D1
00003E94  2F01      7012          move.l    D1,-(A7)
00003E96  4879 0000 7013          pea       @m68kde~1_224.L
00003E9A  71DC      
00003E9C  2F0C      7014          move.l    A4,-(A7)
00003E9E  4E95      7015          jsr       (A5)
00003EA0  DEFC 000C 7016          add.w     #12,A7
                    7017   ; InstructionSize = 2 ;
00003EA4  24BC 0000 7018          move.l    #2,(A2)
00003EA8  0002      
                    7019   ; strcatInstruction(TempString) ;
00003EAA  2F0C      7020          move.l    A4,-(A7)
00003EAC  4EB8 0CCC 7021          jsr       _strcatInstruction
00003EB0  584F      7022          addq.w    #4,A7
                    7023   ; Decode6BitEA(OpCode,0,1,0) ;
00003EB2  42A7      7024          clr.l     -(A7)
00003EB4  4878 0001 7025          pea       1
00003EB8  42A7      7026          clr.l     -(A7)
00003EBA  2F02      7027          move.l    D2,-(A7)
00003EBC  4EB8 2F16 7028          jsr       _Decode6BitEA
00003EC0  DEFC 0010 7029          add.w     #16,A7
                    7030   DisassembleInstruction_118:
                    7031   ; }
                    7032   ; /////////////////////////////////////////////////////////////////////////////////
                    7033   ; // if instruction is BSET dn,<EA>
                    7034   ; /////////////////////////////////////////////////////////////////////////////////
                    7035   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00003EC4  2042      7036          move.l    D2,A0
00003EC6  3010      7037          move.w    (A0),D0
00003EC8  C07C F1C0 7038          and.w     #61888,D0
00003ECC  0C40 01C0 7039          cmp.w     #448,D0
00003ED0  6600 004C 7040          bne       DisassembleInstruction_120
                    7041   ; InstructionSize = 1;
00003ED4  24BC 0000 7042          move.l    #1,(A2)
00003ED8  0001      
                    7043   ; strcpyInstruction("BSET ") ;
00003EDA  4879 0000 7044          pea       @m68kde~1_226.L
00003EDE  71E8      
00003EE0  4E93      7045          jsr       (A3)
00003EE2  584F      7046          addq.w    #4,A7
                    7047   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003EE4  2042      7048          move.l    D2,A0
00003EE6  3210      7049          move.w    (A0),D1
00003EE8  E041      7050          asr.w     #8,D1
00003EEA  E241      7051          asr.w     #1,D1
00003EEC  C27C 0007 7052          and.w     #7,D1
00003EF0  C2BC 0000 7053          and.l     #65535,D1
00003EF4  FFFF      
00003EF6  2F01      7054          move.l    D1,-(A7)
00003EF8  4879 0000 7055          pea       @m68kde~1_223.L
00003EFC  71D6      
00003EFE  2F0C      7056          move.l    A4,-(A7)
00003F00  4E95      7057          jsr       (A5)
00003F02  DEFC 000C 7058          add.w     #12,A7
                    7059   ; strcatInstruction(TempString) ;
00003F06  2F0C      7060          move.l    A4,-(A7)
00003F08  4EB8 0CCC 7061          jsr       _strcatInstruction
00003F0C  584F      7062          addq.w    #4,A7
                    7063   ; Decode6BitEA(OpCode,0,0,0) ;
00003F0E  42A7      7064          clr.l     -(A7)
00003F10  42A7      7065          clr.l     -(A7)
00003F12  42A7      7066          clr.l     -(A7)
00003F14  2F02      7067          move.l    D2,-(A7)
00003F16  4EB8 2F16 7068          jsr       _Decode6BitEA
00003F1A  DEFC 0010 7069          add.w     #16,A7
                    7070   DisassembleInstruction_120:
                    7071   ; }
                    7072   ; /////////////////////////////////////////////////////////////////////////////////
                    7073   ; // if instruction is BSET #data,<EA>
                    7074   ; /////////////////////////////////////////////////////////////////////////////////
                    7075   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00003F1E  2042      7076          move.l    D2,A0
00003F20  3010      7077          move.w    (A0),D0
00003F22  C07C FFC0 7078          and.w     #65472,D0
00003F26  0C40 08C0 7079          cmp.w     #2240,D0
00003F2A  6600 0044 7080          bne       DisassembleInstruction_122
                    7081   ; strcpyInstruction("BSET ") ;
00003F2E  4879 0000 7082          pea       @m68kde~1_226.L
00003F32  71E8      
00003F34  4E93      7083          jsr       (A3)
00003F36  584F      7084          addq.w    #4,A7
                    7085   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F38  2042      7086          move.l    D2,A0
00003F3A  3228 0002 7087          move.w    2(A0),D1
00003F3E  48C1      7088          ext.l     D1
00003F40  2F01      7089          move.l    D1,-(A7)
00003F42  4879 0000 7090          pea       @m68kde~1_224.L
00003F46  71DC      
00003F48  2F0C      7091          move.l    A4,-(A7)
00003F4A  4E95      7092          jsr       (A5)
00003F4C  DEFC 000C 7093          add.w     #12,A7
                    7094   ; InstructionSize = 2 ;
00003F50  24BC 0000 7095          move.l    #2,(A2)
00003F54  0002      
                    7096   ; strcatInstruction(TempString) ;
00003F56  2F0C      7097          move.l    A4,-(A7)
00003F58  4EB8 0CCC 7098          jsr       _strcatInstruction
00003F5C  584F      7099          addq.w    #4,A7
                    7100   ; Decode6BitEA(OpCode,0,1,0) ;
00003F5E  42A7      7101          clr.l     -(A7)
00003F60  4878 0001 7102          pea       1
00003F64  42A7      7103          clr.l     -(A7)
00003F66  2F02      7104          move.l    D2,-(A7)
00003F68  4EB8 2F16 7105          jsr       _Decode6BitEA
00003F6C  DEFC 0010 7106          add.w     #16,A7
                    7107   DisassembleInstruction_122:
                    7108   ; }
                    7109   ; /////////////////////////////////////////////////////////////////////////////////
                    7110   ; // if instruction is BTST dn,<EA>
                    7111   ; /////////////////////////////////////////////////////////////////////////////////
                    7112   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00003F70  2042      7113          move.l    D2,A0
00003F72  3010      7114          move.w    (A0),D0
00003F74  C07C F1C0 7115          and.w     #61888,D0
00003F78  0C40 0100 7116          cmp.w     #256,D0
00003F7C  6600 004C 7117          bne       DisassembleInstruction_124
                    7118   ; InstructionSize = 1;
00003F80  24BC 0000 7119          move.l    #1,(A2)
00003F84  0001      
                    7120   ; strcpyInstruction("BTST ") ;
00003F86  4879 0000 7121          pea       @m68kde~1_227.L
00003F8A  71EE      
00003F8C  4E93      7122          jsr       (A3)
00003F8E  584F      7123          addq.w    #4,A7
                    7124   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F90  2042      7125          move.l    D2,A0
00003F92  3210      7126          move.w    (A0),D1
00003F94  E041      7127          asr.w     #8,D1
00003F96  E241      7128          asr.w     #1,D1
00003F98  C27C 0007 7129          and.w     #7,D1
00003F9C  C2BC 0000 7130          and.l     #65535,D1
00003FA0  FFFF      
00003FA2  2F01      7131          move.l    D1,-(A7)
00003FA4  4879 0000 7132          pea       @m68kde~1_223.L
00003FA8  71D6      
00003FAA  2F0C      7133          move.l    A4,-(A7)
00003FAC  4E95      7134          jsr       (A5)
00003FAE  DEFC 000C 7135          add.w     #12,A7
                    7136   ; strcatInstruction(TempString) ;
00003FB2  2F0C      7137          move.l    A4,-(A7)
00003FB4  4EB8 0CCC 7138          jsr       _strcatInstruction
00003FB8  584F      7139          addq.w    #4,A7
                    7140   ; Decode6BitEA(OpCode,0,0,0) ;
00003FBA  42A7      7141          clr.l     -(A7)
00003FBC  42A7      7142          clr.l     -(A7)
00003FBE  42A7      7143          clr.l     -(A7)
00003FC0  2F02      7144          move.l    D2,-(A7)
00003FC2  4EB8 2F16 7145          jsr       _Decode6BitEA
00003FC6  DEFC 0010 7146          add.w     #16,A7
                    7147   DisassembleInstruction_124:
                    7148   ; }
                    7149   ; /////////////////////////////////////////////////////////////////////////////////
                    7150   ; // if instruction is BTST #data,<EA>
                    7151   ; /////////////////////////////////////////////////////////////////////////////////
                    7152   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00003FCA  2042      7153          move.l    D2,A0
00003FCC  3010      7154          move.w    (A0),D0
00003FCE  C07C FFC0 7155          and.w     #65472,D0
00003FD2  0C40 0800 7156          cmp.w     #2048,D0
00003FD6  6600 0044 7157          bne       DisassembleInstruction_126
                    7158   ; strcpyInstruction("BTST ") ;
00003FDA  4879 0000 7159          pea       @m68kde~1_227.L
00003FDE  71EE      
00003FE0  4E93      7160          jsr       (A3)
00003FE2  584F      7161          addq.w    #4,A7
                    7162   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003FE4  2042      7163          move.l    D2,A0
00003FE6  3228 0002 7164          move.w    2(A0),D1
00003FEA  48C1      7165          ext.l     D1
00003FEC  2F01      7166          move.l    D1,-(A7)
00003FEE  4879 0000 7167          pea       @m68kde~1_224.L
00003FF2  71DC      
00003FF4  2F0C      7168          move.l    A4,-(A7)
00003FF6  4E95      7169          jsr       (A5)
00003FF8  DEFC 000C 7170          add.w     #12,A7
                    7171   ; InstructionSize = 2 ;
00003FFC  24BC 0000 7172          move.l    #2,(A2)
00004000  0002      
                    7173   ; strcatInstruction(TempString) ;
00004002  2F0C      7174          move.l    A4,-(A7)
00004004  4EB8 0CCC 7175          jsr       _strcatInstruction
00004008  584F      7176          addq.w    #4,A7
                    7177   ; Decode6BitEA(OpCode,0,1,0) ;
0000400A  42A7      7178          clr.l     -(A7)
0000400C  4878 0001 7179          pea       1
00004010  42A7      7180          clr.l     -(A7)
00004012  2F02      7181          move.l    D2,-(A7)
00004014  4EB8 2F16 7182          jsr       _Decode6BitEA
00004018  DEFC 0010 7183          add.w     #16,A7
                    7184   DisassembleInstruction_126:
                    7185   ; }
                    7186   ; /////////////////////////////////////////////////////////////////////////////////
                    7187   ; // if instruction is CHK.W <EA>,DN
                    7188   ; /////////////////////////////////////////////////////////////////////////////////
                    7189   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
0000401C  2042      7190          move.l    D2,A0
0000401E  3010      7191          move.w    (A0),D0
00004020  C07C F1C0 7192          and.w     #61888,D0
00004024  0C40 4180 7193          cmp.w     #16768,D0
00004028  6600 004C 7194          bne       DisassembleInstruction_128
                    7195   ; InstructionSize = 1;
0000402C  24BC 0000 7196          move.l    #1,(A2)
00004030  0001      
                    7197   ; strcpyInstruction("CHK ") ;
00004032  4879 0000 7198          pea       @m68kde~1_228.L
00004036  71F4      
00004038  4E93      7199          jsr       (A3)
0000403A  584F      7200          addq.w    #4,A7
                    7201   ; Decode6BitEA(OpCode,0,0,0) ;
0000403C  42A7      7202          clr.l     -(A7)
0000403E  42A7      7203          clr.l     -(A7)
00004040  42A7      7204          clr.l     -(A7)
00004042  2F02      7205          move.l    D2,-(A7)
00004044  4EB8 2F16 7206          jsr       _Decode6BitEA
00004048  DEFC 0010 7207          add.w     #16,A7
                    7208   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000404C  2042      7209          move.l    D2,A0
0000404E  3210      7210          move.w    (A0),D1
00004050  E041      7211          asr.w     #8,D1
00004052  E241      7212          asr.w     #1,D1
00004054  C27C 0007 7213          and.w     #7,D1
00004058  C2BC 0000 7214          and.l     #65535,D1
0000405C  FFFF      
0000405E  2F01      7215          move.l    D1,-(A7)
00004060  4879 0000 7216          pea       @m68kde~1_229.L
00004064  71FA      
00004066  2F0C      7217          move.l    A4,-(A7)
00004068  4E95      7218          jsr       (A5)
0000406A  DEFC 000C 7219          add.w     #12,A7
                    7220   ; strcatInstruction(TempString) ;
0000406E  2F0C      7221          move.l    A4,-(A7)
00004070  4EB8 0CCC 7222          jsr       _strcatInstruction
00004074  584F      7223          addq.w    #4,A7
                    7224   DisassembleInstruction_128:
                    7225   ; }
                    7226   ; /////////////////////////////////////////////////////////////////////////////////
                    7227   ; // if instruction is CLR <EA>
                    7228   ; /////////////////////////////////////////////////////////////////////////////////
                    7229   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004076  2042      7230          move.l    D2,A0
00004078  3010      7231          move.w    (A0),D0
0000407A  C07C FF00 7232          and.w     #65280,D0
0000407E  0C40 4200 7233          cmp.w     #16896,D0
00004082  6600 0034 7234          bne       DisassembleInstruction_130
                    7235   ; InstructionSize = 1;
00004086  24BC 0000 7236          move.l    #1,(A2)
0000408A  0001      
                    7237   ; strcpyInstruction("CLR") ;
0000408C  4879 0000 7238          pea       @m68kde~1_230.L
00004090  7200      
00004092  4E93      7239          jsr       (A3)
00004094  584F      7240          addq.w    #4,A7
                    7241   ; Decode2BitOperandSize(*OpCode) ;
00004096  2042      7242          move.l    D2,A0
00004098  3210      7243          move.w    (A0),D1
0000409A  C2BC 0000 7244          and.l     #65535,D1
0000409E  FFFF      
000040A0  2F01      7245          move.l    D1,-(A7)
000040A2  4EB8 2C82 7246          jsr       _Decode2BitOperandSize
000040A6  584F      7247          addq.w    #4,A7
                    7248   ; Decode6BitEA(OpCode,0,0,0) ;
000040A8  42A7      7249          clr.l     -(A7)
000040AA  42A7      7250          clr.l     -(A7)
000040AC  42A7      7251          clr.l     -(A7)
000040AE  2F02      7252          move.l    D2,-(A7)
000040B0  4EB8 2F16 7253          jsr       _Decode6BitEA
000040B4  DEFC 0010 7254          add.w     #16,A7
                    7255   DisassembleInstruction_130:
                    7256   ; }
                    7257   ; /////////////////////////////////////////////////////////////////////////////////
                    7258   ; // if instruction is CMP, CMPA
                    7259   ; /////////////////////////////////////////////////////////////////////////////////
                    7260   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000040B8  2042      7261          move.l    D2,A0
000040BA  3010      7262          move.w    (A0),D0
000040BC  C07C F000 7263          and.w     #61440,D0
000040C0  0C40 B000 7264          cmp.w     #45056,D0
000040C4  6600 008C 7265          bne       DisassembleInstruction_135
                    7266   ; {
                    7267   ; InstructionSize = 1;
000040C8  24BC 0000 7268          move.l    #1,(A2)
000040CC  0001      
                    7269   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000040CE  2042      7270          move.l    D2,A0
000040D0  3010      7271          move.w    (A0),D0
000040D2  EC40      7272          asr.w     #6,D0
000040D4  C07C 0007 7273          and.w     #7,D0
000040D8  3600      7274          move.w    D0,D3
                    7275   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000040DA  0C43 0003 7276          cmp.w     #3,D3
000040DE  6708      7277          beq.s     DisassembleInstruction_136
000040E0  0C43 0007 7278          cmp.w     #7,D3
000040E4  6600 005A 7279          bne       DisassembleInstruction_134
                    7280   DisassembleInstruction_136:
                    7281   ; if(OpMode == (unsigned short int)(0x0003))
000040E8  0C43 0003 7282          cmp.w     #3,D3
000040EC  660C      7283          bne.s     DisassembleInstruction_137
                    7284   ; strcpyInstruction("CMPA.W ") ;
000040EE  4879 0000 7285          pea       @m68kde~1_231.L
000040F2  7204      
000040F4  4E93      7286          jsr       (A3)
000040F6  584F      7287          addq.w    #4,A7
000040F8  600A      7288          bra.s     DisassembleInstruction_138
                    7289   DisassembleInstruction_137:
                    7290   ; else
                    7291   ; strcpyInstruction("CMPA.L ") ;
000040FA  4879 0000 7292          pea       @m68kde~1_232.L
000040FE  720C      
00004100  4E93      7293          jsr       (A3)
00004102  584F      7294          addq.w    #4,A7
                    7295   DisassembleInstruction_138:
                    7296   ; Decode6BitEA(OpCode,0,0,0) ;
00004104  42A7      7297          clr.l     -(A7)
00004106  42A7      7298          clr.l     -(A7)
00004108  42A7      7299          clr.l     -(A7)
0000410A  2F02      7300          move.l    D2,-(A7)
0000410C  4EB8 2F16 7301          jsr       _Decode6BitEA
00004110  DEFC 0010 7302          add.w     #16,A7
                    7303   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
00004114  2042      7304          move.l    D2,A0
00004116  3210      7305          move.w    (A0),D1
00004118  E041      7306          asr.w     #8,D1
0000411A  E241      7307          asr.w     #1,D1
0000411C  C27C 0007 7308          and.w     #7,D1
00004120  C2BC 0000 7309          and.l     #65535,D1
00004124  FFFF      
00004126  2F01      7310          move.l    D1,-(A7)
00004128  4879 0000 7311          pea       @m68kde~1_233.L
0000412C  7214      
0000412E  2F0C      7312          move.l    A4,-(A7)
00004130  4E95      7313          jsr       (A5)
00004132  DEFC 000C 7314          add.w     #12,A7
                    7315   ; strcatInstruction(TempString) ;
00004136  2F0C      7316          move.l    A4,-(A7)
00004138  4EB8 0CCC 7317          jsr       _strcatInstruction
0000413C  584F      7318          addq.w    #4,A7
0000413E  6012      7319          bra.s     DisassembleInstruction_135
                    7320   DisassembleInstruction_134:
                    7321   ; }
                    7322   ; else {
                    7323   ; strcpyInstruction("CMP") ;
00004140  4879 0000 7324          pea       @m68kde~1_234.L
00004144  721A      
00004146  4E93      7325          jsr       (A3)
00004148  584F      7326          addq.w    #4,A7
                    7327   ; Decode3BitOperandMode(OpCode) ;
0000414A  2F02      7328          move.l    D2,-(A7)
0000414C  4EB8 333E 7329          jsr       _Decode3BitOperandMode
00004150  584F      7330          addq.w    #4,A7
                    7331   DisassembleInstruction_135:
                    7332   ; }
                    7333   ; }
                    7334   ; /////////////////////////////////////////////////////////////////////////////////
                    7335   ; // if instruction is CMPM
                    7336   ; /////////////////////////////////////////////////////////////////////////////////
                    7337   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
00004152  2042      7338          move.l    D2,A0
00004154  3010      7339          move.w    (A0),D0
00004156  C07C F138 7340          and.w     #61752,D0
0000415A  0C40 B108 7341          cmp.w     #45320,D0
0000415E  6600 007A 7342          bne       DisassembleInstruction_141
                    7343   ; {
                    7344   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004162  2042      7345          move.l    D2,A0
00004164  3010      7346          move.w    (A0),D0
00004166  EC40      7347          asr.w     #6,D0
00004168  C07C 0003 7348          and.w     #3,D0
0000416C  3600      7349          move.w    D0,D3
                    7350   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
0000416E  0C43 0000 7351          cmp.w     #0,D3
00004172  6500 0066 7352          blo       DisassembleInstruction_141
00004176  0C43 0002 7353          cmp.w     #2,D3
0000417A  6200 005E 7354          bhi       DisassembleInstruction_141
                    7355   ; {
                    7356   ; InstructionSize = 1;
0000417E  24BC 0000 7357          move.l    #1,(A2)
00004182  0001      
                    7358   ; strcpyInstruction("CMPM") ;
00004184  4879 0000 7359          pea       @m68kde~1_235.L
00004188  721E      
0000418A  4E93      7360          jsr       (A3)
0000418C  584F      7361          addq.w    #4,A7
                    7362   ; Decode2BitOperandSize(*OpCode) ;
0000418E  2042      7363          move.l    D2,A0
00004190  3210      7364          move.w    (A0),D1
00004192  C2BC 0000 7365          and.l     #65535,D1
00004196  FFFF      
00004198  2F01      7366          move.l    D1,-(A7)
0000419A  4EB8 2C82 7367          jsr       _Decode2BitOperandSize
0000419E  584F      7368          addq.w    #4,A7
                    7369   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000041A0  2042      7370          move.l    D2,A0
000041A2  3210      7371          move.w    (A0),D1
000041A4  E041      7372          asr.w     #8,D1
000041A6  E241      7373          asr.w     #1,D1
000041A8  C27C 0007 7374          and.w     #7,D1
000041AC  C2BC 0000 7375          and.l     #65535,D1
000041B0  FFFF      
000041B2  2F01      7376          move.l    D1,-(A7)
000041B4  2042      7377          move.l    D2,A0
000041B6  3210      7378          move.w    (A0),D1
000041B8  C27C 0007 7379          and.w     #7,D1
000041BC  C2BC 0000 7380          and.l     #65535,D1
000041C0  FFFF      
000041C2  2F01      7381          move.l    D1,-(A7)
000041C4  4879 0000 7382          pea       @m68kde~1_236.L
000041C8  7224      
000041CA  2F0C      7383          move.l    A4,-(A7)
000041CC  4E95      7384          jsr       (A5)
000041CE  DEFC 0010 7385          add.w     #16,A7
                    7386   ; strcatInstruction(TempString) ;
000041D2  2F0C      7387          move.l    A4,-(A7)
000041D4  4EB8 0CCC 7388          jsr       _strcatInstruction
000041D8  584F      7389          addq.w    #4,A7
                    7390   DisassembleInstruction_141:
                    7391   ; }
                    7392   ; }
                    7393   ; /////////////////////////////////////////////////////////////////////////////////
                    7394   ; // if instruction is DBCC
                    7395   ; /////////////////////////////////////////////////////////////////////////////////
                    7396   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000041DA  2042      7397          move.l    D2,A0
000041DC  3010      7398          move.w    (A0),D0
000041DE  C07C F0F8 7399          and.w     #61688,D0
000041E2  0C40 50C8 7400          cmp.w     #20680,D0
000041E6  6600 0084 7401          bne       DisassembleInstruction_143
                    7402   ; {
                    7403   ; InstructionSize = 2;
000041EA  24BC 0000 7404          move.l    #2,(A2)
000041EE  0002      
                    7405   ; strcpy(Instruction,"DB") ;
000041F0  4879 0000 7406          pea       @m68kde~1_237.L
000041F4  7232      
000041F6  4879 0803 7407          pea       _Instruction.L
000041FA  04E2      
000041FC  4EB9 0000 7408          jsr       _strcpy
00004200  53CC      
00004202  504F      7409          addq.w    #8,A7
                    7410   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
00004204  2042      7411          move.l    D2,A0
00004206  3010      7412          move.w    (A0),D0
00004208  E040      7413          asr.w     #8,D0
0000420A  C07C 000F 7414          and.w     #15,D0
0000420E  1D40 FFE9 7415          move.b    D0,-23(A6)
                    7416   ; DecodeBranchCondition(Condition) ;
00004212  122E FFE9 7417          move.b    -23(A6),D1
00004216  C27C 00FF 7418          and.w     #255,D1
0000421A  C2BC 0000 7419          and.l     #65535,D1
0000421E  FFFF      
00004220  2F01      7420          move.l    D1,-(A7)
00004222  4EB8 33D4 7421          jsr       _DecodeBranchCondition
00004226  584F      7422          addq.w    #4,A7
                    7423   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004228  2202      7424          move.l    D2,D1
0000422A  2042      7425          move.l    D2,A0
0000422C  2F00      7426          move.l    D0,-(A7)
0000422E  3028 0002 7427          move.w    2(A0),D0
00004232  48C0      7428          ext.l     D0
00004234  D280      7429          add.l     D0,D1
00004236  201F      7430          move.l    (A7)+,D0
00004238  5481      7431          addq.l    #2,D1
0000423A  2F01      7432          move.l    D1,-(A7)
0000423C  2042      7433          move.l    D2,A0
0000423E  3228 0002 7434          move.w    2(A0),D1
00004242  48C1      7435          ext.l     D1
00004244  2F01      7436          move.l    D1,-(A7)
00004246  2042      7437          move.l    D2,A0
00004248  3210      7438          move.w    (A0),D1
0000424A  C27C 0007 7439          and.w     #7,D1
0000424E  C2BC 0000 7440          and.l     #65535,D1
00004252  FFFF      
00004254  2F01      7441          move.l    D1,-(A7)
00004256  4879 0000 7442          pea       @m68kde~1_238.L
0000425A  7236      
0000425C  2F0C      7443          move.l    A4,-(A7)
0000425E  4E95      7444          jsr       (A5)
00004260  DEFC 0014 7445          add.w     #20,A7
                    7446   ; strcatInstruction(TempString) ;
00004264  2F0C      7447          move.l    A4,-(A7)
00004266  4EB8 0CCC 7448          jsr       _strcatInstruction
0000426A  584F      7449          addq.w    #4,A7
                    7450   DisassembleInstruction_143:
                    7451   ; }
                    7452   ; /////////////////////////////////////////////////////////////////////////////////
                    7453   ; // if instruction is DIVS
                    7454   ; /////////////////////////////////////////////////////////////////////////////////
                    7455   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
0000426C  2042      7456          move.l    D2,A0
0000426E  3010      7457          move.w    (A0),D0
00004270  C07C F1C0 7458          and.w     #61888,D0
00004274  0C40 81C0 7459          cmp.w     #33216,D0
00004278  6600 004A 7460          bne       DisassembleInstruction_145
                    7461   ; {
                    7462   ; InstructionSize = 1;
0000427C  24BC 0000 7463          move.l    #1,(A2)
00004280  0001      
                    7464   ; strcpy(Instruction,"DIVS ") ;
00004282  4879 0000 7465          pea       @m68kde~1_239.L
00004286  724E      
00004288  4879 0803 7466          pea       _Instruction.L
0000428C  04E2      
0000428E  4EB9 0000 7467          jsr       _strcpy
00004292  53CC      
00004294  504F      7468          addq.w    #8,A7
                    7469   ; Decode6BitEA(OpCode,0,0,0) ;
00004296  42A7      7470          clr.l     -(A7)
00004298  42A7      7471          clr.l     -(A7)
0000429A  42A7      7472          clr.l     -(A7)
0000429C  2F02      7473          move.l    D2,-(A7)
0000429E  4EB8 2F16 7474          jsr       _Decode6BitEA
000042A2  DEFC 0010 7475          add.w     #16,A7
                    7476   ; strcatInstruction(",") ;
000042A6  4879 0000 7477          pea       @m68kde~1_174.L
000042AA  70AE      
000042AC  4EB8 0CCC 7478          jsr       _strcatInstruction
000042B0  584F      7479          addq.w    #4,A7
                    7480   ; Decode3BitDataRegister(*OpCode) ;
000042B2  2042      7481          move.l    D2,A0
000042B4  3210      7482          move.w    (A0),D1
000042B6  C2BC 0000 7483          and.l     #65535,D1
000042BA  FFFF      
000042BC  2F01      7484          move.l    D1,-(A7)
000042BE  4EB8 2CDE 7485          jsr       _Decode3BitDataRegister
000042C2  584F      7486          addq.w    #4,A7
                    7487   DisassembleInstruction_145:
                    7488   ; }
                    7489   ; /////////////////////////////////////////////////////////////////////////////////
                    7490   ; // if instruction is DIVU
                    7491   ; /////////////////////////////////////////////////////////////////////////////////
                    7492   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000042C4  2042      7493          move.l    D2,A0
000042C6  3010      7494          move.w    (A0),D0
000042C8  C07C F1C0 7495          and.w     #61888,D0
000042CC  0C40 80C0 7496          cmp.w     #32960,D0
000042D0  6600 004A 7497          bne       DisassembleInstruction_147
                    7498   ; {
                    7499   ; InstructionSize = 1;
000042D4  24BC 0000 7500          move.l    #1,(A2)
000042D8  0001      
                    7501   ; strcpy(Instruction,"DIVU ") ;
000042DA  4879 0000 7502          pea       @m68kde~1_240.L
000042DE  7254      
000042E0  4879 0803 7503          pea       _Instruction.L
000042E4  04E2      
000042E6  4EB9 0000 7504          jsr       _strcpy
000042EA  53CC      
000042EC  504F      7505          addq.w    #8,A7
                    7506   ; Decode6BitEA(OpCode,0,0,0) ;
000042EE  42A7      7507          clr.l     -(A7)
000042F0  42A7      7508          clr.l     -(A7)
000042F2  42A7      7509          clr.l     -(A7)
000042F4  2F02      7510          move.l    D2,-(A7)
000042F6  4EB8 2F16 7511          jsr       _Decode6BitEA
000042FA  DEFC 0010 7512          add.w     #16,A7
                    7513   ; strcatInstruction(",") ;
000042FE  4879 0000 7514          pea       @m68kde~1_174.L
00004302  70AE      
00004304  4EB8 0CCC 7515          jsr       _strcatInstruction
00004308  584F      7516          addq.w    #4,A7
                    7517   ; Decode3BitDataRegister(*OpCode) ;
0000430A  2042      7518          move.l    D2,A0
0000430C  3210      7519          move.w    (A0),D1
0000430E  C2BC 0000 7520          and.l     #65535,D1
00004312  FFFF      
00004314  2F01      7521          move.l    D1,-(A7)
00004316  4EB8 2CDE 7522          jsr       _Decode3BitDataRegister
0000431A  584F      7523          addq.w    #4,A7
                    7524   DisassembleInstruction_147:
                    7525   ; }
                    7526   ; /////////////////////////////////////////////////////////////////////////////////
                    7527   ; // if instruction is EOR
                    7528   ; /////////////////////////////////////////////////////////////////////////////////
                    7529   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
0000431C  2042      7530          move.l    D2,A0
0000431E  3010      7531          move.w    (A0),D0
00004320  C07C F000 7532          and.w     #61440,D0
00004324  0C40 B000 7533          cmp.w     #45056,D0
00004328  6600 004A 7534          bne       DisassembleInstruction_151
                    7535   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
0000432C  2042      7536          move.l    D2,A0
0000432E  3010      7537          move.w    (A0),D0
00004330  EC40      7538          asr.w     #6,D0
00004332  C07C 0007 7539          and.w     #7,D0
00004336  3600      7540          move.w    D0,D3
                    7541   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004338  2042      7542          move.l    D2,A0
0000433A  3010      7543          move.w    (A0),D0
0000433C  E640      7544          asr.w     #3,D0
0000433E  C07C 0007 7545          and.w     #7,D0
00004342  3D40 FFEC 7546          move.w    D0,-20(A6)
                    7547   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004346  0C43 0004 7548          cmp.w     #4,D3
0000434A  6528      7549          blo.s     DisassembleInstruction_151
0000434C  0C43 0006 7550          cmp.w     #6,D3
00004350  6222      7551          bhi.s     DisassembleInstruction_151
00004352  302E FFEC 7552          move.w    -20(A6),D0
00004356  0C40 0001 7553          cmp.w     #1,D0
0000435A  6718      7554          beq.s     DisassembleInstruction_151
                    7555   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7556   ; (EAMode != (unsigned short int)(0x0001)))
                    7557   ; {
                    7558   ; InstructionSize = 1;
0000435C  24BC 0000 7559          move.l    #1,(A2)
00004360  0001      
                    7560   ; strcpyInstruction("EOR") ;
00004362  4879 0000 7561          pea       @m68kde~1_241.L
00004366  725A      
00004368  4E93      7562          jsr       (A3)
0000436A  584F      7563          addq.w    #4,A7
                    7564   ; Decode3BitOperandMode(OpCode);
0000436C  2F02      7565          move.l    D2,-(A7)
0000436E  4EB8 333E 7566          jsr       _Decode3BitOperandMode
00004372  584F      7567          addq.w    #4,A7
                    7568   DisassembleInstruction_151:
                    7569   ; }
                    7570   ; }
                    7571   ; /////////////////////////////////////////////////////////////////////////////////
                    7572   ; // if instruction is EOR to CCR
                    7573   ; /////////////////////////////////////////////////////////////////////////////////
                    7574   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
00004374  2042      7575          move.l    D2,A0
00004376  3010      7576          move.w    (A0),D0
00004378  0C40 0A3C 7577          cmp.w     #2620,D0
0000437C  662C      7578          bne.s     DisassembleInstruction_153
                    7579   ; InstructionSize = 1;
0000437E  24BC 0000 7580          move.l    #1,(A2)
00004382  0001      
                    7581   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004384  2042      7582          move.l    D2,A0
00004386  3228 0002 7583          move.w    2(A0),D1
0000438A  C27C 00FF 7584          and.w     #255,D1
0000438E  C2BC 0000 7585          and.l     #65535,D1
00004392  FFFF      
00004394  2F01      7586          move.l    D1,-(A7)
00004396  4879 0000 7587          pea       @m68kde~1_242.L
0000439A  725E      
0000439C  4879 0803 7588          pea       _Instruction.L
000043A0  04E2      
000043A2  4E95      7589          jsr       (A5)
000043A4  DEFC 000C 7590          add.w     #12,A7
                    7591   ; InstructionSize += 1;
000043A8  5292      7592          addq.l    #1,(A2)
                    7593   DisassembleInstruction_153:
                    7594   ; }
                    7595   ; /////////////////////////////////////////////////////////////////////////////////
                    7596   ; // if instruction is EORI #data,SR
                    7597   ; /////////////////////////////////////////////////////////////////////////////////
                    7598   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000043AA  2042      7599          move.l    D2,A0
000043AC  3010      7600          move.w    (A0),D0
000043AE  0C40 0A7C 7601          cmp.w     #2684,D0
000043B2  6622      7602          bne.s     DisassembleInstruction_155
                    7603   ; InstructionSize = 2;
000043B4  24BC 0000 7604          move.l    #2,(A2)
000043B8  0002      
                    7605   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000043BA  2042      7606          move.l    D2,A0
000043BC  3228 0002 7607          move.w    2(A0),D1
000043C0  48C1      7608          ext.l     D1
000043C2  2F01      7609          move.l    D1,-(A7)
000043C4  4879 0000 7610          pea       @m68kde~1_243.L
000043C8  726E      
000043CA  4879 0803 7611          pea       _Instruction.L
000043CE  04E2      
000043D0  4E95      7612          jsr       (A5)
000043D2  DEFC 000C 7613          add.w     #12,A7
                    7614   DisassembleInstruction_155:
                    7615   ; }
                    7616   ; /////////////////////////////////////////////////////////////////////////////////
                    7617   ; // if instruction is EXG
                    7618   ; /////////////////////////////////////////////////////////////////////////////////
                    7619   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000043D6  2042      7620          move.l    D2,A0
000043D8  3010      7621          move.w    (A0),D0
000043DA  C07C F100 7622          and.w     #61696,D0
000043DE  0C40 C100 7623          cmp.w     #49408,D0
000043E2  6600 00E0 7624          bne       DisassembleInstruction_163
                    7625   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000043E6  2042      7626          move.l    D2,A0
000043E8  3010      7627          move.w    (A0),D0
000043EA  E040      7628          asr.w     #8,D0
000043EC  E240      7629          asr.w     #1,D0
000043EE  C07C 0007 7630          and.w     #7,D0
000043F2  3D40 FFF0 7631          move.w    D0,-16(A6)
                    7632   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
000043F6  2042      7633          move.l    D2,A0
000043F8  3010      7634          move.w    (A0),D0
000043FA  C07C 0007 7635          and.w     #7,D0
000043FE  3D40 FFF2 7636          move.w    D0,-14(A6)
                    7637   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
00004402  2042      7638          move.l    D2,A0
00004404  3010      7639          move.w    (A0),D0
00004406  E640      7640          asr.w     #3,D0
00004408  C07C 001F 7641          and.w     #31,D0
0000440C  3D40 FFF4 7642          move.w    D0,-12(A6)
                    7643   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004410  302E FFF4 7644          move.w    -12(A6),D0
00004414  0C40 0008 7645          cmp.w     #8,D0
00004418  6634      7646          bne.s     DisassembleInstruction_159
                    7647   ; InstructionSize = 1;
0000441A  24BC 0000 7648          move.l    #1,(A2)
0000441E  0001      
                    7649   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004420  322E FFF2 7650          move.w    -14(A6),D1
00004424  C2BC 0000 7651          and.l     #65535,D1
00004428  FFFF      
0000442A  2F01      7652          move.l    D1,-(A7)
0000442C  322E FFF0 7653          move.w    -16(A6),D1
00004430  C2BC 0000 7654          and.l     #65535,D1
00004434  FFFF      
00004436  2F01      7655          move.l    D1,-(A7)
00004438  4879 0000 7656          pea       @m68kde~1_244.L
0000443C  727C      
0000443E  4879 0803 7657          pea       _Instruction.L
00004442  04E2      
00004444  4E95      7658          jsr       (A5)
00004446  DEFC 0010 7659          add.w     #16,A7
0000444A  6000 0078 7660          bra       DisassembleInstruction_163
                    7661   DisassembleInstruction_159:
                    7662   ; }
                    7663   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
0000444E  302E FFF4 7664          move.w    -12(A6),D0
00004452  0C40 0009 7665          cmp.w     #9,D0
00004456  6632      7666          bne.s     DisassembleInstruction_161
                    7667   ; InstructionSize = 1;
00004458  24BC 0000 7668          move.l    #1,(A2)
0000445C  0001      
                    7669   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
0000445E  322E FFF2 7670          move.w    -14(A6),D1
00004462  C2BC 0000 7671          and.l     #65535,D1
00004466  FFFF      
00004468  2F01      7672          move.l    D1,-(A7)
0000446A  322E FFF0 7673          move.w    -16(A6),D1
0000446E  C2BC 0000 7674          and.l     #65535,D1
00004472  FFFF      
00004474  2F01      7675          move.l    D1,-(A7)
00004476  4879 0000 7676          pea       @m68kde~1_245.L
0000447A  7288      
0000447C  4879 0803 7677          pea       _Instruction.L
00004480  04E2      
00004482  4E95      7678          jsr       (A5)
00004484  DEFC 0010 7679          add.w     #16,A7
00004488  603A      7680          bra.s     DisassembleInstruction_163
                    7681   DisassembleInstruction_161:
                    7682   ; }
                    7683   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
0000448A  302E FFF4 7684          move.w    -12(A6),D0
0000448E  0C40 0011 7685          cmp.w     #17,D0
00004492  6630      7686          bne.s     DisassembleInstruction_163
                    7687   ; InstructionSize = 1;
00004494  24BC 0000 7688          move.l    #1,(A2)
00004498  0001      
                    7689   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
0000449A  322E FFF2 7690          move.w    -14(A6),D1
0000449E  C2BC 0000 7691          and.l     #65535,D1
000044A2  FFFF      
000044A4  2F01      7692          move.l    D1,-(A7)
000044A6  322E FFF0 7693          move.w    -16(A6),D1
000044AA  C2BC 0000 7694          and.l     #65535,D1
000044AE  FFFF      
000044B0  2F01      7695          move.l    D1,-(A7)
000044B2  4879 0000 7696          pea       @m68kde~1_246.L
000044B6  7294      
000044B8  4879 0803 7697          pea       _Instruction.L
000044BC  04E2      
000044BE  4E95      7698          jsr       (A5)
000044C0  DEFC 0010 7699          add.w     #16,A7
                    7700   DisassembleInstruction_163:
                    7701   ; }
                    7702   ; }
                    7703   ; /////////////////////////////////////////////////////////////////////////////////
                    7704   ; // if instruction is EXT
                    7705   ; /////////////////////////////////////////////////////////////////////////////////
                    7706   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000044C4  2042      7707          move.l    D2,A0
000044C6  3010      7708          move.w    (A0),D0
000044C8  C07C FE38 7709          and.w     #65080,D0
000044CC  0C40 4800 7710          cmp.w     #18432,D0
000044D0  6600 0054 7711          bne       DisassembleInstruction_165
                    7712   ; {
                    7713   ; InstructionSize = 1;
000044D4  24BC 0000 7714          move.l    #1,(A2)
000044D8  0001      
                    7715   ; strcpy(Instruction,"EXT") ;
000044DA  4879 0000 7716          pea       @m68kde~1_247.L
000044DE  72A0      
000044E0  4879 0803 7717          pea       _Instruction.L
000044E4  04E2      
000044E6  4EB9 0000 7718          jsr       _strcpy
000044EA  53CC      
000044EC  504F      7719          addq.w    #8,A7
                    7720   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000044EE  2042      7721          move.l    D2,A0
000044F0  3010      7722          move.w    (A0),D0
000044F2  C07C 00C0 7723          and.w     #192,D0
000044F6  0C40 00C0 7724          cmp.w     #192,D0
000044FA  660E      7725          bne.s     DisassembleInstruction_167
                    7726   ; strcatInstruction(".L ") ;
000044FC  4879 0000 7727          pea       @m68kde~1_158.L
00004500  7064      
00004502  4EB8 0CCC 7728          jsr       _strcatInstruction
00004506  584F      7729          addq.w    #4,A7
00004508  600C      7730          bra.s     DisassembleInstruction_168
                    7731   DisassembleInstruction_167:
                    7732   ; else
                    7733   ; strcatInstruction(".W ") ;
0000450A  4879 0000 7734          pea       @m68kde~1_157.L
0000450E  7060      
00004510  4EB8 0CCC 7735          jsr       _strcatInstruction
00004514  584F      7736          addq.w    #4,A7
                    7737   DisassembleInstruction_168:
                    7738   ; Decode6BitEA(OpCode,0,0,0) ;
00004516  42A7      7739          clr.l     -(A7)
00004518  42A7      7740          clr.l     -(A7)
0000451A  42A7      7741          clr.l     -(A7)
0000451C  2F02      7742          move.l    D2,-(A7)
0000451E  4EB8 2F16 7743          jsr       _Decode6BitEA
00004522  DEFC 0010 7744          add.w     #16,A7
                    7745   DisassembleInstruction_165:
                    7746   ; }
                    7747   ; /////////////////////////////////////////////////////////////////////////////////
                    7748   ; // if instruction is ILLEGAL $4afc
                    7749   ; /////////////////////////////////////////////////////////////////////////////////
                    7750   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004526  2042      7751          move.l    D2,A0
00004528  3010      7752          move.w    (A0),D0
0000452A  0C40 4AFC 7753          cmp.w     #19196,D0
0000452E  661A      7754          bne.s     DisassembleInstruction_169
                    7755   ; InstructionSize = 1;
00004530  24BC 0000 7756          move.l    #1,(A2)
00004534  0001      
                    7757   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004536  4879 0000 7758          pea       @m68kde~1_248.L
0000453A  72A4      
0000453C  4879 0803 7759          pea       _Instruction.L
00004540  04E2      
00004542  4EB9 0000 7760          jsr       _strcpy
00004546  53CC      
00004548  504F      7761          addq.w    #8,A7
                    7762   DisassembleInstruction_169:
                    7763   ; }
                    7764   ; /////////////////////////////////////////////////////////////////////////////////
                    7765   ; // if instruction is JMP
                    7766   ; /////////////////////////////////////////////////////////////////////////////////
                    7767   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
0000454A  2042      7768          move.l    D2,A0
0000454C  3010      7769          move.w    (A0),D0
0000454E  C07C FFC0 7770          and.w     #65472,D0
00004552  0C40 4EC0 7771          cmp.w     #20160,D0
00004556  662A      7772          bne.s     DisassembleInstruction_171
                    7773   ; {
                    7774   ; InstructionSize = 1;
00004558  24BC 0000 7775          move.l    #1,(A2)
0000455C  0001      
                    7776   ; strcpy(Instruction,"JMP ") ;
0000455E  4879 0000 7777          pea       @m68kde~1_249.L
00004562  72B4      
00004564  4879 0803 7778          pea       _Instruction.L
00004568  04E2      
0000456A  4EB9 0000 7779          jsr       _strcpy
0000456E  53CC      
00004570  504F      7780          addq.w    #8,A7
                    7781   ; Decode6BitEA(OpCode,0,0,0) ;
00004572  42A7      7782          clr.l     -(A7)
00004574  42A7      7783          clr.l     -(A7)
00004576  42A7      7784          clr.l     -(A7)
00004578  2F02      7785          move.l    D2,-(A7)
0000457A  4EB8 2F16 7786          jsr       _Decode6BitEA
0000457E  DEFC 0010 7787          add.w     #16,A7
                    7788   DisassembleInstruction_171:
                    7789   ; }
                    7790   ; /////////////////////////////////////////////////////////////////////////////////
                    7791   ; // if instruction is JSR
                    7792   ; /////////////////////////////////////////////////////////////////////////////////
                    7793   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
00004582  2042      7794          move.l    D2,A0
00004584  3010      7795          move.w    (A0),D0
00004586  C07C FFC0 7796          and.w     #65472,D0
0000458A  0C40 4E80 7797          cmp.w     #20096,D0
0000458E  662A      7798          bne.s     DisassembleInstruction_173
                    7799   ; {
                    7800   ; InstructionSize = 1;
00004590  24BC 0000 7801          move.l    #1,(A2)
00004594  0001      
                    7802   ; strcpy(Instruction,"JSR ") ;
00004596  4879 0000 7803          pea       @m68kde~1_250.L
0000459A  72BA      
0000459C  4879 0803 7804          pea       _Instruction.L
000045A0  04E2      
000045A2  4EB9 0000 7805          jsr       _strcpy
000045A6  53CC      
000045A8  504F      7806          addq.w    #8,A7
                    7807   ; Decode6BitEA(OpCode,0,0,0) ;
000045AA  42A7      7808          clr.l     -(A7)
000045AC  42A7      7809          clr.l     -(A7)
000045AE  42A7      7810          clr.l     -(A7)
000045B0  2F02      7811          move.l    D2,-(A7)
000045B2  4EB8 2F16 7812          jsr       _Decode6BitEA
000045B6  DEFC 0010 7813          add.w     #16,A7
                    7814   DisassembleInstruction_173:
                    7815   ; }
                    7816   ; /////////////////////////////////////////////////////////////////////////////////
                    7817   ; // if instruction is LEA
                    7818   ; /////////////////////////////////////////////////////////////////////////////////
                    7819   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000045BA  2042      7820          move.l    D2,A0
000045BC  3010      7821          move.w    (A0),D0
000045BE  C07C F1C0 7822          and.w     #61888,D0
000045C2  0C40 41C0 7823          cmp.w     #16832,D0
000045C6  6600 0056 7824          bne       DisassembleInstruction_175
                    7825   ; {
                    7826   ; InstructionSize = 1;
000045CA  24BC 0000 7827          move.l    #1,(A2)
000045CE  0001      
                    7828   ; strcpy(Instruction,"LEA ") ;
000045D0  4879 0000 7829          pea       @m68kde~1_251.L
000045D4  72C0      
000045D6  4879 0803 7830          pea       _Instruction.L
000045DA  04E2      
000045DC  4EB9 0000 7831          jsr       _strcpy
000045E0  53CC      
000045E2  504F      7832          addq.w    #8,A7
                    7833   ; Decode6BitEA(OpCode,0,0,0) ;
000045E4  42A7      7834          clr.l     -(A7)
000045E6  42A7      7835          clr.l     -(A7)
000045E8  42A7      7836          clr.l     -(A7)
000045EA  2F02      7837          move.l    D2,-(A7)
000045EC  4EB8 2F16 7838          jsr       _Decode6BitEA
000045F0  DEFC 0010 7839          add.w     #16,A7
                    7840   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
000045F4  2042      7841          move.l    D2,A0
000045F6  3210      7842          move.w    (A0),D1
000045F8  E041      7843          asr.w     #8,D1
000045FA  E241      7844          asr.w     #1,D1
000045FC  C27C 0007 7845          and.w     #7,D1
00004600  C2BC 0000 7846          and.l     #65535,D1
00004604  FFFF      
00004606  2F01      7847          move.l    D1,-(A7)
00004608  4879 0000 7848          pea       @m68kde~1_233.L
0000460C  7214      
0000460E  2F0C      7849          move.l    A4,-(A7)
00004610  4E95      7850          jsr       (A5)
00004612  DEFC 000C 7851          add.w     #12,A7
                    7852   ; strcatInstruction(TempString);
00004616  2F0C      7853          move.l    A4,-(A7)
00004618  4EB8 0CCC 7854          jsr       _strcatInstruction
0000461C  584F      7855          addq.w    #4,A7
                    7856   DisassembleInstruction_175:
                    7857   ; }
                    7858   ; /////////////////////////////////////////////////////////////////////////////////
                    7859   ; // if instruction is LINK.W
                    7860   ; /////////////////////////////////////////////////////////////////////////////////
                    7861   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
0000461E  2042      7862          move.l    D2,A0
00004620  3010      7863          move.w    (A0),D0
00004622  C07C FFF8 7864          and.w     #65528,D0
00004626  0C40 4E50 7865          cmp.w     #20048,D0
0000462A  6600 0052 7866          bne       DisassembleInstruction_177
                    7867   ; {
                    7868   ; InstructionSize = 1;
0000462E  24BC 0000 7869          move.l    #1,(A2)
00004632  0001      
                    7870   ; strcpy(Instruction,"LINK ") ;
00004634  4879 0000 7871          pea       @m68kde~1_252.L
00004638  72C6      
0000463A  4879 0803 7872          pea       _Instruction.L
0000463E  04E2      
00004640  4EB9 0000 7873          jsr       _strcpy
00004644  53CC      
00004646  504F      7874          addq.w    #8,A7
                    7875   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004648  2042      7876          move.l    D2,A0
0000464A  3228 0002 7877          move.w    2(A0),D1
0000464E  48C1      7878          ext.l     D1
00004650  2F01      7879          move.l    D1,-(A7)
00004652  2042      7880          move.l    D2,A0
00004654  3210      7881          move.w    (A0),D1
00004656  C27C 0007 7882          and.w     #7,D1
0000465A  C2BC 0000 7883          and.l     #65535,D1
0000465E  FFFF      
00004660  2F01      7884          move.l    D1,-(A7)
00004662  4879 0000 7885          pea       @m68kde~1_253.L
00004666  72CC      
00004668  2F0C      7886          move.l    A4,-(A7)
0000466A  4E95      7887          jsr       (A5)
0000466C  DEFC 0010 7888          add.w     #16,A7
                    7889   ; InstructionSize = 2 ;
00004670  24BC 0000 7890          move.l    #2,(A2)
00004674  0002      
                    7891   ; strcatInstruction(TempString);
00004676  2F0C      7892          move.l    A4,-(A7)
00004678  4EB8 0CCC 7893          jsr       _strcatInstruction
0000467C  584F      7894          addq.w    #4,A7
                    7895   DisassembleInstruction_177:
                    7896   ; }
                    7897   ; /////////////////////////////////////////////////////////////////////////////////
                    7898   ; // if instruction is MOVE, MOVEA
                    7899   ; /////////////////////////////////////////////////////////////////////////////////
                    7900   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
0000467E  2042      7901          move.l    D2,A0
00004680  3010      7902          move.w    (A0),D0
00004682  C07C C000 7903          and.w     #49152,D0
00004686  6600 00F0 7904          bne       DisassembleInstruction_193
                    7905   ; {
                    7906   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
0000468A  2042      7907          move.l    D2,A0
0000468C  3010      7908          move.w    (A0),D0
0000468E  C07C 3000 7909          and.w     #12288,D0
00004692  E048      7910          lsr.w     #8,D0
00004694  E848      7911          lsr.w     #4,D0
00004696  3D40 FFE2 7912          move.w    D0,-30(A6)
                    7913   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
0000469A  2042      7914          move.l    D2,A0
0000469C  3010      7915          move.w    (A0),D0
0000469E  E640      7916          asr.w     #3,D0
000046A0  C07C 0007 7917          and.w     #7,D0
000046A4  3600      7918          move.w    D0,D3
                    7919   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000046A6  2042      7920          move.l    D2,A0
000046A8  3010      7921          move.w    (A0),D0
000046AA  C07C 0007 7922          and.w     #7,D0
000046AE  3D40 FFF6 7923          move.w    D0,-10(A6)
                    7924   ; DataSize = 0 ;
000046B2  7E00      7925          moveq     #0,D7
                    7926   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    7927   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
000046B4  0C43 0005 7928          cmp.w     #5,D3
000046B8  6706      7929          beq.s     DisassembleInstruction_183
000046BA  0C43 0006 7930          cmp.w     #6,D3
000046BE  6602      7931          bne.s     DisassembleInstruction_181
                    7932   DisassembleInstruction_183:
                    7933   ; DataSize = 1;  // source operands has 1 word after EA
000046C0  7E01      7934          moveq     #1,D7
                    7935   DisassembleInstruction_181:
                    7936   ; // if source addressing mode is a 16 or 32 bit address
                    7937   ; if((OpMode == (unsigned short int)(0x0007))) {
000046C2  0C43 0007 7938          cmp.w     #7,D3
000046C6  660C      7939          bne.s     DisassembleInstruction_187
                    7940   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000046C8  302E FFF6 7941          move.w    -10(A6),D0
000046CC  6604      7942          bne.s     DisassembleInstruction_186
                    7943   ; DataSize = 1 ;
000046CE  7E01      7944          moveq     #1,D7
000046D0  6002      7945          bra.s     DisassembleInstruction_187
                    7946   DisassembleInstruction_186:
                    7947   ; else
                    7948   ; DataSize = 2 ;
000046D2  7E02      7949          moveq     #2,D7
                    7950   DisassembleInstruction_187:
                    7951   ; }
                    7952   ; // if source addressing mode is # then figure out size
                    7953   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
000046D4  0C43 0007 7954          cmp.w     #7,D3
000046D8  6624      7955          bne.s     DisassembleInstruction_191
000046DA  302E FFF6 7956          move.w    -10(A6),D0
000046DE  0C40 0004 7957          cmp.w     #4,D0
000046E2  661A      7958          bne.s     DisassembleInstruction_191
                    7959   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
000046E4  302E FFE2 7960          move.w    -30(A6),D0
000046E8  0C40 0001 7961          cmp.w     #1,D0
000046EC  670A      7962          beq.s     DisassembleInstruction_192
000046EE  302E FFE2 7963          move.w    -30(A6),D0
000046F2  0C40 0003 7964          cmp.w     #3,D0
000046F6  6604      7965          bne.s     DisassembleInstruction_190
                    7966   DisassembleInstruction_192:
                    7967   ; DataSize = 1;
000046F8  7E01      7968          moveq     #1,D7
000046FA  6002      7969          bra.s     DisassembleInstruction_191
                    7970   DisassembleInstruction_190:
                    7971   ; else
                    7972   ; DataSize = 2 ;
000046FC  7E02      7973          moveq     #2,D7
                    7974   DisassembleInstruction_191:
                    7975   ; //printf("DataSize = %d",DataSize) ;
                    7976   ; }
                    7977   ; if(Size != 0)
000046FE  302E FFE2 7978          move.w    -30(A6),D0
00004702  6700 0074 7979          beq       DisassembleInstruction_193
                    7980   ; {
                    7981   ; InstructionSize = 1;
00004706  24BC 0000 7982          move.l    #1,(A2)
0000470A  0001      
                    7983   ; if(Size == 1)
0000470C  302E FFE2 7984          move.w    -30(A6),D0
00004710  0C40 0001 7985          cmp.w     #1,D0
00004714  660C      7986          bne.s     DisassembleInstruction_195
                    7987   ; strcpyInstruction("MOVE.B ") ;
00004716  4879 0000 7988          pea       @m68kde~1_254.L
0000471A  72D4      
0000471C  4E93      7989          jsr       (A3)
0000471E  584F      7990          addq.w    #4,A7
00004720  6020      7991          bra.s     DisassembleInstruction_198
                    7992   DisassembleInstruction_195:
                    7993   ; else if(Size == 2)
00004722  302E FFE2 7994          move.w    -30(A6),D0
00004726  0C40 0002 7995          cmp.w     #2,D0
0000472A  660C      7996          bne.s     DisassembleInstruction_197
                    7997   ; strcpyInstruction("MOVE.L ") ;
0000472C  4879 0000 7998          pea       @m68kde~1_255.L
00004730  72DC      
00004732  4E93      7999          jsr       (A3)
00004734  584F      8000          addq.w    #4,A7
00004736  600A      8001          bra.s     DisassembleInstruction_198
                    8002   DisassembleInstruction_197:
                    8003   ; else
                    8004   ; strcpyInstruction("MOVE.W ") ;
00004738  4879 0000 8005          pea       @m68kde~1_256.L
0000473C  72E4      
0000473E  4E93      8006          jsr       (A3)
00004740  584F      8007          addq.w    #4,A7
                    8008   DisassembleInstruction_198:
                    8009   ; Decode6BitEA(OpCode,0,0,1) ;
00004742  4878 0001 8010          pea       1
00004746  42A7      8011          clr.l     -(A7)
00004748  42A7      8012          clr.l     -(A7)
0000474A  2F02      8013          move.l    D2,-(A7)
0000474C  4EB8 2F16 8014          jsr       _Decode6BitEA
00004750  DEFC 0010 8015          add.w     #16,A7
                    8016   ; strcatInstruction(",") ;
00004754  4879 0000 8017          pea       @m68kde~1_174.L
00004758  70AE      
0000475A  4EB8 0CCC 8018          jsr       _strcatInstruction
0000475E  584F      8019          addq.w    #4,A7
                    8020   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8021   ; // but subtract 1 to make the maths correct in the called function
                    8022   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004760  42A7      8023          clr.l     -(A7)
00004762  CEBC 0000 8024          and.l     #65535,D7
00004766  FFFF      
00004768  2F07      8025          move.l    D7,-(A7)
0000476A  4878 0002 8026          pea       2
0000476E  2F02      8027          move.l    D2,-(A7)
00004770  4EB8 2F16 8028          jsr       _Decode6BitEA
00004774  DEFC 0010 8029          add.w     #16,A7
                    8030   DisassembleInstruction_193:
                    8031   ; }
                    8032   ; }
                    8033   ; /////////////////////////////////////////////////////////////////////////////////
                    8034   ; // if instruction is MOVE <EA>,CCR
                    8035   ; /////////////////////////////////////////////////////////////////////////////////
                    8036   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004778  2042      8037          move.l    D2,A0
0000477A  3010      8038          move.w    (A0),D0
0000477C  C07C FFC0 8039          and.w     #65472,D0
00004780  0C40 44C0 8040          cmp.w     #17600,D0
00004784  6636      8041          bne.s     DisassembleInstruction_199
                    8042   ; {
                    8043   ; InstructionSize = 1;
00004786  24BC 0000 8044          move.l    #1,(A2)
0000478A  0001      
                    8045   ; strcpy(Instruction,"MOVE ") ;
0000478C  4879 0000 8046          pea       @m68kde~1_257.L
00004790  72EC      
00004792  4879 0803 8047          pea       _Instruction.L
00004796  04E2      
00004798  4EB9 0000 8048          jsr       _strcpy
0000479C  53CC      
0000479E  504F      8049          addq.w    #8,A7
                    8050   ; Decode6BitEA(OpCode,0,0,0) ;
000047A0  42A7      8051          clr.l     -(A7)
000047A2  42A7      8052          clr.l     -(A7)
000047A4  42A7      8053          clr.l     -(A7)
000047A6  2F02      8054          move.l    D2,-(A7)
000047A8  4EB8 2F16 8055          jsr       _Decode6BitEA
000047AC  DEFC 0010 8056          add.w     #16,A7
                    8057   ; strcatInstruction(",CCR") ;
000047B0  4879 0000 8058          pea       @m68kde~1_258.L
000047B4  72F2      
000047B6  4EB8 0CCC 8059          jsr       _strcatInstruction
000047BA  584F      8060          addq.w    #4,A7
                    8061   DisassembleInstruction_199:
                    8062   ; }
                    8063   ; /////////////////////////////////////////////////////////////////////////////////
                    8064   ; // if instruction is MOVE SR,<EA>
                    8065   ; /////////////////////////////////////////////////////////////////////////////////
                    8066   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
000047BC  2042      8067          move.l    D2,A0
000047BE  3010      8068          move.w    (A0),D0
000047C0  C07C FFC0 8069          and.w     #65472,D0
000047C4  0C40 40C0 8070          cmp.w     #16576,D0
000047C8  662A      8071          bne.s     DisassembleInstruction_201
                    8072   ; {
                    8073   ; InstructionSize = 1;
000047CA  24BC 0000 8074          move.l    #1,(A2)
000047CE  0001      
                    8075   ; strcpy(Instruction,"MOVE SR,") ;
000047D0  4879 0000 8076          pea       @m68kde~1_259.L
000047D4  72F8      
000047D6  4879 0803 8077          pea       _Instruction.L
000047DA  04E2      
000047DC  4EB9 0000 8078          jsr       _strcpy
000047E0  53CC      
000047E2  504F      8079          addq.w    #8,A7
                    8080   ; Decode6BitEA(OpCode,0,0,0) ;
000047E4  42A7      8081          clr.l     -(A7)
000047E6  42A7      8082          clr.l     -(A7)
000047E8  42A7      8083          clr.l     -(A7)
000047EA  2F02      8084          move.l    D2,-(A7)
000047EC  4EB8 2F16 8085          jsr       _Decode6BitEA
000047F0  DEFC 0010 8086          add.w     #16,A7
                    8087   DisassembleInstruction_201:
                    8088   ; }
                    8089   ; /////////////////////////////////////////////////////////////////////////////////
                    8090   ; // if instruction is MOVE <EA>,SR
                    8091   ; /////////////////////////////////////////////////////////////////////////////////
                    8092   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
000047F4  2042      8093          move.l    D2,A0
000047F6  3010      8094          move.w    (A0),D0
000047F8  C07C FFC0 8095          and.w     #65472,D0
000047FC  0C40 46C0 8096          cmp.w     #18112,D0
00004800  6636      8097          bne.s     DisassembleInstruction_203
                    8098   ; {
                    8099   ; InstructionSize = 1;
00004802  24BC 0000 8100          move.l    #1,(A2)
00004806  0001      
                    8101   ; strcpy(Instruction,"MOVE ") ;
00004808  4879 0000 8102          pea       @m68kde~1_257.L
0000480C  72EC      
0000480E  4879 0803 8103          pea       _Instruction.L
00004812  04E2      
00004814  4EB9 0000 8104          jsr       _strcpy
00004818  53CC      
0000481A  504F      8105          addq.w    #8,A7
                    8106   ; Decode6BitEA(OpCode,0,0,0) ;
0000481C  42A7      8107          clr.l     -(A7)
0000481E  42A7      8108          clr.l     -(A7)
00004820  42A7      8109          clr.l     -(A7)
00004822  2F02      8110          move.l    D2,-(A7)
00004824  4EB8 2F16 8111          jsr       _Decode6BitEA
00004828  DEFC 0010 8112          add.w     #16,A7
                    8113   ; strcatInstruction(",SR") ;
0000482C  4879 0000 8114          pea       @m68kde~1_260.L
00004830  7302      
00004832  4EB8 0CCC 8115          jsr       _strcatInstruction
00004836  584F      8116          addq.w    #4,A7
                    8117   DisassembleInstruction_203:
                    8118   ; }
                    8119   ; /////////////////////////////////////////////////////////////////////////////////
                    8120   ; // if instruction is MOVE USP,An
                    8121   ; /////////////////////////////////////////////////////////////////////////////////
                    8122   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004838  2042      8123          move.l    D2,A0
0000483A  3010      8124          move.w    (A0),D0
0000483C  C07C FFF0 8125          and.w     #65520,D0
00004840  0C40 4E60 8126          cmp.w     #20064,D0
00004844  6600 0060 8127          bne       DisassembleInstruction_208
                    8128   ; {
                    8129   ; InstructionSize = 1;
00004848  24BC 0000 8130          move.l    #1,(A2)
0000484C  0001      
                    8131   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
0000484E  2042      8132          move.l    D2,A0
00004850  3010      8133          move.w    (A0),D0
00004852  C07C 0007 8134          and.w     #7,D0
00004856  3D40 FFEA 8135          move.w    D0,-22(A6)
                    8136   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
0000485A  2042      8137          move.l    D2,A0
0000485C  3010      8138          move.w    (A0),D0
0000485E  C07C 0008 8139          and.w     #8,D0
00004862  0C40 0008 8140          cmp.w     #8,D0
00004866  6620      8141          bne.s     DisassembleInstruction_207
                    8142   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004868  322E FFEA 8143          move.w    -22(A6),D1
0000486C  C2BC 0000 8144          and.l     #65535,D1
00004870  FFFF      
00004872  2F01      8145          move.l    D1,-(A7)
00004874  4879 0000 8146          pea       @m68kde~1_261.L
00004878  7306      
0000487A  4879 0803 8147          pea       _Instruction.L
0000487E  04E2      
00004880  4E95      8148          jsr       (A5)
00004882  DEFC 000C 8149          add.w     #12,A7
00004886  601E      8150          bra.s     DisassembleInstruction_208
                    8151   DisassembleInstruction_207:
                    8152   ; else
                    8153   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004888  322E FFEA 8154          move.w    -22(A6),D1
0000488C  C2BC 0000 8155          and.l     #65535,D1
00004890  FFFF      
00004892  2F01      8156          move.l    D1,-(A7)
00004894  4879 0000 8157          pea       @m68kde~1_262.L
00004898  7314      
0000489A  4879 0803 8158          pea       _Instruction.L
0000489E  04E2      
000048A0  4E95      8159          jsr       (A5)
000048A2  DEFC 000C 8160          add.w     #12,A7
                    8161   DisassembleInstruction_208:
                    8162   ; }
                    8163   ; /////////////////////////////////////////////////////////////////////////////////
                    8164   ; // if instruction is MOVEM
                    8165   ; /////////////////////////////////////////////////////////////////////////////////
                    8166   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
000048A6  2042      8167          move.l    D2,A0
000048A8  3010      8168          move.w    (A0),D0
000048AA  C07C FB80 8169          and.w     #64384,D0
000048AE  0C40 4880 8170          cmp.w     #18560,D0
000048B2  6600 01FC 8171          bne       DisassembleInstruction_230
                    8172   ; {
                    8173   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
000048B6  2042      8174          move.l    D2,A0
000048B8  3010      8175          move.w    (A0),D0
000048BA  E640      8176          asr.w     #3,D0
000048BC  C07C 0007 8177          and.w     #7,D0
000048C0  3600      8178          move.w    D0,D3
                    8179   ; if( (OpMode != (unsigned short int)(0x0)) &&
000048C2  4A43      8180          tst.w     D3
000048C4  6700 01EA 8181          beq       DisassembleInstruction_230
000048C8  0C43 0001 8182          cmp.w     #1,D3
000048CC  6700 01E2 8183          beq       DisassembleInstruction_230
000048D0  4A43      8184          tst.w     D3
000048D2  6700 01DC 8185          beq       DisassembleInstruction_230
                    8186   ; (OpMode != (unsigned short int)(0x1)) &&
                    8187   ; (OpMode != (unsigned short int)(0x0)))
                    8188   ; {
                    8189   ; InstructionSize = 1;
000048D6  24BC 0000 8190          move.l    #1,(A2)
000048DA  0001      
                    8191   ; strcpy(Instruction,"MOVEM") ;
000048DC  4879 0000 8192          pea       @m68kde~1_263.L
000048E0  7322      
000048E2  4879 0803 8193          pea       _Instruction.L
000048E6  04E2      
000048E8  4EB9 0000 8194          jsr       _strcpy
000048EC  53CC      
000048EE  504F      8195          addq.w    #8,A7
                    8196   ; InstructionSize ++ ;
000048F0  5292      8197          addq.l    #1,(A2)
                    8198   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
000048F2  2042      8199          move.l    D2,A0
000048F4  3010      8200          move.w    (A0),D0
000048F6  C07C 0040 8201          and.w     #64,D0
000048FA  660E      8202          bne.s     DisassembleInstruction_213
                    8203   ; strcatInstruction(".W ") ;
000048FC  4879 0000 8204          pea       @m68kde~1_157.L
00004900  7060      
00004902  4EB8 0CCC 8205          jsr       _strcatInstruction
00004906  584F      8206          addq.w    #4,A7
00004908  600C      8207          bra.s     DisassembleInstruction_214
                    8208   DisassembleInstruction_213:
                    8209   ; else
                    8210   ; strcatInstruction(".L ") ;
0000490A  4879 0000 8211          pea       @m68kde~1_158.L
0000490E  7064      
00004910  4EB8 0CCC 8212          jsr       _strcatInstruction
00004914  584F      8213          addq.w    #4,A7
                    8214   DisassembleInstruction_214:
                    8215   ; // movem  reg,-(An) if bit 10 = 0
                    8216   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004916  2042      8217          move.l    D2,A0
00004918  3010      8218          move.w    (A0),D0
0000491A  C07C 0400 8219          and.w     #1024,D0
0000491E  6600 00D2 8220          bne       DisassembleInstruction_215
                    8221   ; {
                    8222   ; Mask = 0x8000 ;                     // bit 15 = 1
00004922  3D7C 8000 8223          move.w    #32768,-2(A6)
00004926  FFFE      
                    8224   ; DoneSlash = 0 ;
00004928  4246      8225          clr.w     D6
                    8226   ; for(i = 0; i < 16; i ++)    {
0000492A  4284      8227          clr.l     D4
                    8228   DisassembleInstruction_217:
0000492C  0C84 0000 8229          cmp.l     #16,D4
00004930  0010      
00004932  6C00 009E 8230          bge       DisassembleInstruction_219
                    8231   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004936  4879 0000 8232          pea       @m68kde~1_33.L
0000493A  61F4      
0000493C  4EB9 0000 8233          jsr       _printf
00004940  559E      
00004942  584F      8234          addq.w    #4,A7
                    8235   ; if((OpCode[1] & Mask) == Mask)    {
00004944  2042      8236          move.l    D2,A0
00004946  3028 0002 8237          move.w    2(A0),D0
0000494A  C06E FFFE 8238          and.w     -2(A6),D0
0000494E  B06E FFFE 8239          cmp.w     -2(A6),D0
00004952  6600 006E 8240          bne       DisassembleInstruction_220
                    8241   ; if(i < 8 )  {
00004956  0C84 0000 8242          cmp.l     #8,D4
0000495A  0008      
0000495C  6C2C      8243          bge.s     DisassembleInstruction_222
                    8244   ; if(DoneSlash == 0)  {
0000495E  4A46      8245          tst.w     D6
00004960  6614      8246          bne.s     DisassembleInstruction_224
                    8247   ; sprintf(TempString, "D%d", i) ;
00004962  2F04      8248          move.l    D4,-(A7)
00004964  4879 0000 8249          pea       @m68kde~1_264.L
00004968  7328      
0000496A  2F0C      8250          move.l    A4,-(A7)
0000496C  4E95      8251          jsr       (A5)
0000496E  DEFC 000C 8252          add.w     #12,A7
                    8253   ; DoneSlash = 1;
00004972  7C01      8254          moveq     #1,D6
00004974  6010      8255          bra.s     DisassembleInstruction_225
                    8256   DisassembleInstruction_224:
                    8257   ; }
                    8258   ; else
                    8259   ; sprintf(TempString, "/D%d", i) ;
00004976  2F04      8260          move.l    D4,-(A7)
00004978  4879 0000 8261          pea       @m68kde~1_265.L
0000497C  732C      
0000497E  2F0C      8262          move.l    A4,-(A7)
00004980  4E95      8263          jsr       (A5)
00004982  DEFC 000C 8264          add.w     #12,A7
                    8265   DisassembleInstruction_225:
00004986  6000 0032 8266          bra       DisassembleInstruction_227
                    8267   DisassembleInstruction_222:
                    8268   ; }
                    8269   ; else   {
                    8270   ; if(DoneSlash == 0)  {
0000498A  4A46      8271          tst.w     D6
0000498C  6618      8272          bne.s     DisassembleInstruction_226
                    8273   ; sprintf(TempString, "A%d", i-8) ;
0000498E  2204      8274          move.l    D4,D1
00004990  5181      8275          subq.l    #8,D1
00004992  2F01      8276          move.l    D1,-(A7)
00004994  4879 0000 8277          pea       @m68kde~1_266.L
00004998  7332      
0000499A  2F0C      8278          move.l    A4,-(A7)
0000499C  4E95      8279          jsr       (A5)
0000499E  DEFC 000C 8280          add.w     #12,A7
                    8281   ; DoneSlash = 1;
000049A2  7C01      8282          moveq     #1,D6
000049A4  6014      8283          bra.s     DisassembleInstruction_227
                    8284   DisassembleInstruction_226:
                    8285   ; }
                    8286   ; else
                    8287   ; sprintf(TempString, "/A%d", i-8) ;
000049A6  2204      8288          move.l    D4,D1
000049A8  5181      8289          subq.l    #8,D1
000049AA  2F01      8290          move.l    D1,-(A7)
000049AC  4879 0000 8291          pea       @m68kde~1_267.L
000049B0  7336      
000049B2  2F0C      8292          move.l    A4,-(A7)
000049B4  4E95      8293          jsr       (A5)
000049B6  DEFC 000C 8294          add.w     #12,A7
                    8295   DisassembleInstruction_227:
                    8296   ; }
                    8297   ; strcatInstruction(TempString) ;
000049BA  2F0C      8298          move.l    A4,-(A7)
000049BC  4EB8 0CCC 8299          jsr       _strcatInstruction
000049C0  584F      8300          addq.w    #4,A7
                    8301   DisassembleInstruction_220:
                    8302   ; }
                    8303   ; Mask = Mask >> 1 ;
000049C2  302E FFFE 8304          move.w    -2(A6),D0
000049C6  E240      8305          asr.w     #1,D0
000049C8  3D40 FFFE 8306          move.w    D0,-2(A6)
000049CC  5284      8307          addq.l    #1,D4
000049CE  6000 FF5C 8308          bra       DisassembleInstruction_217
                    8309   DisassembleInstruction_219:
                    8310   ; }
                    8311   ; strcatInstruction(",") ;
000049D2  4879 0000 8312          pea       @m68kde~1_174.L
000049D6  70AE      
000049D8  4EB8 0CCC 8313          jsr       _strcatInstruction
000049DC  584F      8314          addq.w    #4,A7
                    8315   ; Decode6BitEA(OpCode,0,0,0) ;
000049DE  42A7      8316          clr.l     -(A7)
000049E0  42A7      8317          clr.l     -(A7)
000049E2  42A7      8318          clr.l     -(A7)
000049E4  2F02      8319          move.l    D2,-(A7)
000049E6  4EB8 2F16 8320          jsr       _Decode6BitEA
000049EA  DEFC 0010 8321          add.w     #16,A7
000049EE  6000 00C0 8322          bra       DisassembleInstruction_230
                    8323   DisassembleInstruction_215:
                    8324   ; }
                    8325   ; //movem  (An)+,reg
                    8326   ; else    {
                    8327   ; Decode6BitEA(OpCode,0,0,0) ;
000049F2  42A7      8328          clr.l     -(A7)
000049F4  42A7      8329          clr.l     -(A7)
000049F6  42A7      8330          clr.l     -(A7)
000049F8  2F02      8331          move.l    D2,-(A7)
000049FA  4EB8 2F16 8332          jsr       _Decode6BitEA
000049FE  DEFC 0010 8333          add.w     #16,A7
                    8334   ; strcatInstruction(",") ;
00004A02  4879 0000 8335          pea       @m68kde~1_174.L
00004A06  70AE      
00004A08  4EB8 0CCC 8336          jsr       _strcatInstruction
00004A0C  584F      8337          addq.w    #4,A7
                    8338   ; Mask = 0x0001 ;                     // bit 0 = 1
00004A0E  3D7C 0001 8339          move.w    #1,-2(A6)
00004A12  FFFE      
                    8340   ; DoneSlash = 0 ;
00004A14  4246      8341          clr.w     D6
                    8342   ; for(i = 0; i < 16 ; i ++)    {
00004A16  4284      8343          clr.l     D4
                    8344   DisassembleInstruction_228:
00004A18  0C84 0000 8345          cmp.l     #16,D4
00004A1C  0010      
00004A1E  6C00 0090 8346          bge       DisassembleInstruction_230
                    8347   ; if((OpCode[1] & Mask) == Mask)    {
00004A22  2042      8348          move.l    D2,A0
00004A24  3028 0002 8349          move.w    2(A0),D0
00004A28  C06E FFFE 8350          and.w     -2(A6),D0
00004A2C  B06E FFFE 8351          cmp.w     -2(A6),D0
00004A30  6600 006E 8352          bne       DisassembleInstruction_231
                    8353   ; if(i < 8)   {       // data registers in bits 7-0
00004A34  0C84 0000 8354          cmp.l     #8,D4
00004A38  0008      
00004A3A  6C2C      8355          bge.s     DisassembleInstruction_233
                    8356   ; if(DoneSlash == 0)  {
00004A3C  4A46      8357          tst.w     D6
00004A3E  6614      8358          bne.s     DisassembleInstruction_235
                    8359   ; sprintf(TempString, "D%d", i) ;
00004A40  2F04      8360          move.l    D4,-(A7)
00004A42  4879 0000 8361          pea       @m68kde~1_264.L
00004A46  7328      
00004A48  2F0C      8362          move.l    A4,-(A7)
00004A4A  4E95      8363          jsr       (A5)
00004A4C  DEFC 000C 8364          add.w     #12,A7
                    8365   ; DoneSlash = 1;
00004A50  7C01      8366          moveq     #1,D6
00004A52  6010      8367          bra.s     DisassembleInstruction_236
                    8368   DisassembleInstruction_235:
                    8369   ; }
                    8370   ; else
                    8371   ; sprintf(TempString, "/D%d", i) ;
00004A54  2F04      8372          move.l    D4,-(A7)
00004A56  4879 0000 8373          pea       @m68kde~1_265.L
00004A5A  732C      
00004A5C  2F0C      8374          move.l    A4,-(A7)
00004A5E  4E95      8375          jsr       (A5)
00004A60  DEFC 000C 8376          add.w     #12,A7
                    8377   DisassembleInstruction_236:
00004A64  6000 0032 8378          bra       DisassembleInstruction_238
                    8379   DisassembleInstruction_233:
                    8380   ; }
                    8381   ; else    {
                    8382   ; if(DoneSlash == 0)  {
00004A68  4A46      8383          tst.w     D6
00004A6A  6618      8384          bne.s     DisassembleInstruction_237
                    8385   ; sprintf(TempString, "A%d", i-8) ;
00004A6C  2204      8386          move.l    D4,D1
00004A6E  5181      8387          subq.l    #8,D1
00004A70  2F01      8388          move.l    D1,-(A7)
00004A72  4879 0000 8389          pea       @m68kde~1_266.L
00004A76  7332      
00004A78  2F0C      8390          move.l    A4,-(A7)
00004A7A  4E95      8391          jsr       (A5)
00004A7C  DEFC 000C 8392          add.w     #12,A7
                    8393   ; DoneSlash = 1;
00004A80  7C01      8394          moveq     #1,D6
00004A82  6014      8395          bra.s     DisassembleInstruction_238
                    8396   DisassembleInstruction_237:
                    8397   ; }
                    8398   ; else
                    8399   ; sprintf(TempString, "/A%d", i-8) ;
00004A84  2204      8400          move.l    D4,D1
00004A86  5181      8401          subq.l    #8,D1
00004A88  2F01      8402          move.l    D1,-(A7)
00004A8A  4879 0000 8403          pea       @m68kde~1_267.L
00004A8E  7336      
00004A90  2F0C      8404          move.l    A4,-(A7)
00004A92  4E95      8405          jsr       (A5)
00004A94  DEFC 000C 8406          add.w     #12,A7
                    8407   DisassembleInstruction_238:
                    8408   ; }
                    8409   ; strcatInstruction(TempString) ;
00004A98  2F0C      8410          move.l    A4,-(A7)
00004A9A  4EB8 0CCC 8411          jsr       _strcatInstruction
00004A9E  584F      8412          addq.w    #4,A7
                    8413   DisassembleInstruction_231:
                    8414   ; }
                    8415   ; Mask = Mask << 1 ;
00004AA0  302E FFFE 8416          move.w    -2(A6),D0
00004AA4  E340      8417          asl.w     #1,D0
00004AA6  3D40 FFFE 8418          move.w    D0,-2(A6)
00004AAA  5284      8419          addq.l    #1,D4
00004AAC  6000 FF6A 8420          bra       DisassembleInstruction_228
                    8421   DisassembleInstruction_230:
                    8422   ; }
                    8423   ; }
                    8424   ; }
                    8425   ; }
                    8426   ; /////////////////////////////////////////////////////////////////////////////////
                    8427   ; // if instruction is MOVEP
                    8428   ; /////////////////////////////////////////////////////////////////////////////////
                    8429   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004AB0  2042      8430          move.l    D2,A0
00004AB2  3010      8431          move.w    (A0),D0
00004AB4  C07C F038 8432          and.w     #61496,D0
00004AB8  0C40 0008 8433          cmp.w     #8,D0
00004ABC  6600 0112 8434          bne       DisassembleInstruction_247
                    8435   ; {
                    8436   ; InstructionSize = 1;
00004AC0  24BC 0000 8437          move.l    #1,(A2)
00004AC4  0001      
                    8438   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004AC6  2042      8439          move.l    D2,A0
00004AC8  3010      8440          move.w    (A0),D0
00004ACA  E040      8441          asr.w     #8,D0
00004ACC  E240      8442          asr.w     #1,D0
00004ACE  C07C 0007 8443          and.w     #7,D0
00004AD2  3A00      8444          move.w    D0,D5
                    8445   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004AD4  2042      8446          move.l    D2,A0
00004AD6  3010      8447          move.w    (A0),D0
00004AD8  C07C 0007 8448          and.w     #7,D0
00004ADC  3D40 FFF8 8449          move.w    D0,-8(A6)
                    8450   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004AE0  2042      8451          move.l    D2,A0
00004AE2  3010      8452          move.w    (A0),D0
00004AE4  EC40      8453          asr.w     #6,D0
00004AE6  C07C 0007 8454          and.w     #7,D0
00004AEA  3600      8455          move.w    D0,D3
                    8456   ; InstructionSize++ ;
00004AEC  5292      8457          addq.l    #1,(A2)
                    8458   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004AEE  0C43 0004 8459          cmp.w     #4,D3
00004AF2  6634      8460          bne.s     DisassembleInstruction_241
                    8461   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004AF4  CABC 0000 8462          and.l     #65535,D5
00004AF8  FFFF      
00004AFA  2F05      8463          move.l    D5,-(A7)
00004AFC  322E FFF8 8464          move.w    -8(A6),D1
00004B00  C2BC 0000 8465          and.l     #65535,D1
00004B04  FFFF      
00004B06  2F01      8466          move.l    D1,-(A7)
00004B08  2042      8467          move.l    D2,A0
00004B0A  3228 0002 8468          move.w    2(A0),D1
00004B0E  48C1      8469          ext.l     D1
00004B10  2F01      8470          move.l    D1,-(A7)
00004B12  4879 0000 8471          pea       @m68kde~1_268.L
00004B16  733C      
00004B18  4879 0803 8472          pea       _Instruction.L
00004B1C  04E2      
00004B1E  4E95      8473          jsr       (A5)
00004B20  DEFC 0014 8474          add.w     #20,A7
00004B24  6000 00AA 8475          bra       DisassembleInstruction_247
                    8476   DisassembleInstruction_241:
                    8477   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004B28  0C43 0005 8478          cmp.w     #5,D3
00004B2C  6634      8479          bne.s     DisassembleInstruction_243
                    8480   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004B2E  CABC 0000 8481          and.l     #65535,D5
00004B32  FFFF      
00004B34  2F05      8482          move.l    D5,-(A7)
00004B36  322E FFF8 8483          move.w    -8(A6),D1
00004B3A  C2BC 0000 8484          and.l     #65535,D1
00004B3E  FFFF      
00004B40  2F01      8485          move.l    D1,-(A7)
00004B42  2042      8486          move.l    D2,A0
00004B44  3228 0002 8487          move.w    2(A0),D1
00004B48  48C1      8488          ext.l     D1
00004B4A  2F01      8489          move.l    D1,-(A7)
00004B4C  4879 0000 8490          pea       @m68kde~1_269.L
00004B50  7352      
00004B52  4879 0803 8491          pea       _Instruction.L
00004B56  04E2      
00004B58  4E95      8492          jsr       (A5)
00004B5A  DEFC 0014 8493          add.w     #20,A7
00004B5E  6000 0070 8494          bra       DisassembleInstruction_247
                    8495   DisassembleInstruction_243:
                    8496   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004B62  0C43 0006 8497          cmp.w     #6,D3
00004B66  6632      8498          bne.s     DisassembleInstruction_245
                    8499   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004B68  322E FFF8 8500          move.w    -8(A6),D1
00004B6C  C2BC 0000 8501          and.l     #65535,D1
00004B70  FFFF      
00004B72  2F01      8502          move.l    D1,-(A7)
00004B74  2042      8503          move.l    D2,A0
00004B76  3228 0002 8504          move.w    2(A0),D1
00004B7A  48C1      8505          ext.l     D1
00004B7C  2F01      8506          move.l    D1,-(A7)
00004B7E  CABC 0000 8507          and.l     #65535,D5
00004B82  FFFF      
00004B84  2F05      8508          move.l    D5,-(A7)
00004B86  4879 0000 8509          pea       @m68kde~1_270.L
00004B8A  7368      
00004B8C  4879 0803 8510          pea       _Instruction.L
00004B90  04E2      
00004B92  4E95      8511          jsr       (A5)
00004B94  DEFC 0014 8512          add.w     #20,A7
00004B98  6036      8513          bra.s     DisassembleInstruction_247
                    8514   DisassembleInstruction_245:
                    8515   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004B9A  0C43 0007 8516          cmp.w     #7,D3
00004B9E  6630      8517          bne.s     DisassembleInstruction_247
                    8518   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004BA0  322E FFF8 8519          move.w    -8(A6),D1
00004BA4  C2BC 0000 8520          and.l     #65535,D1
00004BA8  FFFF      
00004BAA  2F01      8521          move.l    D1,-(A7)
00004BAC  2042      8522          move.l    D2,A0
00004BAE  3228 0002 8523          move.w    2(A0),D1
00004BB2  48C1      8524          ext.l     D1
00004BB4  2F01      8525          move.l    D1,-(A7)
00004BB6  CABC 0000 8526          and.l     #65535,D5
00004BBA  FFFF      
00004BBC  2F05      8527          move.l    D5,-(A7)
00004BBE  4879 0000 8528          pea       @m68kde~1_271.L
00004BC2  737E      
00004BC4  4879 0803 8529          pea       _Instruction.L
00004BC8  04E2      
00004BCA  4E95      8530          jsr       (A5)
00004BCC  DEFC 0014 8531          add.w     #20,A7
                    8532   DisassembleInstruction_247:
                    8533   ; }
                    8534   ; /////////////////////////////////////////////////////////////////////////////////
                    8535   ; // if instruction is MOVEQ
                    8536   ; /////////////////////////////////////////////////////////////////////////////////
                    8537   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004BD0  2042      8538          move.l    D2,A0
00004BD2  3010      8539          move.w    (A0),D0
00004BD4  C07C F100 8540          and.w     #61696,D0
00004BD8  0C40 7000 8541          cmp.w     #28672,D0
00004BDC  6600 0040 8542          bne       DisassembleInstruction_249
                    8543   ; {
                    8544   ; InstructionSize = 1;
00004BE0  24BC 0000 8545          move.l    #1,(A2)
00004BE4  0001      
                    8546   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004BE6  2042      8547          move.l    D2,A0
00004BE8  3010      8548          move.w    (A0),D0
00004BEA  E040      8549          asr.w     #8,D0
00004BEC  E240      8550          asr.w     #1,D0
00004BEE  C07C 0007 8551          and.w     #7,D0
00004BF2  3A00      8552          move.w    D0,D5
                    8553   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004BF4  CABC 0000 8554          and.l     #65535,D5
00004BF8  FFFF      
00004BFA  2F05      8555          move.l    D5,-(A7)
00004BFC  2042      8556          move.l    D2,A0
00004BFE  3210      8557          move.w    (A0),D1
00004C00  C27C 00FF 8558          and.w     #255,D1
00004C04  C2BC 0000 8559          and.l     #65535,D1
00004C08  FFFF      
00004C0A  2F01      8560          move.l    D1,-(A7)
00004C0C  4879 0000 8561          pea       @m68kde~1_272.L
00004C10  7394      
00004C12  4879 0803 8562          pea       _Instruction.L
00004C16  04E2      
00004C18  4E95      8563          jsr       (A5)
00004C1A  DEFC 0010 8564          add.w     #16,A7
                    8565   DisassembleInstruction_249:
                    8566   ; }
                    8567   ; /////////////////////////////////////////////////////////////////////////////////
                    8568   ; // if instruction is MULS.W
                    8569   ; /////////////////////////////////////////////////////////////////////////////////
                    8570   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004C1E  2042      8571          move.l    D2,A0
00004C20  3010      8572          move.w    (A0),D0
00004C22  C07C F1C0 8573          and.w     #61888,D0
00004C26  0C40 C1C0 8574          cmp.w     #49600,D0
00004C2A  6600 004E 8575          bne       DisassembleInstruction_251
                    8576   ; {
                    8577   ; InstructionSize = 1;
00004C2E  24BC 0000 8578          move.l    #1,(A2)
00004C32  0001      
                    8579   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C34  2042      8580          move.l    D2,A0
00004C36  3010      8581          move.w    (A0),D0
00004C38  E040      8582          asr.w     #8,D0
00004C3A  E240      8583          asr.w     #1,D0
00004C3C  C07C 0007 8584          and.w     #7,D0
00004C40  3A00      8585          move.w    D0,D5
                    8586   ; strcpyInstruction("MULS ");
00004C42  4879 0000 8587          pea       @m68kde~1_273.L
00004C46  73A4      
00004C48  4E93      8588          jsr       (A3)
00004C4A  584F      8589          addq.w    #4,A7
                    8590   ; Decode6BitEA(OpCode,0,0,0) ;
00004C4C  42A7      8591          clr.l     -(A7)
00004C4E  42A7      8592          clr.l     -(A7)
00004C50  42A7      8593          clr.l     -(A7)
00004C52  2F02      8594          move.l    D2,-(A7)
00004C54  4EB8 2F16 8595          jsr       _Decode6BitEA
00004C58  DEFC 0010 8596          add.w     #16,A7
                    8597   ; sprintf(TempString, ",D%d", DataRegister) ;
00004C5C  CABC 0000 8598          and.l     #65535,D5
00004C60  FFFF      
00004C62  2F05      8599          move.l    D5,-(A7)
00004C64  4879 0000 8600          pea       @m68kde~1_229.L
00004C68  71FA      
00004C6A  2F0C      8601          move.l    A4,-(A7)
00004C6C  4E95      8602          jsr       (A5)
00004C6E  DEFC 000C 8603          add.w     #12,A7
                    8604   ; strcatInstruction(TempString);
00004C72  2F0C      8605          move.l    A4,-(A7)
00004C74  4EB8 0CCC 8606          jsr       _strcatInstruction
00004C78  584F      8607          addq.w    #4,A7
                    8608   DisassembleInstruction_251:
                    8609   ; }
                    8610   ; /////////////////////////////////////////////////////////////////////////////////
                    8611   ; // if instruction is MULU.W
                    8612   ; /////////////////////////////////////////////////////////////////////////////////
                    8613   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004C7A  2042      8614          move.l    D2,A0
00004C7C  3010      8615          move.w    (A0),D0
00004C7E  C07C F1C0 8616          and.w     #61888,D0
00004C82  0C40 C0C0 8617          cmp.w     #49344,D0
00004C86  6600 004E 8618          bne       DisassembleInstruction_253
                    8619   ; {
                    8620   ; InstructionSize = 1;
00004C8A  24BC 0000 8621          move.l    #1,(A2)
00004C8E  0001      
                    8622   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C90  2042      8623          move.l    D2,A0
00004C92  3010      8624          move.w    (A0),D0
00004C94  E040      8625          asr.w     #8,D0
00004C96  E240      8626          asr.w     #1,D0
00004C98  C07C 0007 8627          and.w     #7,D0
00004C9C  3A00      8628          move.w    D0,D5
                    8629   ; strcpyInstruction("MULU ");
00004C9E  4879 0000 8630          pea       @m68kde~1_274.L
00004CA2  73AA      
00004CA4  4E93      8631          jsr       (A3)
00004CA6  584F      8632          addq.w    #4,A7
                    8633   ; Decode6BitEA(OpCode,0,0,0) ;
00004CA8  42A7      8634          clr.l     -(A7)
00004CAA  42A7      8635          clr.l     -(A7)
00004CAC  42A7      8636          clr.l     -(A7)
00004CAE  2F02      8637          move.l    D2,-(A7)
00004CB0  4EB8 2F16 8638          jsr       _Decode6BitEA
00004CB4  DEFC 0010 8639          add.w     #16,A7
                    8640   ; sprintf(TempString, ",D%d", DataRegister) ;
00004CB8  CABC 0000 8641          and.l     #65535,D5
00004CBC  FFFF      
00004CBE  2F05      8642          move.l    D5,-(A7)
00004CC0  4879 0000 8643          pea       @m68kde~1_229.L
00004CC4  71FA      
00004CC6  2F0C      8644          move.l    A4,-(A7)
00004CC8  4E95      8645          jsr       (A5)
00004CCA  DEFC 000C 8646          add.w     #12,A7
                    8647   ; strcatInstruction(TempString);
00004CCE  2F0C      8648          move.l    A4,-(A7)
00004CD0  4EB8 0CCC 8649          jsr       _strcatInstruction
00004CD4  584F      8650          addq.w    #4,A7
                    8651   DisassembleInstruction_253:
                    8652   ; }
                    8653   ; /////////////////////////////////////////////////////////////////////////////////
                    8654   ; // if instruction is NBCD <EA>
                    8655   ; /////////////////////////////////////////////////////////////////////////////////
                    8656   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004CD6  2042      8657          move.l    D2,A0
00004CD8  3010      8658          move.w    (A0),D0
00004CDA  C07C FFC0 8659          and.w     #65472,D0
00004CDE  0C40 4800 8660          cmp.w     #18432,D0
00004CE2  6620      8661          bne.s     DisassembleInstruction_255
                    8662   ; {
                    8663   ; InstructionSize = 1;
00004CE4  24BC 0000 8664          move.l    #1,(A2)
00004CE8  0001      
                    8665   ; strcpyInstruction("NBCD ");
00004CEA  4879 0000 8666          pea       @m68kde~1_275.L
00004CEE  73B0      
00004CF0  4E93      8667          jsr       (A3)
00004CF2  584F      8668          addq.w    #4,A7
                    8669   ; Decode6BitEA(OpCode,0,0,0);
00004CF4  42A7      8670          clr.l     -(A7)
00004CF6  42A7      8671          clr.l     -(A7)
00004CF8  42A7      8672          clr.l     -(A7)
00004CFA  2F02      8673          move.l    D2,-(A7)
00004CFC  4EB8 2F16 8674          jsr       _Decode6BitEA
00004D00  DEFC 0010 8675          add.w     #16,A7
                    8676   DisassembleInstruction_255:
                    8677   ; }
                    8678   ; /////////////////////////////////////////////////////////////////////////////////
                    8679   ; // if instruction is NEG <EA>
                    8680   ; /////////////////////////////////////////////////////////////////////////////////
                    8681   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004D04  2042      8682          move.l    D2,A0
00004D06  3010      8683          move.w    (A0),D0
00004D08  C07C FF00 8684          and.w     #65280,D0
00004D0C  0C40 4400 8685          cmp.w     #17408,D0
00004D10  6600 0046 8686          bne       DisassembleInstruction_259
                    8687   ; {
                    8688   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004D14  2042      8689          move.l    D2,A0
00004D16  3010      8690          move.w    (A0),D0
00004D18  EC40      8691          asr.w     #6,D0
00004D1A  C07C 0003 8692          and.w     #3,D0
00004D1E  0C40 0003 8693          cmp.w     #3,D0
00004D22  6700 0034 8694          beq       DisassembleInstruction_259
                    8695   ; {
                    8696   ; InstructionSize = 1;
00004D26  24BC 0000 8697          move.l    #1,(A2)
00004D2A  0001      
                    8698   ; strcpyInstruction("NEG");
00004D2C  4879 0000 8699          pea       @m68kde~1_276.L
00004D30  73B6      
00004D32  4E93      8700          jsr       (A3)
00004D34  584F      8701          addq.w    #4,A7
                    8702   ; Decode2BitOperandSize(*OpCode) ;
00004D36  2042      8703          move.l    D2,A0
00004D38  3210      8704          move.w    (A0),D1
00004D3A  C2BC 0000 8705          and.l     #65535,D1
00004D3E  FFFF      
00004D40  2F01      8706          move.l    D1,-(A7)
00004D42  4EB8 2C82 8707          jsr       _Decode2BitOperandSize
00004D46  584F      8708          addq.w    #4,A7
                    8709   ; Decode6BitEA(OpCode,0,0,0);
00004D48  42A7      8710          clr.l     -(A7)
00004D4A  42A7      8711          clr.l     -(A7)
00004D4C  42A7      8712          clr.l     -(A7)
00004D4E  2F02      8713          move.l    D2,-(A7)
00004D50  4EB8 2F16 8714          jsr       _Decode6BitEA
00004D54  DEFC 0010 8715          add.w     #16,A7
                    8716   DisassembleInstruction_259:
                    8717   ; }
                    8718   ; }
                    8719   ; /////////////////////////////////////////////////////////////////////////////////
                    8720   ; // if instruction is NEGX <EA>
                    8721   ; /////////////////////////////////////////////////////////////////////////////////
                    8722   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004D58  2042      8723          move.l    D2,A0
00004D5A  3010      8724          move.w    (A0),D0
00004D5C  C07C FF00 8725          and.w     #65280,D0
00004D60  0C40 4000 8726          cmp.w     #16384,D0
00004D64  6600 0046 8727          bne       DisassembleInstruction_263
                    8728   ; {
                    8729   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004D68  2042      8730          move.l    D2,A0
00004D6A  3010      8731          move.w    (A0),D0
00004D6C  EC40      8732          asr.w     #6,D0
00004D6E  C07C 0003 8733          and.w     #3,D0
00004D72  0C40 0003 8734          cmp.w     #3,D0
00004D76  6700 0034 8735          beq       DisassembleInstruction_263
                    8736   ; {
                    8737   ; InstructionSize = 1;
00004D7A  24BC 0000 8738          move.l    #1,(A2)
00004D7E  0001      
                    8739   ; strcpyInstruction("NEGX");
00004D80  4879 0000 8740          pea       @m68kde~1_277.L
00004D84  73BA      
00004D86  4E93      8741          jsr       (A3)
00004D88  584F      8742          addq.w    #4,A7
                    8743   ; Decode2BitOperandSize(*OpCode) ;
00004D8A  2042      8744          move.l    D2,A0
00004D8C  3210      8745          move.w    (A0),D1
00004D8E  C2BC 0000 8746          and.l     #65535,D1
00004D92  FFFF      
00004D94  2F01      8747          move.l    D1,-(A7)
00004D96  4EB8 2C82 8748          jsr       _Decode2BitOperandSize
00004D9A  584F      8749          addq.w    #4,A7
                    8750   ; Decode6BitEA(OpCode,0,0,0);
00004D9C  42A7      8751          clr.l     -(A7)
00004D9E  42A7      8752          clr.l     -(A7)
00004DA0  42A7      8753          clr.l     -(A7)
00004DA2  2F02      8754          move.l    D2,-(A7)
00004DA4  4EB8 2F16 8755          jsr       _Decode6BitEA
00004DA8  DEFC 0010 8756          add.w     #16,A7
                    8757   DisassembleInstruction_263:
                    8758   ; }
                    8759   ; }
                    8760   ; /////////////////////////////////////////////////////////////////////////////////
                    8761   ; // if instruction is NOP
                    8762   ; /////////////////////////////////////////////////////////////////////////////////
                    8763   ; if(*OpCode == (unsigned short int)(0x4E71))
00004DAC  2042      8764          move.l    D2,A0
00004DAE  3010      8765          move.w    (A0),D0
00004DB0  0C40 4E71 8766          cmp.w     #20081,D0
00004DB4  6610      8767          bne.s     DisassembleInstruction_265
                    8768   ; {
                    8769   ; InstructionSize = 1;
00004DB6  24BC 0000 8770          move.l    #1,(A2)
00004DBA  0001      
                    8771   ; strcpyInstruction("NOP");
00004DBC  4879 0000 8772          pea       @m68kde~1_278.L
00004DC0  73C0      
00004DC2  4E93      8773          jsr       (A3)
00004DC4  584F      8774          addq.w    #4,A7
                    8775   DisassembleInstruction_265:
                    8776   ; }
                    8777   ; /////////////////////////////////////////////////////////////////////////////////
                    8778   ; // if instruction is NOT <EA>
                    8779   ; /////////////////////////////////////////////////////////////////////////////////
                    8780   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004DC6  2042      8781          move.l    D2,A0
00004DC8  3010      8782          move.w    (A0),D0
00004DCA  C07C FF00 8783          and.w     #65280,D0
00004DCE  0C40 4600 8784          cmp.w     #17920,D0
00004DD2  6600 0046 8785          bne       DisassembleInstruction_269
                    8786   ; {
                    8787   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004DD6  2042      8788          move.l    D2,A0
00004DD8  3010      8789          move.w    (A0),D0
00004DDA  EC40      8790          asr.w     #6,D0
00004DDC  C07C 0003 8791          and.w     #3,D0
00004DE0  0C40 0003 8792          cmp.w     #3,D0
00004DE4  6700 0034 8793          beq       DisassembleInstruction_269
                    8794   ; {
                    8795   ; InstructionSize = 1;
00004DE8  24BC 0000 8796          move.l    #1,(A2)
00004DEC  0001      
                    8797   ; strcpyInstruction("NOT");
00004DEE  4879 0000 8798          pea       @m68kde~1_279.L
00004DF2  73C4      
00004DF4  4E93      8799          jsr       (A3)
00004DF6  584F      8800          addq.w    #4,A7
                    8801   ; Decode2BitOperandSize(*OpCode) ;
00004DF8  2042      8802          move.l    D2,A0
00004DFA  3210      8803          move.w    (A0),D1
00004DFC  C2BC 0000 8804          and.l     #65535,D1
00004E00  FFFF      
00004E02  2F01      8805          move.l    D1,-(A7)
00004E04  4EB8 2C82 8806          jsr       _Decode2BitOperandSize
00004E08  584F      8807          addq.w    #4,A7
                    8808   ; Decode6BitEA(OpCode,0,0,0);
00004E0A  42A7      8809          clr.l     -(A7)
00004E0C  42A7      8810          clr.l     -(A7)
00004E0E  42A7      8811          clr.l     -(A7)
00004E10  2F02      8812          move.l    D2,-(A7)
00004E12  4EB8 2F16 8813          jsr       _Decode6BitEA
00004E16  DEFC 0010 8814          add.w     #16,A7
                    8815   DisassembleInstruction_269:
                    8816   ; }
                    8817   ; }
                    8818   ; /////////////////////////////////////////////////////////////////////////////////
                    8819   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    8820   ; /////////////////////////////////////////////////////////////////////////////////
                    8821   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004E1A  2042      8822          move.l    D2,A0
00004E1C  3010      8823          move.w    (A0),D0
00004E1E  C07C F000 8824          and.w     #61440,D0
00004E22  0C40 8000 8825          cmp.w     #32768,D0
00004E26  6600 0038 8826          bne       DisassembleInstruction_273
                    8827   ; {
                    8828   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004E2A  2042      8829          move.l    D2,A0
00004E2C  3010      8830          move.w    (A0),D0
00004E2E  EC40      8831          asr.w     #6,D0
00004E30  C07C 0007 8832          and.w     #7,D0
00004E34  3600      8833          move.w    D0,D3
                    8834   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004E36  0C43 0002 8835          cmp.w     #2,D3
00004E3A  630C      8836          bls.s     DisassembleInstruction_275
00004E3C  0C43 0004 8837          cmp.w     #4,D3
00004E40  651E      8838          blo.s     DisassembleInstruction_273
00004E42  0C43 0006 8839          cmp.w     #6,D3
00004E46  6218      8840          bhi.s     DisassembleInstruction_273
                    8841   DisassembleInstruction_275:
                    8842   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    8843   ; {
                    8844   ; InstructionSize = 1;
00004E48  24BC 0000 8845          move.l    #1,(A2)
00004E4C  0001      
                    8846   ; strcpyInstruction("OR") ;
00004E4E  4879 0000 8847          pea       @m68kde~1_280.L
00004E52  73C8      
00004E54  4E93      8848          jsr       (A3)
00004E56  584F      8849          addq.w    #4,A7
                    8850   ; Decode3BitOperandMode(OpCode) ;
00004E58  2F02      8851          move.l    D2,-(A7)
00004E5A  4EB8 333E 8852          jsr       _Decode3BitOperandMode
00004E5E  584F      8853          addq.w    #4,A7
                    8854   DisassembleInstruction_273:
                    8855   ; }
                    8856   ; }
                    8857   ; /////////////////////////////////////////////////////////////////////////////////
                    8858   ; // if instruction is ORI to CCR
                    8859   ; /////////////////////////////////////////////////////////////////////////////////
                    8860   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004E60  2042      8861          move.l    D2,A0
00004E62  3010      8862          move.w    (A0),D0
00004E64  0C40 003C 8863          cmp.w     #60,D0
00004E68  662A      8864          bne.s     DisassembleInstruction_276
                    8865   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004E6A  2042      8866          move.l    D2,A0
00004E6C  3228 0002 8867          move.w    2(A0),D1
00004E70  C27C 00FF 8868          and.w     #255,D1
00004E74  C2BC 0000 8869          and.l     #65535,D1
00004E78  FFFF      
00004E7A  2F01      8870          move.l    D1,-(A7)
00004E7C  4879 0000 8871          pea       @m68kde~1_281.L
00004E80  73CC      
00004E82  4879 0803 8872          pea       _Instruction.L
00004E86  04E2      
00004E88  4E95      8873          jsr       (A5)
00004E8A  DEFC 000C 8874          add.w     #12,A7
                    8875   ; InstructionSize = 2;
00004E8E  24BC 0000 8876          move.l    #2,(A2)
00004E92  0002      
                    8877   DisassembleInstruction_276:
                    8878   ; }
                    8879   ; /////////////////////////////////////////////////////////////////////////////////
                    8880   ; // if instruction is ORI #data,SR
                    8881   ; /////////////////////////////////////////////////////////////////////////////////
                    8882   ; if(*OpCode  == (unsigned short int)(0x007c))
00004E94  2042      8883          move.l    D2,A0
00004E96  3010      8884          move.w    (A0),D0
00004E98  0C40 007C 8885          cmp.w     #124,D0
00004E9C  6622      8886          bne.s     DisassembleInstruction_278
                    8887   ; {
                    8888   ; InstructionSize = 2;
00004E9E  24BC 0000 8889          move.l    #2,(A2)
00004EA2  0002      
                    8890   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00004EA4  2042      8891          move.l    D2,A0
00004EA6  3228 0002 8892          move.w    2(A0),D1
00004EAA  48C1      8893          ext.l     D1
00004EAC  2F01      8894          move.l    D1,-(A7)
00004EAE  4879 0000 8895          pea       @m68kde~1_282.L
00004EB2  73DA      
00004EB4  4879 0803 8896          pea       _Instruction.L
00004EB8  04E2      
00004EBA  4E95      8897          jsr       (A5)
00004EBC  DEFC 000C 8898          add.w     #12,A7
                    8899   DisassembleInstruction_278:
                    8900   ; }
                    8901   ; /////////////////////////////////////////////////////////////////////////////////
                    8902   ; // if instruction is PEA
                    8903   ; /////////////////////////////////////////////////////////////////////////////////
                    8904   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00004EC0  2042      8905          move.l    D2,A0
00004EC2  3010      8906          move.w    (A0),D0
00004EC4  C07C FFC0 8907          and.w     #65472,D0
00004EC8  0C40 4840 8908          cmp.w     #18496,D0
00004ECC  6620      8909          bne.s     DisassembleInstruction_280
                    8910   ; {
                    8911   ; InstructionSize = 1;
00004ECE  24BC 0000 8912          move.l    #1,(A2)
00004ED2  0001      
                    8913   ; strcpyInstruction("PEA ");
00004ED4  4879 0000 8914          pea       @m68kde~1_283.L
00004ED8  73E8      
00004EDA  4E93      8915          jsr       (A3)
00004EDC  584F      8916          addq.w    #4,A7
                    8917   ; Decode6BitEA(OpCode,0,0,0);
00004EDE  42A7      8918          clr.l     -(A7)
00004EE0  42A7      8919          clr.l     -(A7)
00004EE2  42A7      8920          clr.l     -(A7)
00004EE4  2F02      8921          move.l    D2,-(A7)
00004EE6  4EB8 2F16 8922          jsr       _Decode6BitEA
00004EEA  DEFC 0010 8923          add.w     #16,A7
                    8924   DisassembleInstruction_280:
                    8925   ; }
                    8926   ; /////////////////////////////////////////////////////////////////////////////////
                    8927   ; // if instruction is reset
                    8928   ; /////////////////////////////////////////////////////////////////////////////////
                    8929   ; if(*OpCode  == (unsigned short int)(0x4E70))
00004EEE  2042      8930          move.l    D2,A0
00004EF0  3010      8931          move.w    (A0),D0
00004EF2  0C40 4E70 8932          cmp.w     #20080,D0
00004EF6  6616      8933          bne.s     DisassembleInstruction_282
                    8934   ; {
                    8935   ; InstructionSize = 1;
00004EF8  24BC 0000 8936          move.l    #1,(A2)
00004EFC  0001      
                    8937   ; sprintf(Instruction, "RESET");
00004EFE  4879 0000 8938          pea       @m68kde~1_284.L
00004F02  73EE      
00004F04  4879 0803 8939          pea       _Instruction.L
00004F08  04E2      
00004F0A  4E95      8940          jsr       (A5)
00004F0C  504F      8941          addq.w    #8,A7
                    8942   DisassembleInstruction_282:
                    8943   ; }
                    8944   ; /////////////////////////////////////////////////////////////////////////////////
                    8945   ; // if instruction is RTE
                    8946   ; /////////////////////////////////////////////////////////////////////////////////
                    8947   ; if(*OpCode  == (unsigned short int)(0x4E73))
00004F0E  2042      8948          move.l    D2,A0
00004F10  3010      8949          move.w    (A0),D0
00004F12  0C40 4E73 8950          cmp.w     #20083,D0
00004F16  6616      8951          bne.s     DisassembleInstruction_284
                    8952   ; {
                    8953   ; InstructionSize = 1;
00004F18  24BC 0000 8954          move.l    #1,(A2)
00004F1C  0001      
                    8955   ; sprintf(Instruction, "RTE");
00004F1E  4879 0000 8956          pea       @m68kde~1_285.L
00004F22  73F4      
00004F24  4879 0803 8957          pea       _Instruction.L
00004F28  04E2      
00004F2A  4E95      8958          jsr       (A5)
00004F2C  504F      8959          addq.w    #8,A7
                    8960   DisassembleInstruction_284:
                    8961   ; }
                    8962   ; /////////////////////////////////////////////////////////////////////////////////
                    8963   ; // if instruction is RTR
                    8964   ; /////////////////////////////////////////////////////////////////////////////////
                    8965   ; if(*OpCode == (unsigned short int)(0x4E77))
00004F2E  2042      8966          move.l    D2,A0
00004F30  3010      8967          move.w    (A0),D0
00004F32  0C40 4E77 8968          cmp.w     #20087,D0
00004F36  6610      8969          bne.s     DisassembleInstruction_286
                    8970   ; {
                    8971   ; InstructionSize = 1;
00004F38  24BC 0000 8972          move.l    #1,(A2)
00004F3C  0001      
                    8973   ; strcpyInstruction("RTR");
00004F3E  4879 0000 8974          pea       @m68kde~1_286.L
00004F42  73F8      
00004F44  4E93      8975          jsr       (A3)
00004F46  584F      8976          addq.w    #4,A7
                    8977   DisassembleInstruction_286:
                    8978   ; }
                    8979   ; /////////////////////////////////////////////////////////////////////////////////
                    8980   ; // if instruction is RTS
                    8981   ; /////////////////////////////////////////////////////////////////////////////////
                    8982   ; if(*OpCode == (unsigned short int)(0x4E75))
00004F48  2042      8983          move.l    D2,A0
00004F4A  3010      8984          move.w    (A0),D0
00004F4C  0C40 4E75 8985          cmp.w     #20085,D0
00004F50  6610      8986          bne.s     DisassembleInstruction_288
                    8987   ; {
                    8988   ; InstructionSize = 1;
00004F52  24BC 0000 8989          move.l    #1,(A2)
00004F56  0001      
                    8990   ; strcpyInstruction("RTS");
00004F58  4879 0000 8991          pea       @m68kde~1_287.L
00004F5C  73FC      
00004F5E  4E93      8992          jsr       (A3)
00004F60  584F      8993          addq.w    #4,A7
                    8994   DisassembleInstruction_288:
                    8995   ; }
                    8996   ; /////////////////////////////////////////////////////////////////////////////////
                    8997   ; // if instruction is STOP
                    8998   ; /////////////////////////////////////////////////////////////////////////////////
                    8999   ; if(*OpCode  == (unsigned short int)(0x4E72))
00004F62  2042      9000          move.l    D2,A0
00004F64  3010      9001          move.w    (A0),D0
00004F66  0C40 4E72 9002          cmp.w     #20082,D0
00004F6A  6622      9003          bne.s     DisassembleInstruction_290
                    9004   ; {
                    9005   ; InstructionSize = 2;
00004F6C  24BC 0000 9006          move.l    #2,(A2)
00004F70  0002      
                    9007   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
00004F72  2042      9008          move.l    D2,A0
00004F74  3228 0002 9009          move.w    2(A0),D1
00004F78  48C1      9010          ext.l     D1
00004F7A  2F01      9011          move.l    D1,-(A7)
00004F7C  4879 0000 9012          pea       @m68kde~1_288.L
00004F80  7400      
00004F82  4879 0803 9013          pea       _Instruction.L
00004F86  04E2      
00004F88  4E95      9014          jsr       (A5)
00004F8A  DEFC 000C 9015          add.w     #12,A7
                    9016   DisassembleInstruction_290:
                    9017   ; }
                    9018   ; /////////////////////////////////////////////////////////////////////////////////
                    9019   ; // if instruction is SBCD
                    9020   ; /////////////////////////////////////////////////////////////////////////////////
                    9021   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00004F8E  2042      9022          move.l    D2,A0
00004F90  3010      9023          move.w    (A0),D0
00004F92  C07C F1F0 9024          and.w     #61936,D0
00004F96  0C40 8100 9025          cmp.w     #33024,D0
00004F9A  6600 0092 9026          bne       DisassembleInstruction_295
                    9027   ; {
                    9028   ; InstructionSize = 1;
00004F9E  24BC 0000 9029          move.l    #1,(A2)
00004FA2  0001      
                    9030   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00004FA4  2042      9031          move.l    D2,A0
00004FA6  3010      9032          move.w    (A0),D0
00004FA8  E040      9033          asr.w     #8,D0
00004FAA  E240      9034          asr.w     #1,D0
00004FAC  C07C 0007 9035          and.w     #7,D0
00004FB0  3D40 FFE0 9036          move.w    D0,-32(A6)
                    9037   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00004FB4  2042      9038          move.l    D2,A0
00004FB6  3010      9039          move.w    (A0),D0
00004FB8  C07C 0007 9040          and.w     #7,D0
00004FBC  3D40 FFDE 9041          move.w    D0,-34(A6)
                    9042   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00004FC0  2042      9043          move.l    D2,A0
00004FC2  3010      9044          move.w    (A0),D0
00004FC4  E640      9045          asr.w     #3,D0
00004FC6  48C0      9046          ext.l     D0
00004FC8  C0BC 0000 9047          and.l     #1,D0
00004FCC  0001      
00004FCE  2D40 FFE4 9048          move.l    D0,-28(A6)
                    9049   ; if(Mode == 0)
00004FD2  202E FFE4 9050          move.l    -28(A6),D0
00004FD6  662C      9051          bne.s     DisassembleInstruction_294
                    9052   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00004FD8  322E FFE0 9053          move.w    -32(A6),D1
00004FDC  C2BC 0000 9054          and.l     #65535,D1
00004FE0  FFFF      
00004FE2  2F01      9055          move.l    D1,-(A7)
00004FE4  322E FFDE 9056          move.w    -34(A6),D1
00004FE8  C2BC 0000 9057          and.l     #65535,D1
00004FEC  FFFF      
00004FEE  2F01      9058          move.l    D1,-(A7)
00004FF0  4879 0000 9059          pea       @m68kde~1_289.L
00004FF4  740A      
00004FF6  4879 0803 9060          pea       _Instruction.L
00004FFA  04E2      
00004FFC  4E95      9061          jsr       (A5)
00004FFE  DEFC 0010 9062          add.w     #16,A7
00005002  602A      9063          bra.s     DisassembleInstruction_295
                    9064   DisassembleInstruction_294:
                    9065   ; else
                    9066   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00005004  322E FFE0 9067          move.w    -32(A6),D1
00005008  C2BC 0000 9068          and.l     #65535,D1
0000500C  FFFF      
0000500E  2F01      9069          move.l    D1,-(A7)
00005010  322E FFDE 9070          move.w    -34(A6),D1
00005014  C2BC 0000 9071          and.l     #65535,D1
00005018  FFFF      
0000501A  2F01      9072          move.l    D1,-(A7)
0000501C  4879 0000 9073          pea       @m68kde~1_290.L
00005020  7418      
00005022  4879 0803 9074          pea       _Instruction.L
00005026  04E2      
00005028  4E95      9075          jsr       (A5)
0000502A  DEFC 0010 9076          add.w     #16,A7
                    9077   DisassembleInstruction_295:
                    9078   ; }
                    9079   ; /////////////////////////////////////////////////////////////////////////////////
                    9080   ; // if instruction is Scc
                    9081   ; /////////////////////////////////////////////////////////////////////////////////
                    9082   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
0000502E  2042      9083          move.l    D2,A0
00005030  3010      9084          move.w    (A0),D0
00005032  C07C F0C0 9085          and.w     #61632,D0
00005036  0C40 50C0 9086          cmp.w     #20672,D0
0000503A  6600 0060 9087          bne       DisassembleInstruction_298
                    9088   ; {
                    9089   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
0000503E  2042      9090          move.l    D2,A0
00005040  3010      9091          move.w    (A0),D0
00005042  E640      9092          asr.w     #3,D0
00005044  C07C 0007 9093          and.w     #7,D0
00005048  3D40 FFEC 9094          move.w    D0,-20(A6)
                    9095   ; if(EAMode != (unsigned short int)(0x0001))
0000504C  302E FFEC 9096          move.w    -20(A6),D0
00005050  0C40 0001 9097          cmp.w     #1,D0
00005054  6700 0046 9098          beq       DisassembleInstruction_298
                    9099   ; {
                    9100   ; InstructionSize = 1;
00005058  24BC 0000 9101          move.l    #1,(A2)
0000505C  0001      
                    9102   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000505E  2042      9103          move.l    D2,A0
00005060  3010      9104          move.w    (A0),D0
00005062  E040      9105          asr.w     #8,D0
00005064  C07C 000F 9106          and.w     #15,D0
00005068  1D40 FFE9 9107          move.b    D0,-23(A6)
                    9108   ; strcpyInstruction("S") ;
0000506C  4879 0000 9109          pea       @m68kde~1_291.L
00005070  742C      
00005072  4E93      9110          jsr       (A3)
00005074  584F      9111          addq.w    #4,A7
                    9112   ; DecodeBranchCondition(Condition) ;
00005076  122E FFE9 9113          move.b    -23(A6),D1
0000507A  C27C 00FF 9114          and.w     #255,D1
0000507E  C2BC 0000 9115          and.l     #65535,D1
00005082  FFFF      
00005084  2F01      9116          move.l    D1,-(A7)
00005086  4EB8 33D4 9117          jsr       _DecodeBranchCondition
0000508A  584F      9118          addq.w    #4,A7
                    9119   ; Decode6BitEA(OpCode,0,0,0);
0000508C  42A7      9120          clr.l     -(A7)
0000508E  42A7      9121          clr.l     -(A7)
00005090  42A7      9122          clr.l     -(A7)
00005092  2F02      9123          move.l    D2,-(A7)
00005094  4EB8 2F16 9124          jsr       _Decode6BitEA
00005098  DEFC 0010 9125          add.w     #16,A7
                    9126   DisassembleInstruction_298:
                    9127   ; }
                    9128   ; }
                    9129   ; /////////////////////////////////////////////////////////////////////////////////
                    9130   ; // if instruction is SUB or SUBA
                    9131   ; /////////////////////////////////////////////////////////////////////////////////
                    9132   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
0000509C  2042      9133          move.l    D2,A0
0000509E  3010      9134          move.w    (A0),D0
000050A0  C07C F000 9135          and.w     #61440,D0
000050A4  0C40 9000 9136          cmp.w     #36864,D0
000050A8  6600 008C 9137          bne       DisassembleInstruction_303
                    9138   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000050AC  2042      9139          move.l    D2,A0
000050AE  3010      9140          move.w    (A0),D0
000050B0  EC40      9141          asr.w     #6,D0
000050B2  C07C 0007 9142          and.w     #7,D0
000050B6  3600      9143          move.w    D0,D3
                    9144   ; InstructionSize = 1;
000050B8  24BC 0000 9145          move.l    #1,(A2)
000050BC  0001      
                    9146   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000050BE  0C43 0003 9147          cmp.w     #3,D3
000050C2  6708      9148          beq.s     DisassembleInstruction_304
000050C4  0C43 0007 9149          cmp.w     #7,D3
000050C8  6600 005A 9150          bne       DisassembleInstruction_302
                    9151   DisassembleInstruction_304:
                    9152   ; {
                    9153   ; if(OpMode == (unsigned short int)(0x0003))
000050CC  0C43 0003 9154          cmp.w     #3,D3
000050D0  660C      9155          bne.s     DisassembleInstruction_305
                    9156   ; strcpyInstruction("SUBA.W ") ;
000050D2  4879 0000 9157          pea       @m68kde~1_292.L
000050D6  742E      
000050D8  4E93      9158          jsr       (A3)
000050DA  584F      9159          addq.w    #4,A7
000050DC  600A      9160          bra.s     DisassembleInstruction_306
                    9161   DisassembleInstruction_305:
                    9162   ; else
                    9163   ; strcpyInstruction("SUBA.L ") ;
000050DE  4879 0000 9164          pea       @m68kde~1_293.L
000050E2  7436      
000050E4  4E93      9165          jsr       (A3)
000050E6  584F      9166          addq.w    #4,A7
                    9167   DisassembleInstruction_306:
                    9168   ; Decode6BitEA(OpCode,0,0,0)  ;
000050E8  42A7      9169          clr.l     -(A7)
000050EA  42A7      9170          clr.l     -(A7)
000050EC  42A7      9171          clr.l     -(A7)
000050EE  2F02      9172          move.l    D2,-(A7)
000050F0  4EB8 2F16 9173          jsr       _Decode6BitEA
000050F4  DEFC 0010 9174          add.w     #16,A7
                    9175   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000050F8  2042      9176          move.l    D2,A0
000050FA  3210      9177          move.w    (A0),D1
000050FC  E041      9178          asr.w     #8,D1
000050FE  E241      9179          asr.w     #1,D1
00005100  C27C 0007 9180          and.w     #7,D1
00005104  C2BC 0000 9181          and.l     #65535,D1
00005108  FFFF      
0000510A  2F01      9182          move.l    D1,-(A7)
0000510C  4879 0000 9183          pea       @m68kde~1_196.L
00005110  712A      
00005112  2F0C      9184          move.l    A4,-(A7)
00005114  4E95      9185          jsr       (A5)
00005116  DEFC 000C 9186          add.w     #12,A7
                    9187   ; strcatInstruction(TempString) ;
0000511A  2F0C      9188          move.l    A4,-(A7)
0000511C  4EB8 0CCC 9189          jsr       _strcatInstruction
00005120  584F      9190          addq.w    #4,A7
00005122  6012      9191          bra.s     DisassembleInstruction_303
                    9192   DisassembleInstruction_302:
                    9193   ; }
                    9194   ; else {
                    9195   ; strcpyInstruction("SUB") ;
00005124  4879 0000 9196          pea       @m68kde~1_294.L
00005128  743E      
0000512A  4E93      9197          jsr       (A3)
0000512C  584F      9198          addq.w    #4,A7
                    9199   ; Decode3BitOperandMode(OpCode) ;
0000512E  2F02      9200          move.l    D2,-(A7)
00005130  4EB8 333E 9201          jsr       _Decode3BitOperandMode
00005134  584F      9202          addq.w    #4,A7
                    9203   DisassembleInstruction_303:
                    9204   ; }
                    9205   ; }
                    9206   ; /////////////////////////////////////////////////////////////////////////////////
                    9207   ; // if instruction is SUBQ
                    9208   ; /////////////////////////////////////////////////////////////////////////////////
                    9209   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
00005136  2042      9210          move.l    D2,A0
00005138  3010      9211          move.w    (A0),D0
0000513A  C07C F100 9212          and.w     #61696,D0
0000513E  0C40 5100 9213          cmp.w     #20736,D0
00005142  6600 0072 9214          bne       DisassembleInstruction_309
                    9215   ; {
                    9216   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005146  2042      9217          move.l    D2,A0
00005148  3010      9218          move.w    (A0),D0
0000514A  EC40      9219          asr.w     #6,D0
0000514C  C07C 0003 9220          and.w     #3,D0
00005150  3600      9221          move.w    D0,D3
                    9222   ; if(OpMode <= (unsigned short int)(0x0002))
00005152  0C43 0002 9223          cmp.w     #2,D3
00005156  6200 005E 9224          bhi       DisassembleInstruction_309
                    9225   ; {
                    9226   ; InstructionSize = 1;
0000515A  24BC 0000 9227          move.l    #1,(A2)
0000515E  0001      
                    9228   ; strcpyInstruction("SUBQ") ;
00005160  4879 0000 9229          pea       @m68kde~1_295.L
00005164  7442      
00005166  4E93      9230          jsr       (A3)
00005168  584F      9231          addq.w    #4,A7
                    9232   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000516A  2042      9233          move.l    D2,A0
0000516C  3210      9234          move.w    (A0),D1
0000516E  C2BC 0000 9235          and.l     #65535,D1
00005172  FFFF      
00005174  2F01      9236          move.l    D1,-(A7)
00005176  4EB8 2C82 9237          jsr       _Decode2BitOperandSize
0000517A  584F      9238          addq.w    #4,A7
                    9239   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
0000517C  2042      9240          move.l    D2,A0
0000517E  3210      9241          move.w    (A0),D1
00005180  E041      9242          asr.w     #8,D1
00005182  E241      9243          asr.w     #1,D1
00005184  C27C 0007 9244          and.w     #7,D1
00005188  C2BC 0000 9245          and.l     #65535,D1
0000518C  FFFF      
0000518E  2F01      9246          move.l    D1,-(A7)
00005190  4879 0000 9247          pea       @m68kde~1_206.L
00005194  716A      
00005196  2F0C      9248          move.l    A4,-(A7)
00005198  4E95      9249          jsr       (A5)
0000519A  DEFC 000C 9250          add.w     #12,A7
                    9251   ; strcatInstruction(TempString) ;
0000519E  2F0C      9252          move.l    A4,-(A7)
000051A0  4EB8 0CCC 9253          jsr       _strcatInstruction
000051A4  584F      9254          addq.w    #4,A7
                    9255   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000051A6  42A7      9256          clr.l     -(A7)
000051A8  42A7      9257          clr.l     -(A7)
000051AA  42A7      9258          clr.l     -(A7)
000051AC  2F02      9259          move.l    D2,-(A7)
000051AE  4EB8 2F16 9260          jsr       _Decode6BitEA
000051B2  DEFC 0010 9261          add.w     #16,A7
                    9262   DisassembleInstruction_309:
                    9263   ; }
                    9264   ; }
                    9265   ; /////////////////////////////////////////////////////////////////////////////////
                    9266   ; // if instruction is SUBX
                    9267   ; /////////////////////////////////////////////////////////////////////////////////
                    9268   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000051B6  2042      9269          move.l    D2,A0
000051B8  3010      9270          move.w    (A0),D0
000051BA  C07C F130 9271          and.w     #61744,D0
000051BE  0C40 9100 9272          cmp.w     #37120,D0
000051C2  6600 00A4 9273          bne       DisassembleInstruction_313
                    9274   ; {
                    9275   ; InstructionSize = 1;
000051C6  24BC 0000 9276          move.l    #1,(A2)
000051CA  0001      
                    9277   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000051CC  2042      9278          move.l    D2,A0
000051CE  3010      9279          move.w    (A0),D0
000051D0  EC40      9280          asr.w     #6,D0
000051D2  C07C 0003 9281          and.w     #3,D0
000051D6  3600      9282          move.w    D0,D3
                    9283   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000051D8  0C43 0003 9284          cmp.w     #3,D3
000051DC  6700 008A 9285          beq       DisassembleInstruction_313
                    9286   ; {
                    9287   ; strcpyInstruction("SUBX") ;
000051E0  4879 0000 9288          pea       @m68kde~1_296.L
000051E4  7448      
000051E6  4E93      9289          jsr       (A3)
000051E8  584F      9290          addq.w    #4,A7
                    9291   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000051EA  2042      9292          move.l    D2,A0
000051EC  3210      9293          move.w    (A0),D1
000051EE  C2BC 0000 9294          and.l     #65535,D1
000051F2  FFFF      
000051F4  2F01      9295          move.l    D1,-(A7)
000051F6  4EB8 2C82 9296          jsr       _Decode2BitOperandSize
000051FA  584F      9297          addq.w    #4,A7
                    9298   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000051FC  2042      9299          move.l    D2,A0
000051FE  3010      9300          move.w    (A0),D0
00005200  C07C 0008 9301          and.w     #8,D0
00005204  6600 0030 9302          bne       DisassembleInstruction_315
                    9303   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005208  2042      9304          move.l    D2,A0
0000520A  3210      9305          move.w    (A0),D1
0000520C  E041      9306          asr.w     #8,D1
0000520E  E241      9307          asr.w     #1,D1
00005210  C27C 0007 9308          and.w     #7,D1
00005214  48C1      9309          ext.l     D1
00005216  2F01      9310          move.l    D1,-(A7)
00005218  2042      9311          move.l    D2,A0
0000521A  3210      9312          move.w    (A0),D1
0000521C  C27C 0007 9313          and.w     #7,D1
00005220  48C1      9314          ext.l     D1
00005222  2F01      9315          move.l    D1,-(A7)
00005224  4879 0000 9316          pea       @m68kde~1_297.L
00005228  744E      
0000522A  2F0C      9317          move.l    A4,-(A7)
0000522C  4E95      9318          jsr       (A5)
0000522E  DEFC 0010 9319          add.w     #16,A7
00005232  6000 002C 9320          bra       DisassembleInstruction_316
                    9321   DisassembleInstruction_315:
                    9322   ; else        // -(ax),-(ay) mode used
                    9323   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005236  2042      9324          move.l    D2,A0
00005238  3210      9325          move.w    (A0),D1
0000523A  E041      9326          asr.w     #8,D1
0000523C  E241      9327          asr.w     #1,D1
0000523E  C27C 0007 9328          and.w     #7,D1
00005242  48C1      9329          ext.l     D1
00005244  2F01      9330          move.l    D1,-(A7)
00005246  2042      9331          move.l    D2,A0
00005248  3210      9332          move.w    (A0),D1
0000524A  C27C 0007 9333          and.w     #7,D1
0000524E  48C1      9334          ext.l     D1
00005250  2F01      9335          move.l    D1,-(A7)
00005252  4879 0000 9336          pea       @m68kde~1_298.L
00005256  7458      
00005258  2F0C      9337          move.l    A4,-(A7)
0000525A  4E95      9338          jsr       (A5)
0000525C  DEFC 0010 9339          add.w     #16,A7
                    9340   DisassembleInstruction_316:
                    9341   ; strcatInstruction(TempString) ;
00005260  2F0C      9342          move.l    A4,-(A7)
00005262  4EB8 0CCC 9343          jsr       _strcatInstruction
00005266  584F      9344          addq.w    #4,A7
                    9345   DisassembleInstruction_313:
                    9346   ; }
                    9347   ; }
                    9348   ; /////////////////////////////////////////////////////////////////////////////////
                    9349   ; // if instruction is SWAP
                    9350   ; /////////////////////////////////////////////////////////////////////////////////
                    9351   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005268  2042      9352          move.l    D2,A0
0000526A  3010      9353          move.w    (A0),D0
0000526C  C07C FFF8 9354          and.w     #65528,D0
00005270  0C40 4840 9355          cmp.w     #18496,D0
00005274  662A      9356          bne.s     DisassembleInstruction_317
                    9357   ; {
                    9358   ; InstructionSize = 1;
00005276  24BC 0000 9359          move.l    #1,(A2)
0000527A  0001      
                    9360   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
0000527C  2042      9361          move.l    D2,A0
0000527E  3010      9362          move.w    (A0),D0
00005280  C07C 0007 9363          and.w     #7,D0
00005284  3A00      9364          move.w    D0,D5
                    9365   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005286  CABC 0000 9366          and.l     #65535,D5
0000528A  FFFF      
0000528C  2F05      9367          move.l    D5,-(A7)
0000528E  4879 0000 9368          pea       @m68kde~1_299.L
00005292  7468      
00005294  4879 0803 9369          pea       _Instruction.L
00005298  04E2      
0000529A  4E95      9370          jsr       (A5)
0000529C  DEFC 000C 9371          add.w     #12,A7
                    9372   DisassembleInstruction_317:
                    9373   ; }
                    9374   ; /////////////////////////////////////////////////////////////////////////////////
                    9375   ; // if instruction is TAS
                    9376   ; /////////////////////////////////////////////////////////////////////////////////
                    9377   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000052A0  2042      9378          move.l    D2,A0
000052A2  3010      9379          move.w    (A0),D0
000052A4  C07C FFC0 9380          and.w     #65472,D0
000052A8  0C40 4AC0 9381          cmp.w     #19136,D0
000052AC  662A      9382          bne.s     DisassembleInstruction_321
                    9383   ; {
                    9384   ; if(*OpCode != (unsigned short int)(0x4AFC))
000052AE  2042      9385          move.l    D2,A0
000052B0  3010      9386          move.w    (A0),D0
000052B2  0C40 4AFC 9387          cmp.w     #19196,D0
000052B6  6720      9388          beq.s     DisassembleInstruction_321
                    9389   ; {
                    9390   ; InstructionSize = 1;
000052B8  24BC 0000 9391          move.l    #1,(A2)
000052BC  0001      
                    9392   ; strcpyInstruction("TAS ") ;
000052BE  4879 0000 9393          pea       @m68kde~1_300.L
000052C2  7472      
000052C4  4E93      9394          jsr       (A3)
000052C6  584F      9395          addq.w    #4,A7
                    9396   ; Decode6BitEA(OpCode,0,0,0) ;
000052C8  42A7      9397          clr.l     -(A7)
000052CA  42A7      9398          clr.l     -(A7)
000052CC  42A7      9399          clr.l     -(A7)
000052CE  2F02      9400          move.l    D2,-(A7)
000052D0  4EB8 2F16 9401          jsr       _Decode6BitEA
000052D4  DEFC 0010 9402          add.w     #16,A7
                    9403   DisassembleInstruction_321:
                    9404   ; }
                    9405   ; }
                    9406   ; /////////////////////////////////////////////////////////////////////////////////
                    9407   ; // if instruction is TRAP
                    9408   ; /////////////////////////////////////////////////////////////////////////////////
                    9409   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000052D8  2042      9410          move.l    D2,A0
000052DA  3010      9411          move.w    (A0),D0
000052DC  C07C FFF0 9412          and.w     #65520,D0
000052E0  0C40 4E40 9413          cmp.w     #20032,D0
000052E4  6622      9414          bne.s     DisassembleInstruction_323
                    9415   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
000052E6  2042      9416          move.l    D2,A0
000052E8  3210      9417          move.w    (A0),D1
000052EA  C27C 000F 9418          and.w     #15,D1
000052EE  C2BC 0000 9419          and.l     #65535,D1
000052F2  FFFF      
000052F4  2F01      9420          move.l    D1,-(A7)
000052F6  4879 0000 9421          pea       @m68kde~1_301.L
000052FA  7478      
000052FC  4879 0803 9422          pea       _Instruction.L
00005300  04E2      
00005302  4E95      9423          jsr       (A5)
00005304  DEFC 000C 9424          add.w     #12,A7
                    9425   DisassembleInstruction_323:
                    9426   ; }
                    9427   ; /////////////////////////////////////////////////////////////////////////////////
                    9428   ; // if instruction is TRAPV
                    9429   ; /////////////////////////////////////////////////////////////////////////////////
                    9430   ; if(*OpCode == (unsigned short int)(0x4E76))
00005308  2042      9431          move.l    D2,A0
0000530A  3010      9432          move.w    (A0),D0
0000530C  0C40 4E76 9433          cmp.w     #20086,D0
00005310  6610      9434          bne.s     DisassembleInstruction_325
                    9435   ; {
                    9436   ; InstructionSize = 1;
00005312  24BC 0000 9437          move.l    #1,(A2)
00005316  0001      
                    9438   ; strcpyInstruction("TRAPV") ;
00005318  4879 0000 9439          pea       @m68kde~1_302.L
0000531C  7482      
0000531E  4E93      9440          jsr       (A3)
00005320  584F      9441          addq.w    #4,A7
                    9442   DisassembleInstruction_325:
                    9443   ; }
                    9444   ; /////////////////////////////////////////////////////////////////////////////////
                    9445   ; // if instruction is TST
                    9446   ; /////////////////////////////////////////////////////////////////////////////////
                    9447   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
00005322  2042      9448          move.l    D2,A0
00005324  3010      9449          move.w    (A0),D0
00005326  C07C FF00 9450          and.w     #65280,D0
0000532A  0C40 4A00 9451          cmp.w     #18944,D0
0000532E  6600 005A 9452          bne       DisassembleInstruction_329
                    9453   ; {
                    9454   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005332  2042      9455          move.l    D2,A0
00005334  3010      9456          move.w    (A0),D0
00005336  EC40      9457          asr.w     #6,D0
00005338  C07C 0003 9458          and.w     #3,D0
0000533C  3D40 FFE2 9459          move.w    D0,-30(A6)
                    9460   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005340  2042      9461          move.l    D2,A0
00005342  3010      9462          move.w    (A0),D0
00005344  0C40 4AFC 9463          cmp.w     #19196,D0
00005348  6700 0040 9464          beq       DisassembleInstruction_329
0000534C  302E FFE2 9465          move.w    -30(A6),D0
00005350  0C40 0003 9466          cmp.w     #3,D0
00005354  6700 0034 9467          beq       DisassembleInstruction_329
                    9468   ; InstructionSize = 1;
00005358  24BC 0000 9469          move.l    #1,(A2)
0000535C  0001      
                    9470   ; strcpyInstruction("TST") ;
0000535E  4879 0000 9471          pea       @m68kde~1_303.L
00005362  7488      
00005364  4E93      9472          jsr       (A3)
00005366  584F      9473          addq.w    #4,A7
                    9474   ; Decode2BitOperandSize(*OpCode) ;
00005368  2042      9475          move.l    D2,A0
0000536A  3210      9476          move.w    (A0),D1
0000536C  C2BC 0000 9477          and.l     #65535,D1
00005370  FFFF      
00005372  2F01      9478          move.l    D1,-(A7)
00005374  4EB8 2C82 9479          jsr       _Decode2BitOperandSize
00005378  584F      9480          addq.w    #4,A7
                    9481   ; Decode6BitEA(OpCode,0,0,0) ;
0000537A  42A7      9482          clr.l     -(A7)
0000537C  42A7      9483          clr.l     -(A7)
0000537E  42A7      9484          clr.l     -(A7)
00005380  2F02      9485          move.l    D2,-(A7)
00005382  4EB8 2F16 9486          jsr       _Decode6BitEA
00005386  DEFC 0010 9487          add.w     #16,A7
                    9488   DisassembleInstruction_329:
                    9489   ; }
                    9490   ; }
                    9491   ; /////////////////////////////////////////////////////////////////////////////////
                    9492   ; // if instruction is UNLK
                    9493   ; //////////////////////////////////////////////////////////
                    9494   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
0000538A  2042      9495          move.l    D2,A0
0000538C  3010      9496          move.w    (A0),D0
0000538E  C07C FFF8 9497          and.w     #65528,D0
00005392  0C40 4E58 9498          cmp.w     #20056,D0
00005396  6628      9499          bne.s     DisassembleInstruction_331
                    9500   ; {
                    9501   ; InstructionSize = 1;
00005398  24BC 0000 9502          move.l    #1,(A2)
0000539C  0001      
                    9503   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
0000539E  2042      9504          move.l    D2,A0
000053A0  3210      9505          move.w    (A0),D1
000053A2  C27C 0007 9506          and.w     #7,D1
000053A6  C2BC 0000 9507          and.l     #65535,D1
000053AA  FFFF      
000053AC  2F01      9508          move.l    D1,-(A7)
000053AE  4879 0000 9509          pea       @m68kde~1_304.L
000053B2  748C      
000053B4  4879 0803 9510          pea       _Instruction.L
000053B8  04E2      
000053BA  4E95      9511          jsr       (A5)
000053BC  DEFC 000C 9512          add.w     #12,A7
                    9513   DisassembleInstruction_331:
                    9514   ; }
                    9515   ; FormatInstruction() ;
000053C0  4EB8 2BF0 9516          jsr       _FormatInstruction
000053C4  4CDF 3CFC 9517          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000053C8  4E5E      9518          unlk      A6
000053CA  4E75      9519          rts
                    9520   ; }
                    9521   _strcpy:
000053CC  206F 0004 9522          move.l    (4,A7),A0
000053D0  226F 0008 9523          move.l    (8,A7),A1
000053D4  2008      9524          move.l    A0,D0
                    9525   strcpy_1:
000053D6  10D9      9526          move.b    (A1)+,(A0)+
000053D8  66FC      9527          bne.s     strcpy_1
000053DA  4E75      9528          rts
                    9529   ULDIV:
000053DC  4E56 0000 9530          link    A6,#0
000053E0  48E7 C000 9531          movem.l D0/D1,-(A7)
000053E4  222E 0008 9532          move.l  8(A6),D1
000053E8  202E 000C 9533          move.l  12(A6),D0
000053EC  6036      9534          bra.s   ldiv_3
                    9535   LDIV:
000053EE  4E56 0000 9536          link    A6,#0
000053F2  48E7 C000 9537          movem.l D0/D1,-(A7)
000053F6  222E 0008 9538          move.l  8(A6),D1
000053FA  202E 000C 9539          move.l  12(A6),D0
000053FE  4A80      9540          tst.l   D0
00005400  6A0E      9541          bpl.s   ldiv_1
00005402  4480      9542          neg.l   D0
00005404  4A81      9543          tst.l   D1
00005406  6A14      9544          bpl.s   ldiv_2
00005408  4481      9545          neg.l   D1
0000540A  612A      9546          bsr.s   dodiv
0000540C  4481      9547          neg.l   D1
0000540E  6016      9548          bra.s   ldiv_4
                    9549   ldiv_1:
00005410  4A81      9550          tst.l   D1
00005412  6A10      9551          bpl.s   ldiv_3
00005414  4481      9552          neg.l   D1
00005416  611E      9553          bsr.s   dodiv
00005418  4480      9554          neg.l   D0
0000541A  600A      9555          bra.s   ldiv_4
                    9556   ldiv_2:
0000541C  6118      9557          bsr.s   dodiv
0000541E  4480      9558          neg.l   D0
00005420  4481      9559          neg.l   D1
00005422  6002      9560          bra.s   ldiv_4
                    9561   ldiv_3:
00005424  6110      9562          bsr.s   dodiv
                    9563   ldiv_4:
00005426  2D40 0008 9564          move.l  D0,8(A6)
0000542A  2D41 000C 9565          move.l  D1,12(A6)
0000542E  4CDF 0003 9566          movem.l (A7)+,D0/D1
00005432  4E5E      9567          unlk    A6
00005434  4E75      9568          rts
                    9569   dodiv:
00005436  0C81 0000 9570          cmpi.l  #$FFFF,D1
0000543A  FFFF      
0000543C  6236      9571          bhi.s   dodiv_2
0000543E  0C80 0000 9572          cmpi.l  #$FFFF,D0
00005442  FFFF      
00005444  6210      9573          bhi.s   dodiv_1
00005446  80C1      9574          divu    D1,D0
00005448  2200      9575          move.l  D0,D1
0000544A  4241      9576          clr.w   D1
0000544C  4841      9577          swap    D1
0000544E  0280 0000 9578          andi.l  #$FFFF,D0
00005452  FFFF      
00005454  4E75      9579          rts
                    9580   dodiv_1:
00005456  48A7 A000 9581          movem.w D0/D2,-(A7)
0000545A  4240      9582          clr.w   D0
0000545C  4840      9583          swap    D0
0000545E  80C1      9584          divu    D1,D0
00005460  3400      9585          move.w  D0,D2
00005462  301F      9586          move.w  (A7)+,D0
00005464  80C1      9587          divu    D1,D0
00005466  4840      9588          swap    D0
00005468  4281      9589          clr.l   D1
0000546A  3200      9590          move.w  D0,D1
0000546C  3002      9591          move.w  D2,D0
0000546E  4840      9592          swap    D0
00005470  341F      9593          move.w  (A7)+,D2
00005472  4E75      9594          rts
                    9595   dodiv_2:
00005474  48E7 3800 9596          movem.l D2/D3/D4,-(A7)
00005478  2401      9597          move.l  D1,D2
0000547A  4242      9598          clr.w   D2
0000547C  4842      9599          swap    D2
0000547E  5282      9600          addq.l  #1,D2
00005480  2600      9601          move.l  D0,D3
00005482  2801      9602          move.l  D1,D4
00005484  2202      9603          move.l  D2,D1
00005486  61CE      9604          bsr.s   dodiv_1
00005488  2204      9605          move.l  D4,D1
0000548A  82C2      9606          divu    D2,D1
0000548C  80C1      9607          divu    D1,D0
0000548E  0280 0000 9608          andi.l  #$FFFF,D0
00005492  FFFF      
                    9609   dodiv_3:
00005494  2204      9610          move.l  D4,D1
00005496  2404      9611          move.l  D4,D2
00005498  4842      9612          swap    D2
0000549A  C2C0      9613          mulu    D0,D1
0000549C  C4C0      9614          mulu    D0,D2
0000549E  4842      9615          swap    D2
000054A0  D282      9616          add.l   D2,D1
000054A2  9283      9617          sub.l   D3,D1
000054A4  620A      9618          bhi.s   dodiv_4
000054A6  4481      9619          neg.l   D1
000054A8  B881      9620          cmp.l   D1,D4
000054AA  6208      9621          bhi.s   dodiv_5
000054AC  5280      9622          addq.l  #1,D0
000054AE  60E4      9623          bra.s   dodiv_3
                    9624   dodiv_4:
000054B0  5380      9625          subq.l  #1,D0
000054B2  60E0      9626          bra.s   dodiv_3
                    9627   dodiv_5:
000054B4  4CDF 001C 9628          movem.l (A7)+,D2/D3/D4
000054B8  4E75      9629          rts
                    9630   _putch:
000054BA  4E56 0000 9631          link      A6,#0
000054BE  2F02      9632          move.l    D2,-(A7)
000054C0  242E 0008 9633          move.l    8(A6),D2
000054C4  0C82 0000 9634          cmp.l     #10,D2
000054C8  000A      
000054CA  660A      9635          bne.s     putch_1
000054CC  4878 000D 9636          pea       13
000054D0  4EB8 0B3C 9637          jsr       __putch
000054D4  584F      9638          addq.w    #4,A7
                    9639   putch_1:
000054D6  2F02      9640          move.l    D2,-(A7)
000054D8  4EB8 0B3C 9641          jsr       __putch
000054DC  584F      9642          addq.w    #4,A7
000054DE  2002      9643          move.l    D2,D0
000054E0  241F      9644          move.l    (A7)+,D2
000054E2  4E5E      9645          unlk      A6
000054E4  4E75      9646          rts
                    9647   _getch:
000054E6  2F02      9648          move.l    D2,-(A7)
000054E8  2439 0803 9649          move.l    __ungetbuf.L,D2
000054EC  00C0      
000054EE  2039 0803 9650          move.l    __ungetbuf.L,D0
000054F2  00C0      
000054F4  0C80 FFFF 9651          cmp.l     #-1,D0
000054F8  FFFF      
000054FA  670C      9652          beq.s     getch_1
000054FC  23FC FFFF 9653          move.l    #-1,__ungetbuf.L
00005500  FFFF 0803 
00005504  00C0      
00005506  6010      9654          bra.s     getch_3
                    9655   getch_1:
00005508  4EB8 0B68 9656          jsr       __getch
0000550C  2400      9657          move.l    D0,D2
0000550E  0C80 0000 9658          cmp.l     #13,D0
00005512  000D      
00005514  6602      9659          bne.s     getch_3
00005516  740A      9660          moveq     #10,D2
                    9661   getch_3:
00005518  2002      9662          move.l    D2,D0
0000551A  241F      9663          move.l    (A7)+,D2
0000551C  4E75      9664          rts
                    9665   _tolower:
0000551E  202F 0004 9666          move.l    4(A7),D0
00005522  0C80 0000 9667          cmp.l     #'A',D0
00005526  0041      
00005528  6D0E      9668          blt.s     tolower_1
0000552A  0C80 0000 9669          cmp.l     #'Z',D0
0000552E  005A      
00005530  6E06      9670          bgt.s     tolower_1
00005532  0680 0000 9671          add.l     #$20,D0
00005536  0020      
                    9672   tolower_1:
00005538  4E75      9673          rts
                    9674   _sprintf:
0000553A  4E56 FFFC 9675          link      A6,#-4
0000553E  2F02      9676          move.l    D2,-(A7)
00005540  41EE 000C 9677          lea       12(A6),A0
00005544  5848      9678          addq.w    #4,A0
00005546  2408      9679          move.l    A0,D2
00005548  2F02      9680          move.l    D2,-(A7)
0000554A  2F2E 000C 9681          move.l    12(A6),-(A7)
0000554E  2F2E 0008 9682          move.l    8(A6),-(A7)
00005552  4EB9 0000 9683          jsr       _doprint
00005556  5674      
00005558  DEFC 000C 9684          add.w     #12,A7
0000555C  2D40 FFFC 9685          move.l    D0,-4(A6)
00005560  4282      9686          clr.l     D2
00005562  202E FFFC 9687          move.l    -4(A6),D0
00005566  241F      9688          move.l    (A7)+,D2
00005568  4E5E      9689          unlk      A6
0000556A  4E75      9690          rts
                    9691   _strcat:
0000556C  206F 0004 9692          move.l    (4,A7),A0
00005570  226F 0008 9693          move.l    (8,A7),A1
00005574  2008      9694          move.l    A0,D0
                    9695   strcat_1:
00005576  4A18      9696          tst.b     (A0)+
00005578  66FC      9697          bne.s     strcat_1
0000557A  5388      9698          subq.l    #1,A0
                    9699   strcat_2:
0000557C  10D9      9700          move.b    (A1)+,(A0)+
0000557E  66FC      9701          bne.s     strcat_2
00005580  4E75      9702          rts
                    9703   _toupper:
00005582  202F 0004 9704          move.l    4(A7),D0
00005586  0C80 0000 9705          cmp.l     #'a',D0
0000558A  0061      
0000558C  6D0E      9706          blt.s     toupper_1
0000558E  0C80 0000 9707          cmp.l     #'z',D0
00005592  007A      
00005594  6E06      9708          bgt.s     toupper_1
00005596  0480 0000 9709          sub.l     #$20,D0
0000559A  0020      
                    9710   toupper_1:
0000559C  4E75      9711          rts
                    9712   _printf:
0000559E  4E56 FFFC 9713          link      A6,#-4
000055A2  2F02      9714          move.l    D2,-(A7)
000055A4  41EE 0008 9715          lea       8(A6),A0
000055A8  5848      9716          addq.w    #4,A0
000055AA  2408      9717          move.l    A0,D2
000055AC  2F02      9718          move.l    D2,-(A7)
000055AE  2F2E 0008 9719          move.l    8(A6),-(A7)
000055B2  42A7      9720          clr.l     -(A7)
000055B4  4EB9 0000 9721          jsr       _doprint
000055B8  5674      
000055BA  DEFC 000C 9722          add.w     #12,A7
000055BE  2D40 FFFC 9723          move.l    D0,-4(A6)
000055C2  4282      9724          clr.l     D2
000055C4  202E FFFC 9725          move.l    -4(A6),D0
000055C8  241F      9726          move.l    (A7)+,D2
000055CA  4E5E      9727          unlk      A6
000055CC  4E75      9728          rts
                    9729   @doprint_copy:
000055CE  4E56 0000 9730          link      A6,#0
000055D2  206E 0008 9731          move.l    8(A6),A0
000055D6  4A90      9732          tst.l     (A0)
000055D8  6710      9733          beq.s     @doprint_copy_1
000055DA  202E 000C 9734          move.l    12(A6),D0
000055DE  206E 0008 9735          move.l    8(A6),A0
000055E2  2250      9736          move.l    (A0),A1
000055E4  5290      9737          addq.l    #1,(A0)
000055E6  1280      9738          move.b    D0,(A1)
000055E8  600A      9739          bra.s     @doprint_copy_2
                    9740   @doprint_copy_1:
000055EA  2F2E 000C 9741          move.l    12(A6),-(A7)
000055EE  4EB8 54BA 9742          jsr       _putch
000055F2  584F      9743          addq.w    #4,A7
                    9744   @doprint_copy_2:
000055F4  4E5E      9745          unlk      A6
000055F6  4E75      9746          rts
                    9747   @doprint_getval:
000055F8  4E56 0000 9748          link      A6,#0
000055FC  48E7 3000 9749          movem.l   D2/D3,-(A7)
00005600  262E 0008 9750          move.l    8(A6),D3
00005604  4282      9751          clr.l     D2
00005606  2043      9752          move.l    D3,A0
00005608  2050      9753          move.l    (A0),A0
0000560A  1010      9754          move.b    (A0),D0
0000560C  0C00 002A 9755          cmp.b     #42,D0
00005610  6612      9756          bne.s     @doprint_getval_1
00005612  206E 000C 9757          move.l    12(A6),A0
00005616  2250      9758          move.l    (A0),A1
00005618  5890      9759          addq.l    #4,(A0)
0000561A  2411      9760          move.l    (A1),D2
0000561C  2043      9761          move.l    D3,A0
0000561E  5290      9762          addq.l    #1,(A0)
00005620  6000 0048 9763          bra       @doprint_getval_5
                    9764   @doprint_getval_1:
00005624  7001      9765          moveq     #1,D0
00005626  2043      9766          move.l    D3,A0
00005628  2050      9767          move.l    (A0),A0
0000562A  1210      9768          move.b    (A0),D1
0000562C  4881      9769          ext.w     D1
0000562E  48C1      9770          ext.l     D1
00005630  D081      9771          add.l     D1,D0
00005632  41F9 0000 9772          lea       __ctype.L,A0
00005636  74A2      
00005638  1030 0800 9773          move.b    0(A0,D0.L),D0
0000563C  C03C 0004 9774          and.b     #4,D0
00005640  6728      9775          beq.s     @doprint_getval_5
00005642  2F02      9776          move.l    D2,-(A7)
00005644  4878 000A 9777          pea       10
00005648  4EB9 0000 9778          jsr       LMUL
0000564C  5E10      
0000564E  2017      9779          move.l    (A7),D0
00005650  504F      9780          addq.w    #8,A7
00005652  2043      9781          move.l    D3,A0
00005654  2250      9782          move.l    (A0),A1
00005656  5290      9783          addq.l    #1,(A0)
00005658  1211      9784          move.b    (A1),D1
0000565A  4881      9785          ext.w     D1
0000565C  48C1      9786          ext.l     D1
0000565E  D081      9787          add.l     D1,D0
00005660  0480 0000 9788          sub.l     #48,D0
00005664  0030      
00005666  2400      9789          move.l    D0,D2
00005668  60BA      9790          bra       @doprint_getval_1
                    9791   @doprint_getval_5:
0000566A  2002      9792          move.l    D2,D0
0000566C  4CDF 000C 9793          movem.l   (A7)+,D2/D3
00005670  4E5E      9794          unlk      A6
00005672  4E75      9795          rts
                    9796   _doprint:
00005674  4E56 FFCC 9797          link      A6,#-52
00005678  48E7 3F3C 9798          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000567C  45EE 0008 9799          lea       8(A6),A2
00005680  47F8 55CE 9800          lea       @doprint_copy.L,A3
00005684  49F9 0000 9801          lea       _ultoa.L,A4
00005688  5D9C      
0000568A  4286      9802          clr.l     D6
                    9803   doprint_1:
0000568C  206E 000C 9804          move.l    12(A6),A0
00005690  4A10      9805          tst.b     (A0)
00005692  6700 05EA 9806          beq       doprint_3
00005696  206E 000C 9807          move.l    12(A6),A0
0000569A  1010      9808          move.b    (A0),D0
0000569C  0C00 0025 9809          cmp.b     #37,D0
000056A0  671C      9810          beq.s     doprint_4
000056A2  206E 000C 9811          move.l    12(A6),A0
000056A6  52AE 000C 9812          addq.l    #1,12(A6)
000056AA  1210      9813          move.b    (A0),D1
000056AC  4881      9814          ext.w     D1
000056AE  48C1      9815          ext.l     D1
000056B0  2F01      9816          move.l    D1,-(A7)
000056B2  2F0A      9817          move.l    A2,-(A7)
000056B4  4E93      9818          jsr       (A3)
000056B6  504F      9819          addq.w    #8,A7
000056B8  5286      9820          addq.l    #1,D6
000056BA  6000 05BE 9821          bra       doprint_2
                    9822   doprint_4:
000056BE  52AE 000C 9823          addq.l    #1,12(A6)
000056C2  422E FFD3 9824          clr.b     -45(A6)
000056C6  422E FFD2 9825          clr.b     -46(A6)
000056CA  422E FFD0 9826          clr.b     -48(A6)
000056CE  422E FFCF 9827          clr.b     -49(A6)
000056D2  422E FFCE 9828          clr.b     -50(A6)
000056D6  422E FFCD 9829          clr.b     -51(A6)
000056DA  42AE FFFC 9830          clr.l     -4(A6)
000056DE  7AFF      9831          moveq     #-1,D5
000056E0  41EE FFDC 9832          lea       -36(A6),A0
000056E4  2608      9833          move.l    A0,D3
000056E6  2408      9834          move.l    A0,D2
                    9835   doprint_6:
000056E8  206E 000C 9836          move.l    12(A6),A0
000056EC  1010      9837          move.b    (A0),D0
000056EE  4880      9838          ext.w     D0
000056F0  48C0      9839          ext.l     D0
000056F2  0C80 0000 9840          cmp.l     #43,D0
000056F6  002B      
000056F8  6730      9841          beq.s     doprint_12
000056FA  6E18      9842          bgt.s     doprint_15
000056FC  0C80 0000 9843          cmp.l     #35,D0
00005700  0023      
00005702  6700 003E 9844          beq       doprint_14
00005706  6E00 0046 9845          bgt       doprint_9
0000570A  0C80 0000 9846          cmp.l     #32,D0
0000570E  0020      
00005710  6724      9847          beq.s     doprint_13
00005712  603A      9848          bra.s     doprint_9
                    9849   doprint_15:
00005714  0C80 0000 9850          cmp.l     #45,D0
00005718  002D      
0000571A  6702      9851          beq.s     doprint_11
0000571C  6030      9852          bra.s     doprint_9
                    9853   doprint_11:
0000571E  1D7C 0001 9854          move.b    #1,-51(A6)
00005722  FFCD      
00005724  52AE 000C 9855          addq.l    #1,12(A6)
00005728  6026      9856          bra.s     doprint_7
                    9857   doprint_12:
0000572A  1D7C 0001 9858          move.b    #1,-50(A6)
0000572E  FFCE      
00005730  52AE 000C 9859          addq.l    #1,12(A6)
00005734  601A      9860          bra.s     doprint_7
                    9861   doprint_13:
00005736  1D7C 0001 9862          move.b    #1,-49(A6)
0000573A  FFCF      
0000573C  52AE 000C 9863          addq.l    #1,12(A6)
00005740  600E      9864          bra.s     doprint_7
                    9865   doprint_14:
00005742  1D7C 0001 9866          move.b    #1,-48(A6)
00005746  FFD0      
00005748  52AE 000C 9867          addq.l    #1,12(A6)
0000574C  6002      9868          bra.s     doprint_7
                    9869   doprint_9:
0000574E  6002      9870          bra.s     doprint_8
                    9871   doprint_7:
00005750  6096      9872          bra       doprint_6
                    9873   doprint_8:
00005752  206E 000C 9874          move.l    12(A6),A0
00005756  1010      9875          move.b    (A0),D0
00005758  0C00 0030 9876          cmp.b     #48,D0
0000575C  660A      9877          bne.s     doprint_16
0000575E  52AE 000C 9878          addq.l    #1,12(A6)
00005762  1D7C 0001 9879          move.b    #1,-46(A6)
00005766  FFD2      
                    9880   doprint_16:
00005768  486E 0010 9881          pea       16(A6)
0000576C  486E 000C 9882          pea       12(A6)
00005770  4EB8 55F8 9883          jsr       @doprint_getval
00005774  504F      9884          addq.w    #8,A7
00005776  2A40      9885          move.l    D0,A5
00005778  206E 000C 9886          move.l    12(A6),A0
0000577C  1010      9887          move.b    (A0),D0
0000577E  0C00 002E 9888          cmp.b     #46,D0
00005782  6614      9889          bne.s     doprint_18
00005784  52AE 000C 9890          addq.l    #1,12(A6)
00005788  486E 0010 9891          pea       16(A6)
0000578C  486E 000C 9892          pea       12(A6)
00005790  4EB8 55F8 9893          jsr       @doprint_getval
00005794  504F      9894          addq.w    #8,A7
00005796  2A00      9895          move.l    D0,D5
                    9896   doprint_18:
00005798  206E 000C 9897          move.l    12(A6),A0
0000579C  1010      9898          move.b    (A0),D0
0000579E  0C00 006C 9899          cmp.b     #108,D0
000057A2  660A      9900          bne.s     doprint_20
000057A4  52AE 000C 9901          addq.l    #1,12(A6)
000057A8  1D7C 0001 9902          move.b    #1,-45(A6)
000057AC  FFD3      
                    9903   doprint_20:
000057AE  206E 000C 9904          move.l    12(A6),A0
000057B2  1010      9905          move.b    (A0),D0
000057B4  4880      9906          ext.w     D0
000057B6  48C0      9907          ext.l     D0
000057B8  0C80 0000 9908          cmp.l     #111,D0
000057BC  006F      
000057BE  6700 00D8 9909          beq       doprint_27
000057C2  6E34      9910          bgt.s     doprint_33
000057C4  0C80 0000 9911          cmp.l     #100,D0
000057C8  0064      
000057CA  6700 0054 9912          beq       doprint_24
000057CE  6E1C      9913          bgt.s     doprint_34
000057D0  0C80 0000 9914          cmp.l     #99,D0
000057D4  0063      
000057D6  6700 0130 9915          beq       doprint_30
000057DA  6E00 0174 9916          bgt       doprint_22
000057DE  0C80 0000 9917          cmp.l     #88,D0
000057E2  0058      
000057E4  6700 00EA 9918          beq       doprint_28
000057E8  6000 0166 9919          bra       doprint_22
                    9920   doprint_34:
000057EC  0C80 0000 9921          cmp.l     #105,D0
000057F0  0069      
000057F2  672C      9922          beq.s     doprint_24
000057F4  6000 015A 9923          bra       doprint_22
                    9924   doprint_33:
000057F8  0C80 0000 9925          cmp.l     #117,D0
000057FC  0075      
000057FE  6700 0060 9926          beq       doprint_26
00005802  6E0E      9927          bgt.s     doprint_35
00005804  0C80 0000 9928          cmp.l     #115,D0
00005808  0073      
0000580A  6700 0124 9929          beq       doprint_31
0000580E  6000 0140 9930          bra       doprint_22
                    9931   doprint_35:
00005812  0C80 0000 9932          cmp.l     #120,D0
00005816  0078      
00005818  6700 00B6 9933          beq       doprint_28
0000581C  6000 0132 9934          bra       doprint_22
                    9935   doprint_24:
00005820  4A2E FFD3 9936          tst.b     -45(A6)
00005824  671C      9937          beq.s     doprint_36
00005826  4878 000A 9938          pea       10
0000582A  2F03      9939          move.l    D3,-(A7)
0000582C  206E 0010 9940          move.l    16(A6),A0
00005830  58AE 0010 9941          addq.l    #4,16(A6)
00005834  2F10      9942          move.l    (A0),-(A7)
00005836  4EB9 0000 9943          jsr       _ltoa
0000583A  5D18      
0000583C  DEFC 000C 9944          add.w     #12,A7
00005840  601A      9945          bra.s     doprint_37
                    9946   doprint_36:
00005842  4878 000A 9947          pea       10
00005846  2F03      9948          move.l    D3,-(A7)
00005848  206E 0010 9949          move.l    16(A6),A0
0000584C  58AE 0010 9950          addq.l    #4,16(A6)
00005850  2F10      9951          move.l    (A0),-(A7)
00005852  4EB9 0000 9952          jsr       _ltoa
00005856  5D18      
00005858  DEFC 000C 9953          add.w     #12,A7
                    9954   doprint_37:
0000585C  6000 0100 9955          bra       doprint_23
                    9956   doprint_26:
00005860  4A2E FFD3 9957          tst.b     -45(A6)
00005864  6718      9958          beq.s     doprint_38
00005866  4878 000A 9959          pea       10
0000586A  2F03      9960          move.l    D3,-(A7)
0000586C  206E 0010 9961          move.l    16(A6),A0
00005870  58AE 0010 9962          addq.l    #4,16(A6)
00005874  2F10      9963          move.l    (A0),-(A7)
00005876  4E94      9964          jsr       (A4)
00005878  DEFC 000C 9965          add.w     #12,A7
0000587C  6016      9966          bra.s     doprint_39
                    9967   doprint_38:
0000587E  4878 000A 9968          pea       10
00005882  2F03      9969          move.l    D3,-(A7)
00005884  206E 0010 9970          move.l    16(A6),A0
00005888  58AE 0010 9971          addq.l    #4,16(A6)
0000588C  2F10      9972          move.l    (A0),-(A7)
0000588E  4E94      9973          jsr       (A4)
00005890  DEFC 000C 9974          add.w     #12,A7
                    9975   doprint_39:
00005894  6000 00C8 9976          bra       doprint_23
                    9977   doprint_27:
00005898  4A2E FFD3 9978          tst.b     -45(A6)
0000589C  6718      9979          beq.s     doprint_40
0000589E  4878 0008 9980          pea       8
000058A2  2F03      9981          move.l    D3,-(A7)
000058A4  206E 0010 9982          move.l    16(A6),A0
000058A8  58AE 0010 9983          addq.l    #4,16(A6)
000058AC  2F10      9984          move.l    (A0),-(A7)
000058AE  4E94      9985          jsr       (A4)
000058B0  DEFC 000C 9986          add.w     #12,A7
000058B4  6016      9987          bra.s     doprint_41
                    9988   doprint_40:
000058B6  4878 0008 9989          pea       8
000058BA  2F03      9990          move.l    D3,-(A7)
000058BC  206E 0010 9991          move.l    16(A6),A0
000058C0  58AE 0010 9992          addq.l    #4,16(A6)
000058C4  2F10      9993          move.l    (A0),-(A7)
000058C6  4E94      9994          jsr       (A4)
000058C8  DEFC 000C 9995          add.w     #12,A7
                    9996   doprint_41:
000058CC  6000 0090 9997          bra       doprint_23
                    9998   doprint_28:
000058D0  4A2E FFD3 9999          tst.b     -45(A6)
000058D4  6718      10000          beq.s     doprint_42
000058D6  4878 0010 10001          pea       16
000058DA  2F03      10002          move.l    D3,-(A7)
000058DC  206E 0010 10003          move.l    16(A6),A0
000058E0  58AE 0010 10004          addq.l    #4,16(A6)
000058E4  2F10      10005          move.l    (A0),-(A7)
000058E6  4E94      10006          jsr       (A4)
000058E8  DEFC 000C 10007          add.w     #12,A7
000058EC  6016      10008          bra.s     doprint_43
                    10009   doprint_42:
000058EE  4878 0010 10010          pea       16
000058F2  2F03      10011          move.l    D3,-(A7)
000058F4  206E 0010 10012          move.l    16(A6),A0
000058F8  58AE 0010 10013          addq.l    #4,16(A6)
000058FC  2F10      10014          move.l    (A0),-(A7)
000058FE  4E94      10015          jsr       (A4)
00005900  DEFC 000C 10016          add.w     #12,A7
                    10017   doprint_43:
00005904  6000 0058 10018          bra       doprint_23
                    10019   doprint_30:
00005908  206E 0010 10020          move.l    16(A6),A0
0000590C  58AE 0010 10021          addq.l    #4,16(A6)
00005910  2010      10022          move.l    (A0),D0
00005912  2042      10023          move.l    D2,A0
00005914  5282      10024          addq.l    #1,D2
00005916  1080      10025          move.b    D0,(A0)
00005918  2042      10026          move.l    D2,A0
0000591A  4210      10027          clr.b     (A0)
0000591C  200D      10028          move.l    A5,D0
0000591E  6704      10029          beq.s     doprint_44
00005920  200D      10030          move.l    A5,D0
00005922  6006      10031          bra.s     doprint_45
                    10032   doprint_44:
00005924  7001      10033          moveq     #1,D0
00005926  4880      10034          ext.w     D0
00005928  48C0      10035          ext.l     D0
                    10036   doprint_45:
0000592A  2A00      10037          move.l    D0,D5
0000592C  6000 0030 10038          bra       doprint_23
                    10039   doprint_31:
00005930  206E 0010 10040          move.l    16(A6),A0
00005934  58AE 0010 10041          addq.l    #4,16(A6)
00005938  2610      10042          move.l    (A0),D3
0000593A  0C85 FFFF 10043          cmp.l     #-1,D5
0000593E  FFFF      
00005940  660C      10044          bne.s     doprint_46
00005942  2F03      10045          move.l    D3,-(A7)
00005944  4EB9 0000 10046          jsr       _strlen
00005948  5E9E      
0000594A  584F      10047          addq.w    #4,A7
0000594C  2A00      10048          move.l    D0,D5
                    10049   doprint_46:
0000594E  600E      10050          bra.s     doprint_23
                    10051   doprint_22:
00005950  206E 000C 10052          move.l    12(A6),A0
00005954  2242      10053          move.l    D2,A1
00005956  5282      10054          addq.l    #1,D2
00005958  1290      10055          move.b    (A0),(A1)
0000595A  2042      10056          move.l    D2,A0
0000595C  4210      10057          clr.b     (A0)
                    10058   doprint_23:
0000595E  2F03      10059          move.l    D3,-(A7)
00005960  4EB9 0000 10060          jsr       _strlen
00005964  5E9E      
00005966  584F      10061          addq.w    #4,A7
00005968  1800      10062          move.b    D0,D4
0000596A  206E 000C 10063          move.l    12(A6),A0
0000596E  1010      10064          move.b    (A0),D0
00005970  0C00 0073 10065          cmp.b     #115,D0
00005974  661C      10066          bne.s     doprint_48
00005976  0C85 0000 10067          cmp.l     #0,D5
0000597A  0000      
0000597C  6D14      10068          blt.s     doprint_48
0000597E  4884      10069          ext.w     D4
00005980  48C4      10070          ext.l     D4
00005982  B885      10071          cmp.l     D5,D4
00005984  6F04      10072          ble.s     doprint_50
00005986  2005      10073          move.l    D5,D0
00005988  6006      10074          bra.s     doprint_51
                    10075   doprint_50:
0000598A  1004      10076          move.b    D4,D0
0000598C  4880      10077          ext.w     D0
0000598E  48C0      10078          ext.l     D0
                    10079   doprint_51:
00005990  1800      10080          move.b    D0,D4
                    10081   doprint_48:
00005992  206E 000C 10082          move.l    12(A6),A0
00005996  1010      10083          move.b    (A0),D0
00005998  0C00 0058 10084          cmp.b     #88,D0
0000599C  6600 0026 10085          bne       doprint_56
000059A0  41EE FFDC 10086          lea       -36(A6),A0
000059A4  2408      10087          move.l    A0,D2
                    10088   doprint_54:
000059A6  2042      10089          move.l    D2,A0
000059A8  4A10      10090          tst.b     (A0)
000059AA  6718      10091          beq.s     doprint_56
000059AC  2042      10092          move.l    D2,A0
000059AE  1210      10093          move.b    (A0),D1
000059B0  4881      10094          ext.w     D1
000059B2  48C1      10095          ext.l     D1
000059B4  2F01      10096          move.l    D1,-(A7)
000059B6  4EB8 5582 10097          jsr       _toupper
000059BA  584F      10098          addq.w    #4,A7
000059BC  2042      10099          move.l    D2,A0
000059BE  1080      10100          move.b    D0,(A0)
000059C0  5282      10101          addq.l    #1,D2
000059C2  60E2      10102          bra       doprint_54
                    10103   doprint_56:
000059C4  7E00      10104          moveq     #0,D7
000059C6  41EE FFD4 10105          lea       -44(A6),A0
000059CA  2408      10106          move.l    A0,D2
000059CC  206E 000C 10107          move.l    12(A6),A0
000059D0  1010      10108          move.b    (A0),D0
000059D2  0C00 0064 10109          cmp.b     #100,D0
000059D6  670E      10110          beq.s     doprint_59
000059D8  206E 000C 10111          move.l    12(A6),A0
000059DC  1010      10112          move.b    (A0),D0
000059DE  0C00 0069 10113          cmp.b     #105,D0
000059E2  6600 0068 10114          bne       doprint_65
                    10115   doprint_59:
000059E6  102E FFCE 10116          move.b    -50(A6),D0
000059EA  4880      10117          ext.w     D0
000059EC  48C0      10118          ext.l     D0
000059EE  4A80      10119          tst.l     D0
000059F0  660C      10120          bne.s     doprint_62
000059F2  2043      10121          move.l    D3,A0
000059F4  1010      10122          move.b    (A0),D0
000059F6  0C00 002D 10123          cmp.b     #45,D0
000059FA  6600 0028 10124          bne       doprint_60
                    10125   doprint_62:
000059FE  2043      10126          move.l    D3,A0
00005A00  1010      10127          move.b    (A0),D0
00005A02  0C00 002D 10128          cmp.b     #45,D0
00005A06  660E      10129          bne.s     doprint_63
00005A08  2043      10130          move.l    D3,A0
00005A0A  5283      10131          addq.l    #1,D3
00005A0C  2242      10132          move.l    D2,A1
00005A0E  5282      10133          addq.l    #1,D2
00005A10  1290      10134          move.b    (A0),(A1)
00005A12  5304      10135          subq.b    #1,D4
00005A14  6008      10136          bra.s     doprint_64
                    10137   doprint_63:
00005A16  2042      10138          move.l    D2,A0
00005A18  5282      10139          addq.l    #1,D2
00005A1A  10BC 002B 10140          move.b    #43,(A0)
                    10141   doprint_64:
00005A1E  5287      10142          addq.l    #1,D7
00005A20  6000 002A 10143          bra       doprint_65
                    10144   doprint_60:
00005A24  4A2E FFCF 10145          tst.b     -49(A6)
00005A28  6722      10146          beq.s     doprint_65
00005A2A  2043      10147          move.l    D3,A0
00005A2C  1010      10148          move.b    (A0),D0
00005A2E  0C00 002D 10149          cmp.b     #45,D0
00005A32  660E      10150          bne.s     doprint_67
00005A34  2043      10151          move.l    D3,A0
00005A36  5283      10152          addq.l    #1,D3
00005A38  2242      10153          move.l    D2,A1
00005A3A  5282      10154          addq.l    #1,D2
00005A3C  1290      10155          move.b    (A0),(A1)
00005A3E  5304      10156          subq.b    #1,D4
00005A40  6008      10157          bra.s     doprint_68
                    10158   doprint_67:
00005A42  2042      10159          move.l    D2,A0
00005A44  5282      10160          addq.l    #1,D2
00005A46  10BC 0020 10161          move.b    #32,(A0)
                    10162   doprint_68:
00005A4A  5287      10163          addq.l    #1,D7
                    10164   doprint_65:
00005A4C  4A2E FFD0 10165          tst.b     -48(A6)
00005A50  6700 005A 10166          beq       doprint_77
00005A54  206E 000C 10167          move.l    12(A6),A0
00005A58  1010      10168          move.b    (A0),D0
00005A5A  4880      10169          ext.w     D0
00005A5C  48C0      10170          ext.l     D0
00005A5E  0C80 0000 10171          cmp.l     #111,D0
00005A62  006F      
00005A64  671A      10172          beq.s     doprint_73
00005A66  6E0C      10173          bgt.s     doprint_76
00005A68  0C80 0000 10174          cmp.l     #88,D0
00005A6C  0058      
00005A6E  6710      10175          beq.s     doprint_73
00005A70  6000 003A 10176          bra       doprint_77
                    10177   doprint_76:
00005A74  0C80 0000 10178          cmp.l     #120,D0
00005A78  0078      
00005A7A  6704      10179          beq.s     doprint_73
00005A7C  6000 002E 10180          bra       doprint_77
                    10181   doprint_73:
00005A80  2042      10182          move.l    D2,A0
00005A82  5282      10183          addq.l    #1,D2
00005A84  10BC 0030 10184          move.b    #48,(A0)
00005A88  5287      10185          addq.l    #1,D7
00005A8A  206E 000C 10186          move.l    12(A6),A0
00005A8E  1010      10187          move.b    (A0),D0
00005A90  0C00 0078 10188          cmp.b     #120,D0
00005A94  670C      10189          beq.s     doprint_79
00005A96  206E 000C 10190          move.l    12(A6),A0
00005A9A  1010      10191          move.b    (A0),D0
00005A9C  0C00 0058 10192          cmp.b     #88,D0
00005AA0  660A      10193          bne.s     doprint_77
                    10194   doprint_79:
00005AA2  2042      10195          move.l    D2,A0
00005AA4  5282      10196          addq.l    #1,D2
00005AA6  10BC 0078 10197          move.b    #120,(A0)
00005AAA  5287      10198          addq.l    #1,D7
                    10199   doprint_77:
00005AAC  2042      10200          move.l    D2,A0
00005AAE  4210      10201          clr.b     (A0)
00005AB0  206E 000C 10202          move.l    12(A6),A0
00005AB4  1010      10203          move.b    (A0),D0
00005AB6  4880      10204          ext.w     D0
00005AB8  48C0      10205          ext.l     D0
00005ABA  0C80 0000 10206          cmp.l     #105,D0
00005ABE  0069      
00005AC0  6700 0076 10207          beq       doprint_82
00005AC4  6E42      10208          bgt.s     doprint_93
00005AC6  0C80 0000 10209          cmp.l     #99,D0
00005ACA  0063      
00005ACC  6700 0084 10210          beq       doprint_96
00005AD0  6E1C      10211          bgt.s     doprint_94
00005AD2  0C80 0000 10212          cmp.l     #88,D0
00005AD6  0058      
00005AD8  6700 005E 10213          beq       doprint_82
00005ADC  6E00 0184 10214          bgt       doprint_80
00005AE0  0C80 0000 10215          cmp.l     #69,D0
00005AE4  0045      
00005AE6  6700 0050 10216          beq       doprint_82
00005AEA  6000 0176 10217          bra       doprint_80
                    10218   doprint_94:
00005AEE  0C80 0000 10219          cmp.l     #101,D0
00005AF2  0065      
00005AF4  6700 0042 10220          beq       doprint_82
00005AF8  6E00 0168 10221          bgt       doprint_80
00005AFC  0C80 0000 10222          cmp.l     #100,D0
00005B00  0064      
00005B02  6734      10223          beq.s     doprint_82
00005B04  6000 015C 10224          bra       doprint_80
                    10225   doprint_93:
00005B08  0C80 0000 10226          cmp.l     #117,D0
00005B0C  0075      
00005B0E  6728      10227          beq.s     doprint_82
00005B10  6E1A      10228          bgt.s     doprint_95
00005B12  0C80 0000 10229          cmp.l     #115,D0
00005B16  0073      
00005B18  6700 0038 10230          beq       doprint_96
00005B1C  6E00 0144 10231          bgt       doprint_80
00005B20  0C80 0000 10232          cmp.l     #111,D0
00005B24  006F      
00005B26  6710      10233          beq.s     doprint_82
00005B28  6000 0138 10234          bra       doprint_80
                    10235   doprint_95:
00005B2C  0C80 0000 10236          cmp.l     #120,D0
00005B30  0078      
00005B32  6704      10237          beq.s     doprint_82
00005B34  6000 012C 10238          bra       doprint_80
                    10239   doprint_82:
00005B38  4A2E FFD2 10240          tst.b     -46(A6)
00005B3C  6714      10241          beq.s     doprint_96
00005B3E  4A2E FFCD 10242          tst.b     -51(A6)
00005B42  660E      10243          bne.s     doprint_96
00005B44  200D      10244          move.l    A5,D0
00005B46  9087      10245          sub.l     D7,D0
00005B48  4884      10246          ext.w     D4
00005B4A  48C4      10247          ext.l     D4
00005B4C  9084      10248          sub.l     D4,D0
00005B4E  2D40 FFFC 10249          move.l    D0,-4(A6)
                    10250   doprint_96:
00005B52  202E FFFC 10251          move.l    -4(A6),D0
00005B56  0C80 0000 10252          cmp.l     #0,D0
00005B5A  0000      
00005B5C  6C04      10253          bge.s     doprint_98
00005B5E  42AE FFFC 10254          clr.l     -4(A6)
                    10255   doprint_98:
00005B62  4A2E FFCD 10256          tst.b     -51(A6)
00005B66  6600 0030 10257          bne       doprint_104
00005B6A  1004      10258          move.b    D4,D0
00005B6C  4880      10259          ext.w     D0
00005B6E  48C0      10260          ext.l     D0
00005B70  D0AE FFFC 10261          add.l     -4(A6),D0
00005B74  D087      10262          add.l     D7,D0
00005B76  1D40 FFD1 10263          move.b    D0,-47(A6)
                    10264   doprint_102:
00005B7A  102E FFD1 10265          move.b    -47(A6),D0
00005B7E  4880      10266          ext.w     D0
00005B80  48C0      10267          ext.l     D0
00005B82  220D      10268          move.l    A5,D1
00005B84  534D      10269          subq.w    #1,A5
00005B86  B081      10270          cmp.l     D1,D0
00005B88  6C0E      10271          bge.s     doprint_104
00005B8A  4878 0020 10272          pea       32
00005B8E  2F0A      10273          move.l    A2,-(A7)
00005B90  4E93      10274          jsr       (A3)
00005B92  504F      10275          addq.w    #8,A7
00005B94  5286      10276          addq.l    #1,D6
00005B96  60E2      10277          bra       doprint_102
                    10278   doprint_104:
00005B98  41EE FFD4 10279          lea       -44(A6),A0
00005B9C  2408      10280          move.l    A0,D2
                    10281   doprint_105:
00005B9E  2042      10282          move.l    D2,A0
00005BA0  4A10      10283          tst.b     (A0)
00005BA2  6716      10284          beq.s     doprint_107
00005BA4  2042      10285          move.l    D2,A0
00005BA6  5282      10286          addq.l    #1,D2
00005BA8  1210      10287          move.b    (A0),D1
00005BAA  4881      10288          ext.w     D1
00005BAC  48C1      10289          ext.l     D1
00005BAE  2F01      10290          move.l    D1,-(A7)
00005BB0  2F0A      10291          move.l    A2,-(A7)
00005BB2  4E93      10292          jsr       (A3)
00005BB4  504F      10293          addq.w    #8,A7
00005BB6  5286      10294          addq.l    #1,D6
00005BB8  60E4      10295          bra       doprint_105
                    10296   doprint_107:
00005BBA  202E FFFC 10297          move.l    -4(A6),D0
00005BBE  1D40 FFD1 10298          move.b    D0,-47(A6)
                    10299   doprint_108:
00005BC2  102E FFD1 10300          move.b    -47(A6),D0
00005BC6  532E FFD1 10301          subq.b    #1,-47(A6)
00005BCA  4A00      10302          tst.b     D0
00005BCC  670E      10303          beq.s     doprint_110
00005BCE  4878 0030 10304          pea       48
00005BD2  2F0A      10305          move.l    A2,-(A7)
00005BD4  4E93      10306          jsr       (A3)
00005BD6  504F      10307          addq.w    #8,A7
00005BD8  5286      10308          addq.l    #1,D6
00005BDA  60E6      10309          bra       doprint_108
                    10310   doprint_110:
00005BDC  2043      10311          move.l    D3,A0
00005BDE  4A10      10312          tst.b     (A0)
00005BE0  6700 0048 10313          beq       doprint_113
00005BE4  206E 000C 10314          move.l    12(A6),A0
00005BE8  1010      10315          move.b    (A0),D0
00005BEA  4880      10316          ext.w     D0
00005BEC  48C0      10317          ext.l     D0
00005BEE  0C80 0000 10318          cmp.l     #115,D0
00005BF2  0073      
00005BF4  670C      10319          beq.s     doprint_116
00005BF6  6E18      10320          bgt.s     doprint_119
00005BF8  0C80 0000 10321          cmp.l     #99,D0
00005BFC  0063      
00005BFE  6702      10322          beq.s     doprint_116
00005C00  600E      10323          bra.s     doprint_119
                    10324   doprint_116:
00005C02  2005      10325          move.l    D5,D0
00005C04  5385      10326          subq.l    #1,D5
00005C06  0C80 0000 10327          cmp.l     #0,D0
00005C0A  0000      
00005C0C  6E02      10328          bgt.s     doprint_119
00005C0E  6016      10329          bra.s     doprint_115
                    10330   doprint_119:
00005C10  2043      10331          move.l    D3,A0
00005C12  5283      10332          addq.l    #1,D3
00005C14  1210      10333          move.b    (A0),D1
00005C16  4881      10334          ext.w     D1
00005C18  48C1      10335          ext.l     D1
00005C1A  2F01      10336          move.l    D1,-(A7)
00005C1C  2F0A      10337          move.l    A2,-(A7)
00005C1E  4E93      10338          jsr       (A3)
00005C20  504F      10339          addq.w    #8,A7
00005C22  5286      10340          addq.l    #1,D6
00005C24  6002      10341          bra.s     doprint_112
                    10342   doprint_115:
00005C26  6002      10343          bra.s     doprint_113
                    10344   doprint_112:
00005C28  60B2      10345          bra       doprint_110
                    10346   doprint_113:
00005C2A  4A2E FFCD 10347          tst.b     -51(A6)
00005C2E  6700 0030 10348          beq       doprint_125
00005C32  1004      10349          move.b    D4,D0
00005C34  4880      10350          ext.w     D0
00005C36  48C0      10351          ext.l     D0
00005C38  D0AE FFFC 10352          add.l     -4(A6),D0
00005C3C  D087      10353          add.l     D7,D0
00005C3E  1D40 FFD1 10354          move.b    D0,-47(A6)
                    10355   doprint_123:
00005C42  102E FFD1 10356          move.b    -47(A6),D0
00005C46  4880      10357          ext.w     D0
00005C48  48C0      10358          ext.l     D0
00005C4A  220D      10359          move.l    A5,D1
00005C4C  534D      10360          subq.w    #1,A5
00005C4E  B081      10361          cmp.l     D1,D0
00005C50  6C0E      10362          bge.s     doprint_125
00005C52  4878 0020 10363          pea       32
00005C56  2F0A      10364          move.l    A2,-(A7)
00005C58  4E93      10365          jsr       (A3)
00005C5A  504F      10366          addq.w    #8,A7
00005C5C  5386      10367          subq.l    #1,D6
00005C5E  60E2      10368          bra       doprint_123
                    10369   doprint_125:
00005C60  6014      10370          bra.s     doprint_81
                    10371   doprint_80:
00005C62  206E 000C 10372          move.l    12(A6),A0
00005C66  1210      10373          move.b    (A0),D1
00005C68  4881      10374          ext.w     D1
00005C6A  48C1      10375          ext.l     D1
00005C6C  2F01      10376          move.l    D1,-(A7)
00005C6E  2F0A      10377          move.l    A2,-(A7)
00005C70  4E93      10378          jsr       (A3)
00005C72  504F      10379          addq.w    #8,A7
00005C74  5286      10380          addq.l    #1,D6
                    10381   doprint_81:
00005C76  52AE 000C 10382          addq.l    #1,12(A6)
                    10383   doprint_2:
00005C7A  6000 FA10 10384          bra       doprint_1
                    10385   doprint_3:
00005C7E  4A92      10386          tst.l     (A2)
00005C80  6710      10387          beq.s     doprint_126
00005C82  4201      10388          clr.b     D1
00005C84  C2BC 0000 10389          and.l     #255,D1
00005C88  00FF      
00005C8A  2F01      10390          move.l    D1,-(A7)
00005C8C  2F0A      10391          move.l    A2,-(A7)
00005C8E  4E93      10392          jsr       (A3)
00005C90  504F      10393          addq.w    #8,A7
                    10394   doprint_126:
00005C92  2006      10395          move.l    D6,D0
00005C94  4CDF 3CFC 10396          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005C98  4E5E      10397          unlk      A6
00005C9A  4E75      10398          rts
                    10399   @itoa_convert:
00005C9C  4E56 0000 10400          link      A6,#0
00005CA0  48E7 3C00 10401          movem.l   D2/D3/D4/D5,-(A7)
00005CA4  242E 0008 10402          move.l    8(A6),D2
00005CA8  262E 0010 10403          move.l    16(A6),D3
00005CAC  2A2E 000C 10404          move.l    12(A6),D5
00005CB0  2F05      10405          move.l    D5,-(A7)
00005CB2  2F03      10406          move.l    D3,-(A7)
00005CB4  4EB8 53DC 10407          jsr       ULDIV
00005CB8  202F 0004 10408          move.l    4(A7),D0
00005CBC  504F      10409          addq.w    #8,A7
00005CBE  2800      10410          move.l    D0,D4
00005CC0  BA83      10411          cmp.l     D3,D5
00005CC2  651C      10412          blo.s     @itoa_convert_1
00005CC4  2F03      10413          move.l    D3,-(A7)
00005CC6  2F05      10414          move.l    D5,-(A7)
00005CC8  2F03      10415          move.l    D3,-(A7)
00005CCA  4EB8 53DC 10416          jsr       ULDIV
00005CCE  2217      10417          move.l    (A7),D1
00005CD0  504F      10418          addq.w    #8,A7
00005CD2  2F01      10419          move.l    D1,-(A7)
00005CD4  2F02      10420          move.l    D2,-(A7)
00005CD6  4EB8 5C9C 10421          jsr       @itoa_convert
00005CDA  DEFC 000C 10422          add.w     #12,A7
00005CDE  2400      10423          move.l    D0,D2
                    10424   @itoa_convert_1:
00005CE0  0C84 0000 10425          cmp.l     #9,D4
00005CE4  0009      
00005CE6  6E0E      10426          bgt.s     @itoa_convert_3
00005CE8  2004      10427          move.l    D4,D0
00005CEA  7230      10428          moveq     #48,D1
00005CEC  C2BC 0000 10429          and.l     #255,D1
00005CF0  00FF      
00005CF2  D081      10430          add.l     D1,D0
00005CF4  6012      10431          bra.s     @itoa_convert_4
                    10432   @itoa_convert_3:
00005CF6  2004      10433          move.l    D4,D0
00005CF8  7261      10434          moveq     #97,D1
00005CFA  C2BC 0000 10435          and.l     #255,D1
00005CFE  00FF      
00005D00  D081      10436          add.l     D1,D0
00005D02  0480 0000 10437          sub.l     #10,D0
00005D06  000A      
                    10438   @itoa_convert_4:
00005D08  2042      10439          move.l    D2,A0
00005D0A  1080      10440          move.b    D0,(A0)
00005D0C  2002      10441          move.l    D2,D0
00005D0E  5280      10442          addq.l    #1,D0
00005D10  4CDF 003C 10443          movem.l   (A7)+,D2/D3/D4/D5
00005D14  4E5E      10444          unlk      A6
00005D16  4E75      10445          rts
                    10446   _ltoa:
00005D18  4E56 0000 10447          link      A6,#0
00005D1C  48E7 3C00 10448          movem.l   D2/D3/D4/D5,-(A7)
00005D20  242E 0008 10449          move.l    8(A6),D2
00005D24  262E 000C 10450          move.l    12(A6),D3
00005D28  2A2E 0010 10451          move.l    16(A6),D5
00005D2C  2803      10452          move.l    D3,D4
00005D2E  0C85 0000 10453          cmp.l     #2,D5
00005D32  0002      
00005D34  6D08      10454          blt.s     ltoa_3
00005D36  0C85 0000 10455          cmp.l     #36,D5
00005D3A  0024      
00005D3C  6F06      10456          ble.s     ltoa_1
                    10457   ltoa_3:
00005D3E  2003      10458          move.l    D3,D0
00005D40  6000 0052 10459          bra       ltoa_4
                    10460   ltoa_1:
00005D44  0C85 0000 10461          cmp.l     #10,D5
00005D48  000A      
00005D4A  6600 0032 10462          bne       ltoa_5
00005D4E  0C82 0000 10463          cmp.l     #0,D2
00005D52  0000      
00005D54  6C28      10464          bge.s     ltoa_5
00005D56  2002      10465          move.l    D2,D0
00005D58  4480      10466          neg.l     D0
00005D5A  2400      10467          move.l    D0,D2
00005D5C  0C82 0000 10468          cmp.l     #0,D2
00005D60  0000      
00005D62  6C12      10469          bge.s     ltoa_7
00005D64  4879 0000 10470          pea       @itoa_1.L
00005D68  7496      
00005D6A  2F03      10471          move.l    D3,-(A7)
00005D6C  4EB8 53CC 10472          jsr       _strcpy
00005D70  504F      10473          addq.w    #8,A7
00005D72  2003      10474          move.l    D3,D0
00005D74  601E      10475          bra.s     ltoa_4
                    10476   ltoa_7:
00005D76  2044      10477          move.l    D4,A0
00005D78  5284      10478          addq.l    #1,D4
00005D7A  10BC 002D 10479          move.b    #45,(A0)
                    10480   ltoa_5:
00005D7E  2F05      10481          move.l    D5,-(A7)
00005D80  2F02      10482          move.l    D2,-(A7)
00005D82  2F04      10483          move.l    D4,-(A7)
00005D84  4EB8 5C9C 10484          jsr       @itoa_convert
00005D88  DEFC 000C 10485          add.w     #12,A7
00005D8C  2800      10486          move.l    D0,D4
00005D8E  2044      10487          move.l    D4,A0
00005D90  4210      10488          clr.b     (A0)
00005D92  2003      10489          move.l    D3,D0
                    10490   ltoa_4:
00005D94  4CDF 003C 10491          movem.l   (A7)+,D2/D3/D4/D5
00005D98  4E5E      10492          unlk      A6
00005D9A  4E75      10493          rts
                    10494   _ultoa:
00005D9C  4E56 0000 10495          link      A6,#0
00005DA0  48E7 3800 10496          movem.l   D2/D3/D4,-(A7)
00005DA4  262E 0010 10497          move.l    16(A6),D3
00005DA8  282E 000C 10498          move.l    12(A6),D4
00005DAC  2404      10499          move.l    D4,D2
00005DAE  0C83 0000 10500          cmp.l     #2,D3
00005DB2  0002      
00005DB4  6D08      10501          blt.s     ultoa_3
00005DB6  0C83 0000 10502          cmp.l     #36,D3
00005DBA  0024      
00005DBC  6F04      10503          ble.s     ultoa_1
                    10504   ultoa_3:
00005DBE  2004      10505          move.l    D4,D0
00005DC0  6018      10506          bra.s     ultoa_4
                    10507   ultoa_1:
00005DC2  2F03      10508          move.l    D3,-(A7)
00005DC4  2F2E 0008 10509          move.l    8(A6),-(A7)
00005DC8  2F02      10510          move.l    D2,-(A7)
00005DCA  4EB8 5C9C 10511          jsr       @itoa_convert
00005DCE  DEFC 000C 10512          add.w     #12,A7
00005DD2  2400      10513          move.l    D0,D2
00005DD4  2042      10514          move.l    D2,A0
00005DD6  4210      10515          clr.b     (A0)
00005DD8  2004      10516          move.l    D4,D0
                    10517   ultoa_4:
00005DDA  4CDF 001C 10518          movem.l   (A7)+,D2/D3/D4
00005DDE  4E5E      10519          unlk      A6
00005DE0  4E75      10520          rts
                    10521   _itoa:
00005DE2  4E56 0000 10522          link      A6,#0
00005DE6  2F2E 0010 10523          move.l    16(A6),-(A7)
00005DEA  2F2E 000C 10524          move.l    12(A6),-(A7)
00005DEE  2F2E 0008 10525          move.l    8(A6),-(A7)
00005DF2  4EB8 5D18 10526          jsr       _ltoa
00005DF6  DEFC 000C 10527          add.w     #12,A7
00005DFA  4E5E      10528          unlk      A6
00005DFC  4E75      10529          rts
                    10530   ULMUL:
00005DFE  4E56 0000 10531          link    A6,#0
00005E02  48E7 C000 10532          movem.l D0/D1,-(A7)
00005E06  222E 0008 10533          move.l  8(A6),D1
00005E0A  202E 000C 10534          move.l  12(A6),D0
00005E0E  602C      10535          bra.s   lmul_3
                    10536   LMUL:
00005E10  4E56 0000 10537          link    A6,#0
00005E14  48E7 C000 10538          movem.l D0/D1,-(A7)
00005E18  222E 0008 10539          move.l  8(A6),D1
00005E1C  202E 000C 10540          move.l  12(A6),D0
00005E20  4A80      10541          tst.l   D0
00005E22  6A0A      10542          bpl.s   lmul_1
00005E24  4480      10543          neg.l   D0
00005E26  4A81      10544          tst.l   D1
00005E28  6A0A      10545          bpl.s   lmul_2
00005E2A  4481      10546          neg.l   D1
00005E2C  600E      10547          bra.s   lmul_3
                    10548   lmul_1:
00005E2E  4A81      10549          tst.l   D1
00005E30  6A0A      10550          bpl.s   lmul_3
00005E32  4481      10551          neg.l   D1
                    10552   lmul_2:
00005E34  6114      10553          bsr.s   domul
00005E36  4481      10554          neg.l   D1
00005E38  4080      10555          negx.l  D0
00005E3A  6002      10556          bra.s   lmul_4
                    10557   lmul_3:
00005E3C  610C      10558          bsr.s   domul
                    10559   lmul_4:
00005E3E  2D41 0008 10560          move.l  D1,8(A6)
00005E42  4CDF 0003 10561          movem.l (A7)+,D0/D1
00005E46  4E5E      10562          unlk    A6
00005E48  4E75      10563          rts
                    10564   domul:
00005E4A  0C81 0000 10565          cmpi.l  #$FFFF,D1
00005E4E  FFFF      
00005E50  620C      10566          bhi.s   domul_1
00005E52  0C80 0000 10567          cmpi.l  #$FFFF,D0
00005E56  FFFF      
00005E58  620E      10568          bhi.s   domul_2
00005E5A  C2C0      10569          mulu    D0,D1
00005E5C  4E75      10570          rts
                    10571   domul_1:
00005E5E  0C80 0000 10572          cmpi.l  #$FFFF,D0
00005E62  FFFF      
00005E64  6218      10573          bhi.s   domul_4
00005E66  6002      10574          bra.s   domul_3
                    10575   domul_2
00005E68  C141      10576          exg     D0,D1
                    10577   domul_3:
00005E6A  2F02      10578          move.l  D2,-(A7)
00005E6C  2401      10579          move.l  D1,D2
00005E6E  4842      10580          swap    D2
00005E70  C2C0      10581          mulu    D0,D1
00005E72  C4C0      10582          mulu    D0,D2
00005E74  4842      10583          swap    D2
00005E76  4242      10584          clr.w   D2
00005E78  D282      10585          add.l   D2,D1
00005E7A  241F      10586          move.l  (A7)+,D2
00005E7C  4E75      10587          rts
                    10588   domul_4:
00005E7E  48E7 3000 10589          movem.l D2/D3,-(A7)
00005E82  2401      10590          move.l  D1,D2
00005E84  2601      10591          move.l  D1,D3
00005E86  C2C0      10592          mulu    D0,D1
00005E88  4842      10593          swap    D2
00005E8A  C4C0      10594          mulu    D0,D2
00005E8C  4840      10595          swap    D0
00005E8E  C6C0      10596          mulu    D0,D3
00005E90  D483      10597          add.l   D3,D2
00005E92  4842      10598          swap    D2
00005E94  4242      10599          clr.w   D2
00005E96  D282      10600          add.l   D2,D1
00005E98  4CDF 000C 10601          movem.l (A7)+,D2/D3
00005E9C  4E75      10602          rts
                    10603   _strlen:
00005E9E  206F 0004 10604          move.l    (4,A7),A0
00005EA2  2248      10605          move.l    A0,A1
                    10606   strlen_1:
00005EA4  4A19      10607          tst.b     (A1)+
00005EA6  66FC      10608          bne       strlen_1
00005EA8  2009      10609          move.l    A1,D0
00005EAA  9088      10610          sub.l     A0,D0
00005EAC  5380      10611          subq.l    #1,D0
00005EAE  4E75      10612          rts
                    10613          section   const
                    10614   
                    10615   @m68kde~1_1:
00005EB0  0D0A 00   10616          dc.b      13,10,0
                    10617   @m68kde~1_2:
00005EB4  0D53 7769 10618          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00005EB8  7463 6865 
00005EBC  7320 5357 
00005EC0  5B        
00005EC1  372D 305D 10619          dc.b      55,45,48,93,32,61,32,0
00005EC5  203D 2000 
                    10620   @m68kde~1_3:
00005ECA  3000      10621          dc.b      48,0
                    10622   @m68kde~1_4:
00005ECC  3100      10623          dc.b      49,0
                    10624   @m68kde~1_5:
00005ECE  0D0A 456E 10625          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00005ED2  7465 7220 
00005ED6  5374 6172 
00005EDA  74        
00005EDB  2041 6464 10626          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005EDF  7265 7373 
00005EE3  3A20 00   
                    10627   @m68kde~1_6:
00005EE6  0D0A 3C45 10628          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00005EEA  5343 3E20 
00005EEE  3D20 4162 
00005EF2  6F72      
00005EF4  742C 2053 10629          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00005EF8  5041 4345 
00005EFC  2074 6F20 
00005F00  436F      
00005F02  6E74 696E 10630          dc.b      110,116,105,110,117,101,0
00005F06  7565 00   
                    10631   @m68kde~1_7:
00005F0A  0D0A 2530 10632          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00005F0E  3858 2020 
00005F12  2530 3458 
00005F16  2020 20   
00005F19  2020 2020 10633          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F1D  2020 2020 
00005F21  2020 2020 
00005F25  2020 20   
00005F28  2020 2020 10634          dc.b      32,32,32,32,32,32,37,115,0
00005F2C  2020 2573 
00005F30  00        
                    10635   @m68kde~1_8:
00005F32  0D0A 2530 10636          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F36  3858 2020 
00005F3A  2530 3458 
00005F3E  2025 30   
00005F41  3458 2020 10637          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F45  2020 2020 
00005F49  2020 2020 
00005F4D  2020 20   
00005F50  2020 2020 10638          dc.b      32,32,32,32,32,32,37,115,0
00005F54  2020 2573 
00005F58  00        
                    10639   @m68kde~1_9:
00005F5A  0D0A 2530 10640          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F5E  3858 2020 
00005F62  2530 3458 
00005F66  2025 30   
00005F69  3458 2025 10641          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00005F6D  3034 5820 
00005F71  2020 2020 
00005F75  2020 20   
00005F78  2020 2020 10642          dc.b      32,32,32,32,32,32,37,115,0
00005F7C  2020 2573 
00005F80  00        
                    10643   @m68kde~1_10:
00005F82  0D0A 2530 10644          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F86  3858 2020 
00005F8A  2530 3458 
00005F8E  2025 30   
00005F91  3458 2025 10645          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00005F95  3034 5820 
00005F99  2530 3458 
00005F9D  2020 20   
00005FA0  2020 2020 10646          dc.b      32,32,32,32,32,32,37,115,0
00005FA4  2020 2573 
00005FA8  00        
                    10647   @m68kde~1_11:
00005FAA  0D0A 2530 10648          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005FAE  3858 2020 
00005FB2  2530 3458 
00005FB6  2025 30   
00005FB9  3458 2025 10649          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00005FBD  3034 5820 
00005FC1  2530 3458 
00005FC5  2025 30   
00005FC8  3458 2020 10650          dc.b      52,88,32,32,32,32,37,115,0
00005FCC  2020 2573 
00005FD0  00        
                    10651   @m68kde~1_12:
00005FD2  0D0A 4475 10652          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00005FD6  6D70 204D 
00005FDA  656D 6F72 
00005FDE  79        
00005FDF  2042 6C6F 10653          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00005FE3  636B 3A20 
00005FE7  3C45 5343 
00005FEB  3E20      
00005FED  746F 2041 10654          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00005FF1  626F 7274 
00005FF5  2C20 3C53 
00005FF9  50        
00005FFA  4143 453E 10655          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00005FFE  2074 6F20 
00006002  436F 6E74 
00006006  69        
00006007  6E75 6500 10656          dc.b      110,117,101,0
                    10657   @m68kde~1_13:
0000600C  0D0A 2530 10658          dc.b      13,10,37,48,56,120,32,0
00006010  3878 2000 
                    10659   @m68kde~1_14:
00006014  2530 3258 10660          dc.b      37,48,50,88,0
00006018  00        
                    10661   @m68kde~1_15:
0000601A  2020 00   10662          dc.b      32,32,0
                    10663   @m68kde~1_16:
0000601E  0D0A 4669 10664          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006022  6C6C 204D 
00006026  656D 6F72 
0000602A  79        
0000602B  2042 6C6F 10665          dc.b      32,66,108,111,99,107,0
0000602F  636B 00   
                    10666   @m68kde~1_17:
00006032  0D0A 456E 10667          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006036  7465 7220 
0000603A  456E 6420 
0000603E  41        
0000603F  6464 7265 10668          dc.b      100,100,114,101,115,115,58,32,0
00006043  7373 3A20 
00006047  00        
                    10669   @m68kde~1_18:
00006048  0D0A 456E 10670          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000604C  7465 7220 
00006050  4669 6C6C 
00006054  20        
00006055  4461 7461 10671          dc.b      68,97,116,97,58,32,0
00006059  3A20 00   
                    10672   @m68kde~1_19:
0000605C  0D0A 4669 10673          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006060  6C6C 696E 
00006064  6720 4164 
00006068  64        
00006069  7265 7373 10674          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000606D  6573 205B 
00006071  2425 3038 
00006075  58        
00006076  202D 2024 10675          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000607A  2530 3858 
0000607E  5D20 7769 
00006082  7468      
00006084  2024 2530 10676          dc.b      32,36,37,48,50,88,0
00006088  3258 00   
                    10677   @m68kde~1_20:
0000608C  0D0A 5573 10678          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006090  6520 4879 
00006094  7065 7254 
00006098  65        
00006099  726D 696E 10679          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
0000609D  616C 2074 
000060A1  6F20 5365 
000060A5  6E64 2054 10680          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000060A9  6578 7420 
000060AD  4669 6C65 
000060B1  2028 2E68 10681          dc.b      32,40,46,104,101,120,41,13,10,0
000060B5  6578 290D 
000060B9  0A00      
                    10682   @m68kde~1_21:
000060BC  0D0A 4C6F 10683          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000060C0  6164 2046 
000060C4  6169 6C65 
000060C8  64        
000060C9  2061 7420 10684          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000060CD  4164 6472 
000060D1  6573 7320 
000060D5  3D        
000060D6  205B 2425 10685          dc.b      32,91,36,37,48,56,88,93,13,10,0
000060DA  3038 585D 
000060DE  0D0A 00   
                    10686   @m68kde~1_22:
000060E2  0D0A 5375 10687          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000060E6  6363 6573 
000060EA  733A 2044 
000060EE  6F        
000060EF  776E 6C6F 10688          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000060F3  6164 6564 
000060F7  2025 6420 
000060FB  6279 7465 10689          dc.b      98,121,116,101,115,13,10,0
000060FF  730D 0A00 
                    10690   @m68kde~1_23:
00006104  0D0A 4578 10691          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006108  616D 696E 
0000610C  6520 616E 
00006110  64        
00006111  2043 6861 10692          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006115  6E67 6520 
00006119  4D65 6D6F 
0000611D  72        
0000611E  7900      10693          dc.b      121,0
                    10694   @m68kde~1_24:
00006120  0D0A 3C45 10695          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006124  5343 3E20 
00006128  746F 2053 
0000612C  746F      
0000612E  702C 203C 10696          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006132  5350 4143 
00006136  453E 2074 
0000613A  6F20      
0000613C  4164 7661 10697          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006140  6E63 652C 
00006144  2027 2D27 
00006148  2074      
0000614A  6F20 476F 10698          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000614E  2042 6163 
00006152  6B2C 203C 
00006156  4441      
00006158  5441 3E20 10699          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000615C  746F 2063 
00006160  6861 6E67 
00006164  65        
00006165  00        10700          dc.b      0
                    10701   @m68kde~1_25:
00006166  0D0A 456E 10702          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000616A  7465 7220 
0000616E  4164 6472 
00006172  65        
00006173  7373 3A20 10703          dc.b      115,115,58,32,0
00006177  00        
                    10704   @m68kde~1_26:
00006178  0D0A 5B25 10705          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000617C  3038 785D 
00006180  203A 2025 
00006184  3032 78   
00006187  2020 00   10706          dc.b      32,32,0
                    10707   @m68kde~1_27:
0000618A  0D0A 5761 10708          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
0000618E  726E 696E 
00006192  6720 4368 
00006196  61        
00006197  6E67 6520 10709          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
0000619B  4661 696C 
0000619F  6564 3A20 
000061A3  57        
000061A4  726F 7465 10710          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000061A8  205B 2530 
000061AC  3278 5D2C 
000061B0  20        
000061B1  5265 6164 10711          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000061B5  205B 2530 
000061B9  3278 5D00 
                    10712   @m68kde~1_28:
000061BE  0D0A 4C6F 10713          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000061C2  6164 696E 
000061C6  6720 5072 
000061CA  6F        
000061CB  6772 616D 10714          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000061CF  2046 726F 
000061D3  6D20 5350 
000061D7  49        
000061D8  2046 6C61 10715          dc.b      32,70,108,97,115,104,46,46,46,46,0
000061DC  7368 2E2E 
000061E0  2E2E 00   
                    10716   @m68kde~1_29:
000061E4  2425 3038 10717          dc.b      36,37,48,56,88,32,32,0
000061E8  5820 2000 
                    10718   @m68kde~1_30:
000061EC  2000      10719          dc.b      32,0
                    10720   @m68kde~1_31:
000061EE  2E00      10721          dc.b      46,0
                    10722   @m68kde~1_32:
000061F0  2563 00   10723          dc.b      37,99,0
                    10724   @m68kde~1_33:
000061F4  00        10725          dc.b      0
                    10726   @m68kde~1_34:
000061F6  0D0A 0D0A 10727          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000061FA  2044 3020 
000061FE  3D20 2425 
00006202  3038 58   
00006205  2020 4130 10728          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006209  203D 2024 
0000620D  2530 3858 
00006211  00        
                    10729   @m68kde~1_35:
00006212  0D0A 2044 10730          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006216  3120 3D20 
0000621A  2425 3038 
0000621E  5820 20   
00006221  4131 203D 10731          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006225  2024 2530 
00006229  3858 00   
                    10732   @m68kde~1_36:
0000622C  0D0A 2044 10733          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006230  3220 3D20 
00006234  2425 3038 
00006238  5820 20   
0000623B  4132 203D 10734          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000623F  2024 2530 
00006243  3858 00   
                    10735   @m68kde~1_37:
00006246  0D0A 2044 10736          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000624A  3320 3D20 
0000624E  2425 3038 
00006252  5820 20   
00006255  4133 203D 10737          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006259  2024 2530 
0000625D  3858 00   
                    10738   @m68kde~1_38:
00006260  0D0A 2044 10739          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006264  3420 3D20 
00006268  2425 3038 
0000626C  5820 20   
0000626F  4134 203D 10740          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006273  2024 2530 
00006277  3858 00   
                    10741   @m68kde~1_39:
0000627A  0D0A 2044 10742          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000627E  3520 3D20 
00006282  2425 3038 
00006286  5820 20   
00006289  4135 203D 10743          dc.b      65,53,32,61,32,36,37,48,56,88,0
0000628D  2024 2530 
00006291  3858 00   
                    10744   @m68kde~1_40:
00006294  0D0A 2044 10745          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00006298  3620 3D20 
0000629C  2425 3038 
000062A0  5820 20   
000062A3  4136 203D 10746          dc.b      65,54,32,61,32,36,37,48,56,88,0
000062A7  2024 2530 
000062AB  3858 00   
                    10747   @m68kde~1_41:
000062AE  0D0A 2044 10748          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000062B2  3720 3D20 
000062B6  2425 3038 
000062BA  5820 20   
000062BD  4137 203D 10749          dc.b      65,55,32,61,32,36,37,48,56,88,0
000062C1  2024 2530 
000062C5  3858 00   
                    10750   @m68kde~1_42:
000062C8  0D0A 0D0A 10751          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000062CC  5553 5020 
000062D0  3D20 2425 
000062D4  3038 58   
000062D7  2020 2841 10752          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000062DB  3729 2055 
000062DF  7365 7220 
000062E3  5350      
000062E5  00        10753          dc.b      0
                    10754   @m68kde~1_43:
000062E6  0D0A 5353 10755          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000062EA  5020 3D20 
000062EE  2425 3038 
000062F2  5820 20   
000062F5  2841 3729 10756          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000062F9  2053 7570 
000062FD  6572 7669 
00006301  73        
00006302  6F72 2053 10757          dc.b      111,114,32,83,80,0
00006306  5000      
                    10758   @m68kde~1_44:
00006308  0D0A 2053 10759          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000630C  5220 3D20 
00006310  2425 3034 
00006314  5820 20   
00006317  2000      10760          dc.b      32,0
                    10761   @m68kde~1_45:
0000631A  2020 205B 10762          dc.b      32,32,32,91,0
0000631E  00        
                    10763   @m68kde~1_46:
00006320  0D0A 2050 10764          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00006324  4320 3D20 
00006328  2425 3038 
0000632C  5820 20   
0000632F  00        10765          dc.b      0
                    10766   @m68kde~1_47:
00006330  2573 00   10767          dc.b      37,115,0
                    10768   @m68kde~1_48:
00006334  5B42 5245 10769          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00006338  414B 504F 
0000633C  494E 545D 
00006340  00        
                    10770   @m68kde~1_49:
00006342  0D0A 5750 10771          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006346  2564 203D 
0000634A  2025 7300 
                    10772   @m68kde~1_50:
0000634E  0D0A 0D0A 10773          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00006352  0D0A 0D0A 
00006356  0D0A 0D0A 
0000635A  5369 6E   
0000635D  676C 6520 10774          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006361  5374 6570 
00006365  2020 3A5B 
00006369  4F        
0000636A  4E5D 00   10775          dc.b      78,93,0
                    10776   @m68kde~1_51:
0000636E  0D0A 4272 10777          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006372  6561 6B20 
00006376  506F 696E 
0000637A  74        
0000637B  7320 3A5B 10778          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
0000637F  4469 7361 
00006383  626C 6564 
00006387  5D        
00006388  00        10779          dc.b      0
                    10780   @m68kde~1_52:
0000638A  0D0A 5072 10781          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
0000638E  6573 7320 
00006392  3C53 5041 
00006396  4345      
00006398  3E20 746F 10782          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
0000639C  2045 7865 
000063A0  6375 7465 
000063A4  20        
000063A5  4E65 7874 10783          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000063A9  2049 6E73 
000063AD  7472 7563 
000063B1  7469 6F6E 10784          dc.b      116,105,111,110,0
000063B5  00        
                    10785   @m68kde~1_53:
000063B6  0D0A 5072 10786          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000063BA  6573 7320 
000063BE  3C45 5343 
000063C2  3E20      
000063C4  746F 2052 10787          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000063C8  6573 756D 
000063CC  6520 5072 
000063D0  6F67 7261 10788          dc.b      111,103,114,97,109,0
000063D4  6D00      
                    10789   @m68kde~1_54:
000063D6  0D0A 496C 10790          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000063DA  6C65 6761 
000063DE  6C20 4461 
000063E2  74        
000063E3  6120 5265 10791          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000063E7  6769 7374 
000063EB  6572 203A 
000063EF  20        
000063F0  5573 6520 10792          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000063F4  4430 2D44 
000063F8  372E 2E2E 
000063FC  2E2E      
000063FE  0D0A 00   10793          dc.b      13,10,0
                    10794   @m68kde~1_55:
00006402  0D0A 4425 10795          dc.b      13,10,68,37,99,32,61,32,0
00006406  6320 3D20 
0000640A  00        
                    10796   @m68kde~1_56:
0000640C  0D0A 496C 10797          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006410  6C65 6761 
00006414  6C20 4164 
00006418  64        
00006419  7265 7373 10798          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000641D  2052 6567 
00006421  6973 7465 
00006425  7220 3A20 10799          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00006429  5573 6520 
0000642D  4130 2D41 
00006431  372E      
00006433  2E2E 2E2E 10800          dc.b      46,46,46,46,13,10,0
00006437  0D0A 00   
                    10801   @m68kde~1_57:
0000643A  0D0A 4125 10802          dc.b      13,10,65,37,99,32,61,32,0
0000643E  6320 3D20 
00006442  00        
                    10803   @m68kde~1_58:
00006444  0D0A 5573 10804          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006448  6572 2053 
0000644C  5020 3D20 
00006450  00        
                    10805   @m68kde~1_59:
00006452  0D0A 496C 10806          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006456  6C65 6761 
0000645A  6C20 5265 
0000645E  67        
0000645F  6973 7465 10807          dc.b      105,115,116,101,114,46,46,46,46,0
00006463  722E 2E2E 
00006467  2E00      
                    10808   @m68kde~1_60:
0000646A  0D0A 5379 10809          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
0000646E  7374 656D 
00006472  2053 5020 
00006476  3D        
00006477  2000      10810          dc.b      32,0
                    10811   @m68kde~1_61:
0000647A  0D0A 5043 10812          dc.b      13,10,80,67,32,61,32,0
0000647E  203D 2000 
                    10813   @m68kde~1_62:
00006482  0D0A 5352 10814          dc.b      13,10,83,82,32,61,32,0
00006486  203D 2000 
                    10815   @m68kde~1_63:
0000648A  0D0A 496C 10816          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000648E  6C65 6761 
00006492  6C20 5265 
00006496  67        
00006497  6973 7465 10817          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
0000649B  723A 2055 
0000649F  7365 2041 
000064A3  30        
000064A4  2D41 372C 10818          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000064A8  2044 302D 
000064AC  4437 2C20 
000064B0  5353 50   
000064B3  2C20 5553 10819          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000064B7  502C 2050 
000064BB  4320 6F72 
000064BF  2053      
000064C1  520D 0A00 10820          dc.b      82,13,10,0
                    10821   @m68kde~1_64:
000064C6  0D0A 0D0A 10822          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000064CA  4E75 6D20 
000064CE  2020 2020 
000064D2  4164      
000064D4  6472 6573 10823          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000064D8  7320 2020 
000064DC  2020 2049 
000064E0  6E        
000064E1  7374 7275 10824          dc.b      115,116,114,117,99,116,105,111,110,0
000064E5  6374 696F 
000064E9  6E00      
                    10825   @m68kde~1_65:
000064EC  0D0A 2D2D 10826          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000064F0  2D20 2020 
000064F4  2020 2D2D 
000064F8  2D2D 2D   
000064FB  2D2D 2D2D 10827          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000064FF  2020 2020 
00006503  2D2D 2D2D 
00006507  2D2D 2D   
0000650A  2D2D 2D2D 10828          dc.b      45,45,45,45,0
0000650E  00        
                    10829   @m68kde~1_66:
00006510  0D0A 4E6F 10830          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00006514  2042 7265 
00006518  616B 506F 
0000651C  69        
0000651D  6E74 7320 10831          dc.b      110,116,115,32,83,101,116,0
00006521  5365 7400 
                    10832   @m68kde~1_67:
00006526  0D0A 2533 10833          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000652A  6420 2020 
0000652E  2020 2425 
00006532  3038 78   
00006535  00        10834          dc.b      0
                    10835   @m68kde~1_68:
00006536  2020 2020 10836          dc.b      32,32,32,32,37,115,0
0000653A  2573 00   
                    10837   @m68kde~1_69:
0000653E  0D0A 4E75 10838          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006542  6D20 2020 
00006546  2020 4164 
0000654A  6472      
0000654C  6573 7300 10839          dc.b      101,115,115,0
                    10840   @m68kde~1_70:
00006550  0D0A 2D2D 10841          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006554  2D20 2020 
00006558  2020 2D2D 
0000655C  2D2D 2D   
0000655F  2D2D 2D2D 10842          dc.b      45,45,45,45,0
00006563  00        
                    10843   @m68kde~1_71:
00006564  0D0A 4E6F 10844          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00006568  2057 6174 
0000656C  6368 506F 
00006570  69        
00006571  6E74 7320 10845          dc.b      110,116,115,32,83,101,116,0
00006575  5365 7400 
                    10846   @m68kde~1_72:
0000657A  0D0A 456E 10847          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
0000657E  7465 7220 
00006582  4272 6561 
00006586  6B        
00006587  2050 6F69 10848          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000658B  6E74 204E 
0000658F  756D 6265 
00006593  72        
00006594  3A20 00   10849          dc.b      58,32,0
                    10850   @m68kde~1_73:
00006598  0D0A 496C 10851          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000659C  6C65 6761 
000065A0  6C20 5261 
000065A4  6E        
000065A5  6765 203A 10852          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000065A9  2055 7365 
000065AD  2030 202D 
000065B1  2037      
000065B3  00        10853          dc.b      0
                    10854   @m68kde~1_74:
000065B4  0D0A 4272 10855          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000065B8  6561 6B20 
000065BC  506F 696E 
000065C0  74        
000065C1  2043 6C65 10856          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000065C5  6172 6564 
000065C9  2E2E 2E2E 
000065CD  2E        
000065CE  0D0A 00   10857          dc.b      13,10,0
                    10858   @m68kde~1_75:
000065D2  0D0A 4272 10859          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000065D6  6561 6B20 
000065DA  506F 696E 
000065DE  74        
000065DF  2077 6173 10860          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000065E3  6E27 7420 
000065E7  5365 742E 
000065EB  2E        
000065EC  2E2E 2E00 10861          dc.b      46,46,46,0
                    10862   @m68kde~1_76:
000065F0  0D0A 456E 10863          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000065F4  7465 7220 
000065F8  5761 7463 
000065FC  68        
000065FD  2050 6F69 10864          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006601  6E74 204E 
00006605  756D 6265 
00006609  72        
0000660A  3A20 00   10865          dc.b      58,32,0
                    10866   @m68kde~1_77:
0000660E  0D0A 5761 10867          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006612  7463 6820 
00006616  506F 696E 
0000661A  74        
0000661B  2043 6C65 10868          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000661F  6172 6564 
00006623  2E2E 2E2E 
00006627  2E        
00006628  0D0A 00   10869          dc.b      13,10,0
                    10870   @m68kde~1_78:
0000662C  0D0A 5761 10871          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006630  7463 6820 
00006634  506F 696E 
00006638  74        
00006639  2057 6173 10872          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000663D  206E 6F74 
00006641  2053 6574 
00006645  2E        
00006646  2E2E 2E2E 10873          dc.b      46,46,46,46,0
0000664A  00        
                    10874   @m68kde~1_79:
0000664C  0D0A 4E6F 10875          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006650  2046 5245 
00006654  4520 4272 
00006658  6561      
0000665A  6B20 506F 10876          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000665E  696E 7473 
00006662  2E2E 2E2E 
00006666  2E        
00006667  00        10877          dc.b      0
                    10878   @m68kde~1_80:
00006668  0D0A 4272 10879          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000666C  6561 6B20 
00006670  506F 696E 
00006674  74        
00006675  2041 6464 10880          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006679  7265 7373 
0000667D  3A20 00   
                    10881   @m68kde~1_81:
00006680  0D0A 4572 10882          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006684  726F 7220 
00006688  3A20 4272 
0000668C  65        
0000668D  616B 2050 10883          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006691  6F69 6E74 
00006695  7320 4341 
00006699  4E        
0000669A  4E4F 5420 10884          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000669E  6265 2073 
000066A2  6574 2061 
000066A6  74        
000066A7  204F 4444 10885          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000066AB  2061 6464 
000066AF  7265 7373 
000066B3  65        
000066B4  7300      10886          dc.b      115,0
                    10887   @m68kde~1_82:
000066B6  0D0A 4572 10888          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000066BA  726F 7220 
000066BE  3A20 4272 
000066C2  65        
000066C3  616B 2050 10889          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000066C7  6F69 6E74 
000066CB  7320 4341 
000066CF  4E        
000066D0  4E4F 5420 10890          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000066D4  6265 2073 
000066D8  6574 2066 
000066DC  6F        
000066DD  7220 524F 10891          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000066E1  4D20 696E 
000066E5  2052 616E 
000066E9  67        
000066EA  6520 3A20 10892          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000066EE  5B24 302D 
000066F2  2430 3030 
000066F6  3037 46   
000066F9  4646 5D00 10893          dc.b      70,70,93,0
                    10894   @m68kde~1_83:
000066FE  0D0A 4572 10895          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006702  726F 723A 
00006706  2042 7265 
0000670A  61        
0000670B  6B20 506F 10896          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000670F  696E 7420 
00006713  416C 7265 
00006717  6164 7920 10897          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000671B  4578 6973 
0000671F  7473 2061 
00006723  74        
00006724  2041 6464 10898          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006728  7265 7373 
0000672C  203A 2025 
00006730  30        
00006731  3878 0D0A 10899          dc.b      56,120,13,10,0
00006735  00        
                    10900   @m68kde~1_84:
00006736  0D0A 4272 10901          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000673A  6561 6B20 
0000673E  506F 696E 
00006742  74        
00006743  2053 6574 10902          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006747  2061 7420 
0000674B  4164 6472 
0000674F  65        
00006750  7373 3A20 10903          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006754  5B24 2530 
00006758  3878 5D2C 
0000675C  2049      
0000675E  6E73 7472 10904          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006762  7563 7469 
00006766  6F6E 203D 
0000676A  2025 7300 10905          dc.b      32,37,115,0
                    10906   @m68kde~1_85:
0000676E  0D0A 4E6F 10907          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006772  2046 5245 
00006776  4520 5761 
0000677A  7463      
0000677C  6820 506F 10908          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006780  696E 7473 
00006784  2E2E 2E2E 
00006788  2E        
00006789  00        10909          dc.b      0
                    10910   @m68kde~1_86:
0000678A  0D0A 5761 10911          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000678E  7463 6820 
00006792  506F 696E 
00006796  74        
00006797  2041 6464 10912          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000679B  7265 7373 
0000679F  3A20 00   
                    10913   @m68kde~1_87:
000067A2  0D0A 4572 10914          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000067A6  726F 723A 
000067AA  2057 6174 
000067AE  63        
000067AF  6820 506F 10915          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000067B3  696E 7420 
000067B7  416C 7265 
000067BB  6164 7920 10916          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000067BF  5365 7420 
000067C3  6174 2041 
000067C7  64        
000067C8  6472 6573 10917          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000067CC  7320 3A20 
000067D0  2530 3878 
000067D4  0D        
000067D5  0A00      10918          dc.b      10,0
                    10919   @m68kde~1_88:
000067D8  0D0A 5761 10920          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000067DC  7463 6820 
000067E0  506F 696E 
000067E4  74        
000067E5  2053 6574 10921          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000067E9  2061 7420 
000067ED  4164 6472 
000067F1  65        
000067F2  7373 3A20 10922          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000067F6  5B24 2530 
000067FA  3878 5D00 
                    10923   @m68kde~1_89:
000067FE  0D0A 0D0A 10924          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006802  0D0A 0D0A 
00006806  4042 5245 
0000680A  414B 50   
0000680D  4F49 4E54 10925          dc.b      79,73,78,84,0
00006811  00        
                    10926   @m68kde~1_90:
00006812  0D0A 5369 10927          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006816  6E67 6C65 
0000681A  2053 7465 
0000681E  70        
0000681F  203A 205B 10928          dc.b      32,58,32,91,79,78,93,0
00006823  4F4E 5D00 
                    10929   @m68kde~1_91:
00006828  0D0A 4272 10930          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000682C  6561 6B50 
00006830  6F69 6E74 
00006834  73        
00006835  203A 205B 10931          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006839  456E 6162 
0000683D  6C65 645D 
00006841  00        
                    10932   @m68kde~1_92:
00006842  0D0A 5072 10933          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006846  6573 7320 
0000684A  3C45 5343 
0000684E  3E20      
00006850  746F 2052 10934          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006854  6573 756D 
00006858  6520 5573 
0000685C  6572 2050 10935          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006860  726F 6772 
00006864  616D 0D0A 
00006868  00        
                    10936   @m68kde~1_93:
0000686A  0D0A 556E 10937          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000686E  6B6E 6F77 
00006872  6E20 436F 
00006876  6D        
00006877  6D61 6E64 10938          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000687B  2E2E 2E2E 
0000687F  2E0D 0A00 
                    10939   @m68kde~1_94:
00006884  0D0A 5072 10940          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006888  6F67 7261 
0000688C  6D20 456E 
00006890  64        
00006891  6564 2028 10941          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006895  5452 4150 
00006899  2023 3135 
0000689D  292E      
0000689F  2E2E 2E00 10942          dc.b      46,46,46,0
                    10943   @m68kde~1_95:
000068A4  0D0A 4B69 10944          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000068A8  6C6C 2041 
000068AC  6C6C 2042 
000068B0  72        
000068B1  6561 6B20 10945          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000068B5  506F 696E 
000068B9  7473 2E2E 
000068BD  2E        
000068BE  2879 2F6E 10946          dc.b      40,121,47,110,41,63,0
000068C2  293F 00   
                    10947   @m68kde~1_96:
000068C6  0D0A 4B69 10948          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000068CA  6C6C 2041 
000068CE  6C6C 2057 
000068D2  61        
000068D3  7463 6820 10949          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000068D7  506F 696E 
000068DB  7473 2E2E 
000068DF  2E        
000068E0  2879 2F6E 10950          dc.b      40,121,47,110,41,63,0
000068E4  293F 00   
                    10951   @m68kde~1_97:
000068E8  0D0A 2D2D 10952          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000068EC  2D2D 2D2D 
000068F0  2D2D 2D2D 
000068F4  2D2D 2D   
000068F7  2D2D 2D2D 10953          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000068FB  2D2D 2D2D 
000068FF  2D2D 2D2D 
00006903  2D2D 2D   
00006906  2D2D 2D2D 10954          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000690A  2D2D 2D2D 
0000690E  2D2D 2D2D 
00006912  2D2D 2D   
00006915  2D2D 2D2D 10955          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006919  2D2D 2D2D 
0000691D  2D2D 2D2D 
00006921  2D2D 2D   
00006924  2D2D 2D2D 10956          dc.b      45,45,45,45,45,45,0
00006928  2D2D 00   
                    10957   @m68kde~1_98:
0000692C  0D0A 2020 10958          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006930  4465 6275 
00006934  6767 6572 
00006938  20        
00006939  436F 6D6D 10959          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000693D  616E 6420 
00006941  5375 6D6D 
00006945  6172 7900 10960          dc.b      97,114,121,0
                    10961   @m68kde~1_99:
0000694A  0D0A 2020 10962          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000694E  2E28 7265 
00006952  6729 2020 
00006956  2020      
00006958  2020 202D 10963          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000695C  2043 6861 
00006960  6E67 6520 
00006964  5265      
00006966  6769 7374 10964          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000696A  6572 733A 
0000696E  2065 2E67 
00006972  2041 302D 10965          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006976  4137 2C44 
0000697A  302D 4437 
0000697E  2C50 43   
00006981  2C53 5350 10966          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006985  2C55 5350 
00006989  2C53 5200 
                    10967   @m68kde~1_100:
0000698E  0D0A 2020 10968          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006992  4244 2F42 
00006996  532F 4243 
0000699A  2F42 4B   
0000699D  2020 2D20 10969          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000069A1  4272 6561 
000069A5  6B20 506F 
000069A9  69        
000069AA  6E74 3A20 10970          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000069AE  4469 7370 
000069B2  6C61 792F 
000069B6  53        
000069B7  6574 2F43 10971          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000069BB  6C65 6172 
000069BF  2F4B 696C 
000069C3  6C        
000069C4  00        10972          dc.b      0
                    10973   @m68kde~1_101:
000069C6  0D0A 2020 10974          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000069CA  4320 2020 
000069CE  2020 2020 
000069D2  2020 20   
000069D5  2020 2D20 10975          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000069D9  436F 7079 
000069DD  2050 726F 
000069E1  67        
000069E2  7261 6D20 10976          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
000069E6  6672 6F6D 
000069EA  2046 6C61 
000069EE  73        
000069EF  6820 746F 10977          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000069F3  204D 6169 
000069F7  6E20 4D65 
000069FB  6D        
000069FC  6F72 7900 10978          dc.b      111,114,121,0
                    10979   @m68kde~1_102:
00006A00  0D0A 2020 10980          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006A04  4449 2020 
00006A08  2020 2020 
00006A0C  2020 20   
00006A0F  2020 2D20 10981          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006A13  4469 7361 
00006A17  7373 656D 
00006A1B  62        
00006A1C  6C65 2050 10982          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006A20  726F 6772 
00006A24  616D 00   
                    10983   @m68kde~1_103:
00006A28  0D0A 2020 10984          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006A2C  4455 2020 
00006A30  2020 2020 
00006A34  2020 20   
00006A37  2020 2D20 10985          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006A3B  4475 6D70 
00006A3F  204D 656D 
00006A43  6F        
00006A44  7279 2043 10986          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006A48  6F6E 7465 
00006A4C  6E74 7320 
00006A50  746F 2053 10987          dc.b      116,111,32,83,99,114,101,101,110,0
00006A54  6372 6565 
00006A58  6E00      
                    10988   @m68kde~1_104:
00006A5A  0D0A 2020 10989          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006A5E  4520 2020 
00006A62  2020 2020 
00006A66  2020 20   
00006A69  2020 2D20 10990          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006A6D  456E 7465 
00006A71  7220 5374 
00006A75  72        
00006A76  696E 6720 10991          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006A7A  696E 746F 
00006A7E  204D 656D 
00006A82  6F72 7900 10992          dc.b      111,114,121,0
                    10993   @m68kde~1_105:
00006A86  0D0A 2020 10994          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006A8A  4620 2020 
00006A8E  2020 2020 
00006A92  2020 20   
00006A95  2020 2D20 10995          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006A99  4669 6C6C 
00006A9D  204D 656D 
00006AA1  6F        
00006AA2  7279 2077 10996          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006AA6  6974 6820 
00006AAA  4461 7461 
00006AAE  00        
                    10997   @m68kde~1_106:
00006AB0  0D0A 2020 10998          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006AB4  4720 2020 
00006AB8  2020 2020 
00006ABC  2020 20   
00006ABF  2020 2D20 10999          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006AC3  476F 2050 
00006AC7  726F 6772 
00006ACB  61        
00006ACC  6D20 5374 11000          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006AD0  6172 7469 
00006AD4  6E67 2061 
00006AD8  74        
00006AD9  2041 6464 11001          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006ADD  7265 7373 
00006AE1  3A20 2425 
00006AE5  30        
00006AE6  3858 00   11002          dc.b      56,88,0
                    11003   @m68kde~1_107:
00006AEA  0D0A 2020 11004          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006AEE  4C20 2020 
00006AF2  2020 2020 
00006AF6  2020 20   
00006AF9  2020 2D20 11005          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006AFD  4C6F 6164 
00006B01  2050 726F 
00006B05  67        
00006B06  7261 6D20 11006          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006B0A  282E 4845 
00006B0E  5820 6669 
00006B12  6C        
00006B13  6529 2066 11007          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006B17  726F 6D20 
00006B1B  4C61 7074 
00006B1F  6F        
00006B20  7000      11008          dc.b      112,0
                    11009   @m68kde~1_108:
00006B22  0D0A 2020 11010          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006B26  4D20 2020 
00006B2A  2020 2020 
00006B2E  2020 20   
00006B31  2020 2D20 11011          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006B35  4D65 6D6F 
00006B39  7279 2045 
00006B3D  78        
00006B3E  616D 696E 11012          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006B42  6520 616E 
00006B46  6420 4368 
00006B4A  61        
00006B4B  6E67 6500 11013          dc.b      110,103,101,0
                    11014   @m68kde~1_109:
00006B50  0D0A 2020 11015          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006B54  5020 2020 
00006B58  2020 2020 
00006B5C  2020 20   
00006B5F  2020 2D20 11016          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006B63  5072 6F67 
00006B67  7261 6D20 
00006B6B  46        
00006B6C  6C61 7368 11017          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006B70  204D 656D 
00006B74  6F72 7920 
00006B78  7769 7468 11018          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006B7C  2055 7365 
00006B80  7220 5072 
00006B84  6F67 7261 11019          dc.b      111,103,114,97,109,0
00006B88  6D00      
                    11020   @m68kde~1_110:
00006B8A  0D0A 2020 11021          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006B8E  5220 2020 
00006B92  2020 2020 
00006B96  2020 20   
00006B99  2020 2D20 11022          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006B9D  4469 7370 
00006BA1  6C61 7920 
00006BA5  36        
00006BA6  3830 3030 11023          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006BAA  2052 6567 
00006BAE  6973 7465 
00006BB2  72        
00006BB3  7300      11024          dc.b      115,0
                    11025   @m68kde~1_111:
00006BB6  0D0A 2020 11026          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006BBA  5320 2020 
00006BBE  2020 2020 
00006BC2  2020 20   
00006BC5  2020 2D20 11027          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006BC9  546F 6767 
00006BCD  6C65 204F 
00006BD1  4E        
00006BD2  2F4F 4646 11028          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006BD6  2053 696E 
00006BDA  676C 6520 
00006BDE  53        
00006BDF  7465 7020 11029          dc.b      116,101,112,32,77,111,100,101,0
00006BE3  4D6F 6465 
00006BE7  00        
                    11030   @m68kde~1_112:
00006BE8  0D0A 2020 11031          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006BEC  544D 2020 
00006BF0  2020 2020 
00006BF4  2020 20   
00006BF7  2020 2D20 11032          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006BFB  5465 7374 
00006BFF  204D 656D 
00006C03  6F        
00006C04  7279 00   11033          dc.b      114,121,0
                    11034   @m68kde~1_113:
00006C08  0D0A 2020 11035          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006C0C  5453 2020 
00006C10  2020 2020 
00006C14  2020 20   
00006C17  2020 2D20 11036          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006C1B  5465 7374 
00006C1F  2053 7769 
00006C23  74        
00006C24  6368 6573 11037          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006C28  3A20 5357 
00006C2C  372D 3000 
                    11038   @m68kde~1_114:
00006C30  0D0A 2020 11039          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006C34  5444 2020 
00006C38  2020 2020 
00006C3C  2020 20   
00006C3F  2020 2D20 11040          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006C43  5465 7374 
00006C47  2044 6973 
00006C4B  70        
00006C4C  6C61 7973 11041          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006C50  3A20 4C45 
00006C54  4473 2061 
00006C58  6E        
00006C59  6420 372D 11042          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006C5D  5365 676D 
00006C61  656E 7400 
                    11043   @m68kde~1_115:
00006C66  0D0A 2020 11044          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006C6A  5744 2F57 
00006C6E  532F 5743 
00006C72  2F57 4B   
00006C75  2020 2D20 11045          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006C79  5761 7463 
00006C7D  6820 506F 
00006C81  696E      
00006C83  743A 2044 11046          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006C87  6973 706C 
00006C8B  6179 2F53 
00006C8F  65        
00006C90  742F 436C 11047          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006C94  6561 722F 
00006C98  4B69 6C6C 
00006C9C  00        
                    11048   @m68kde~1_116:
00006C9E  0D0A 2300 11049          dc.b      13,10,35,0
                    11050   @m68kde~1_117:
00006CA2  0D0A 5072 11051          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006CA6  6F67 7261 
00006CAA  6D20 5275 
00006CAE  6E        
00006CAF  6E69 6E67 11052          dc.b      110,105,110,103,46,46,46,46,46,0
00006CB3  2E2E 2E2E 
00006CB7  2E00      
                    11053   @m68kde~1_118:
00006CBA  0D0A 5072 11054          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006CBE  6573 7320 
00006CC2  3C52 4553 
00006CC6  4554      
00006CC8  3E20 6275 11055          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006CCC  7474 6F6E 
00006CD0  203C 4B65 
00006CD4  79        
00006CD5  303E 206F 11056          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006CD9  6E20 4445 
00006CDD  3120 746F 
00006CE1  2073      
00006CE3  746F 7000 11057          dc.b      116,111,112,0
                    11058   @m68kde~1_119:
00006CE8  0D0A 4572 11059          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006CEC  726F 723A 
00006CF0  2050 7265 
00006CF4  73        
00006CF5  7320 2747 11060          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006CF9  2720 6669 
00006CFD  7273 7420 
00006D01  74        
00006D02  6F20 7374 11061          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006D06  6172 7420 
00006D0A  7072 6F67 
00006D0E  7261 6D00 11062          dc.b      114,97,109,0
                    11063   @m68kde~1_120:
00006D12  0D0A 5369 11064          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006D16  6E67 6C65 
00006D1A  2053 7465 
00006D1E  70        
00006D1F  2020 3A5B 11065          dc.b      32,32,58,91,79,78,93,0
00006D23  4F4E 5D00 
                    11066   @m68kde~1_121:
00006D28  0D0A 5072 11067          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006D2C  6573 7320 
00006D30  2747 2720 
00006D34  74        
00006D35  6F20 5472 11068          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006D39  6163 6520 
00006D3D  5072 6F67 
00006D41  72        
00006D42  616D 2066 11069          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006D46  726F 6D20 
00006D4A  6164 6472 
00006D4E  6573 7320 11070          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006D52  2425 582E 
00006D56  2E2E 2E2E 
00006D5A  00        
                    11071   @m68kde~1_122:
00006D5C  0D0A 5075 11072          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006D60  7368 203C 
00006D64  5245 5345 
00006D68  5420      
00006D6A  4275 7474 11073          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006D6E  6F6E 3E20 
00006D72  746F 2053 
00006D76  74        
00006D77  6F70 2E2E 11074          dc.b      111,112,46,46,46,46,46,0
00006D7B  2E2E 2E00 
                    11075   @m68kde~1_123:
00006D80  0D0A 5369 11076          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006D84  6E67 6C65 
00006D88  2053 7465 
00006D8C  70        
00006D8D  203A 205B 11077          dc.b      32,58,32,91,79,70,70,93,0
00006D91  4F46 465D 
00006D95  00        
                    11078   @m68kde~1_124:
00006D96  0D0A 4272 11079          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006D9A  6561 6B20 
00006D9E  506F 696E 
00006DA2  74        
00006DA3  7320 3A5B 11080          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006DA7  456E 6162 
00006DAB  6C65 645D 
00006DAF  00        
                    11081   @m68kde~1_125:
00006DB0  0D0A 5072 11082          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006DB4  6573 7320 
00006DB8  3C45 5343 
00006DBC  3E20      
00006DBE  746F 2052 11083          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006DC2  6573 756D 
00006DC6  6520 5573 
00006DCA  6572 2050 11084          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006DCE  726F 6772 
00006DD2  616D 2E2E 
00006DD6  2E        
00006DD7  2E2E 00   11085          dc.b      46,46,0
                    11086   @m68kde~1_126:
00006DDA  0D0A 5369 11087          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006DDE  6E67 6C65 
00006DE2  2053 7465 
00006DE6  70        
00006DE7  2020 3A5B 11088          dc.b      32,32,58,91,79,70,70,93,0
00006DEB  4F46 465D 
00006DEF  00        
                    11089   @m68kde~1_127:
00006DF0  0D0A 0D0A 11090          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006DF4  5072 6F67 
00006DF8  7261 6D20 
00006DFC  41        
00006DFD  424F 5254 11091          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006E01  2021 2121 
00006E05  2121 210D 
00006E09  0A00      
                    11092   @m68kde~1_128:
00006E0C  2573 0D0A 11093          dc.b      37,115,13,10,0
00006E10  00        
                    11094   @m68kde~1_129:
00006E12  0D0A 0D0A 11095          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006E16  5072 6F67 
00006E1A  7261 6D20 
00006E1E  41        
00006E1F  424F 5254 11096          dc.b      66,79,82,84,32,33,33,33,33,33,0
00006E23  2021 2121 
00006E27  2121 00   
                    11097   @m68kde~1_130:
00006E2A  0D0A 556E 11098          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00006E2E  6861 6E64 
00006E32  6C65 6420 
00006E36  49        
00006E37  6E74 6572 11099          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00006E3B  7275 7074 
00006E3F  3A20 4952 
00006E43  5125 6420 11100          dc.b      81,37,100,32,33,33,33,33,33,0
00006E47  2121 2121 
00006E4B  2100      
                    11101   @m68kde~1_131:
00006E4E  4144 4452 11102          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00006E52  4553 5320 
00006E56  4552 524F 
00006E5A  523A 20   
00006E5D  3136 206F 11103          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00006E61  7220 3332 
00006E65  2042 6974 
00006E69  2054      
00006E6B  7261 6E73 11104          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00006E6F  6665 7220 
00006E73  746F 2F66 
00006E77  726F 6D20 11105          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00006E7B  616E 204F 
00006E7F  4444 2041 
00006E83  64        
00006E84  6472 6573 11106          dc.b      100,114,101,115,115,46,46,46,46,0
00006E88  732E 2E2E 
00006E8C  2E00      
                    11107   @m68kde~1_132:
00006E8E  556E 6861 11108          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00006E92  6E64 6C65 
00006E96  6420 5472 
00006E9A  6170 2021 11109          dc.b      97,112,32,33,33,33,33,33,0
00006E9E  2121 2121 
00006EA2  00        
                    11110   @m68kde~1_133:
00006EA4  4255 5320 11111          dc.b      66,85,83,32,69,114,114,111,114,33,0
00006EA8  4572 726F 
00006EAC  7221 00   
                    11112   @m68kde~1_134:
00006EB0  4144 4452 11113          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00006EB4  4553 5320 
00006EB8  4572 726F 
00006EBC  7221      
00006EBE  00        11114          dc.b      0
                    11115   @m68kde~1_135:
00006EC0  494C 4C45 11116          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00006EC4  4741 4C20 
00006EC8  494E 5354 
00006ECC  5255 43   
00006ECF  5449 4F4E 11117          dc.b      84,73,79,78,0
00006ED3  00        
                    11118   @m68kde~1_136:
00006ED4  4449 5649 11119          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00006ED8  4445 2042 
00006EDC  5920 5A45 
00006EE0  524F 00   
                    11120   @m68kde~1_137:
00006EE4  2743 484B 11121          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00006EE8  2720 494E 
00006EEC  5354 5255 
00006EF0  4354 49   
00006EF3  4F4E 00   11122          dc.b      79,78,0
                    11123   @m68kde~1_138:
00006EF6  5452 4150 11124          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00006EFA  5620 494E 
00006EFE  5354 5255 
00006F02  4354 49   
00006F05  4F4E 00   11125          dc.b      79,78,0
                    11126   @m68kde~1_139:
00006F08  5052 4956 11127          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00006F0C  494C 4547 
00006F10  4520 5649 
00006F14  4F4C 41   
00006F17  5449 4F4E 11128          dc.b      84,73,79,78,0
00006F1B  00        
                    11129   @m68kde~1_140:
00006F1C  554E 494E 11130          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00006F20  4954 4941 
00006F24  4C49 5345 
00006F28  4420 49   
00006F2B  5251 00   11131          dc.b      82,81,0
                    11132   @m68kde~1_141:
00006F2E  5350 5552 11133          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00006F32  494F 5553 
00006F36  2049 5251 
00006F3A  00        
                    11134   @m68kde~1_142:
00006F3C  0D0A 5374 11135          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00006F40  6172 7420 
00006F44  4164 6472 
00006F48  65        
00006F49  7373 2069 11136          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00006F4D  6E20 4D65 
00006F51  6D6F 7279 
00006F55  3A20 00   11137          dc.b      58,32,0
                    11138   @m68kde~1_143:
00006F58  0D0A 456E 11139          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00006F5C  7465 7220 
00006F60  5374 7269 
00006F64  6E        
00006F65  6720 2845 11140          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00006F69  5343 2074 
00006F6D  6F20 656E 
00006F71  64        
00006F72  2920 3A00 11141          dc.b      41,32,58,0
                    11142   @m68kde~1_144:
00006F76  0D67 6866 11143          dc.b      13,103,104,102,104,103,102,116,121,102,106,121
00006F7A  6867 6674 
00006F7E  7966 6A79 
00006F82  6679 6A20 11144          dc.b      102,121,106,32,65,100,100,114,101,115,115,58
00006F86  4164 6472 
00006F8A  6573 733A 
00006F8E  2000      11145          dc.b      32,0
                    11146   @m68kde~1_145:
00006F90  0D0A 456E 11147          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
00006F94  6420 4164 
00006F98  6472 6573 
00006F9C  73        
00006F9D  3A20 00   11148          dc.b      58,32,0
                    11149   @m68kde~1_146:
00006FA0  0D0A 4661 11150          dc.b      13,10,70,97,105,108,101,100,32,97,116,32,97
00006FA4  696C 6564 
00006FA8  2061 7420 
00006FAC  61        
00006FAD  6464 7265 11151          dc.b      100,100,114,101,115,115,32,37,88,0
00006FB1  7373 2025 
00006FB5  5800      
                    11152   @m68kde~1_147:
00006FB8  0D0A 4578 11153          dc.b      13,10,69,120,112,101,99,116,101,100,32,118,97
00006FBC  7065 6374 
00006FC0  6564 2076 
00006FC4  61        
00006FC5  6C75 653A 11154          dc.b      108,117,101,58,32,37,88,0
00006FC9  2025 5800 
                    11155   @m68kde~1_148:
00006FCE  0D0A 4163 11156          dc.b      13,10,65,99,116,117,97,108,32,86,97,108,117
00006FD2  7475 616C 
00006FD6  2056 616C 
00006FDA  75        
00006FDB  653A 2025 11157          dc.b      101,58,32,37,88,0
00006FDF  5800      
                    11158   @m68kde~1_149:
00006FE2  4D65 6D6F 11159          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00006FE6  7279 2054 
00006FEA  6573 7420 
00006FEE  5375 6363 11160          dc.b      83,117,99,99,101,115,115,102,117,108,0
00006FF2  6573 7366 
00006FF6  756C 00   
                    11161   @m68kde~1_150:
00006FFA  4445 312D 11162          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00006FFE  3638 6B20 
00007002  4275 6720 
00007006  5631      
00007008  2E37 3700 11163          dc.b      46,55,55,0
                    11164   @m68kde~1_151:
0000700C  436F 7079 11165          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
00007010  7269 6768 
00007014  7420 2843 
00007018  2920 504A 11166          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
0000701C  2044 6176 
00007020  6965 7320 
00007024  3230      
00007026  3136 00   11167          dc.b      49,54,0
                    11168   @m68kde~1_152:
0000702A  0D0A 5275 11169          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000702E  6E6E 696E 
00007032  672E 2E2E 
00007036  2E        
00007037  2E00      11170          dc.b      46,0
                    11171   @m68kde~1_153:
0000703A  5275 6E6E 11172          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000703E  696E 672E 
00007042  2E2E 2E2E 
00007046  00        
                    11173   @m68kde~1_154:
00007048  4279 3A20 11174          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000704C  504A 2044 
00007050  6176 6965 
00007054  73        
00007055  00        11175          dc.b      0
                    11176   @m68kde~1_155:
00007056  0D0A 2573 11177          dc.b      13,10,37,115,0
0000705A  00        
                    11178   @m68kde~1_156:
0000705C  2E42 2000 11179          dc.b      46,66,32,0
                    11180   @m68kde~1_157:
00007060  2E57 2000 11181          dc.b      46,87,32,0
                    11182   @m68kde~1_158:
00007064  2E4C 2000 11183          dc.b      46,76,32,0
                    11184   @m68kde~1_159:
00007068  2324 2558 11185          dc.b      35,36,37,88,0
0000706C  00        
                    11186   @m68kde~1_160:
0000706E  2800      11187          dc.b      40,0
                    11188   @m68kde~1_161:
00007070  2900      11189          dc.b      41,0
                    11190   @m68kde~1_162:
00007072  292B 00   11191          dc.b      41,43,0
                    11192   @m68kde~1_163:
00007076  2D28 00   11193          dc.b      45,40,0
                    11194   @m68kde~1_164:
0000707A  2564 2841 11195          dc.b      37,100,40,65,37,100,41,0
0000707E  2564 2900 
                    11196   @m68kde~1_165:
00007082  2564 2841 11197          dc.b      37,100,40,65,37,100,44,0
00007086  2564 2C00 
                    11198   @m68kde~1_166:
0000708A  4400      11199          dc.b      68,0
                    11200   @m68kde~1_167:
0000708C  4100      11201          dc.b      65,0
                    11202   @m68kde~1_168:
0000708E  2564 00   11203          dc.b      37,100,0
                    11204   @m68kde~1_169:
00007092  2E57 2900 11205          dc.b      46,87,41,0
                    11206   @m68kde~1_170:
00007096  2E4C 2900 11207          dc.b      46,76,41,0
                    11208   @m68kde~1_171:
0000709A  2425 5800 11209          dc.b      36,37,88,0
                    11210   @m68kde~1_172:
0000709E  2564 2850 11211          dc.b      37,100,40,80,67,41,0
000070A2  4329 00   
                    11212   @m68kde~1_173:
000070A6  2564 2850 11213          dc.b      37,100,40,80,67,44,0
000070AA  432C 00   
                    11214   @m68kde~1_174:
000070AE  2C00      11215          dc.b      44,0
                    11216   @m68kde~1_175:
000070B0  4343 00   11217          dc.b      67,67,0
                    11218   @m68kde~1_176:
000070B4  4353 00   11219          dc.b      67,83,0
                    11220   @m68kde~1_177:
000070B8  4551 00   11221          dc.b      69,81,0
                    11222   @m68kde~1_178:
000070BC  4745 00   11223          dc.b      71,69,0
                    11224   @m68kde~1_179:
000070C0  4754 00   11225          dc.b      71,84,0
                    11226   @m68kde~1_180:
000070C4  4849 00   11227          dc.b      72,73,0
                    11228   @m68kde~1_181:
000070C8  4C45 00   11229          dc.b      76,69,0
                    11230   @m68kde~1_182:
000070CC  4C53 00   11231          dc.b      76,83,0
                    11232   @m68kde~1_183:
000070D0  4C54 00   11233          dc.b      76,84,0
                    11234   @m68kde~1_184:
000070D4  4D49 00   11235          dc.b      77,73,0
                    11236   @m68kde~1_185:
000070D8  4E45 00   11237          dc.b      78,69,0
                    11238   @m68kde~1_186:
000070DC  504C 00   11239          dc.b      80,76,0
                    11240   @m68kde~1_187:
000070E0  5653 00   11241          dc.b      86,83,0
                    11242   @m68kde~1_188:
000070E4  5643 00   11243          dc.b      86,67,0
                    11244   @m68kde~1_189:
000070E8  5241 00   11245          dc.b      82,65,0
                    11246   @m68kde~1_190:
000070EC  5352 00   11247          dc.b      83,82,0
                    11248   @m68kde~1_191:
000070F0  556E 6B6E 11249          dc.b      85,110,107,110,111,119,110,0
000070F4  6F77 6E00 
                    11250   @m68kde~1_192:
000070F8  4142 4344 11251          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
000070FC  2044 2564 
00007100  2C44 2564 
00007104  00        
                    11252   @m68kde~1_193:
00007106  4142 4344 11253          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
0000710A  202D 2841 
0000710E  2564 292C 
00007112  2D28 41   
00007115  2564 2900 11254          dc.b      37,100,41,0
                    11255   @m68kde~1_194:
0000711A  4144 4441 11256          dc.b      65,68,68,65,46,87,32,0
0000711E  2E57 2000 
                    11257   @m68kde~1_195:
00007122  4144 4441 11258          dc.b      65,68,68,65,46,76,32,0
00007126  2E4C 2000 
                    11259   @m68kde~1_196:
0000712A  2C41 2558 11260          dc.b      44,65,37,88,0
0000712E  00        
                    11261   @m68kde~1_197:
00007130  4144 4400 11262          dc.b      65,68,68,0
                    11263   @m68kde~1_198:
00007134  4144 4449 11264          dc.b      65,68,68,73,0
00007138  00        
                    11265   @m68kde~1_199:
0000713A  414E 4449 11266          dc.b      65,78,68,73,0
0000713E  00        
                    11267   @m68kde~1_200:
00007140  434D 5049 11268          dc.b      67,77,80,73,0
00007144  00        
                    11269   @m68kde~1_201:
00007146  454F 5249 11270          dc.b      69,79,82,73,0
0000714A  00        
                    11271   @m68kde~1_202:
0000714C  4F52 4900 11272          dc.b      79,82,73,0
                    11273   @m68kde~1_203:
00007150  5355 4249 11274          dc.b      83,85,66,73,0
00007154  00        
                    11275   @m68kde~1_204:
00007156  414E 4449 11276          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
0000715A  2023 2425 
0000715E  582C 5352 
00007162  00        
                    11277   @m68kde~1_205:
00007164  4144 4451 11278          dc.b      65,68,68,81,0
00007168  00        
                    11279   @m68kde~1_206:
0000716A  2325 3158 11280          dc.b      35,37,49,88,44,0
0000716E  2C00      
                    11281   @m68kde~1_207:
00007170  4144 4458 11282          dc.b      65,68,68,88,0
00007174  00        
                    11283   @m68kde~1_208:
00007176  4425 582C 11284          dc.b      68,37,88,44,68,37,88,0
0000717A  4425 5800 
                    11285   @m68kde~1_209:
0000717E  2D28 4125 11286          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00007182  5829 2C2D 
00007186  2841 2558 
0000718A  2900      
                    11287   @m68kde~1_210:
0000718C  414E 4400 11288          dc.b      65,78,68,0
                    11289   @m68kde~1_211:
00007190  414E 4449 11290          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00007194  2023 2425 
00007198  3258 2C43 
0000719C  4352 00   
                    11291   @m68kde~1_212:
000071A0  4153 4C00 11292          dc.b      65,83,76,0
                    11293   @m68kde~1_213:
000071A4  4153 5200 11294          dc.b      65,83,82,0
                    11295   @m68kde~1_214:
000071A8  4C53 4C00 11296          dc.b      76,83,76,0
                    11297   @m68kde~1_215:
000071AC  4C53 5200 11298          dc.b      76,83,82,0
                    11299   @m68kde~1_216:
000071B0  524F 4C00 11300          dc.b      82,79,76,0
                    11301   @m68kde~1_217:
000071B4  524F 5200 11302          dc.b      82,79,82,0
                    11303   @m68kde~1_218:
000071B8  524F 584C 11304          dc.b      82,79,88,76,0
000071BC  00        
                    11305   @m68kde~1_219:
000071BE  524F 5852 11306          dc.b      82,79,88,82,0
000071C2  00        
                    11307   @m68kde~1_220:
000071C4  2324 2558 11308          dc.b      35,36,37,88,44,68,37,88,0
000071C8  2C44 2558 
000071CC  00        
                    11309   @m68kde~1_221:
000071CE  4200      11310          dc.b      66,0
                    11311   @m68kde~1_222:
000071D0  4243 4847 11312          dc.b      66,67,72,71,32,0
000071D4  2000      
                    11313   @m68kde~1_223:
000071D6  4425 642C 11314          dc.b      68,37,100,44,0
000071DA  00        
                    11315   @m68kde~1_224:
000071DC  2324 2558 11316          dc.b      35,36,37,88,44,0
000071E0  2C00      
                    11317   @m68kde~1_225:
000071E2  4243 4C52 11318          dc.b      66,67,76,82,32,0
000071E6  2000      
                    11319   @m68kde~1_226:
000071E8  4253 4554 11320          dc.b      66,83,69,84,32,0
000071EC  2000      
                    11321   @m68kde~1_227:
000071EE  4254 5354 11322          dc.b      66,84,83,84,32,0
000071F2  2000      
                    11323   @m68kde~1_228:
000071F4  4348 4B20 11324          dc.b      67,72,75,32,0
000071F8  00        
                    11325   @m68kde~1_229:
000071FA  2C44 2564 11326          dc.b      44,68,37,100,0
000071FE  00        
                    11327   @m68kde~1_230:
00007200  434C 5200 11328          dc.b      67,76,82,0
                    11329   @m68kde~1_231:
00007204  434D 5041 11330          dc.b      67,77,80,65,46,87,32,0
00007208  2E57 2000 
                    11331   @m68kde~1_232:
0000720C  434D 5041 11332          dc.b      67,77,80,65,46,76,32,0
00007210  2E4C 2000 
                    11333   @m68kde~1_233:
00007214  2C41 2564 11334          dc.b      44,65,37,100,0
00007218  00        
                    11335   @m68kde~1_234:
0000721A  434D 5000 11336          dc.b      67,77,80,0
                    11337   @m68kde~1_235:
0000721E  434D 504D 11338          dc.b      67,77,80,77,0
00007222  00        
                    11339   @m68kde~1_236:
00007224  2841 2564 11340          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00007228  292B 2C28 
0000722C  4125 6429 
00007230  2B00      
                    11341   @m68kde~1_237:
00007232  4442 00   11342          dc.b      68,66,0
                    11343   @m68kde~1_238:
00007236  4425 642C 11344          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
0000723A  252B 6428 
0000723E  5043 2920 
00007242  746F      
00007244  2041 6464 11345          dc.b      32,65,100,100,114,58,36,37,88,0
00007248  723A 2425 
0000724C  5800      
                    11346   @m68kde~1_239:
0000724E  4449 5653 11347          dc.b      68,73,86,83,32,0
00007252  2000      
                    11348   @m68kde~1_240:
00007254  4449 5655 11349          dc.b      68,73,86,85,32,0
00007258  2000      
                    11350   @m68kde~1_241:
0000725A  454F 5200 11351          dc.b      69,79,82,0
                    11352   @m68kde~1_242:
0000725E  454F 5249 11353          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007262  2023 2425 
00007266  3258 2C43 
0000726A  4352 00   
                    11354   @m68kde~1_243:
0000726E  454F 5249 11355          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00007272  2023 2425 
00007276  582C 5352 
0000727A  00        
                    11356   @m68kde~1_244:
0000727C  4558 4720 11357          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007280  4425 642C 
00007284  4425 6400 
                    11358   @m68kde~1_245:
00007288  4558 4720 11359          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
0000728C  4125 642C 
00007290  4125 6400 
                    11360   @m68kde~1_246:
00007294  4558 4720 11361          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00007298  4425 642C 
0000729C  4125 6400 
                    11362   @m68kde~1_247:
000072A0  4558 5400 11363          dc.b      69,88,84,0
                    11364   @m68kde~1_248:
000072A4  494C 4C45 11365          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
000072A8  4741 4C20 
000072AC  2824 3441 
000072B0  4643 29   
000072B3  00        11366          dc.b      0
                    11367   @m68kde~1_249:
000072B4  4A4D 5020 11368          dc.b      74,77,80,32,0
000072B8  00        
                    11369   @m68kde~1_250:
000072BA  4A53 5220 11370          dc.b      74,83,82,32,0
000072BE  00        
                    11371   @m68kde~1_251:
000072C0  4C45 4120 11372          dc.b      76,69,65,32,0
000072C4  00        
                    11373   @m68kde~1_252:
000072C6  4C49 4E4B 11374          dc.b      76,73,78,75,32,0
000072CA  2000      
                    11375   @m68kde~1_253:
000072CC  4125 642C 11376          dc.b      65,37,100,44,35,37,100,0
000072D0  2325 6400 
                    11377   @m68kde~1_254:
000072D4  4D4F 5645 11378          dc.b      77,79,86,69,46,66,32,0
000072D8  2E42 2000 
                    11379   @m68kde~1_255:
000072DC  4D4F 5645 11380          dc.b      77,79,86,69,46,76,32,0
000072E0  2E4C 2000 
                    11381   @m68kde~1_256:
000072E4  4D4F 5645 11382          dc.b      77,79,86,69,46,87,32,0
000072E8  2E57 2000 
                    11383   @m68kde~1_257:
000072EC  4D4F 5645 11384          dc.b      77,79,86,69,32,0
000072F0  2000      
                    11385   @m68kde~1_258:
000072F2  2C43 4352 11386          dc.b      44,67,67,82,0
000072F6  00        
                    11387   @m68kde~1_259:
000072F8  4D4F 5645 11388          dc.b      77,79,86,69,32,83,82,44,0
000072FC  2053 522C 
00007300  00        
                    11389   @m68kde~1_260:
00007302  2C53 5200 11390          dc.b      44,83,82,0
                    11391   @m68kde~1_261:
00007306  4D4F 5645 11392          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
0000730A  2055 5350 
0000730E  2C41 2564 
00007312  00        
                    11393   @m68kde~1_262:
00007314  4D4F 5645 11394          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00007318  2041 2564 
0000731C  2C55 5350 
00007320  00        
                    11395   @m68kde~1_263:
00007322  4D4F 5645 11396          dc.b      77,79,86,69,77,0
00007326  4D00      
                    11397   @m68kde~1_264:
00007328  4425 6400 11398          dc.b      68,37,100,0
                    11399   @m68kde~1_265:
0000732C  2F44 2564 11400          dc.b      47,68,37,100,0
00007330  00        
                    11401   @m68kde~1_266:
00007332  4125 6400 11402          dc.b      65,37,100,0
                    11403   @m68kde~1_267:
00007336  2F41 2564 11404          dc.b      47,65,37,100,0
0000733A  00        
                    11405   @m68kde~1_268:
0000733C  4D4F 5645 11406          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007340  502E 5720 
00007344  2425 5828 
00007348  4125 64   
0000734B  292C 4425 11407          dc.b      41,44,68,37,100,0
0000734F  6400      
                    11408   @m68kde~1_269:
00007352  4D4F 5645 11409          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007356  502E 4C20 
0000735A  2425 5828 
0000735E  4125 64   
00007361  292C 4425 11410          dc.b      41,44,68,37,100,0
00007365  6400      
                    11411   @m68kde~1_270:
00007368  4D4F 5645 11412          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
0000736C  502E 5720 
00007370  4425 642C 
00007374  2425 58   
00007377  2841 2564 11413          dc.b      40,65,37,100,41,0
0000737B  2900      
                    11414   @m68kde~1_271:
0000737E  4D4F 5645 11415          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007382  502E 4C20 
00007386  4425 642C 
0000738A  2425 58   
0000738D  2841 2564 11416          dc.b      40,65,37,100,41,0
00007391  2900      
                    11417   @m68kde~1_272:
00007394  4D4F 5645 11418          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007398  5120 2324 
0000739C  2558 2C44 
000073A0  2564 00   
                    11419   @m68kde~1_273:
000073A4  4D55 4C53 11420          dc.b      77,85,76,83,32,0
000073A8  2000      
                    11421   @m68kde~1_274:
000073AA  4D55 4C55 11422          dc.b      77,85,76,85,32,0
000073AE  2000      
                    11423   @m68kde~1_275:
000073B0  4E42 4344 11424          dc.b      78,66,67,68,32,0
000073B4  2000      
                    11425   @m68kde~1_276:
000073B6  4E45 4700 11426          dc.b      78,69,71,0
                    11427   @m68kde~1_277:
000073BA  4E45 4758 11428          dc.b      78,69,71,88,0
000073BE  00        
                    11429   @m68kde~1_278:
000073C0  4E4F 5000 11430          dc.b      78,79,80,0
                    11431   @m68kde~1_279:
000073C4  4E4F 5400 11432          dc.b      78,79,84,0
                    11433   @m68kde~1_280:
000073C8  4F52 00   11434          dc.b      79,82,0
                    11435   @m68kde~1_281:
000073CC  4F52 4920 11436          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000073D0  2324 2532 
000073D4  582C 4343 
000073D8  5200      
                    11437   @m68kde~1_282:
000073DA  4F52 4920 11438          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000073DE  2023 2425 
000073E2  582C 5352 
000073E6  00        
                    11439   @m68kde~1_283:
000073E8  5045 4120 11440          dc.b      80,69,65,32,0
000073EC  00        
                    11441   @m68kde~1_284:
000073EE  5245 5345 11442          dc.b      82,69,83,69,84,0
000073F2  5400      
                    11443   @m68kde~1_285:
000073F4  5254 4500 11444          dc.b      82,84,69,0
                    11445   @m68kde~1_286:
000073F8  5254 5200 11446          dc.b      82,84,82,0
                    11447   @m68kde~1_287:
000073FC  5254 5300 11448          dc.b      82,84,83,0
                    11449   @m68kde~1_288:
00007400  5354 4F50 11450          dc.b      83,84,79,80,32,35,36,37,88,0
00007404  2023 2425 
00007408  5800      
                    11451   @m68kde~1_289:
0000740A  5342 4344 11452          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
0000740E  2044 2564 
00007412  2C44 2564 
00007416  00        
                    11453   @m68kde~1_290:
00007418  5342 4344 11454          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
0000741C  202D 2841 
00007420  2564 292C 
00007424  2D28 41   
00007427  2564 2900 11455          dc.b      37,100,41,0
                    11456   @m68kde~1_291:
0000742C  5300      11457          dc.b      83,0
                    11458   @m68kde~1_292:
0000742E  5355 4241 11459          dc.b      83,85,66,65,46,87,32,0
00007432  2E57 2000 
                    11460   @m68kde~1_293:
00007436  5355 4241 11461          dc.b      83,85,66,65,46,76,32,0
0000743A  2E4C 2000 
                    11462   @m68kde~1_294:
0000743E  5355 4200 11463          dc.b      83,85,66,0
                    11464   @m68kde~1_295:
00007442  5355 4251 11465          dc.b      83,85,66,81,0
00007446  00        
                    11466   @m68kde~1_296:
00007448  5355 4258 11467          dc.b      83,85,66,88,0
0000744C  00        
                    11468   @m68kde~1_297:
0000744E  4425 3158 11469          dc.b      68,37,49,88,44,68,37,49,88,0
00007452  2C44 2531 
00007456  5800      
                    11470   @m68kde~1_298:
00007458  2D28 4125 11471          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
0000745C  3158 292C 
00007460  2D28 4125 
00007464  3158 29   
00007467  00        11472          dc.b      0
                    11473   @m68kde~1_299:
00007468  5357 4150 11474          dc.b      83,87,65,80,32,68,37,100,0
0000746C  2044 2564 
00007470  00        
                    11475   @m68kde~1_300:
00007472  5441 5320 11476          dc.b      84,65,83,32,0
00007476  00        
                    11477   @m68kde~1_301:
00007478  5452 4150 11478          dc.b      84,82,65,80,32,35,37,100,0
0000747C  2023 2564 
00007480  00        
                    11479   @m68kde~1_302:
00007482  5452 4150 11480          dc.b      84,82,65,80,86,0
00007486  5600      
                    11481   @m68kde~1_303:
00007488  5453 5400 11482          dc.b      84,83,84,0
                    11483   @m68kde~1_304:
0000748C  554E 4C4B 11484          dc.b      85,78,76,75,32,65,37,100,0
00007490  2041 2564 
00007494  00        
                    11485   @itoa_1:
00007496  2D32 3134 11486          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000749A  3734 3833 
0000749E  3634 3800 
                    11487   __ctype:
000074A2  0040 4040 11488          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000074A6  4040 4040 
000074AA  4040 5050 
000074AE  5050 50   
000074B1  4040 4040 11489          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000074B5  4040 4040 
000074B9  4040 4040 
000074BD  4040 40   
000074C0  4040 40D0 11490          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000074C4  A0A0 A0A0 
000074C8  A0A0 A0A0 
000074CC  A0A0 A0A0 11491          dc.b      160,160,160,160,160,160,160,140,140,140,140
000074D0  A0A0 A08C 
000074D4  8C8C 8C   
000074D7  8C8C 8C8C 11492          dc.b      140,140,140,140,140,140,160,160,160,160,160
000074DB  8C8C A0A0 
000074DF  A0A0 A0   
000074E2  A0A0 8A8A 11493          dc.b      160,160,138,138,138,138,138,138,130,130,130
000074E6  8A8A 8A8A 
000074EA  8282 82   
000074ED  8282 8282 11494          dc.b      130,130,130,130,130,130,130,130,130,130,130
000074F1  8282 8282 
000074F5  8282 82   
000074F8  8282 8282 11495          dc.b      130,130,130,130,130,130,160,160,160,160,160
000074FC  8282 A0A0 
00007500  A0A0 A0   
00007503  A089 8989 11496          dc.b      160,137,137,137,137,137,137,129,129,129,129
00007507  8989 8981 
0000750B  8181 81   
0000750E  8181 8181 11497          dc.b      129,129,129,129,129,129,129,129,129,129,129
00007512  8181 8181 
00007516  8181 81   
00007519  8181 8181 11498          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
0000751D  81A0 A0A0 
00007521  A040 0000 
00007525  00        
00007526  0000 0000 11499          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000752A  0000 0000 
0000752E  0000 0000 
00007532  0000 0000 
00007536  0000 0000 
0000753A  0000      
0000753C  0000 0000 11500          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007540  0000 0000 
00007544  0000 0000 
00007548  0000 0000 
0000754C  0000 0000 
00007550  0000      
00007552  0000 0000 11501          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007556  0000 0000 
0000755A  0000 0000 
0000755E  0000 0000 
00007562  0000 0000 
00007566  0000      
00007568  0000 0000 11502          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000756C  0000 0000 
00007570  0000 0000 
00007574  0000 0000 
00007578  0000 0000 
0000757C  0000      
0000757E  0000 0000 11503          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007582  0000 0000 
00007586  0000 0000 
0000758A  0000 0000 
0000758E  0000 0000 
00007592  0000      
00007594  0000 0000 11504          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007598  0000 0000 
0000759C  0000 0000 
000075A0  0000 00   
                    11505          section   data
000075A4            11506                   align
          0000 75A4 11507   DataStart       equ       *
                    11508   
                    11509   *********************************************************************************************************
                    11510   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11511   * to ram as part of the CStart routine in this file
                    11512   *********************************************************************************************************
                    11513   
                    11514          section   bss
000075A4            11515                   align
          0000 75A4 11516   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11517   
                    11518   *********************************************************************************************************
                    11519   * Section for Uninitialised Data held in ROM as constants
                    11520   *********************************************************************************************************
                    11521   
08030000            11522                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 11523   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11524   
                    11525   
08030000            11526   bss             org       bss
                    11527   
                    11528   *********************************************************************************************************
                    11529   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11530   * install the exception handler using the C function InstallExceptionHandler()
                    11531   *********************************************************************************************************
                    11532   
                    11533   
                    11534   
08030000            11535   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            11536   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            11537   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            11538   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            11539   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            11540   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            11541   VCheck           ds.l    1      ditto
0803001C            11542   VTrapV           ds.l    1      ditto
08030020            11543   VPrivilege       ds.l    1      ditto
08030024            11544   VTrace           ds.l    1
08030028            11545   VLine1010emul    ds.l    1
0803002C            11546   VLine1111emul    ds.l    1
08030030            11547   VUnassigned1     ds.l    1
08030034            11548   VUnassigned2     ds.l    1
08030038            11549   VUnassigned3     ds.l    1
0803003C            11550   VUninit_IRQ      ds.l    1
08030040            11551   VUnassigned4     ds.l    1
08030044            11552   VUnassigned5     ds.l    1
08030048            11553   VUnassigned6     ds.l    1
0803004C            11554   VUnassigned7     ds.l    1
08030050            11555   VUnassigned8     ds.l    1
08030054            11556   VUnassigned9     ds.l    1
08030058            11557   VUnassigned10    ds.l    1
0803005C            11558   VUnassigned11    ds.l    1
08030060            11559   VSpuriousIRQ     ds.l    1
                    11560   
                    11561   * Interrupt handlers Vector 25-31
08030064            11562   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            11563   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            11564   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            11565   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            11566   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            11567   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            11568   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11569   
                    11570   * Trap Handler vectors 32-47
08030080            11571   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            11572   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            11573   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            11574   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            11575   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            11576   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            11577   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            11578   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            11579   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            11580   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            11581   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            11582   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            11583   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            11584   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            11585   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            11586   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11587   
                    11588   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11589   
                    11590   ***********************************************************************************************************
                    11591   * Other Variables
                    11592   ***********************************************************************************************************
                    11593   *__DebugA5       ds.l    1
                    11594   *__UserA5        ds.l    1
                    11595   
                    11596   ***********************************************************************************************************
080300C0            11597   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            11598   __allocp:       ds.l    0       ; start of allocation units
080300C4            11599   __heap:         ds.l    0       ; pointers for malloc functions
                    11600   
                    11601   *__himem:       ds.l    himem            ; highest memory location + 1
                    11602   *__stklen:      ds.l    stklen           ; default stack size
                    11603   
                    11604   *********************************************************************************************************
                    11605   * Section for Heap
                    11606   *********************************************************************************************************
                    11607   
                    11608   _i:
080300C4            11609          ds.b      4
                    11610   _x:
080300C8            11611          ds.b      4
                    11612   _y:
080300CC            11613          ds.b      4
                    11614   _z:
080300D0            11615          ds.b      4
                    11616   _PortA_Count:
080300D4            11617          ds.b      4
                    11618   _Trace:
080300D8            11619          ds.b      4
                    11620   _GoFlag:
080300DC            11621          ds.b      4
                    11622   _Echo:
080300E0            11623          ds.b      4
                    11624   _d0:
080300E4            11625          ds.b      4
                    11626   _d1:
080300E8            11627          ds.b      4
                    11628   _d2:
080300EC            11629          ds.b      4
                    11630   _d3:
080300F0            11631          ds.b      4
                    11632   _d4:
080300F4            11633          ds.b      4
                    11634   _d5:
080300F8            11635          ds.b      4
                    11636   _d6:
080300FC            11637          ds.b      4
                    11638   _d7:
08030100            11639          ds.b      4
                    11640   _a0:
08030104            11641          ds.b      4
                    11642   _a1:
08030108            11643          ds.b      4
                    11644   _a2:
0803010C            11645          ds.b      4
                    11646   _a3:
08030110            11647          ds.b      4
                    11648   _a4:
08030114            11649          ds.b      4
                    11650   _a5:
08030118            11651          ds.b      4
                    11652   _a6:
0803011C            11653          ds.b      4
                    11654   _PC:
08030120            11655          ds.b      4
                    11656   _SSP:
08030124            11657          ds.b      4
                    11658   _USP:
08030128            11659          ds.b      4
                    11660   _SR:
0803012C            11661          ds.b      2
                    11662   _BreakPointAddress:
0803012E            11663          ds.b      32
                    11664   _BreakPointInstruction:
0803014E            11665          ds.b      16
                    11666   _BreakPointSetOrCleared:
0803015E            11667          ds.b      32
                    11668   _InstructionSize:
0803017E            11669          ds.b      4
                    11670   _WatchPointAddress:
08030182            11671          ds.b      32
                    11672   _WatchPointSetOrCleared:
080301A2            11673          ds.b      32
                    11674   _WatchPointString:
080301C2            11675          ds.b      800
                    11676   _Instruction:
080304E2            11677          ds.b      100
                    11678   _TempString:
08030546            11679          ds.b      100
                    11680          section   heap
080305AA            11681                   align
          0803 05AA 11682   bssEnd          equ *                   end of storage space for unitialised variables
                    11683   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05AA 11684   heap   equ       *
080305AA            11685                    align
          0000 0000

Assembly errors: 0

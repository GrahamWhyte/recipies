680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 29 Mar 2019      Time: 18:02:09          Source: C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\LAB5\LAB5.SRC

                       1          section   code
                       2   **********************************************************************************************************
                       3   * CSTART.ASM  -  C startup-code
                       4   *
                       5   *          Initialises the system prior to running the users main() program
                       6   *
                       7   *          1) Sets up the user program stack pointer
                       8   *          2) Switches to User mode in the 68000
                       9   *          3) Enables All Interrupts 1-7 on 68000
                      10   *          4) Copies all initialised C program variables from Rom to Ram prior to running main()
                      11   *
                      12   **********************************************************************************************************
00000000              13                   align
                      14   
                      15   
                      16   **********************************************************************************************************
                      17   * The Following ORG Statement marks the address of the start of the this CStart Program
                      18   *
                      19   * The debug Monitor and Flash Load and Program routines assume your program lives here
                      20   **********************************************************************************************************
08000000              21                   org       $08000000
08000000  46FC 2000   22   start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode
                      23   
                      24   ******************************************************************************************
                      25   * Set unitialised global variables to 0 at startup
                      26   ******************************************************************************************
08000004  207C 0800   27   mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
08000008  136E      
0800000A  203C 0001   28                   move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
0800000E  D4F0      
08000010  6700 0024   29                   beq       go_main               if no data to copy go straight to program
08000014  10FC 0000   30   Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
08000018  5380        31                   subq.l    #1,d0
0800001A  66F8        32                   bne       Zeroinit
                      33   
                      34   *******************************************************************************************
                      35   * last minute initialisation before calling main
                      36   *******************************************************************************************
                      37   
0800001C  23FC FFFF   38                   move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
08000020  FFFF 0800 
08000024  1346      
08000026  42B9 0800   39                   clr.l     __allocp               used by malloc() in C
0800002A  134A      
0800002C  23FC 0801   40                   move.l    #heap,__heap           pointer to free memory
08000030  E85E 0800 
08000034  134E      
08000036  4EB9 0800   41   go_main         jsr       _main
0800003A  06C0      
0800003C  60C2        42                   bra       start
                      43   
                      44   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\LAB5\IIC_DRIVER.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                      45   ; #include <stdlib.h>
                      46   ; #include "IIC_Driver.h"
                      47   ; /* Globals */
                      48   ; volatile unsigned char *IICClkPrescalerLow = (unsigned char *)IIC_CLK_PRSCL_LO;
                      49   ; volatile unsigned char *IICClkPrescalerHigh = (unsigned char *)IIC_CLK_PRSCL_HI;
                      50   ; volatile unsigned char *IICControl = (unsigned char *)IIC_CONTROL;
                      51   ; volatile unsigned char *IICTx = (unsigned char *)IIC_TRANSMIT;
                      52   ; volatile unsigned char *IICRx = (unsigned char *)IIC_RECEIVE;
                      53   ; volatile unsigned char *IICStatus = (unsigned char *)IIC_STATUS;
                      54   ; volatile unsigned char *IICCommand = (unsigned char *)IIC_COMMAND;
                      55   ; /* Functions */
                      56   ; void WaitForEndOfTransfer(void) {
                      57   _WaitForEndOfTransfer:
                      58   ; while (1){							
                      59   WaitForEndOfTransfer_1:
                      60   ; if ( ( (*IICStatus) & TIP) == 0)	
0800003E  2079 0800   61          move.l    _IICStatus.L,A0
08000042  1366      
08000044  1010        62          move.b    (A0),D0
08000046  C03C 0002   63          and.b     #2,D0
0800004A  6602        64          bne.s     WaitForEndOfTransfer_4
                      65   ; break;							
0800004C  6002        66          bra.s     WaitForEndOfTransfer_3
                      67   WaitForEndOfTransfer_4:
0800004E  60EE        68          bra       WaitForEndOfTransfer_1
                      69   WaitForEndOfTransfer_3:
08000050  4E75        70          rts
                      71   ; }			
                      72   ; }
                      73   ; void WaitForAck(void) {
                      74   _WaitForAck:
                      75   ; while (1){								
                      76   WaitForAck_1:
                      77   ; if ( ( (*IICStatus) & RxACK) == 0 )	
08000052  2079 0800   78          move.l    _IICStatus.L,A0
08000056  1366      
08000058  1010        79          move.b    (A0),D0
0800005A  C07C 00FF   80          and.w     #255,D0
0800005E  C07C 0080   81          and.w     #128,D0
08000062  6602        82          bne.s     WaitForAck_4
                      83   ; break;							
08000064  6002        84          bra.s     WaitForAck_3
                      85   WaitForAck_4:
08000066  60EA        86          bra       WaitForAck_1
                      87   WaitForAck_3:
08000068  4E75        88          rts
                      89   ; }				
                      90   ; }	
                      91   ; unsigned char EEPROMInternalWritting(void) {
                      92   _EEPROMInternalWritting:
                      93   ; return ( ( (*IICStatus) & RxACK) == 0 );
0800006A  2079 0800   94          move.l    _IICStatus.L,A0
0800006E  1366      
08000070  1010        95          move.b    (A0),D0
08000072  C07C 00FF   96          and.w     #255,D0
08000076  C07C 0080   97          and.w     #128,D0
0800007A  6604        98          bne.s     EEPROMInternalWritting_1
0800007C  7001        99          moveq     #1,D0
0800007E  6002       100          bra.s     EEPROMInternalWritting_2
                     101   EEPROMInternalWritting_1:
08000080  4280       102          clr.l     D0
                     103   EEPROMInternalWritting_2:
08000082  4E75       104          rts
                     105   ; }
                     106   ; void Init_IIC(void) {
                     107   _Init_IIC:
                     108   ; *IICControl = 0;
08000084  2079 0800  109          move.l    _IICControl.L,A0
08000088  135A      
0800008A  4210       110          clr.b     (A0)
                     111   ; *IICClkPrescalerLow = CLK_100K_LO;
0800008C  2079 0800  112          move.l    _IICClkPrescalerLow.L,A0
08000090  1352      
08000092  10BC 0031  113          move.b    #49,(A0)
                     114   ; *IICClkPrescalerHigh = CLK_100K_HI;
08000096  2079 0800  115          move.l    _IICClkPrescalerHigh.L,A0
0800009A  1356      
0800009C  4210       116          clr.b     (A0)
                     117   ; *IICControl = CORE_ENABLED | INTERRUPT_DISABLED;
0800009E  2079 0800  118          move.l    _IICControl.L,A0
080000A2  135A      
080000A4  10BC 0080  119          move.b    #128,(A0)
080000A8  4E75       120          rts
                     121   ; } 
                     122   ; void WriteByte(unsigned char IICSlaveAddress, unsigned char byteToStore, unsigned int EEPROMAddress) {
                     123   _WriteByte:
080000AA  4E56 FFFC  124          link      A6,#-4
080000AE  48E7 203C  125          movem.l   D2/A2/A3/A4/A5,-(A7)
080000B2  45F9 0800  126          lea       _WaitForAck.L,A2
080000B6  0052      
080000B8  47F9 0800  127          lea       _WaitForEndOfTransfer.L,A3
080000BC  003E      
080000BE  49F9 0800  128          lea       _IICCommand.L,A4
080000C2  136A      
080000C4  4BF9 0800  129          lea       _IICTx.L,A5
080000C8  135E      
080000CA  242E 0010  130          move.l    16(A6),D2
                     131   ; unsigned char blockSelect = (unsigned char)EEPROMAddress>>16; 
080000CE  2002       132          move.l    D2,D0
080000D0  E008       133          lsr.b     #8,D0
080000D2  E008       134          lsr.b     #8,D0
080000D4  1D40 FFFD  135          move.b    D0,-3(A6)
                     136   ; unsigned char EEPROMAddress_High = (unsigned char)(EEPROMAddress>>8); 
080000D8  2002       137          move.l    D2,D0
080000DA  E088       138          lsr.l     #8,D0
080000DC  1D40 FFFE  139          move.b    D0,-2(A6)
                     140   ; unsigned char EEPROMAddress_Low = (unsigned char)EEPROMAddress; 
080000E0  1D42 FFFF  141          move.b    D2,-1(A6)
                     142   ; IICSlaveAddress |= (blockSelect << 3);  
080000E4  102E FFFD  143          move.b    -3(A6),D0
080000E8  E708       144          lsl.b     #3,D0
080000EA  812E 000B  145          or.b      D0,11(A6)
                     146   ; // Transfer IIC Slave Address
                     147   ; WaitForInternalWrite(IICSlaveAddress);
080000EE  122E 000B  148          move.b    11(A6),D1
080000F2  C2BC 0000  149          and.l     #255,D1
080000F6  00FF      
080000F8  2F01       150          move.l    D1,-(A7)
080000FA  4EB9 0800  151          jsr       _WaitForInternalWrite
080000FE  01E2      
08000100  584F       152          addq.w    #4,A7
                     153   ; // Transfer High EEProm Address
                     154   ; *IICTx = EEPROMAddress_High;	// fill the tx shift register
08000102  2055       155          move.l    (A5),A0
08000104  10AE FFFE  156          move.b    -2(A6),(A0)
                     157   ; *IICCommand = WR;	// set write bit
08000108  2054       158          move.l    (A4),A0
0800010A  10BC 0010  159          move.b    #16,(A0)
                     160   ; WaitForEndOfTransfer();
0800010E  4E93       161          jsr       (A3)
                     162   ; WaitForAck();
08000110  4E92       163          jsr       (A2)
                     164   ; // Transfer Low EEProm Address
                     165   ; *IICTx = EEPROMAddress_Low;	// fill the tx shift register
08000112  2055       166          move.l    (A5),A0
08000114  10AE FFFF  167          move.b    -1(A6),(A0)
                     168   ; *IICCommand = WR;	// set write bit
08000118  2054       169          move.l    (A4),A0
0800011A  10BC 0010  170          move.b    #16,(A0)
                     171   ; WaitForEndOfTransfer();
0800011E  4E93       172          jsr       (A3)
                     173   ; WaitForAck();
08000120  4E92       174          jsr       (A2)
                     175   ; // Send Data
                     176   ; *IICTx = byteToStore;
08000122  2055       177          move.l    (A5),A0
08000124  10AE 000F  178          move.b    15(A6),(A0)
                     179   ; *IICCommand = WR | STO;	//send stop signal
08000128  2054       180          move.l    (A4),A0
0800012A  10BC 0050  181          move.b    #80,(A0)
                     182   ; WaitForEndOfTransfer();
0800012E  4E93       183          jsr       (A3)
                     184   ; WaitForAck();
08000130  4E92       185          jsr       (A2)
08000132  4CDF 3C04  186          movem.l   (A7)+,D2/A2/A3/A4/A5
08000136  4E5E       187          unlk      A6
08000138  4E75       188          rts
                     189   ; }
                     190   ; unsigned char ReadByte(unsigned char IICSlaveAddress, unsigned int EEPROMAddress) {
                     191   _ReadByte:
0800013A  4E56 FFFC  192          link      A6,#-4
0800013E  48E7 303C  193          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
08000142  45F9 0800  194          lea       _WaitForEndOfTransfer.L,A2
08000146  003E      
08000148  47F9 0800  195          lea       _IICCommand.L,A3
0800014C  136A      
0800014E  49F9 0800  196          lea       _WaitForAck.L,A4
08000152  0052      
08000154  4BF9 0800  197          lea       _IICTx.L,A5
08000158  135E      
0800015A  142E 000B  198          move.b    11(A6),D2
0800015E  C4BC 0000  199          and.l     #255,D2
08000162  00FF      
08000164  262E 000C  200          move.l    12(A6),D3
                     201   ; unsigned char blockSelect = (unsigned char)EEPROMAddress>>16; 
08000168  2003       202          move.l    D3,D0
0800016A  E008       203          lsr.b     #8,D0
0800016C  E008       204          lsr.b     #8,D0
0800016E  1D40 FFFD  205          move.b    D0,-3(A6)
                     206   ; unsigned char EEPROMAddress_High = (unsigned char)(EEPROMAddress>>8); 
08000172  2003       207          move.l    D3,D0
08000174  E088       208          lsr.l     #8,D0
08000176  1D40 FFFE  209          move.b    D0,-2(A6)
                     210   ; unsigned char EEPROMAddress_Low = (unsigned char)EEPROMAddress; 
0800017A  1D43 FFFF  211          move.b    D3,-1(A6)
                     212   ; IICSlaveAddress |= (blockSelect << 3);  
0800017E  102E FFFD  213          move.b    -3(A6),D0
08000182  E708       214          lsl.b     #3,D0
08000184  8400       215          or.b      D0,D2
                     216   ; // Transfer IIC Slave Address
                     217   ; WaitForInternalWrite(IICSlaveAddress);
08000186  C4BC 0000  218          and.l     #255,D2
0800018A  00FF      
0800018C  2F02       219          move.l    D2,-(A7)
0800018E  4EB9 0800  220          jsr       _WaitForInternalWrite
08000192  01E2      
08000194  584F       221          addq.w    #4,A7
                     222   ; // Transfer High EEProm Address
                     223   ; *IICTx = EEPROMAddress_High;	// fill the tx shift register
08000196  2055       224          move.l    (A5),A0
08000198  10AE FFFE  225          move.b    -2(A6),(A0)
                     226   ; *IICCommand = WR;	// set write bit
0800019C  2053       227          move.l    (A3),A0
0800019E  10BC 0010  228          move.b    #16,(A0)
                     229   ; WaitForEndOfTransfer();
080001A2  4E92       230          jsr       (A2)
                     231   ; WaitForAck();
080001A4  4E94       232          jsr       (A4)
                     233   ; // Transfer Low EEProm Address
                     234   ; *IICTx = EEPROMAddress_Low;	// fill the tx shift register
080001A6  2055       235          move.l    (A5),A0
080001A8  10AE FFFF  236          move.b    -1(A6),(A0)
                     237   ; *IICCommand = WR;	// set write bit
080001AC  2053       238          move.l    (A3),A0
080001AE  10BC 0010  239          move.b    #16,(A0)
                     240   ; WaitForEndOfTransfer();
080001B2  4E92       241          jsr       (A2)
                     242   ; WaitForAck();
080001B4  4E94       243          jsr       (A4)
                     244   ; // Fetch Data
                     245   ; *IICTx = IICSlaveAddress | READ;
080001B6  1002       246          move.b    D2,D0
080001B8  803C 0001  247          or.b      #1,D0
080001BC  2055       248          move.l    (A5),A0
080001BE  1080       249          move.b    D0,(A0)
                     250   ; *IICCommand = WR | STA;	//send stop signal
080001C0  2053       251          move.l    (A3),A0
080001C2  10BC 0090  252          move.b    #144,(A0)
                     253   ; WaitForEndOfTransfer();
080001C6  4E92       254          jsr       (A2)
                     255   ; WaitForAck();
080001C8  4E94       256          jsr       (A4)
                     257   ; // read SDA line
                     258   ; *IICCommand = RD | STO | NACK;	//send stop signal
080001CA  2053       259          move.l    (A3),A0
080001CC  10BC 0068  260          move.b    #104,(A0)
                     261   ; WaitForEndOfTransfer();
080001D0  4E92       262          jsr       (A2)
                     263   ; return *IICRx;
080001D2  2079 0800  264          move.l    _IICRx.L,A0
080001D6  1362      
080001D8  1010       265          move.b    (A0),D0
080001DA  4CDF 3C0C  266          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
080001DE  4E5E       267          unlk      A6
080001E0  4E75       268          rts
                     269   ; }
                     270   ; void WaitForInternalWrite(unsigned char IICSlaveAddress) {
                     271   _WaitForInternalWrite:
080001E2  4E56 0000  272          link      A6,#0
                     273   ; do {
                     274   WaitForInternalWrite_1:
                     275   ; *IICTx = IICSlaveAddress | WRITE;	// fill the tx shift register
080001E6  102E 000B  276          move.b    11(A6),D0
080001EA  803C 0000  277          or.b      #0,D0
080001EE  2079 0800  278          move.l    _IICTx.L,A0
080001F2  135E      
080001F4  1080       279          move.b    D0,(A0)
                     280   ; *IICCommand = STA | WR;	// set write bit
080001F6  2079 0800  281          move.l    _IICCommand.L,A0
080001FA  136A      
080001FC  10BC 0090  282          move.b    #144,(A0)
                     283   ; printf("\r\nChecking if internal write is done...");
08000200  4879 0800  284          pea       @iic_dr~1_1.L
08000204  1196      
08000206  4EB9 0800  285          jsr       _printf
0800020A  0732      
0800020C  584F       286          addq.w    #4,A7
                     287   ; printf("\r\nStatus REg: %x", *IICStatus);
0800020E  2079 0800  288          move.l    _IICStatus.L,A0
08000212  1366      
08000214  1210       289          move.b    (A0),D1
08000216  C2BC 0000  290          and.l     #255,D1
0800021A  00FF      
0800021C  2F01       291          move.l    D1,-(A7)
0800021E  4879 0800  292          pea       @iic_dr~1_2.L
08000222  11BE      
08000224  4EB9 0800  293          jsr       _printf
08000228  0732      
0800022A  504F       294          addq.w    #8,A7
                     295   ; WaitForEndOfTransfer();
0800022C  4EB9 0800  296          jsr       _WaitForEndOfTransfer
08000230  003E      
08000232  4EB9 0800  297          jsr       _EEPROMInternalWritting
08000236  006A      
08000238  4A00       298          tst.b     D0
0800023A  67AA       299          beq       WaitForInternalWrite_1
0800023C  4E5E       300          unlk      A6
0800023E  4E75       301          rts
                     302   ; } while (!EEPROMInternalWritting());
                     303   ; }
                     304   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\LAB5\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     305   ; #include <stdio.h>
                     306   ; #include <string.h>
                     307   ; #include <ctype.h>
                     308   ; #include "IIC_Driver.h"
                     309   ; //IMPORTANT
                     310   ; //
                     311   ; // Uncomment one of the two #defines below
                     312   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                     313   ; // 0B000000 for running programs from dram
                     314   ; //
                     315   ; // In your labs, you will initially start by designing a system with SRam and later move to
                     316   ; // Dram, so these constants will need to be changed based on the version of the system you have
                     317   ; // building
                     318   ; //
                     319   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                     320   ; // is based around Dram so #define accordingly before building
                     321   ; #define MAX_SPI_ADDRESS 0x7FFFF
                     322   ; #define NUM_SECTORS 128
                     323   ; #define WRITES_PER_SECTOR 16
                     324   ; // #define StartOfExceptionVectorTable 0x08030000
                     325   ; #define StartOfExceptionVectorTable 0x0B000000
                     326   ; // #define CLOCK_FREQUENCY 45000000
                     327   ; #define CLOCK_FREQUENCY 25000000
                     328   ; /**********************************************************************************************
                     329   ; **	Parallel port addresses
                     330   ; **********************************************************************************************/
                     331   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                     332   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                     333   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                     334   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                     335   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                     336   ; // /*********************************************************************************************
                     337   ; // **	Hex 7 seg displays port addresses
                     338   ; // *********************************************************************************************/
                     339   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                     340   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                     341   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                     342   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                     343   ; /**********************************************************************************************
                     344   ; **	LCD display port addresses
                     345   ; **********************************************************************************************/
                     346   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                     347   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                     348   ; /*******************************************************************************************
                     349   ; **	Timer Port addresses
                     350   ; ********************************************************************************************/
                     351   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                     352   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                     353   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                     354   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                     355   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                     356   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                     357   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                     358   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                     359   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                     360   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                     361   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                     362   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                     363   ; // /*********************************************************************************************
                     364   ; // **	RS232 port addresses
                     365   ; // *********************************************************************************************/
                     366   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                     367   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                     368   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                     369   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                     370   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                     371   ; /*********************************************************************************************
                     372   ; **	PIA 1 and 2 port addresses
                     373   ; *********************************************************************************************/
                     374   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                     375   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                     376   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                     377   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                     378   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                     379   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                     380   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                     381   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                     382   ; // SPI Registers
                     383   ; #define SPI_Control         (*(volatile unsigned char *)(0x00408020))
                     384   ; #define SPI_Status          (*(volatile unsigned char *)(0x00408022))
                     385   ; #define SPI_Data            (*(volatile unsigned char *)(0x00408024))
                     386   ; #define SPI_Ext             (*(volatile unsigned char *)(0x00408026))
                     387   ; #define SPI_CS              (*(volatile unsigned char *)(0x00408028))
                     388   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     389   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     390   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     391   ; // and write FF to disable it
                     392   ; #define   Enable_SPI_CS()             SPI_CS = 0xFE
                     393   ; #define   Disable_SPI_CS()            SPI_CS = 0xFF 
                     394   ; typedef struct 
                     395   ; {
                     396   ; unsigned char SPR       : 2;
                     397   ; unsigned char CPHA      : 1;
                     398   ; unsigned char CPOL      : 1; 
                     399   ; unsigned char MSTR      : 1;
                     400   ; unsigned char reserved  : 1; 
                     401   ; unsigned char SPE       : 1;
                     402   ; unsigned char SPIE      : 1; 
                     403   ; } ControlRegister_t; 
                     404   ; typedef struct 
                     405   ; {
                     406   ; unsigned char ESPR      : 2;
                     407   ; unsigned char Reserved  : 4;
                     408   ; unsigned char ICNT      : 2; 
                     409   ; } ExtRegister_t;
                     410   ; typedef struct 
                     411   ; {
                     412   ; unsigned char CS0       : 1; 
                     413   ; unsigned char CS1       : 1; 
                     414   ; unsigned char CS2       : 1; 
                     415   ; unsigned char CS3       : 1; 
                     416   ; unsigned char CS4       : 1; 
                     417   ; unsigned char CS5       : 1; 
                     418   ; unsigned char CS6       : 1; 
                     419   ; unsigned char CS7       : 1; 
                     420   ; } CSRegister_t;
                     421   ; typedef struct 
                     422   ; {
                     423   ; unsigned char SPIF      : 1;
                     424   ; unsigned char WCOL      : 1;
                     425   ; unsigned char reserved  : 2; 
                     426   ; unsigned char WF_FULL   : 1;
                     427   ; unsigned char WF_EMPTY  : 1; 
                     428   ; unsigned char RF_FULL   : 1;
                     429   ; unsigned char RF_EMPTY  : 1; 
                     430   ; } StatusRegister_t; 
                     431   ; /*********************************************************************************************************************************
                     432   ; (( DO NOT initialise global variables here, do it main even if you want 0
                     433   ; (( it's a limitation of the compiler
                     434   ; (( YOU HAVE BEEN WARNED
                     435   ; *********************************************************************************************************************************/
                     436   ; unsigned int x, y, z, PortA_Count;
                     437   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                     438   ; volatile unsigned long int counter, rollovers;
                     439   ; int a[100][100], b[100][100], c[100][100];
                     440   ; int i, j, k, sum;
                     441   ; /*******************************************************************************************
                     442   ; ** Function Prototypes
                     443   ; *******************************************************************************************/
                     444   ; void Wait1ms(void);
                     445   ; void Wait3ms(void);
                     446   ; void Init_LCD(void) ;
                     447   ; void LCDOutchar(int c);
                     448   ; void LCDOutMess(char *theMessage);
                     449   ; void LCDClearln(void);
                     450   ; void LCDline1Message(char *theMessage);
                     451   ; void LCDline2Message(char *theMessage);
                     452   ; int sprintf(char *out, const char *format, ...) ;
                     453   ; void startTimer(void);
                     454   ; unsigned long int endTimer(void);
                     455   ; /*****************************************************************************************
                     456   ; **	Interrupt service routine for Timers
                     457   ; **
                     458   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     459   ; **  out which timer is producing the interrupt
                     460   ; **
                     461   ; *****************************************************************************************/
                     462   ; void Timer_ISR()
                     463   ; {
                     464   _Timer_ISR:
                     465   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
08000240  1039 0040  466          move.b    4194354,D0
08000244  0032      
08000246  0C00 0001  467          cmp.b     #1,D0
0800024A  661C       468          bne.s     Timer_ISR_3
                     469   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800024C  13FC 0003  470          move.b    #3,4194354
08000250  0040 0032 
                     471   ; //PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
                     472   ; counter++;
08000254  52B9 0800  473          addq.l    #1,_counter.L
08000258  1386      
                     474   ; if (!counter)   //handle the counter rolling over, who knows, maybe something will take an eternity to run
0800025A  4AB9 0800  475          tst.l     _counter.L
0800025E  1386      
08000260  6606       476          bne.s     Timer_ISR_3
                     477   ; rollovers++;
08000262  52B9 0800  478          addq.l    #1,_rollovers.L
08000266  138A      
                     479   Timer_ISR_3:
                     480   ; }
                     481   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
08000268  1039 0040  482          move.b    4194358,D0
0800026C  0036      
0800026E  0C00 0001  483          cmp.b     #1,D0
08000272  661A       484          bne.s     Timer_ISR_5
                     485   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
08000274  13FC 0003  486          move.b    #3,4194358
08000278  0040 0036 
                     487   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
0800027C  1039 0800  488          move.b    _Timer2Count.L,D0
08000280  1380      
08000282  5239 0800  489          addq.b    #1,_Timer2Count.L
08000286  1380      
08000288  13C0 0040  490          move.b    D0,4194308
0800028C  0004      
                     491   Timer_ISR_5:
                     492   ; }
                     493   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
0800028E  1039 0040  494          move.b    4194362,D0
08000292  003A      
08000294  0C00 0001  495          cmp.b     #1,D0
08000298  661A       496          bne.s     Timer_ISR_7
                     497   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0800029A  13FC 0003  498          move.b    #3,4194362
0800029E  0040 003A 
                     499   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
080002A2  1039 0800  500          move.b    _Timer3Count.L,D0
080002A6  1382      
080002A8  5239 0800  501          addq.b    #1,_Timer3Count.L
080002AC  1382      
080002AE  13C0 0040  502          move.b    D0,4194320
080002B2  0010      
                     503   Timer_ISR_7:
                     504   ; }
                     505   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
080002B4  1039 0040  506          move.b    4194366,D0
080002B8  003E      
080002BA  0C00 0001  507          cmp.b     #1,D0
080002BE  661A       508          bne.s     Timer_ISR_9
                     509   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
080002C0  13FC 0003  510          move.b    #3,4194366
080002C4  0040 003E 
                     511   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
080002C8  1039 0800  512          move.b    _Timer4Count.L,D0
080002CC  1384      
080002CE  5239 0800  513          addq.b    #1,_Timer4Count.L
080002D2  1384      
080002D4  13C0 0040  514          move.b    D0,4194322
080002D8  0012      
                     515   Timer_ISR_9:
080002DA  4E75       516          rts
                     517   ; }
                     518   ; }
                     519   ; /*****************************************************************************************
                     520   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     521   ; **  Add your code here to poll Status register and clear interrupt
                     522   ; *****************************************************************************************/
                     523   ; void ACIA_ISR()
                     524   ; {}
                     525   _ACIA_ISR:
080002DC  4E75       526          rts
                     527   ; /***************************************************************************************
                     528   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     529   ; **  Add your code here to poll Status register and clear interrupt
                     530   ; *****************************************************************************************/
                     531   ; void PIA_ISR()
                     532   ; {}
                     533   _PIA_ISR:
080002DE  4E75       534          rts
                     535   ; /***********************************************************************************
                     536   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     537   ; ************************************************************************************/
                     538   ; void Key2PressISR()
                     539   ; {}
                     540   _Key2PressISR:
080002E0  4E75       541          rts
                     542   ; /***********************************************************************************
                     543   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     544   ; ************************************************************************************/
                     545   ; void Key1PressISR()
                     546   ; {}
                     547   _Key1PressISR:
080002E2  4E75       548          rts
                     549   ; /************************************************************************************
                     550   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     551   ; ************************************************************************************/
                     552   ; void Wait1ms(void)
                     553   ; {
                     554   _Wait1ms:
080002E4  2F02       555          move.l    D2,-(A7)
                     556   ; int  i ;
                     557   ; for(i = 0; i < 1000; i ++)
080002E6  4282       558          clr.l     D2
                     559   Wait1ms_1:
080002E8  0C82 0000  560          cmp.l     #1000,D2
080002EC  03E8      
080002EE  6C04       561          bge.s     Wait1ms_3
080002F0  5282       562          addq.l    #1,D2
080002F2  60F4       563          bra       Wait1ms_1
                     564   Wait1ms_3:
080002F4  241F       565          move.l    (A7)+,D2
080002F6  4E75       566          rts
                     567   ; ;
                     568   ; }
                     569   ; /************************************************************************************
                     570   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     571   ; **************************************************************************************/
                     572   ; void Wait3ms(void)
                     573   ; {
                     574   _Wait3ms:
080002F8  2F02       575          move.l    D2,-(A7)
                     576   ; int i ;
                     577   ; for(i = 0; i < 3; i++)
080002FA  4282       578          clr.l     D2
                     579   Wait3ms_1:
080002FC  0C82 0000  580          cmp.l     #3,D2
08000300  0003      
08000302  6C0A       581          bge.s     Wait3ms_3
                     582   ; Wait1ms() ;
08000304  4EB9 0800  583          jsr       _Wait1ms
08000308  02E4      
0800030A  5282       584          addq.l    #1,D2
0800030C  60EE       585          bra       Wait3ms_1
                     586   Wait3ms_3:
0800030E  241F       587          move.l    (A7)+,D2
08000310  4E75       588          rts
                     589   ; }
                     590   ; /*********************************************************************************************
                     591   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     592   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     593   ; *********************************************************************************************/
                     594   ; void Init_LCD(void)
                     595   ; {
                     596   _Init_LCD:
                     597   ; LCDcommand = 0x0c ;
08000312  13FC 000C  598          move.b    #12,4194336
08000316  0040 0020 
                     599   ; Wait3ms() ;
0800031A  4EB9 0800  600          jsr       _Wait3ms
0800031E  02F8      
                     601   ; LCDcommand = 0x38 ;
08000320  13FC 0038  602          move.b    #56,4194336
08000324  0040 0020 
                     603   ; Wait3ms() ;
08000328  4EB9 0800  604          jsr       _Wait3ms
0800032C  02F8      
0800032E  4E75       605          rts
                     606   ; }
                     607   ; /*********************************************************************************************
                     608   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     609   ; *********************************************************************************************/
                     610   ; void Init_RS232(void)
                     611   ; {
                     612   _Init_RS232:
                     613   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
08000330  13FC 0015  614          move.b    #21,4194368
08000334  0040 0040 
                     615   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
08000338  13FC 0001  616          move.b    #1,4194372
0800033C  0040 0044 
08000340  4E75       617          rts
                     618   ; }
                     619   ; /*********************************************************************************************************
                     620   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     621   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     622   ; **  to allow the board to communicate with HyperTerminal Program
                     623   ; **
                     624   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     625   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     626   ; **  call _putch() also
                     627   ; *********************************************************************************************************/
                     628   ; int _putch( int c)
                     629   ; {
                     630   __putch:
08000342  4E56 0000  631          link      A6,#0
                     632   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     633   _putch_1:
08000346  1039 0040  634          move.b    4194368,D0
0800034A  0040      
0800034C  C03C 0002  635          and.b     #2,D0
08000350  0C00 0002  636          cmp.b     #2,D0
08000354  6702       637          beq.s     _putch_3
08000356  60EE       638          bra       _putch_1
                     639   _putch_3:
                     640   ; ;
                     641   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
08000358  202E 0008  642          move.l    8(A6),D0
0800035C  C0BC 0000  643          and.l     #127,D0
08000360  007F      
08000362  13C0 0040  644          move.b    D0,4194370
08000366  0042      
                     645   ; return c ;                                              // putchar() expects the character to be returned
08000368  202E 0008  646          move.l    8(A6),D0
0800036C  4E5E       647          unlk      A6
0800036E  4E75       648          rts
                     649   ; }
                     650   ; /*********************************************************************************************************
                     651   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     652   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     653   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     654   ; **
                     655   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     656   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     657   ; **  call _getch() also
                     658   ; *********************************************************************************************************/
                     659   ; int _getch( void )
                     660   ; {
                     661   __getch:
08000370  4E56 FFFC  662          link      A6,#-4
                     663   ; char c ;
                     664   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     665   _getch_1:
08000374  1039 0040  666          move.b    4194368,D0
08000378  0040      
0800037A  C03C 0001  667          and.b     #1,D0
0800037E  0C00 0001  668          cmp.b     #1,D0
08000382  6702       669          beq.s     _getch_3
08000384  60EE       670          bra       _getch_1
                     671   _getch_3:
                     672   ; ;
                     673   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
08000386  1039 0040  674          move.b    4194370,D0
0800038A  0042      
0800038C  C0BC 0000  675          and.l     #255,D0
08000390  00FF      
08000392  C0BC 0000  676          and.l     #127,D0
08000396  007F      
08000398  4E5E       677          unlk      A6
0800039A  4E75       678          rts
                     679   ; }
                     680   ; /******************************************************************************
                     681   ; **  Subroutine to output a single character to the 2 row LCD display
                     682   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     683   ; **  current cursor position
                     684   ; *******************************************************************************/
                     685   ; void LCDOutchar(int c)
                     686   ; {
                     687   _LCDOutchar:
0800039C  4E56 0000  688          link      A6,#0
                     689   ; LCDdata = (char)(c);
080003A0  202E 0008  690          move.l    8(A6),D0
080003A4  13C0 0040  691          move.b    D0,4194338
080003A8  0022      
                     692   ; Wait1ms() ;
080003AA  4EB9 0800  693          jsr       _Wait1ms
080003AE  02E4      
080003B0  4E5E       694          unlk      A6
080003B2  4E75       695          rts
                     696   ; }
                     697   ; /**********************************************************************************
                     698   ; *subroutine to output a message at the current cursor position of the LCD display
                     699   ; ************************************************************************************/
                     700   ; void LCDOutMessage(char *theMessage)
                     701   ; {
                     702   _LCDOutMessage:
080003B4  4E56 FFFC  703          link      A6,#-4
                     704   ; char c ;
                     705   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     706   LCDOutMessage_1:
080003B8  206E 0008  707          move.l    8(A6),A0
080003BC  52AE 0008  708          addq.l    #1,8(A6)
080003C0  1D50 FFFF  709          move.b    (A0),-1(A6)
080003C4  1010       710          move.b    (A0),D0
080003C6  6714       711          beq.s     LCDOutMessage_3
                     712   ; LCDOutchar(c) ;
080003C8  122E FFFF  713          move.b    -1(A6),D1
080003CC  4881       714          ext.w     D1
080003CE  48C1       715          ext.l     D1
080003D0  2F01       716          move.l    D1,-(A7)
080003D2  4EB9 0800  717          jsr       _LCDOutchar
080003D6  039C      
080003D8  584F       718          addq.w    #4,A7
080003DA  60DC       719          bra       LCDOutMessage_1
                     720   LCDOutMessage_3:
080003DC  4E5E       721          unlk      A6
080003DE  4E75       722          rts
                     723   ; }
                     724   ; /******************************************************************************
                     725   ; *subroutine to clear the line by issuing 24 space characters
                     726   ; *******************************************************************************/
                     727   ; void LCDClearln(void)
                     728   ; {
                     729   _LCDClearln:
080003E0  2F02       730          move.l    D2,-(A7)
                     731   ; int i ;
                     732   ; for(i = 0; i < 24; i ++)
080003E2  4282       733          clr.l     D2
                     734   LCDClearln_1:
080003E4  0C82 0000  735          cmp.l     #24,D2
080003E8  0018      
080003EA  6C10       736          bge.s     LCDClearln_3
                     737   ; LCDOutchar(' ') ;       // write a space char to the LCD display
080003EC  4878 0020  738          pea       32
080003F0  4EB9 0800  739          jsr       _LCDOutchar
080003F4  039C      
080003F6  584F       740          addq.w    #4,A7
080003F8  5282       741          addq.l    #1,D2
080003FA  60E8       742          bra       LCDClearln_1
                     743   LCDClearln_3:
080003FC  241F       744          move.l    (A7)+,D2
080003FE  4E75       745          rts
                     746   ; }
                     747   ; /******************************************************************************
                     748   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     749   ; *******************************************************************************/
                     750   ; void LCDLine1Message(char *theMessage)
                     751   ; {
                     752   _LCDLine1Message:
08000400  4E56 0000  753          link      A6,#0
                     754   ; LCDcommand = 0x80 ;
08000404  13FC 0080  755          move.b    #128,4194336
08000408  0040 0020 
                     756   ; Wait3ms();
0800040C  4EB9 0800  757          jsr       _Wait3ms
08000410  02F8      
                     758   ; LCDClearln() ;
08000412  4EB9 0800  759          jsr       _LCDClearln
08000416  03E0      
                     760   ; LCDcommand = 0x80 ;
08000418  13FC 0080  761          move.b    #128,4194336
0800041C  0040 0020 
                     762   ; Wait3ms() ;
08000420  4EB9 0800  763          jsr       _Wait3ms
08000424  02F8      
                     764   ; LCDOutMessage(theMessage) ;
08000426  2F2E 0008  765          move.l    8(A6),-(A7)
0800042A  4EB9 0800  766          jsr       _LCDOutMessage
0800042E  03B4      
08000430  584F       767          addq.w    #4,A7
08000432  4E5E       768          unlk      A6
08000434  4E75       769          rts
                     770   ; }
                     771   ; /******************************************************************************
                     772   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     773   ; *******************************************************************************/
                     774   ; void LCDLine2Message(char *theMessage)
                     775   ; {
                     776   _LCDLine2Message:
08000436  4E56 0000  777          link      A6,#0
                     778   ; LCDcommand = 0xC0 ;
0800043A  13FC 00C0  779          move.b    #192,4194336
0800043E  0040 0020 
                     780   ; Wait3ms();
08000442  4EB9 0800  781          jsr       _Wait3ms
08000446  02F8      
                     782   ; LCDClearln() ;
08000448  4EB9 0800  783          jsr       _LCDClearln
0800044C  03E0      
                     784   ; LCDcommand = 0xC0 ;
0800044E  13FC 00C0  785          move.b    #192,4194336
08000452  0040 0020 
                     786   ; Wait3ms() ;
08000456  4EB9 0800  787          jsr       _Wait3ms
0800045A  02F8      
                     788   ; LCDOutMessage(theMessage) ;
0800045C  2F2E 0008  789          move.l    8(A6),-(A7)
08000460  4EB9 0800  790          jsr       _LCDOutMessage
08000464  03B4      
08000466  584F       791          addq.w    #4,A7
08000468  4E5E       792          unlk      A6
0800046A  4E75       793          rts
                     794   ; }
                     795   ; /*********************************************************************************************************************************
                     796   ; **  IMPORTANT FUNCTION
                     797   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                     798   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                     799   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                     800   ; **  Calling this function allows you to deal with Interrupts for example
                     801   ; ***********************************************************************************************************************************/
                     802   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     803   ; {
                     804   _InstallExceptionHandler:
0800046C  4E56 FFFC  805          link      A6,#-4
                     806   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
08000470  2D7C 0B00  807          move.l    #184549376,-4(A6)
08000474  0000 FFFC 
                     808   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
08000478  206E FFFC  809          move.l    -4(A6),A0
0800047C  202E 000C  810          move.l    12(A6),D0
08000480  E588       811          lsl.l     #2,D0
08000482  21AE 0008  812          move.l    8(A6),0(A0,D0.L)
08000486  0800      
08000488  4E5E       813          unlk      A6
0800048A  4E75       814          rts
                     815   ; }
                     816   ; /******************************************************************************************
                     817   ; ** The following code is for the SPI controller
                     818   ; *******************************************************************************************/
                     819   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                     820   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                     821   ; int TestForSPITransmitDataComplete(void)    {
                     822   _TestForSPITransmitDataComplete:
                     823   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                     824   ; return (SPI_Status>>7);
0800048C  1039 0040  825          move.b    4227106,D0
08000490  8022      
08000492  C0BC 0000  826          and.l     #255,D0
08000496  00FF      
08000498  EE88       827          lsr.l     #7,D0
0800049A  4E75       828          rts
                     829   ; }
                     830   ; /************************************************************************************
                     831   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                     832   ; ************************************************************************************/
                     833   ; void SPI_Init(void)
                     834   ; {
                     835   _SPI_Init:
                     836   ; //TODO
                     837   ; //
                     838   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                     839   ; // Don't forget to call this routine from main() before you do anything else with SPI
                     840   ; //
                     841   ; // Here are some settings we want to create
                     842   ; //
                     843   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                     844   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                     845   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                     846   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                     847   ; // ControlRegister_t tempControl; 
                     848   ; // memset(&SPI_Control, 0, sizeof(unsigned char)); 
                     849   ; // memset(&tempControl, 0, sizeof(ControlRegister_t));
                     850   ; // tempControl.SPIE = 0; 
                     851   ; // tempControl.SPE = 1; 
                     852   ; // tempControl.MSTR = 1; 
                     853   ; // tempControl.CPOL = 0;
                     854   ; // tempControl.CPHA = 0; 
                     855   ; // tempControl.SPR = 3; 
                     856   ; // SPI_Control = (volatile unsigned char)tempControl; 
                     857   ; // SPI_Control = (unsigned char)0b01010011; 
                     858   ; SPI_Control = (unsigned char)0x53;
0800049C  13FC 0053  859          move.b    #83,4227104
080004A0  0040 8020 
                     860   ; SPI_Ext = (unsigned char)0x00; 
080004A4  4239 0040  861          clr.b     4227110
080004A8  8026      
                     862   ; Disable_SPI_CS(); 
080004AA  13FC 00FF  863          move.b    #255,4227112
080004AE  0040 8028 
080004B2  4E75       864          rts
                     865   ; }
                     866   ; /************************************************************************************
                     867   ; ** return ONLY when the SPI controller has finished transmitting a byte
                     868   ; ************************************************************************************/
                     869   ; void WaitForSPITransmitComplete(void)
                     870   ; {
                     871   _WaitForSPITransmitComplete:
                     872   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                     873   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                     874   ; // just in case they were set
                     875   ; // while ((SPI_Status>>7)==0);
                     876   ; while (1) {
                     877   WaitForSPITransmitComplete_1:
                     878   ; if (SPI_Status & (unsigned char)0x80) {
080004B4  1039 0040  879          move.b    4227106,D0
080004B8  8022      
080004BA  C03C 0080  880          and.b     #128,D0
080004BE  6702       881          beq.s     WaitForSPITransmitComplete_4
                     882   ; break;
080004C0  6002       883          bra.s     WaitForSPITransmitComplete_3
                     884   WaitForSPITransmitComplete_4:
080004C2  60F0       885          bra       WaitForSPITransmitComplete_1
                     886   WaitForSPITransmitComplete_3:
                     887   ; }
                     888   ; }
                     889   ; // SPI_Status &= 0x3F; // And with 00111111 to clear top two bits
                     890   ; SPI_Status = (unsigned char)0xC0;  
080004C4  13FC 00C0  891          move.b    #192,4227106
080004C8  0040 8022 
080004CC  4E75       892          rts
                     893   ; }
                     894   ; /************************************************************************************
                     895   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                     896   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                     897   ; ************************************************************************************/
                     898   ; int WriteSPIChar(int c)
                     899   ; {
                     900   _WriteSPIChar:
080004CE  4E56 FFFC  901          link      A6,#-4
                     902   ; // todo - write the byte in parameter 'c' to the SPI data register, this will start it transmitting to the flash device
                     903   ; // wait for completion of transmission
                     904   ; // return the received data from Flash chip (which may not be relevent depending upon what we are doing)
                     905   ; // by reading fom the SPI controller Data Register.
                     906   ; // note however that in order to get data from an SPI slave device (e.g. flash) chip we have to write a dummy byte to it
                     907   ; //
                     908   ; // modify '0' below to return back read byte from data register
                     909   ; //
                     910   ; unsigned char temp;
                     911   ; // Load data register
                     912   ; SPI_Data = (unsigned char)c; 
080004D2  202E 0008  913          move.l    8(A6),D0
080004D6  13C0 0040  914          move.b    D0,4227108
080004DA  8024      
                     915   ; // Poll for completion 
                     916   ; WaitForSPITransmitComplete(); 
080004DC  4EB9 0800  917          jsr       _WaitForSPITransmitComplete
080004E0  04B4      
                     918   ; temp = SPI_Data;
080004E2  1D79 0040  919          move.b    4227108,-1(A6)
080004E6  8024 FFFF 
                     920   ; // printf("\r\nRead: %x", temp);
                     921   ; // Read data register
                     922   ; return (int)temp;  
080004EA  102E FFFF  923          move.b    -1(A6),D0
080004EE  C0BC 0000  924          and.l     #255,D0
080004F2  00FF      
080004F4  4E5E       925          unlk      A6
080004F6  4E75       926          rts
                     927   ; }
                     928   ; void ChipErase() {
                     929   _ChipErase:
080004F8  2F0A       930          move.l    A2,-(A7)
080004FA  45F9 0800  931          lea       _WriteSPIChar.L,A2
080004FE  04CE      
                     932   ; // wren
                     933   ; Enable_SPI_CS();
08000500  13FC 00FE  934          move.b    #254,4227112
08000504  0040 8028 
                     935   ; WriteSPIChar(0x06);
08000508  4878 0006  936          pea       6
0800050C  4E92       937          jsr       (A2)
0800050E  584F       938          addq.w    #4,A7
                     939   ; Disable_SPI_CS(); 
08000510  13FC 00FF  940          move.b    #255,4227112
08000514  0040 8028 
                     941   ; //chip erase
                     942   ; Enable_SPI_CS();
08000518  13FC 00FE  943          move.b    #254,4227112
0800051C  0040 8028 
                     944   ; WriteSPIChar(0x60);
08000520  4878 0060  945          pea       96
08000524  4E92       946          jsr       (A2)
08000526  584F       947          addq.w    #4,A7
                     948   ; Disable_SPI_CS(); 
08000528  13FC 00FF  949          move.b    #255,4227112
0800052C  0040 8028 
                     950   ; //wait for WIP
                     951   ; Enable_SPI_CS();
08000530  13FC 00FE  952          move.b    #254,4227112
08000534  0040 8028 
                     953   ; WriteSPIChar(0x05);
08000538  4878 0005  954          pea       5
0800053C  4E92       955          jsr       (A2)
0800053E  584F       956          addq.w    #4,A7
                     957   ; while((WriteSPIChar(0x55)&0x01) == 1);
                     958   ChipErase_1:
08000540  4878 0055  959          pea       85
08000544  4E92       960          jsr       (A2)
08000546  584F       961          addq.w    #4,A7
08000548  C0BC 0000  962          and.l     #1,D0
0800054C  0001      
0800054E  0C80 0000  963          cmp.l     #1,D0
08000552  0001      
08000554  6602       964          bne.s     ChipErase_3
08000556  60E8       965          bra       ChipErase_1
                     966   ChipErase_3:
                     967   ; Disable_SPI_CS();
08000558  13FC 00FF  968          move.b    #255,4227112
0800055C  0040 8028 
08000560  245F       969          move.l    (A7)+,A2
08000562  4E75       970          rts
                     971   ; }
                     972   ; void WriteData(int startAddress, unsigned char *dataArray, int numBytes) {
                     973   _WriteData:
08000564  4E56 0000  974          link      A6,#0
08000568  48E7 3020  975          movem.l   D2/D3/A2,-(A7)
0800056C  45F9 0800  976          lea       _WriteSPIChar.L,A2
08000570  04CE      
08000572  262E 0008  977          move.l    8(A6),D3
                     978   ; int i = 0;
08000576  4282       979          clr.l     D2
                     980   ; // wren command
                     981   ; Enable_SPI_CS();
08000578  13FC 00FE  982          move.b    #254,4227112
0800057C  0040 8028 
                     983   ; WriteSPIChar(0x06);
08000580  4878 0006  984          pea       6
08000584  4E92       985          jsr       (A2)
08000586  584F       986          addq.w    #4,A7
                     987   ; Disable_SPI_CS(); 
08000588  13FC 00FF  988          move.b    #255,4227112
0800058C  0040 8028 
                     989   ; // write command
                     990   ; Enable_SPI_CS();
08000590  13FC 00FE  991          move.b    #254,4227112
08000594  0040 8028 
                     992   ; WriteSPIChar(0x02); //page program command
08000598  4878 0002  993          pea       2
0800059C  4E92       994          jsr       (A2)
0800059E  584F       995          addq.w    #4,A7
                     996   ; WriteSPIChar(startAddress>>16); //addres high
080005A0  2203       997          move.l    D3,D1
080005A2  E081       998          asr.l     #8,D1
080005A4  E081       999          asr.l     #8,D1
080005A6  2F01      1000          move.l    D1,-(A7)
080005A8  4E92      1001          jsr       (A2)
080005AA  584F      1002          addq.w    #4,A7
                    1003   ; WriteSPIChar(startAddress>>8); // address middle
080005AC  2203      1004          move.l    D3,D1
080005AE  E081      1005          asr.l     #8,D1
080005B0  2F01      1006          move.l    D1,-(A7)
080005B2  4E92      1007          jsr       (A2)
080005B4  584F      1008          addq.w    #4,A7
                    1009   ; WriteSPIChar(startAddress); //address low
080005B6  2F03      1010          move.l    D3,-(A7)
080005B8  4E92      1011          jsr       (A2)
080005BA  584F      1012          addq.w    #4,A7
                    1013   ; //stream data
                    1014   ; for (i; i < numBytes; i++) {
                    1015   WriteData_1:
080005BC  B4AE 0010 1016          cmp.l     16(A6),D2
080005C0  6C18      1017          bge.s     WriteData_3
                    1018   ; WriteSPIChar((int)dataArray[i]);
080005C2  206E 000C 1019          move.l    12(A6),A0
080005C6  1230 2800 1020          move.b    0(A0,D2.L),D1
080005CA  C2BC 0000 1021          and.l     #255,D1
080005CE  00FF      
080005D0  2F01      1022          move.l    D1,-(A7)
080005D2  4E92      1023          jsr       (A2)
080005D4  584F      1024          addq.w    #4,A7
080005D6  5282      1025          addq.l    #1,D2
080005D8  60E2      1026          bra       WriteData_1
                    1027   WriteData_3:
                    1028   ; }
                    1029   ; Disable_SPI_CS();
080005DA  13FC 00FF 1030          move.b    #255,4227112
080005DE  0040 8028 
                    1031   ; //wait for internal writing    
                    1032   ; Enable_SPI_CS();
080005E2  13FC 00FE 1033          move.b    #254,4227112
080005E6  0040 8028 
                    1034   ; WriteSPIChar(0x05);
080005EA  4878 0005 1035          pea       5
080005EE  4E92      1036          jsr       (A2)
080005F0  584F      1037          addq.w    #4,A7
                    1038   ; while((WriteSPIChar(0x55)&0x01) == 1);
                    1039   WriteData_4:
080005F2  4878 0055 1040          pea       85
080005F6  4E92      1041          jsr       (A2)
080005F8  584F      1042          addq.w    #4,A7
080005FA  C0BC 0000 1043          and.l     #1,D0
080005FE  0001      
08000600  0C80 0000 1044          cmp.l     #1,D0
08000604  0001      
08000606  6602      1045          bne.s     WriteData_6
08000608  60E8      1046          bra       WriteData_4
                    1047   WriteData_6:
                    1048   ; Disable_SPI_CS();
0800060A  13FC 00FF 1049          move.b    #255,4227112
0800060E  0040 8028 
08000612  4CDF 040C 1050          movem.l   (A7)+,D2/D3/A2
08000616  4E5E      1051          unlk      A6
08000618  4E75      1052          rts
                    1053   ; }
                    1054   ; void ReadData(int startAddress, int numBytes, unsigned char *data) {
                    1055   _ReadData:
0800061A  4E56 0000 1056          link      A6,#0
0800061E  48E7 3020 1057          movem.l   D2/D3/A2,-(A7)
08000622  45F9 0800 1058          lea       _WriteSPIChar.L,A2
08000626  04CE      
08000628  262E 0008 1059          move.l    8(A6),D3
                    1060   ; int i = 0;
0800062C  4282      1061          clr.l     D2
                    1062   ; Enable_SPI_CS();
0800062E  13FC 00FE 1063          move.b    #254,4227112
08000632  0040 8028 
                    1064   ; WriteSPIChar(0x03); //read command
08000636  4878 0003 1065          pea       3
0800063A  4E92      1066          jsr       (A2)
0800063C  584F      1067          addq.w    #4,A7
                    1068   ; WriteSPIChar(startAddress>>16); //addres high
0800063E  2203      1069          move.l    D3,D1
08000640  E081      1070          asr.l     #8,D1
08000642  E081      1071          asr.l     #8,D1
08000644  2F01      1072          move.l    D1,-(A7)
08000646  4E92      1073          jsr       (A2)
08000648  584F      1074          addq.w    #4,A7
                    1075   ; WriteSPIChar(startAddress>>8); // address middle
0800064A  2203      1076          move.l    D3,D1
0800064C  E081      1077          asr.l     #8,D1
0800064E  2F01      1078          move.l    D1,-(A7)
08000650  4E92      1079          jsr       (A2)
08000652  584F      1080          addq.w    #4,A7
                    1081   ; WriteSPIChar(startAddress); //address low
08000654  2F03      1082          move.l    D3,-(A7)
08000656  4E92      1083          jsr       (A2)
08000658  584F      1084          addq.w    #4,A7
                    1085   ; //stream data
                    1086   ; for (i; i < numBytes; i++) {
                    1087   ReadData_1:
0800065A  B4AE 000C 1088          cmp.l     12(A6),D2
0800065E  6C14      1089          bge.s     ReadData_3
                    1090   ; data[i] = (unsigned char)WriteSPIChar(0x55); //dummy byte
08000660  4878 0055 1091          pea       85
08000664  4E92      1092          jsr       (A2)
08000666  584F      1093          addq.w    #4,A7
08000668  206E 0010 1094          move.l    16(A6),A0
0800066C  1180 2800 1095          move.b    D0,0(A0,D2.L)
08000670  5282      1096          addq.l    #1,D2
08000672  60E6      1097          bra       ReadData_1
                    1098   ReadData_3:
                    1099   ; }
                    1100   ; Disable_SPI_CS();
08000674  13FC 00FF 1101          move.b    #255,4227112
08000678  0040 8028 
0800067C  4CDF 040C 1102          movem.l   (A7)+,D2/D3/A2
08000680  4E5E      1103          unlk      A6
08000682  4E75      1104          rts
                    1105   ; }
                    1106   ; void startTimer(void) {
                    1107   _startTimer:
                    1108   ; counter = 0;
08000684  42B9 0800 1109          clr.l     _counter.L
08000688  1386      
                    1110   ; rollovers = 0;
0800068A  42B9 0800 1111          clr.l     _rollovers.L
0800068E  138A      
08000690  4E75      1112          rts
                    1113   ; }
                    1114   ; unsigned long int endTimer(void) {
                    1115   _endTimer:
                    1116   ; return counter + (rollovers * sizeof(counter) * 256);
08000692  2039 0800 1117          move.l    _counter.L,D0
08000696  1386      
08000698  2F39 0800 1118          move.l    _rollovers.L,-(A7)
0800069C  138A      
0800069E  4878 0004 1119          pea       4
080006A2  4EB9 0800 1120          jsr       ULMUL
080006A6  0762      
080006A8  2217      1121          move.l    (A7),D1
080006AA  504F      1122          addq.w    #8,A7
080006AC  2F01      1123          move.l    D1,-(A7)
080006AE  4878 0100 1124          pea       256
080006B2  4EB9 0800 1125          jsr       ULMUL
080006B6  0762      
080006B8  2217      1126          move.l    (A7),D1
080006BA  504F      1127          addq.w    #8,A7
080006BC  D081      1128          add.l     D1,D0
080006BE  4E75      1129          rts
                    1130   ; }
                    1131   ; /******************************************************************************************************************************
                    1132   ; * Start of user program
                    1133   ; ******************************************************************************************************************************/
                    1134   ; void main()
                    1135   ; {
                    1136   _main:
080006C0  4E56 FFFC 1137          link      A6,#-4
080006C4  2F0A      1138          move.l    A2,-(A7)
080006C6  45F9 0800 1139          lea       _printf.L,A2
080006CA  0732      
                    1140   ; unsigned char temp;
                    1141   ; printf("\r\nInitializing IIC Controller");
080006CC  4879 0800 1142          pea       @m68kus~1_1.L
080006D0  11D0      
080006D2  4E92      1143          jsr       (A2)
080006D4  584F      1144          addq.w    #4,A7
                    1145   ; Init_IIC();
080006D6  4EB9 0800 1146          jsr       _Init_IIC
080006DA  0084      
                    1147   ; printf("\r\nDone initialization, sending a byte...");
080006DC  4879 0800 1148          pea       @m68kus~1_2.L
080006E0  11EE      
080006E2  4E92      1149          jsr       (A2)
080006E4  584F      1150          addq.w    #4,A7
                    1151   ; WriteByte(0xA6, 0x42, (unsigned int)0x55);
080006E6  4878 0055 1152          pea       85
080006EA  4878 0042 1153          pea       66
080006EE  4878 00A6 1154          pea       166
080006F2  4EB9 0800 1155          jsr       _WriteByte
080006F6  00AA      
080006F8  DEFC 000C 1156          add.w     #12,A7
                    1157   ; printf("\r\nDone writing!");
080006FC  4879 0800 1158          pea       @m68kus~1_3.L
08000700  1218      
08000702  4E92      1159          jsr       (A2)
08000704  584F      1160          addq.w    #4,A7
                    1161   ; temp = ReadByte(0xA6, (unsigned int)0x55);
08000706  4878 0055 1162          pea       85
0800070A  4878 00A6 1163          pea       166
0800070E  4EB9 0800 1164          jsr       _ReadByte
08000712  013A      
08000714  504F      1165          addq.w    #8,A7
08000716  1D40 FFFF 1166          move.b    D0,-1(A6)
                    1167   ; printf("\r\nRead back %x!", temp);
0800071A  122E FFFF 1168          move.b    -1(A6),D1
0800071E  C2BC 0000 1169          and.l     #255,D1
08000722  00FF      
08000724  2F01      1170          move.l    D1,-(A7)
08000726  4879 0800 1171          pea       @m68kus~1_4.L
0800072A  1228      
0800072C  4E92      1172          jsr       (A2)
0800072E  504F      1173          addq.w    #8,A7
                    1174   ; while(1);
                    1175   main_1:
08000730  60FE      1176          bra       main_1
                    1177   ; }
                    1178   _printf:
08000732  4E56 FFFC 1179          link      A6,#-4
08000736  2F02      1180          move.l    D2,-(A7)
08000738  41EE 0008 1181          lea       8(A6),A0
0800073C  5848      1182          addq.w    #4,A0
0800073E  2408      1183          move.l    A0,D2
08000740  2F02      1184          move.l    D2,-(A7)
08000742  2F2E 0008 1185          move.l    8(A6),-(A7)
08000746  42A7      1186          clr.l     -(A7)
08000748  4EB9 0800 1187          jsr       _doprint
0800074C  08AA      
0800074E  DEFC 000C 1188          add.w     #12,A7
08000752  2D40 FFFC 1189          move.l    D0,-4(A6)
08000756  4282      1190          clr.l     D2
08000758  202E FFFC 1191          move.l    -4(A6),D0
0800075C  241F      1192          move.l    (A7)+,D2
0800075E  4E5E      1193          unlk      A6
08000760  4E75      1194          rts
                    1195   ULMUL:
08000762  4E56 0000 1196          link    A6,#0
08000766  48E7 C000 1197          movem.l D0/D1,-(A7)
0800076A  222E 0008 1198          move.l  8(A6),D1
0800076E  202E 000C 1199          move.l  12(A6),D0
08000772  602C      1200          bra.s   lmul_3
                    1201   LMUL:
08000774  4E56 0000 1202          link    A6,#0
08000778  48E7 C000 1203          movem.l D0/D1,-(A7)
0800077C  222E 0008 1204          move.l  8(A6),D1
08000780  202E 000C 1205          move.l  12(A6),D0
08000784  4A80      1206          tst.l   D0
08000786  6A0A      1207          bpl.s   lmul_1
08000788  4480      1208          neg.l   D0
0800078A  4A81      1209          tst.l   D1
0800078C  6A0A      1210          bpl.s   lmul_2
0800078E  4481      1211          neg.l   D1
08000790  600E      1212          bra.s   lmul_3
                    1213   lmul_1:
08000792  4A81      1214          tst.l   D1
08000794  6A0A      1215          bpl.s   lmul_3
08000796  4481      1216          neg.l   D1
                    1217   lmul_2:
08000798  6114      1218          bsr.s   domul
0800079A  4481      1219          neg.l   D1
0800079C  4080      1220          negx.l  D0
0800079E  6002      1221          bra.s   lmul_4
                    1222   lmul_3:
080007A0  610C      1223          bsr.s   domul
                    1224   lmul_4:
080007A2  2D41 0008 1225          move.l  D1,8(A6)
080007A6  4CDF 0003 1226          movem.l (A7)+,D0/D1
080007AA  4E5E      1227          unlk    A6
080007AC  4E75      1228          rts
                    1229   domul:
080007AE  0C81 0000 1230          cmpi.l  #$FFFF,D1
080007B2  FFFF      
080007B4  620C      1231          bhi.s   domul_1
080007B6  0C80 0000 1232          cmpi.l  #$FFFF,D0
080007BA  FFFF      
080007BC  620E      1233          bhi.s   domul_2
080007BE  C2C0      1234          mulu    D0,D1
080007C0  4E75      1235          rts
                    1236   domul_1:
080007C2  0C80 0000 1237          cmpi.l  #$FFFF,D0
080007C6  FFFF      
080007C8  6218      1238          bhi.s   domul_4
080007CA  6002      1239          bra.s   domul_3
                    1240   domul_2
080007CC  C141      1241          exg     D0,D1
                    1242   domul_3:
080007CE  2F02      1243          move.l  D2,-(A7)
080007D0  2401      1244          move.l  D1,D2
080007D2  4842      1245          swap    D2
080007D4  C2C0      1246          mulu    D0,D1
080007D6  C4C0      1247          mulu    D0,D2
080007D8  4842      1248          swap    D2
080007DA  4242      1249          clr.w   D2
080007DC  D282      1250          add.l   D2,D1
080007DE  241F      1251          move.l  (A7)+,D2
080007E0  4E75      1252          rts
                    1253   domul_4:
080007E2  48E7 3000 1254          movem.l D2/D3,-(A7)
080007E6  2401      1255          move.l  D1,D2
080007E8  2601      1256          move.l  D1,D3
080007EA  C2C0      1257          mulu    D0,D1
080007EC  4842      1258          swap    D2
080007EE  C4C0      1259          mulu    D0,D2
080007F0  4840      1260          swap    D0
080007F2  C6C0      1261          mulu    D0,D3
080007F4  D483      1262          add.l   D3,D2
080007F6  4842      1263          swap    D2
080007F8  4242      1264          clr.w   D2
080007FA  D282      1265          add.l   D2,D1
080007FC  4CDF 000C 1266          movem.l (A7)+,D2/D3
08000800  4E75      1267          rts
                    1268   @doprint_copy:
08000802  4E56 0000 1269          link      A6,#0
08000806  206E 0008 1270          move.l    8(A6),A0
0800080A  4A90      1271          tst.l     (A0)
0800080C  6710      1272          beq.s     @doprint_copy_1
0800080E  202E 000C 1273          move.l    12(A6),D0
08000812  206E 0008 1274          move.l    8(A6),A0
08000816  2250      1275          move.l    (A0),A1
08000818  5290      1276          addq.l    #1,(A0)
0800081A  1280      1277          move.b    D0,(A1)
0800081C  600C      1278          bra.s     @doprint_copy_2
                    1279   @doprint_copy_1:
0800081E  2F2E 000C 1280          move.l    12(A6),-(A7)
08000822  4EB9 0800 1281          jsr       _putch
08000826  105C      
08000828  584F      1282          addq.w    #4,A7
                    1283   @doprint_copy_2:
0800082A  4E5E      1284          unlk      A6
0800082C  4E75      1285          rts
                    1286   @doprint_getval:
0800082E  4E56 0000 1287          link      A6,#0
08000832  48E7 3000 1288          movem.l   D2/D3,-(A7)
08000836  262E 0008 1289          move.l    8(A6),D3
0800083A  4282      1290          clr.l     D2
0800083C  2043      1291          move.l    D3,A0
0800083E  2050      1292          move.l    (A0),A0
08000840  1010      1293          move.b    (A0),D0
08000842  0C00 002A 1294          cmp.b     #42,D0
08000846  6612      1295          bne.s     @doprint_getval_1
08000848  206E 000C 1296          move.l    12(A6),A0
0800084C  2250      1297          move.l    (A0),A1
0800084E  5890      1298          addq.l    #4,(A0)
08000850  2411      1299          move.l    (A1),D2
08000852  2043      1300          move.l    D3,A0
08000854  5290      1301          addq.l    #1,(A0)
08000856  6000 0048 1302          bra       @doprint_getval_5
                    1303   @doprint_getval_1:
0800085A  7001      1304          moveq     #1,D0
0800085C  2043      1305          move.l    D3,A0
0800085E  2050      1306          move.l    (A0),A0
08000860  1210      1307          move.b    (A0),D1
08000862  4881      1308          ext.w     D1
08000864  48C1      1309          ext.l     D1
08000866  D081      1310          add.l     D1,D0
08000868  41F9 0800 1311          lea       __ctype.L,A0
0800086C  1244      
0800086E  1030 0800 1312          move.b    0(A0,D0.L),D0
08000872  C03C 0004 1313          and.b     #4,D0
08000876  6728      1314          beq.s     @doprint_getval_5
08000878  2F02      1315          move.l    D2,-(A7)
0800087A  4878 000A 1316          pea       10
0800087E  4EB9 0800 1317          jsr       LMUL
08000882  0774      
08000884  2017      1318          move.l    (A7),D0
08000886  504F      1319          addq.w    #8,A7
08000888  2043      1320          move.l    D3,A0
0800088A  2250      1321          move.l    (A0),A1
0800088C  5290      1322          addq.l    #1,(A0)
0800088E  1211      1323          move.b    (A1),D1
08000890  4881      1324          ext.w     D1
08000892  48C1      1325          ext.l     D1
08000894  D081      1326          add.l     D1,D0
08000896  0480 0000 1327          sub.l     #48,D0
0800089A  0030      
0800089C  2400      1328          move.l    D0,D2
0800089E  60BA      1329          bra       @doprint_getval_1
                    1330   @doprint_getval_5:
080008A0  2002      1331          move.l    D2,D0
080008A2  4CDF 000C 1332          movem.l   (A7)+,D2/D3
080008A6  4E5E      1333          unlk      A6
080008A8  4E75      1334          rts
                    1335   _doprint:
080008AA  4E56 FFCC 1336          link      A6,#-52
080008AE  48E7 3F3C 1337          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
080008B2  45EE 0008 1338          lea       8(A6),A2
080008B6  47F9 0800 1339          lea       @doprint_copy.L,A3
080008BA  0802      
080008BC  49F9 0800 1340          lea       _ultoa.L,A4
080008C0  0FE4      
080008C2  4286      1341          clr.l     D6
                    1342   doprint_1:
080008C4  206E 000C 1343          move.l    12(A6),A0
080008C8  4A10      1344          tst.b     (A0)
080008CA  6700 05F0 1345          beq       doprint_3
080008CE  206E 000C 1346          move.l    12(A6),A0
080008D2  1010      1347          move.b    (A0),D0
080008D4  0C00 0025 1348          cmp.b     #37,D0
080008D8  671C      1349          beq.s     doprint_4
080008DA  206E 000C 1350          move.l    12(A6),A0
080008DE  52AE 000C 1351          addq.l    #1,12(A6)
080008E2  1210      1352          move.b    (A0),D1
080008E4  4881      1353          ext.w     D1
080008E6  48C1      1354          ext.l     D1
080008E8  2F01      1355          move.l    D1,-(A7)
080008EA  2F0A      1356          move.l    A2,-(A7)
080008EC  4E93      1357          jsr       (A3)
080008EE  504F      1358          addq.w    #8,A7
080008F0  5286      1359          addq.l    #1,D6
080008F2  6000 05C4 1360          bra       doprint_2
                    1361   doprint_4:
080008F6  52AE 000C 1362          addq.l    #1,12(A6)
080008FA  422E FFD3 1363          clr.b     -45(A6)
080008FE  422E FFD2 1364          clr.b     -46(A6)
08000902  422E FFD0 1365          clr.b     -48(A6)
08000906  422E FFCF 1366          clr.b     -49(A6)
0800090A  422E FFCE 1367          clr.b     -50(A6)
0800090E  422E FFCD 1368          clr.b     -51(A6)
08000912  42AE FFFC 1369          clr.l     -4(A6)
08000916  7AFF      1370          moveq     #-1,D5
08000918  41EE FFDC 1371          lea       -36(A6),A0
0800091C  2608      1372          move.l    A0,D3
0800091E  2408      1373          move.l    A0,D2
                    1374   doprint_6:
08000920  206E 000C 1375          move.l    12(A6),A0
08000924  1010      1376          move.b    (A0),D0
08000926  4880      1377          ext.w     D0
08000928  48C0      1378          ext.l     D0
0800092A  0C80 0000 1379          cmp.l     #43,D0
0800092E  002B      
08000930  6730      1380          beq.s     doprint_12
08000932  6E18      1381          bgt.s     doprint_15
08000934  0C80 0000 1382          cmp.l     #35,D0
08000938  0023      
0800093A  6700 003E 1383          beq       doprint_14
0800093E  6E00 0046 1384          bgt       doprint_9
08000942  0C80 0000 1385          cmp.l     #32,D0
08000946  0020      
08000948  6724      1386          beq.s     doprint_13
0800094A  603A      1387          bra.s     doprint_9
                    1388   doprint_15:
0800094C  0C80 0000 1389          cmp.l     #45,D0
08000950  002D      
08000952  6702      1390          beq.s     doprint_11
08000954  6030      1391          bra.s     doprint_9
                    1392   doprint_11:
08000956  1D7C 0001 1393          move.b    #1,-51(A6)
0800095A  FFCD      
0800095C  52AE 000C 1394          addq.l    #1,12(A6)
08000960  6026      1395          bra.s     doprint_7
                    1396   doprint_12:
08000962  1D7C 0001 1397          move.b    #1,-50(A6)
08000966  FFCE      
08000968  52AE 000C 1398          addq.l    #1,12(A6)
0800096C  601A      1399          bra.s     doprint_7
                    1400   doprint_13:
0800096E  1D7C 0001 1401          move.b    #1,-49(A6)
08000972  FFCF      
08000974  52AE 000C 1402          addq.l    #1,12(A6)
08000978  600E      1403          bra.s     doprint_7
                    1404   doprint_14:
0800097A  1D7C 0001 1405          move.b    #1,-48(A6)
0800097E  FFD0      
08000980  52AE 000C 1406          addq.l    #1,12(A6)
08000984  6002      1407          bra.s     doprint_7
                    1408   doprint_9:
08000986  6002      1409          bra.s     doprint_8
                    1410   doprint_7:
08000988  6096      1411          bra       doprint_6
                    1412   doprint_8:
0800098A  206E 000C 1413          move.l    12(A6),A0
0800098E  1010      1414          move.b    (A0),D0
08000990  0C00 0030 1415          cmp.b     #48,D0
08000994  660A      1416          bne.s     doprint_16
08000996  52AE 000C 1417          addq.l    #1,12(A6)
0800099A  1D7C 0001 1418          move.b    #1,-46(A6)
0800099E  FFD2      
                    1419   doprint_16:
080009A0  486E 0010 1420          pea       16(A6)
080009A4  486E 000C 1421          pea       12(A6)
080009A8  4EB9 0800 1422          jsr       @doprint_getval
080009AC  082E      
080009AE  504F      1423          addq.w    #8,A7
080009B0  2A40      1424          move.l    D0,A5
080009B2  206E 000C 1425          move.l    12(A6),A0
080009B6  1010      1426          move.b    (A0),D0
080009B8  0C00 002E 1427          cmp.b     #46,D0
080009BC  6616      1428          bne.s     doprint_18
080009BE  52AE 000C 1429          addq.l    #1,12(A6)
080009C2  486E 0010 1430          pea       16(A6)
080009C6  486E 000C 1431          pea       12(A6)
080009CA  4EB9 0800 1432          jsr       @doprint_getval
080009CE  082E      
080009D0  504F      1433          addq.w    #8,A7
080009D2  2A00      1434          move.l    D0,D5
                    1435   doprint_18:
080009D4  206E 000C 1436          move.l    12(A6),A0
080009D8  1010      1437          move.b    (A0),D0
080009DA  0C00 006C 1438          cmp.b     #108,D0
080009DE  660A      1439          bne.s     doprint_20
080009E0  52AE 000C 1440          addq.l    #1,12(A6)
080009E4  1D7C 0001 1441          move.b    #1,-45(A6)
080009E8  FFD3      
                    1442   doprint_20:
080009EA  206E 000C 1443          move.l    12(A6),A0
080009EE  1010      1444          move.b    (A0),D0
080009F0  4880      1445          ext.w     D0
080009F2  48C0      1446          ext.l     D0
080009F4  0C80 0000 1447          cmp.l     #111,D0
080009F8  006F      
080009FA  6700 00D8 1448          beq       doprint_27
080009FE  6E34      1449          bgt.s     doprint_33
08000A00  0C80 0000 1450          cmp.l     #100,D0
08000A04  0064      
08000A06  6700 0054 1451          beq       doprint_24
08000A0A  6E1C      1452          bgt.s     doprint_34
08000A0C  0C80 0000 1453          cmp.l     #99,D0
08000A10  0063      
08000A12  6700 0130 1454          beq       doprint_30
08000A16  6E00 0174 1455          bgt       doprint_22
08000A1A  0C80 0000 1456          cmp.l     #88,D0
08000A1E  0058      
08000A20  6700 00EA 1457          beq       doprint_28
08000A24  6000 0166 1458          bra       doprint_22
                    1459   doprint_34:
08000A28  0C80 0000 1460          cmp.l     #105,D0
08000A2C  0069      
08000A2E  672C      1461          beq.s     doprint_24
08000A30  6000 015A 1462          bra       doprint_22
                    1463   doprint_33:
08000A34  0C80 0000 1464          cmp.l     #117,D0
08000A38  0075      
08000A3A  6700 0060 1465          beq       doprint_26
08000A3E  6E0E      1466          bgt.s     doprint_35
08000A40  0C80 0000 1467          cmp.l     #115,D0
08000A44  0073      
08000A46  6700 0124 1468          beq       doprint_31
08000A4A  6000 0140 1469          bra       doprint_22
                    1470   doprint_35:
08000A4E  0C80 0000 1471          cmp.l     #120,D0
08000A52  0078      
08000A54  6700 00B6 1472          beq       doprint_28
08000A58  6000 0132 1473          bra       doprint_22
                    1474   doprint_24:
08000A5C  4A2E FFD3 1475          tst.b     -45(A6)
08000A60  671C      1476          beq.s     doprint_36
08000A62  4878 000A 1477          pea       10
08000A66  2F03      1478          move.l    D3,-(A7)
08000A68  206E 0010 1479          move.l    16(A6),A0
08000A6C  58AE 0010 1480          addq.l    #4,16(A6)
08000A70  2F10      1481          move.l    (A0),-(A7)
08000A72  4EB9 0800 1482          jsr       _ltoa
08000A76  0F5C      
08000A78  DEFC 000C 1483          add.w     #12,A7
08000A7C  601A      1484          bra.s     doprint_37
                    1485   doprint_36:
08000A7E  4878 000A 1486          pea       10
08000A82  2F03      1487          move.l    D3,-(A7)
08000A84  206E 0010 1488          move.l    16(A6),A0
08000A88  58AE 0010 1489          addq.l    #4,16(A6)
08000A8C  2F10      1490          move.l    (A0),-(A7)
08000A8E  4EB9 0800 1491          jsr       _ltoa
08000A92  0F5C      
08000A94  DEFC 000C 1492          add.w     #12,A7
                    1493   doprint_37:
08000A98  6000 0100 1494          bra       doprint_23
                    1495   doprint_26:
08000A9C  4A2E FFD3 1496          tst.b     -45(A6)
08000AA0  6718      1497          beq.s     doprint_38
08000AA2  4878 000A 1498          pea       10
08000AA6  2F03      1499          move.l    D3,-(A7)
08000AA8  206E 0010 1500          move.l    16(A6),A0
08000AAC  58AE 0010 1501          addq.l    #4,16(A6)
08000AB0  2F10      1502          move.l    (A0),-(A7)
08000AB2  4E94      1503          jsr       (A4)
08000AB4  DEFC 000C 1504          add.w     #12,A7
08000AB8  6016      1505          bra.s     doprint_39
                    1506   doprint_38:
08000ABA  4878 000A 1507          pea       10
08000ABE  2F03      1508          move.l    D3,-(A7)
08000AC0  206E 0010 1509          move.l    16(A6),A0
08000AC4  58AE 0010 1510          addq.l    #4,16(A6)
08000AC8  2F10      1511          move.l    (A0),-(A7)
08000ACA  4E94      1512          jsr       (A4)
08000ACC  DEFC 000C 1513          add.w     #12,A7
                    1514   doprint_39:
08000AD0  6000 00C8 1515          bra       doprint_23
                    1516   doprint_27:
08000AD4  4A2E FFD3 1517          tst.b     -45(A6)
08000AD8  6718      1518          beq.s     doprint_40
08000ADA  4878 0008 1519          pea       8
08000ADE  2F03      1520          move.l    D3,-(A7)
08000AE0  206E 0010 1521          move.l    16(A6),A0
08000AE4  58AE 0010 1522          addq.l    #4,16(A6)
08000AE8  2F10      1523          move.l    (A0),-(A7)
08000AEA  4E94      1524          jsr       (A4)
08000AEC  DEFC 000C 1525          add.w     #12,A7
08000AF0  6016      1526          bra.s     doprint_41
                    1527   doprint_40:
08000AF2  4878 0008 1528          pea       8
08000AF6  2F03      1529          move.l    D3,-(A7)
08000AF8  206E 0010 1530          move.l    16(A6),A0
08000AFC  58AE 0010 1531          addq.l    #4,16(A6)
08000B00  2F10      1532          move.l    (A0),-(A7)
08000B02  4E94      1533          jsr       (A4)
08000B04  DEFC 000C 1534          add.w     #12,A7
                    1535   doprint_41:
08000B08  6000 0090 1536          bra       doprint_23
                    1537   doprint_28:
08000B0C  4A2E FFD3 1538          tst.b     -45(A6)
08000B10  6718      1539          beq.s     doprint_42
08000B12  4878 0010 1540          pea       16
08000B16  2F03      1541          move.l    D3,-(A7)
08000B18  206E 0010 1542          move.l    16(A6),A0
08000B1C  58AE 0010 1543          addq.l    #4,16(A6)
08000B20  2F10      1544          move.l    (A0),-(A7)
08000B22  4E94      1545          jsr       (A4)
08000B24  DEFC 000C 1546          add.w     #12,A7
08000B28  6016      1547          bra.s     doprint_43
                    1548   doprint_42:
08000B2A  4878 0010 1549          pea       16
08000B2E  2F03      1550          move.l    D3,-(A7)
08000B30  206E 0010 1551          move.l    16(A6),A0
08000B34  58AE 0010 1552          addq.l    #4,16(A6)
08000B38  2F10      1553          move.l    (A0),-(A7)
08000B3A  4E94      1554          jsr       (A4)
08000B3C  DEFC 000C 1555          add.w     #12,A7
                    1556   doprint_43:
08000B40  6000 0058 1557          bra       doprint_23
                    1558   doprint_30:
08000B44  206E 0010 1559          move.l    16(A6),A0
08000B48  58AE 0010 1560          addq.l    #4,16(A6)
08000B4C  2010      1561          move.l    (A0),D0
08000B4E  2042      1562          move.l    D2,A0
08000B50  5282      1563          addq.l    #1,D2
08000B52  1080      1564          move.b    D0,(A0)
08000B54  2042      1565          move.l    D2,A0
08000B56  4210      1566          clr.b     (A0)
08000B58  200D      1567          move.l    A5,D0
08000B5A  6704      1568          beq.s     doprint_44
08000B5C  200D      1569          move.l    A5,D0
08000B5E  6006      1570          bra.s     doprint_45
                    1571   doprint_44:
08000B60  7001      1572          moveq     #1,D0
08000B62  4880      1573          ext.w     D0
08000B64  48C0      1574          ext.l     D0
                    1575   doprint_45:
08000B66  2A00      1576          move.l    D0,D5
08000B68  6000 0030 1577          bra       doprint_23
                    1578   doprint_31:
08000B6C  206E 0010 1579          move.l    16(A6),A0
08000B70  58AE 0010 1580          addq.l    #4,16(A6)
08000B74  2610      1581          move.l    (A0),D3
08000B76  0C85 FFFF 1582          cmp.l     #-1,D5
08000B7A  FFFF      
08000B7C  660C      1583          bne.s     doprint_46
08000B7E  2F03      1584          move.l    D3,-(A7)
08000B80  4EB9 0800 1585          jsr       _strlen
08000B84  104A      
08000B86  584F      1586          addq.w    #4,A7
08000B88  2A00      1587          move.l    D0,D5
                    1588   doprint_46:
08000B8A  600E      1589          bra.s     doprint_23
                    1590   doprint_22:
08000B8C  206E 000C 1591          move.l    12(A6),A0
08000B90  2242      1592          move.l    D2,A1
08000B92  5282      1593          addq.l    #1,D2
08000B94  1290      1594          move.b    (A0),(A1)
08000B96  2042      1595          move.l    D2,A0
08000B98  4210      1596          clr.b     (A0)
                    1597   doprint_23:
08000B9A  2F03      1598          move.l    D3,-(A7)
08000B9C  4EB9 0800 1599          jsr       _strlen
08000BA0  104A      
08000BA2  584F      1600          addq.w    #4,A7
08000BA4  1800      1601          move.b    D0,D4
08000BA6  206E 000C 1602          move.l    12(A6),A0
08000BAA  1010      1603          move.b    (A0),D0
08000BAC  0C00 0073 1604          cmp.b     #115,D0
08000BB0  661C      1605          bne.s     doprint_48
08000BB2  0C85 0000 1606          cmp.l     #0,D5
08000BB6  0000      
08000BB8  6D14      1607          blt.s     doprint_48
08000BBA  4884      1608          ext.w     D4
08000BBC  48C4      1609          ext.l     D4
08000BBE  B885      1610          cmp.l     D5,D4
08000BC0  6F04      1611          ble.s     doprint_50
08000BC2  2005      1612          move.l    D5,D0
08000BC4  6006      1613          bra.s     doprint_51
                    1614   doprint_50:
08000BC6  1004      1615          move.b    D4,D0
08000BC8  4880      1616          ext.w     D0
08000BCA  48C0      1617          ext.l     D0
                    1618   doprint_51:
08000BCC  1800      1619          move.b    D0,D4
                    1620   doprint_48:
08000BCE  206E 000C 1621          move.l    12(A6),A0
08000BD2  1010      1622          move.b    (A0),D0
08000BD4  0C00 0058 1623          cmp.b     #88,D0
08000BD8  6600 0028 1624          bne       doprint_56
08000BDC  41EE FFDC 1625          lea       -36(A6),A0
08000BE0  2408      1626          move.l    A0,D2
                    1627   doprint_54:
08000BE2  2042      1628          move.l    D2,A0
08000BE4  4A10      1629          tst.b     (A0)
08000BE6  671A      1630          beq.s     doprint_56
08000BE8  2042      1631          move.l    D2,A0
08000BEA  1210      1632          move.b    (A0),D1
08000BEC  4881      1633          ext.w     D1
08000BEE  48C1      1634          ext.l     D1
08000BF0  2F01      1635          move.l    D1,-(A7)
08000BF2  4EB9 0800 1636          jsr       _toupper
08000BF6  108C      
08000BF8  584F      1637          addq.w    #4,A7
08000BFA  2042      1638          move.l    D2,A0
08000BFC  1080      1639          move.b    D0,(A0)
08000BFE  5282      1640          addq.l    #1,D2
08000C00  60E0      1641          bra       doprint_54
                    1642   doprint_56:
08000C02  7E00      1643          moveq     #0,D7
08000C04  41EE FFD4 1644          lea       -44(A6),A0
08000C08  2408      1645          move.l    A0,D2
08000C0A  206E 000C 1646          move.l    12(A6),A0
08000C0E  1010      1647          move.b    (A0),D0
08000C10  0C00 0064 1648          cmp.b     #100,D0
08000C14  670E      1649          beq.s     doprint_59
08000C16  206E 000C 1650          move.l    12(A6),A0
08000C1A  1010      1651          move.b    (A0),D0
08000C1C  0C00 0069 1652          cmp.b     #105,D0
08000C20  6600 0068 1653          bne       doprint_65
                    1654   doprint_59:
08000C24  102E FFCE 1655          move.b    -50(A6),D0
08000C28  4880      1656          ext.w     D0
08000C2A  48C0      1657          ext.l     D0
08000C2C  4A80      1658          tst.l     D0
08000C2E  660C      1659          bne.s     doprint_62
08000C30  2043      1660          move.l    D3,A0
08000C32  1010      1661          move.b    (A0),D0
08000C34  0C00 002D 1662          cmp.b     #45,D0
08000C38  6600 0028 1663          bne       doprint_60
                    1664   doprint_62:
08000C3C  2043      1665          move.l    D3,A0
08000C3E  1010      1666          move.b    (A0),D0
08000C40  0C00 002D 1667          cmp.b     #45,D0
08000C44  660E      1668          bne.s     doprint_63
08000C46  2043      1669          move.l    D3,A0
08000C48  5283      1670          addq.l    #1,D3
08000C4A  2242      1671          move.l    D2,A1
08000C4C  5282      1672          addq.l    #1,D2
08000C4E  1290      1673          move.b    (A0),(A1)
08000C50  5304      1674          subq.b    #1,D4
08000C52  6008      1675          bra.s     doprint_64
                    1676   doprint_63:
08000C54  2042      1677          move.l    D2,A0
08000C56  5282      1678          addq.l    #1,D2
08000C58  10BC 002B 1679          move.b    #43,(A0)
                    1680   doprint_64:
08000C5C  5287      1681          addq.l    #1,D7
08000C5E  6000 002A 1682          bra       doprint_65
                    1683   doprint_60:
08000C62  4A2E FFCF 1684          tst.b     -49(A6)
08000C66  6722      1685          beq.s     doprint_65
08000C68  2043      1686          move.l    D3,A0
08000C6A  1010      1687          move.b    (A0),D0
08000C6C  0C00 002D 1688          cmp.b     #45,D0
08000C70  660E      1689          bne.s     doprint_67
08000C72  2043      1690          move.l    D3,A0
08000C74  5283      1691          addq.l    #1,D3
08000C76  2242      1692          move.l    D2,A1
08000C78  5282      1693          addq.l    #1,D2
08000C7A  1290      1694          move.b    (A0),(A1)
08000C7C  5304      1695          subq.b    #1,D4
08000C7E  6008      1696          bra.s     doprint_68
                    1697   doprint_67:
08000C80  2042      1698          move.l    D2,A0
08000C82  5282      1699          addq.l    #1,D2
08000C84  10BC 0020 1700          move.b    #32,(A0)
                    1701   doprint_68:
08000C88  5287      1702          addq.l    #1,D7
                    1703   doprint_65:
08000C8A  4A2E FFD0 1704          tst.b     -48(A6)
08000C8E  6700 005A 1705          beq       doprint_77
08000C92  206E 000C 1706          move.l    12(A6),A0
08000C96  1010      1707          move.b    (A0),D0
08000C98  4880      1708          ext.w     D0
08000C9A  48C0      1709          ext.l     D0
08000C9C  0C80 0000 1710          cmp.l     #111,D0
08000CA0  006F      
08000CA2  671A      1711          beq.s     doprint_73
08000CA4  6E0C      1712          bgt.s     doprint_76
08000CA6  0C80 0000 1713          cmp.l     #88,D0
08000CAA  0058      
08000CAC  6710      1714          beq.s     doprint_73
08000CAE  6000 003A 1715          bra       doprint_77
                    1716   doprint_76:
08000CB2  0C80 0000 1717          cmp.l     #120,D0
08000CB6  0078      
08000CB8  6704      1718          beq.s     doprint_73
08000CBA  6000 002E 1719          bra       doprint_77
                    1720   doprint_73:
08000CBE  2042      1721          move.l    D2,A0
08000CC0  5282      1722          addq.l    #1,D2
08000CC2  10BC 0030 1723          move.b    #48,(A0)
08000CC6  5287      1724          addq.l    #1,D7
08000CC8  206E 000C 1725          move.l    12(A6),A0
08000CCC  1010      1726          move.b    (A0),D0
08000CCE  0C00 0078 1727          cmp.b     #120,D0
08000CD2  670C      1728          beq.s     doprint_79
08000CD4  206E 000C 1729          move.l    12(A6),A0
08000CD8  1010      1730          move.b    (A0),D0
08000CDA  0C00 0058 1731          cmp.b     #88,D0
08000CDE  660A      1732          bne.s     doprint_77
                    1733   doprint_79:
08000CE0  2042      1734          move.l    D2,A0
08000CE2  5282      1735          addq.l    #1,D2
08000CE4  10BC 0078 1736          move.b    #120,(A0)
08000CE8  5287      1737          addq.l    #1,D7
                    1738   doprint_77:
08000CEA  2042      1739          move.l    D2,A0
08000CEC  4210      1740          clr.b     (A0)
08000CEE  206E 000C 1741          move.l    12(A6),A0
08000CF2  1010      1742          move.b    (A0),D0
08000CF4  4880      1743          ext.w     D0
08000CF6  48C0      1744          ext.l     D0
08000CF8  0C80 0000 1745          cmp.l     #105,D0
08000CFC  0069      
08000CFE  6700 0076 1746          beq       doprint_82
08000D02  6E42      1747          bgt.s     doprint_93
08000D04  0C80 0000 1748          cmp.l     #99,D0
08000D08  0063      
08000D0A  6700 0084 1749          beq       doprint_96
08000D0E  6E1C      1750          bgt.s     doprint_94
08000D10  0C80 0000 1751          cmp.l     #88,D0
08000D14  0058      
08000D16  6700 005E 1752          beq       doprint_82
08000D1A  6E00 0184 1753          bgt       doprint_80
08000D1E  0C80 0000 1754          cmp.l     #69,D0
08000D22  0045      
08000D24  6700 0050 1755          beq       doprint_82
08000D28  6000 0176 1756          bra       doprint_80
                    1757   doprint_94:
08000D2C  0C80 0000 1758          cmp.l     #101,D0
08000D30  0065      
08000D32  6700 0042 1759          beq       doprint_82
08000D36  6E00 0168 1760          bgt       doprint_80
08000D3A  0C80 0000 1761          cmp.l     #100,D0
08000D3E  0064      
08000D40  6734      1762          beq.s     doprint_82
08000D42  6000 015C 1763          bra       doprint_80
                    1764   doprint_93:
08000D46  0C80 0000 1765          cmp.l     #117,D0
08000D4A  0075      
08000D4C  6728      1766          beq.s     doprint_82
08000D4E  6E1A      1767          bgt.s     doprint_95
08000D50  0C80 0000 1768          cmp.l     #115,D0
08000D54  0073      
08000D56  6700 0038 1769          beq       doprint_96
08000D5A  6E00 0144 1770          bgt       doprint_80
08000D5E  0C80 0000 1771          cmp.l     #111,D0
08000D62  006F      
08000D64  6710      1772          beq.s     doprint_82
08000D66  6000 0138 1773          bra       doprint_80
                    1774   doprint_95:
08000D6A  0C80 0000 1775          cmp.l     #120,D0
08000D6E  0078      
08000D70  6704      1776          beq.s     doprint_82
08000D72  6000 012C 1777          bra       doprint_80
                    1778   doprint_82:
08000D76  4A2E FFD2 1779          tst.b     -46(A6)
08000D7A  6714      1780          beq.s     doprint_96
08000D7C  4A2E FFCD 1781          tst.b     -51(A6)
08000D80  660E      1782          bne.s     doprint_96
08000D82  200D      1783          move.l    A5,D0
08000D84  9087      1784          sub.l     D7,D0
08000D86  4884      1785          ext.w     D4
08000D88  48C4      1786          ext.l     D4
08000D8A  9084      1787          sub.l     D4,D0
08000D8C  2D40 FFFC 1788          move.l    D0,-4(A6)
                    1789   doprint_96:
08000D90  202E FFFC 1790          move.l    -4(A6),D0
08000D94  0C80 0000 1791          cmp.l     #0,D0
08000D98  0000      
08000D9A  6C04      1792          bge.s     doprint_98
08000D9C  42AE FFFC 1793          clr.l     -4(A6)
                    1794   doprint_98:
08000DA0  4A2E FFCD 1795          tst.b     -51(A6)
08000DA4  6600 0030 1796          bne       doprint_104
08000DA8  1004      1797          move.b    D4,D0
08000DAA  4880      1798          ext.w     D0
08000DAC  48C0      1799          ext.l     D0
08000DAE  D0AE FFFC 1800          add.l     -4(A6),D0
08000DB2  D087      1801          add.l     D7,D0
08000DB4  1D40 FFD1 1802          move.b    D0,-47(A6)
                    1803   doprint_102:
08000DB8  102E FFD1 1804          move.b    -47(A6),D0
08000DBC  4880      1805          ext.w     D0
08000DBE  48C0      1806          ext.l     D0
08000DC0  220D      1807          move.l    A5,D1
08000DC2  534D      1808          subq.w    #1,A5
08000DC4  B081      1809          cmp.l     D1,D0
08000DC6  6C0E      1810          bge.s     doprint_104
08000DC8  4878 0020 1811          pea       32
08000DCC  2F0A      1812          move.l    A2,-(A7)
08000DCE  4E93      1813          jsr       (A3)
08000DD0  504F      1814          addq.w    #8,A7
08000DD2  5286      1815          addq.l    #1,D6
08000DD4  60E2      1816          bra       doprint_102
                    1817   doprint_104:
08000DD6  41EE FFD4 1818          lea       -44(A6),A0
08000DDA  2408      1819          move.l    A0,D2
                    1820   doprint_105:
08000DDC  2042      1821          move.l    D2,A0
08000DDE  4A10      1822          tst.b     (A0)
08000DE0  6716      1823          beq.s     doprint_107
08000DE2  2042      1824          move.l    D2,A0
08000DE4  5282      1825          addq.l    #1,D2
08000DE6  1210      1826          move.b    (A0),D1
08000DE8  4881      1827          ext.w     D1
08000DEA  48C1      1828          ext.l     D1
08000DEC  2F01      1829          move.l    D1,-(A7)
08000DEE  2F0A      1830          move.l    A2,-(A7)
08000DF0  4E93      1831          jsr       (A3)
08000DF2  504F      1832          addq.w    #8,A7
08000DF4  5286      1833          addq.l    #1,D6
08000DF6  60E4      1834          bra       doprint_105
                    1835   doprint_107:
08000DF8  202E FFFC 1836          move.l    -4(A6),D0
08000DFC  1D40 FFD1 1837          move.b    D0,-47(A6)
                    1838   doprint_108:
08000E00  102E FFD1 1839          move.b    -47(A6),D0
08000E04  532E FFD1 1840          subq.b    #1,-47(A6)
08000E08  4A00      1841          tst.b     D0
08000E0A  670E      1842          beq.s     doprint_110
08000E0C  4878 0030 1843          pea       48
08000E10  2F0A      1844          move.l    A2,-(A7)
08000E12  4E93      1845          jsr       (A3)
08000E14  504F      1846          addq.w    #8,A7
08000E16  5286      1847          addq.l    #1,D6
08000E18  60E6      1848          bra       doprint_108
                    1849   doprint_110:
08000E1A  2043      1850          move.l    D3,A0
08000E1C  4A10      1851          tst.b     (A0)
08000E1E  6700 0048 1852          beq       doprint_113
08000E22  206E 000C 1853          move.l    12(A6),A0
08000E26  1010      1854          move.b    (A0),D0
08000E28  4880      1855          ext.w     D0
08000E2A  48C0      1856          ext.l     D0
08000E2C  0C80 0000 1857          cmp.l     #115,D0
08000E30  0073      
08000E32  670C      1858          beq.s     doprint_116
08000E34  6E18      1859          bgt.s     doprint_119
08000E36  0C80 0000 1860          cmp.l     #99,D0
08000E3A  0063      
08000E3C  6702      1861          beq.s     doprint_116
08000E3E  600E      1862          bra.s     doprint_119
                    1863   doprint_116:
08000E40  2005      1864          move.l    D5,D0
08000E42  5385      1865          subq.l    #1,D5
08000E44  0C80 0000 1866          cmp.l     #0,D0
08000E48  0000      
08000E4A  6E02      1867          bgt.s     doprint_119
08000E4C  6016      1868          bra.s     doprint_115
                    1869   doprint_119:
08000E4E  2043      1870          move.l    D3,A0
08000E50  5283      1871          addq.l    #1,D3
08000E52  1210      1872          move.b    (A0),D1
08000E54  4881      1873          ext.w     D1
08000E56  48C1      1874          ext.l     D1
08000E58  2F01      1875          move.l    D1,-(A7)
08000E5A  2F0A      1876          move.l    A2,-(A7)
08000E5C  4E93      1877          jsr       (A3)
08000E5E  504F      1878          addq.w    #8,A7
08000E60  5286      1879          addq.l    #1,D6
08000E62  6002      1880          bra.s     doprint_112
                    1881   doprint_115:
08000E64  6002      1882          bra.s     doprint_113
                    1883   doprint_112:
08000E66  60B2      1884          bra       doprint_110
                    1885   doprint_113:
08000E68  4A2E FFCD 1886          tst.b     -51(A6)
08000E6C  6700 0030 1887          beq       doprint_125
08000E70  1004      1888          move.b    D4,D0
08000E72  4880      1889          ext.w     D0
08000E74  48C0      1890          ext.l     D0
08000E76  D0AE FFFC 1891          add.l     -4(A6),D0
08000E7A  D087      1892          add.l     D7,D0
08000E7C  1D40 FFD1 1893          move.b    D0,-47(A6)
                    1894   doprint_123:
08000E80  102E FFD1 1895          move.b    -47(A6),D0
08000E84  4880      1896          ext.w     D0
08000E86  48C0      1897          ext.l     D0
08000E88  220D      1898          move.l    A5,D1
08000E8A  534D      1899          subq.w    #1,A5
08000E8C  B081      1900          cmp.l     D1,D0
08000E8E  6C0E      1901          bge.s     doprint_125
08000E90  4878 0020 1902          pea       32
08000E94  2F0A      1903          move.l    A2,-(A7)
08000E96  4E93      1904          jsr       (A3)
08000E98  504F      1905          addq.w    #8,A7
08000E9A  5386      1906          subq.l    #1,D6
08000E9C  60E2      1907          bra       doprint_123
                    1908   doprint_125:
08000E9E  6014      1909          bra.s     doprint_81
                    1910   doprint_80:
08000EA0  206E 000C 1911          move.l    12(A6),A0
08000EA4  1210      1912          move.b    (A0),D1
08000EA6  4881      1913          ext.w     D1
08000EA8  48C1      1914          ext.l     D1
08000EAA  2F01      1915          move.l    D1,-(A7)
08000EAC  2F0A      1916          move.l    A2,-(A7)
08000EAE  4E93      1917          jsr       (A3)
08000EB0  504F      1918          addq.w    #8,A7
08000EB2  5286      1919          addq.l    #1,D6
                    1920   doprint_81:
08000EB4  52AE 000C 1921          addq.l    #1,12(A6)
                    1922   doprint_2:
08000EB8  6000 FA0A 1923          bra       doprint_1
                    1924   doprint_3:
08000EBC  4A92      1925          tst.l     (A2)
08000EBE  6710      1926          beq.s     doprint_126
08000EC0  4201      1927          clr.b     D1
08000EC2  C2BC 0000 1928          and.l     #255,D1
08000EC6  00FF      
08000EC8  2F01      1929          move.l    D1,-(A7)
08000ECA  2F0A      1930          move.l    A2,-(A7)
08000ECC  4E93      1931          jsr       (A3)
08000ECE  504F      1932          addq.w    #8,A7
                    1933   doprint_126:
08000ED0  2006      1934          move.l    D6,D0
08000ED2  4CDF 3CFC 1935          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
08000ED6  4E5E      1936          unlk      A6
08000ED8  4E75      1937          rts
                    1938   @itoa_convert:
08000EDA  4E56 0000 1939          link      A6,#0
08000EDE  48E7 3C00 1940          movem.l   D2/D3/D4/D5,-(A7)
08000EE2  242E 0008 1941          move.l    8(A6),D2
08000EE6  262E 0010 1942          move.l    16(A6),D3
08000EEA  2A2E 000C 1943          move.l    12(A6),D5
08000EEE  2F05      1944          move.l    D5,-(A7)
08000EF0  2F03      1945          move.l    D3,-(A7)
08000EF2  4EB9 0800 1946          jsr       ULDIV
08000EF6  10B8      
08000EF8  202F 0004 1947          move.l    4(A7),D0
08000EFC  504F      1948          addq.w    #8,A7
08000EFE  2800      1949          move.l    D0,D4
08000F00  BA83      1950          cmp.l     D3,D5
08000F02  6520      1951          blo.s     @itoa_convert_1
08000F04  2F03      1952          move.l    D3,-(A7)
08000F06  2F05      1953          move.l    D5,-(A7)
08000F08  2F03      1954          move.l    D3,-(A7)
08000F0A  4EB9 0800 1955          jsr       ULDIV
08000F0E  10B8      
08000F10  2217      1956          move.l    (A7),D1
08000F12  504F      1957          addq.w    #8,A7
08000F14  2F01      1958          move.l    D1,-(A7)
08000F16  2F02      1959          move.l    D2,-(A7)
08000F18  4EB9 0800 1960          jsr       @itoa_convert
08000F1C  0EDA      
08000F1E  DEFC 000C 1961          add.w     #12,A7
08000F22  2400      1962          move.l    D0,D2
                    1963   @itoa_convert_1:
08000F24  0C84 0000 1964          cmp.l     #9,D4
08000F28  0009      
08000F2A  6E0E      1965          bgt.s     @itoa_convert_3
08000F2C  2004      1966          move.l    D4,D0
08000F2E  7230      1967          moveq     #48,D1
08000F30  C2BC 0000 1968          and.l     #255,D1
08000F34  00FF      
08000F36  D081      1969          add.l     D1,D0
08000F38  6012      1970          bra.s     @itoa_convert_4
                    1971   @itoa_convert_3:
08000F3A  2004      1972          move.l    D4,D0
08000F3C  7261      1973          moveq     #97,D1
08000F3E  C2BC 0000 1974          and.l     #255,D1
08000F42  00FF      
08000F44  D081      1975          add.l     D1,D0
08000F46  0480 0000 1976          sub.l     #10,D0
08000F4A  000A      
                    1977   @itoa_convert_4:
08000F4C  2042      1978          move.l    D2,A0
08000F4E  1080      1979          move.b    D0,(A0)
08000F50  2002      1980          move.l    D2,D0
08000F52  5280      1981          addq.l    #1,D0
08000F54  4CDF 003C 1982          movem.l   (A7)+,D2/D3/D4/D5
08000F58  4E5E      1983          unlk      A6
08000F5A  4E75      1984          rts
                    1985   _ltoa:
08000F5C  4E56 0000 1986          link      A6,#0
08000F60  48E7 3C00 1987          movem.l   D2/D3/D4/D5,-(A7)
08000F64  242E 0008 1988          move.l    8(A6),D2
08000F68  262E 000C 1989          move.l    12(A6),D3
08000F6C  2A2E 0010 1990          move.l    16(A6),D5
08000F70  2803      1991          move.l    D3,D4
08000F72  0C85 0000 1992          cmp.l     #2,D5
08000F76  0002      
08000F78  6D08      1993          blt.s     ltoa_3
08000F7A  0C85 0000 1994          cmp.l     #36,D5
08000F7E  0024      
08000F80  6F06      1995          ble.s     ltoa_1
                    1996   ltoa_3:
08000F82  2003      1997          move.l    D3,D0
08000F84  6000 0056 1998          bra       ltoa_4
                    1999   ltoa_1:
08000F88  0C85 0000 2000          cmp.l     #10,D5
08000F8C  000A      
08000F8E  6600 0034 2001          bne       ltoa_5
08000F92  0C82 0000 2002          cmp.l     #0,D2
08000F96  0000      
08000F98  6C2A      2003          bge.s     ltoa_5
08000F9A  2002      2004          move.l    D2,D0
08000F9C  4480      2005          neg.l     D0
08000F9E  2400      2006          move.l    D0,D2
08000FA0  0C82 0000 2007          cmp.l     #0,D2
08000FA4  0000      
08000FA6  6C14      2008          bge.s     ltoa_7
08000FA8  4879 0800 2009          pea       @itoa_1.L
08000FAC  1238      
08000FAE  2F03      2010          move.l    D3,-(A7)
08000FB0  4EB9 0800 2011          jsr       _strcpy
08000FB4  10A8      
08000FB6  504F      2012          addq.w    #8,A7
08000FB8  2003      2013          move.l    D3,D0
08000FBA  6020      2014          bra.s     ltoa_4
                    2015   ltoa_7:
08000FBC  2044      2016          move.l    D4,A0
08000FBE  5284      2017          addq.l    #1,D4
08000FC0  10BC 002D 2018          move.b    #45,(A0)
                    2019   ltoa_5:
08000FC4  2F05      2020          move.l    D5,-(A7)
08000FC6  2F02      2021          move.l    D2,-(A7)
08000FC8  2F04      2022          move.l    D4,-(A7)
08000FCA  4EB9 0800 2023          jsr       @itoa_convert
08000FCE  0EDA      
08000FD0  DEFC 000C 2024          add.w     #12,A7
08000FD4  2800      2025          move.l    D0,D4
08000FD6  2044      2026          move.l    D4,A0
08000FD8  4210      2027          clr.b     (A0)
08000FDA  2003      2028          move.l    D3,D0
                    2029   ltoa_4:
08000FDC  4CDF 003C 2030          movem.l   (A7)+,D2/D3/D4/D5
08000FE0  4E5E      2031          unlk      A6
08000FE2  4E75      2032          rts
                    2033   _ultoa:
08000FE4  4E56 0000 2034          link      A6,#0
08000FE8  48E7 3800 2035          movem.l   D2/D3/D4,-(A7)
08000FEC  262E 0010 2036          move.l    16(A6),D3
08000FF0  282E 000C 2037          move.l    12(A6),D4
08000FF4  2404      2038          move.l    D4,D2
08000FF6  0C83 0000 2039          cmp.l     #2,D3
08000FFA  0002      
08000FFC  6D08      2040          blt.s     ultoa_3
08000FFE  0C83 0000 2041          cmp.l     #36,D3
08001002  0024      
08001004  6F04      2042          ble.s     ultoa_1
                    2043   ultoa_3:
08001006  2004      2044          move.l    D4,D0
08001008  601A      2045          bra.s     ultoa_4
                    2046   ultoa_1:
0800100A  2F03      2047          move.l    D3,-(A7)
0800100C  2F2E 0008 2048          move.l    8(A6),-(A7)
08001010  2F02      2049          move.l    D2,-(A7)
08001012  4EB9 0800 2050          jsr       @itoa_convert
08001016  0EDA      
08001018  DEFC 000C 2051          add.w     #12,A7
0800101C  2400      2052          move.l    D0,D2
0800101E  2042      2053          move.l    D2,A0
08001020  4210      2054          clr.b     (A0)
08001022  2004      2055          move.l    D4,D0
                    2056   ultoa_4:
08001024  4CDF 001C 2057          movem.l   (A7)+,D2/D3/D4
08001028  4E5E      2058          unlk      A6
0800102A  4E75      2059          rts
                    2060   _itoa:
0800102C  4E56 0000 2061          link      A6,#0
08001030  2F2E 0010 2062          move.l    16(A6),-(A7)
08001034  2F2E 000C 2063          move.l    12(A6),-(A7)
08001038  2F2E 0008 2064          move.l    8(A6),-(A7)
0800103C  4EB9 0800 2065          jsr       _ltoa
08001040  0F5C      
08001042  DEFC 000C 2066          add.w     #12,A7
08001046  4E5E      2067          unlk      A6
08001048  4E75      2068          rts
                    2069   _strlen:
0800104A  206F 0004 2070          move.l    (4,A7),A0
0800104E  2248      2071          move.l    A0,A1
                    2072   strlen_1:
08001050  4A19      2073          tst.b     (A1)+
08001052  66FC      2074          bne       strlen_1
08001054  2009      2075          move.l    A1,D0
08001056  9088      2076          sub.l     A0,D0
08001058  5380      2077          subq.l    #1,D0
0800105A  4E75      2078          rts
                    2079   _putch:
0800105C  4E56 0000 2080          link      A6,#0
08001060  2F02      2081          move.l    D2,-(A7)
08001062  242E 0008 2082          move.l    8(A6),D2
08001066  0C82 0000 2083          cmp.l     #10,D2
0800106A  000A      
0800106C  660C      2084          bne.s     putch_1
0800106E  4878 000D 2085          pea       13
08001072  4EB9 0800 2086          jsr       __putch
08001076  0342      
08001078  584F      2087          addq.w    #4,A7
                    2088   putch_1:
0800107A  2F02      2089          move.l    D2,-(A7)
0800107C  4EB9 0800 2090          jsr       __putch
08001080  0342      
08001082  584F      2091          addq.w    #4,A7
08001084  2002      2092          move.l    D2,D0
08001086  241F      2093          move.l    (A7)+,D2
08001088  4E5E      2094          unlk      A6
0800108A  4E75      2095          rts
                    2096   _toupper:
0800108C  202F 0004 2097          move.l    4(A7),D0
08001090  0C80 0000 2098          cmp.l     #'a',D0
08001094  0061      
08001096  6D0E      2099          blt.s     toupper_1
08001098  0C80 0000 2100          cmp.l     #'z',D0
0800109C  007A      
0800109E  6E06      2101          bgt.s     toupper_1
080010A0  0480 0000 2102          sub.l     #$20,D0
080010A4  0020      
                    2103   toupper_1:
080010A6  4E75      2104          rts
                    2105   _strcpy:
080010A8  206F 0004 2106          move.l    (4,A7),A0
080010AC  226F 0008 2107          move.l    (8,A7),A1
080010B0  2008      2108          move.l    A0,D0
                    2109   strcpy_1:
080010B2  10D9      2110          move.b    (A1)+,(A0)+
080010B4  66FC      2111          bne.s     strcpy_1
080010B6  4E75      2112          rts
                    2113   ULDIV:
080010B8  4E56 0000 2114          link    A6,#0
080010BC  48E7 C000 2115          movem.l D0/D1,-(A7)
080010C0  222E 0008 2116          move.l  8(A6),D1
080010C4  202E 000C 2117          move.l  12(A6),D0
080010C8  6036      2118          bra.s   ldiv_3
                    2119   LDIV:
080010CA  4E56 0000 2120          link    A6,#0
080010CE  48E7 C000 2121          movem.l D0/D1,-(A7)
080010D2  222E 0008 2122          move.l  8(A6),D1
080010D6  202E 000C 2123          move.l  12(A6),D0
080010DA  4A80      2124          tst.l   D0
080010DC  6A0E      2125          bpl.s   ldiv_1
080010DE  4480      2126          neg.l   D0
080010E0  4A81      2127          tst.l   D1
080010E2  6A14      2128          bpl.s   ldiv_2
080010E4  4481      2129          neg.l   D1
080010E6  612A      2130          bsr.s   dodiv
080010E8  4481      2131          neg.l   D1
080010EA  6016      2132          bra.s   ldiv_4
                    2133   ldiv_1:
080010EC  4A81      2134          tst.l   D1
080010EE  6A10      2135          bpl.s   ldiv_3
080010F0  4481      2136          neg.l   D1
080010F2  611E      2137          bsr.s   dodiv
080010F4  4480      2138          neg.l   D0
080010F6  600A      2139          bra.s   ldiv_4
                    2140   ldiv_2:
080010F8  6118      2141          bsr.s   dodiv
080010FA  4480      2142          neg.l   D0
080010FC  4481      2143          neg.l   D1
080010FE  6002      2144          bra.s   ldiv_4
                    2145   ldiv_3:
08001100  6110      2146          bsr.s   dodiv
                    2147   ldiv_4:
08001102  2D40 0008 2148          move.l  D0,8(A6)
08001106  2D41 000C 2149          move.l  D1,12(A6)
0800110A  4CDF 0003 2150          movem.l (A7)+,D0/D1
0800110E  4E5E      2151          unlk    A6
08001110  4E75      2152          rts
                    2153   dodiv:
08001112  0C81 0000 2154          cmpi.l  #$FFFF,D1
08001116  FFFF      
08001118  6236      2155          bhi.s   dodiv_2
0800111A  0C80 0000 2156          cmpi.l  #$FFFF,D0
0800111E  FFFF      
08001120  6210      2157          bhi.s   dodiv_1
08001122  80C1      2158          divu    D1,D0
08001124  2200      2159          move.l  D0,D1
08001126  4241      2160          clr.w   D1
08001128  4841      2161          swap    D1
0800112A  0280 0000 2162          andi.l  #$FFFF,D0
0800112E  FFFF      
08001130  4E75      2163          rts
                    2164   dodiv_1:
08001132  48A7 A000 2165          movem.w D0/D2,-(A7)
08001136  4240      2166          clr.w   D0
08001138  4840      2167          swap    D0
0800113A  80C1      2168          divu    D1,D0
0800113C  3400      2169          move.w  D0,D2
0800113E  301F      2170          move.w  (A7)+,D0
08001140  80C1      2171          divu    D1,D0
08001142  4840      2172          swap    D0
08001144  4281      2173          clr.l   D1
08001146  3200      2174          move.w  D0,D1
08001148  3002      2175          move.w  D2,D0
0800114A  4840      2176          swap    D0
0800114C  341F      2177          move.w  (A7)+,D2
0800114E  4E75      2178          rts
                    2179   dodiv_2:
08001150  48E7 3800 2180          movem.l D2/D3/D4,-(A7)
08001154  2401      2181          move.l  D1,D2
08001156  4242      2182          clr.w   D2
08001158  4842      2183          swap    D2
0800115A  5282      2184          addq.l  #1,D2
0800115C  2600      2185          move.l  D0,D3
0800115E  2801      2186          move.l  D1,D4
08001160  2202      2187          move.l  D2,D1
08001162  61CE      2188          bsr.s   dodiv_1
08001164  2204      2189          move.l  D4,D1
08001166  82C2      2190          divu    D2,D1
08001168  80C1      2191          divu    D1,D0
0800116A  0280 0000 2192          andi.l  #$FFFF,D0
0800116E  FFFF      
                    2193   dodiv_3:
08001170  2204      2194          move.l  D4,D1
08001172  2404      2195          move.l  D4,D2
08001174  4842      2196          swap    D2
08001176  C2C0      2197          mulu    D0,D1
08001178  C4C0      2198          mulu    D0,D2
0800117A  4842      2199          swap    D2
0800117C  D282      2200          add.l   D2,D1
0800117E  9283      2201          sub.l   D3,D1
08001180  620A      2202          bhi.s   dodiv_4
08001182  4481      2203          neg.l   D1
08001184  B881      2204          cmp.l   D1,D4
08001186  6208      2205          bhi.s   dodiv_5
08001188  5280      2206          addq.l  #1,D0
0800118A  60E4      2207          bra.s   dodiv_3
                    2208   dodiv_4:
0800118C  5380      2209          subq.l  #1,D0
0800118E  60E0      2210          bra.s   dodiv_3
                    2211   dodiv_5:
08001190  4CDF 001C 2212          movem.l (A7)+,D2/D3/D4
08001194  4E75      2213          rts
                    2214          section   const
08001196            2215                   align
                    2216   
                    2217   
                    2218   @iic_dr~1_1:
08001196  0D0A 4368 2219          dc.b      13,10,67,104,101,99,107,105,110,103,32,105,102
0800119A  6563 6B69 
0800119E  6E67 2069 
080011A2  66        
080011A3  2069 6E74 2220          dc.b      32,105,110,116,101,114,110,97,108,32,119,114
080011A7  6572 6E61 
080011AB  6C20 7772 
080011AF  6974 6520 2221          dc.b      105,116,101,32,105,115,32,100,111,110,101,46
080011B3  6973 2064 
080011B7  6F6E 652E 
080011BB  2E2E 00   2222          dc.b      46,46,0
                    2223   @iic_dr~1_2:
080011BE  0D0A 5374 2224          dc.b      13,10,83,116,97,116,117,115,32,82,69,103,58
080011C2  6174 7573 
080011C6  2052 4567 
080011CA  3A        
080011CB  2025 7800 2225          dc.b      32,37,120,0
                    2226   @m68kus~1_1:
080011D0  0D0A 496E 2227          dc.b      13,10,73,110,105,116,105,97,108,105,122,105
080011D4  6974 6961 
080011D8  6C69 7A69 
080011DC  6E67 2049 2228          dc.b      110,103,32,73,73,67,32,67,111,110,116,114,111
080011E0  4943 2043 
080011E4  6F6E 7472 
080011E8  6F        
080011E9  6C6C 6572 2229          dc.b      108,108,101,114,0
080011ED  00        
                    2230   @m68kus~1_2:
080011EE  0D0A 446F 2231          dc.b      13,10,68,111,110,101,32,105,110,105,116,105
080011F2  6E65 2069 
080011F6  6E69 7469 
080011FA  616C 697A 2232          dc.b      97,108,105,122,97,116,105,111,110,44,32,115
080011FE  6174 696F 
08001202  6E2C 2073 
08001206  656E 6469 2233          dc.b      101,110,100,105,110,103,32,97,32,98,121,116
0800120A  6E67 2061 
0800120E  2062 7974 
08001212  652E 2E2E 2234          dc.b      101,46,46,46,0
08001216  00        
                    2235   @m68kus~1_3:
08001218  0D0A 446F 2236          dc.b      13,10,68,111,110,101,32,119,114,105,116,105
0800121C  6E65 2077 
08001220  7269 7469 
08001224  6E67 2100 2237          dc.b      110,103,33,0
                    2238   @m68kus~1_4:
08001228  0D0A 5265 2239          dc.b      13,10,82,101,97,100,32,98,97,99,107,32,37,120
0800122C  6164 2062 
08001230  6163 6B20 
08001234  2578      
08001236  2100      2240          dc.b      33,0
                    2241   @itoa_1:
08001238  2D32 3134 2242          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0800123C  3734 3833 
08001240  3634 3800 
                    2243   __ctype:
08001244  0040 4040 2244          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
08001248  4040 4040 
0800124C  4040 5050 
08001250  5050 50   
08001253  4040 4040 2245          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
08001257  4040 4040 
0800125B  4040 4040 
0800125F  4040 40   
08001262  4040 40D0 2246          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
08001266  A0A0 A0A0 
0800126A  A0A0 A0A0 
0800126E  A0A0 A0A0 2247          dc.b      160,160,160,160,160,160,160,140,140,140,140
08001272  A0A0 A08C 
08001276  8C8C 8C   
08001279  8C8C 8C8C 2248          dc.b      140,140,140,140,140,140,160,160,160,160,160
0800127D  8C8C A0A0 
08001281  A0A0 A0   
08001284  A0A0 8A8A 2249          dc.b      160,160,138,138,138,138,138,138,130,130,130
08001288  8A8A 8A8A 
0800128C  8282 82   
0800128F  8282 8282 2250          dc.b      130,130,130,130,130,130,130,130,130,130,130
08001293  8282 8282 
08001297  8282 82   
0800129A  8282 8282 2251          dc.b      130,130,130,130,130,130,160,160,160,160,160
0800129E  8282 A0A0 
080012A2  A0A0 A0   
080012A5  A089 8989 2252          dc.b      160,137,137,137,137,137,137,129,129,129,129
080012A9  8989 8981 
080012AD  8181 81   
080012B0  8181 8181 2253          dc.b      129,129,129,129,129,129,129,129,129,129,129
080012B4  8181 8181 
080012B8  8181 81   
080012BB  8181 8181 2254          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
080012BF  81A0 A0A0 
080012C3  A040 0000 
080012C7  00        
080012C8  0000 0000 2255          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080012CC  0000 0000 
080012D0  0000 0000 
080012D4  0000 0000 
080012D8  0000 0000 
080012DC  0000      
080012DE  0000 0000 2256          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080012E2  0000 0000 
080012E6  0000 0000 
080012EA  0000 0000 
080012EE  0000 0000 
080012F2  0000      
080012F4  0000 0000 2257          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
080012F8  0000 0000 
080012FC  0000 0000 
08001300  0000 0000 
08001304  0000 0000 
08001308  0000      
0800130A  0000 0000 2258          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800130E  0000 0000 
08001312  0000 0000 
08001316  0000 0000 
0800131A  0000 0000 
0800131E  0000      
08001320  0000 0000 2259          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
08001324  0000 0000 
08001328  0000 0000 
0800132C  0000 0000 
08001330  0000 0000 
08001334  0000      
08001336  0000 0000 2260          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0800133A  0000 0000 
0800133E  0000 0000 
08001342  0000 00   
                    2261          section   data
08001346            2262                   align
                    2263   
                    2264   *********************************************************************************************************************************************************
                    2265   * Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
                    2266   ********************************************************************************************************************************************************
                    2267   
          0800 1346 2268   DataStart       equ       *
08001346            2269   __ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
0800134A            2270   __allocp:       ds.l      1                    start of free memory block list
0800134E            2271   __heap:         ds.l      1                    begin of free memory
                    2272   
                    2273   
                    2274   _IICClkPrescalerLow:
08001352  0040 8000 2275          dc.l      4227072
                    2276   _IICClkPrescalerHigh:
08001356  0040 8002 2277          dc.l      4227074
                    2278   _IICControl:
0800135A  0040 8004 2279          dc.l      4227076
                    2280   _IICTx:
0800135E  0040 8006 2281          dc.l      4227078
                    2282   _IICRx:
08001362  0040 8006 2283          dc.l      4227078
                    2284   _IICStatus:
08001366  0040 8008 2285          dc.l      4227080
                    2286   _IICCommand:
0800136A  0040 8008 2287          dc.l      4227080
                    2288          section   bss
0800136E            2289                   align
                    2290   
          0800 136E 2291   DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
          0000 0028 2292   DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup
                    2293   
                    2294   *********************************************************************************************************
                    2295   * Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
                    2296   *********************************************************************************************************
          0800 136E 2297   BssStart       equ       *
                    2298   
                    2299   _x:
0800136E            2300          ds.b      4
                    2301   _y:
08001372            2302          ds.b      4
                    2303   _z:
08001376            2304          ds.b      4
                    2305   _PortA_Count:
0800137A            2306          ds.b      4
                    2307   _Timer1Count:
0800137E            2308          ds.b      1
                    2309   _Timer2Count:
08001380            2310          ds.b      1
                    2311   _Timer3Count:
08001382            2312          ds.b      1
                    2313   _Timer4Count:
08001384            2314          ds.b      1
                    2315   _counter:
08001386            2316          ds.b      4
                    2317   _rollovers:
0800138A            2318          ds.b      4
                    2319   _a:
0800138E            2320          ds.b      40000
                    2321   _b:
0800AFCE            2322          ds.b      40000
                    2323   _c:
08014C0E            2324          ds.b      40000
                    2325   _i:
0801E84E            2326          ds.b      4
                    2327   _j:
0801E852            2328          ds.b      4
                    2329   _k:
0801E856            2330          ds.b      4
                    2331   _sum:
0801E85A            2332          ds.b      4
                    2333          section   heap
0801E85E            2334                  align
                    2335   
          0801 E85E 2336   BssEnd         equ       *
          0001 D4F0 2337   BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup
                    2338   
                    2339   *********************************************************************************************************
                    2340   * Section for Heap
                    2341   *********************************************************************************************************
                    2342   
          0801 E85E 2343   heap           equ       *
0801E85E            2344                  align
          0800 0000

Assembly errors: 0

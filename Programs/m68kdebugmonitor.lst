680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Jan 2019      Time: 09:29:22          Source: C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2B40      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  2282      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; C:\M68KV6.0 - 640BY480\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     471   ; #include "DebugMonitor.h"
                     472   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     473   ; #define StartOfExceptionVectorTable 0x08030000
                     474   ; //#define StartOfExceptionVectorTable 0x0B000000
                     475   ; // use 0C000000 for dram or hex 08040000 for sram
                     476   ; #define TopOfStack 0x08040000
                     477   ; //#define TopOfStack 0x0C000000
                     478   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     479   ; unsigned int i, x, y, z, PortA_Count;
                     480   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     481   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     482   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     483   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     484   ; unsigned int PC, SSP, USP ;
                     485   ; unsigned short int SR;
                     486   ; // Breakpoint variables
                     487   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     488   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     489   ; unsigned int BreakPointSetOrCleared[8] ;
                     490   ; unsigned int InstructionSize ;
                     491   ; // watchpoint variables
                     492   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     493   ; unsigned int WatchPointSetOrCleared[8] ;
                     494   ; char WatchPointString[8][100] ;
                     495   ; // Types
                     496   ; typedef enum {FALSE, TRUE} bool; 
                     497   ; // for disassembly of program
                     498   ; char    Instruction[100] ;
                     499   ; char    TempString[100] ;
                     500   ; /************************************************************************************
                     501   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     502   ; ************************************************************************************/
                     503   ; void Wait500us(void)
                     504   ; {
                     505   _Wait500us:
00000932  2F02       506          move.l    D2,-(A7)
                     507   ; long int  i ;
                     508   ; for(i = 0; i < 500; i ++)
00000934  4282       509          clr.l     D2
                     510   Wait500us_1:
00000936  0C82 0000  511          cmp.l     #500,D2
0000093A  01F4      
0000093C  6C04       512          bge.s     Wait500us_3
0000093E  5282       513          addq.l    #1,D2
00000940  60F4       514          bra       Wait500us_1
                     515   Wait500us_3:
00000942  241F       516          move.l    (A7)+,D2
00000944  4E75       517          rts
                     518   ; ;
                     519   ; }
                     520   ; /************************************************************************************
                     521   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     522   ; ************************************************************************************/
                     523   ; void Wait1ms(void)
                     524   ; {
                     525   _Wait1ms:
00000946  2F02       526          move.l    D2,-(A7)
                     527   ; long int  i ;
                     528   ; for(i = 0; i < 1000; i ++)
00000948  4282       529          clr.l     D2
                     530   Wait1ms_1:
0000094A  0C82 0000  531          cmp.l     #1000,D2
0000094E  03E8      
00000950  6C04       532          bge.s     Wait1ms_3
00000952  5282       533          addq.l    #1,D2
00000954  60F4       534          bra       Wait1ms_1
                     535   Wait1ms_3:
00000956  241F       536          move.l    (A7)+,D2
00000958  4E75       537          rts
                     538   ; ;
                     539   ; }
                     540   ; /************************************************************************************
                     541   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     542   ; **************************************************************************************/
                     543   ; void Wait3ms(void)
                     544   ; {
                     545   _Wait3ms:
0000095A  2F02       546          move.l    D2,-(A7)
                     547   ; int i ;
                     548   ; for(i = 0; i < 3; i++)
0000095C  4282       549          clr.l     D2
                     550   Wait3ms_1:
0000095E  0C82 0000  551          cmp.l     #3,D2
00000962  0003      
00000964  6C08       552          bge.s     Wait3ms_3
                     553   ; Wait1ms() ;
00000966  4EB8 0946  554          jsr       _Wait1ms
0000096A  5282       555          addq.l    #1,D2
0000096C  60F0       556          bra       Wait3ms_1
                     557   Wait3ms_3:
0000096E  241F       558          move.l    (A7)+,D2
00000970  4E75       559          rts
                     560   ; }
                     561   ; /*********************************************************************************************
                     562   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     563   ; *********************************************************************************************/
                     564   ; void Init_LCD(void)
                     565   ; {
                     566   _Init_LCD:
                     567   ; LCDcommand = (char)(0x0c) ;
00000972  13FC 000C  568          move.b    #12,4194336
00000976  0040 0020 
                     569   ; Wait3ms() ;
0000097A  4EB8 095A  570          jsr       _Wait3ms
                     571   ; LCDcommand = (char)(0x38) ;
0000097E  13FC 0038  572          move.b    #56,4194336
00000982  0040 0020 
                     573   ; Wait3ms() ;
00000986  4EB8 095A  574          jsr       _Wait3ms
0000098A  4E75       575          rts
                     576   ; }
                     577   ; /******************************************************************************
                     578   ; *subroutine to output a single character held in d1 to the LCD display
                     579   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     580   ; *current cursor position
                     581   ; *******************************************************************************/
                     582   ; void Outchar(int c)
                     583   ; {
                     584   _Outchar:
0000098C  4E56 0000  585          link      A6,#0
                     586   ; LCDdata = (char)(c);
00000990  202E 0008  587          move.l    8(A6),D0
00000994  13C0 0040  588          move.b    D0,4194338
00000998  0022      
                     589   ; Wait1ms() ;
0000099A  4EB8 0946  590          jsr       _Wait1ms
0000099E  4E5E       591          unlk      A6
000009A0  4E75       592          rts
                     593   ; }
                     594   ; /**********************************************************************************
                     595   ; *subroutine to output a message at the current cursor position of the LCD display
                     596   ; ************************************************************************************/
                     597   ; void OutMess(char *theMessage)
                     598   ; {
                     599   _OutMess:
000009A2  4E56 FFFC  600          link      A6,#-4
                     601   ; char c ;
                     602   ; while((c = *theMessage++) != (char)(0))
                     603   OutMess_1:
000009A6  206E 0008  604          move.l    8(A6),A0
000009AA  52AE 0008  605          addq.l    #1,8(A6)
000009AE  1D50 FFFF  606          move.b    (A0),-1(A6)
000009B2  1010       607          move.b    (A0),D0
000009B4  6712       608          beq.s     OutMess_3
                     609   ; Outchar(c) ;
000009B6  122E FFFF  610          move.b    -1(A6),D1
000009BA  4881       611          ext.w     D1
000009BC  48C1       612          ext.l     D1
000009BE  2F01       613          move.l    D1,-(A7)
000009C0  4EB8 098C  614          jsr       _Outchar
000009C4  584F       615          addq.w    #4,A7
000009C6  60DE       616          bra       OutMess_1
                     617   OutMess_3:
000009C8  4E5E       618          unlk      A6
000009CA  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to clear the line by issuing 24 space characters
                     623   ; *******************************************************************************/
                     624   ; void Clearln(void)
                     625   ; {
                     626   _Clearln:
000009CC  2F02       627          move.l    D2,-(A7)
                     628   ; unsigned char i ;
                     629   ; for(i = 0; i < 24; i ++)
000009CE  4202       630          clr.b     D2
                     631   Clearln_1:
000009D0  0C02 0018  632          cmp.b     #24,D2
000009D4  640E       633          bhs.s     Clearln_3
                     634   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009D6  4878 0020  635          pea       32
000009DA  4EB8 098C  636          jsr       _Outchar
000009DE  584F       637          addq.w    #4,A7
000009E0  5202       638          addq.b    #1,D2
000009E2  60EC       639          bra       Clearln_1
                     640   Clearln_3:
000009E4  241F       641          move.l    (A7)+,D2
000009E6  4E75       642          rts
                     643   ; }
                     644   ; /******************************************************************************
                     645   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     646   ; *******************************************************************************/
                     647   ; void Oline0(char *theMessage)
                     648   ; {
                     649   _Oline0:
000009E8  4E56 0000  650          link      A6,#0
                     651   ; LCDcommand = (char)(0x80) ;
000009EC  13FC 0080  652          move.b    #128,4194336
000009F0  0040 0020 
                     653   ; Wait3ms();
000009F4  4EB8 095A  654          jsr       _Wait3ms
                     655   ; Clearln() ;
000009F8  4EB8 09CC  656          jsr       _Clearln
                     657   ; LCDcommand = (char)(0x80) ;
000009FC  13FC 0080  658          move.b    #128,4194336
00000A00  0040 0020 
                     659   ; Wait3ms() ;
00000A04  4EB8 095A  660          jsr       _Wait3ms
                     661   ; OutMess(theMessage) ;
00000A08  2F2E 0008  662          move.l    8(A6),-(A7)
00000A0C  4EB8 09A2  663          jsr       _OutMess
00000A10  584F       664          addq.w    #4,A7
00000A12  4E5E       665          unlk      A6
00000A14  4E75       666          rts
                     667   ; }
                     668   ; /******************************************************************************
                     669   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     670   ; *******************************************************************************/
                     671   ; void Oline1(char *theMessage)
                     672   ; {
                     673   _Oline1:
00000A16  4E56 0000  674          link      A6,#0
                     675   ; LCDcommand = (char)(0xC0) ;
00000A1A  13FC 00C0  676          move.b    #192,4194336
00000A1E  0040 0020 
                     677   ; Wait3ms();
00000A22  4EB8 095A  678          jsr       _Wait3ms
                     679   ; Clearln() ;
00000A26  4EB8 09CC  680          jsr       _Clearln
                     681   ; LCDcommand = (char)(0xC0) ;
00000A2A  13FC 00C0  682          move.b    #192,4194336
00000A2E  0040 0020 
                     683   ; Wait3ms() ;
00000A32  4EB8 095A  684          jsr       _Wait3ms
                     685   ; OutMess(theMessage) ;
00000A36  2F2E 0008  686          move.l    8(A6),-(A7)
00000A3A  4EB8 09A2  687          jsr       _OutMess
00000A3E  584F       688          addq.w    #4,A7
00000A40  4E5E       689          unlk      A6
00000A42  4E75       690          rts
                     691   ; }
                     692   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     693   ; {
                     694   _InstallExceptionHandler:
00000A44  4E56 FFFC  695          link      A6,#-4
                     696   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A48  2D7C 0803  697          move.l    #134414336,-4(A6)
00000A4C  0000 FFFC 
                     698   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A50  206E FFFC  699          move.l    -4(A6),A0
00000A54  202E 000C  700          move.l    12(A6),D0
00000A58  E588       701          lsl.l     #2,D0
00000A5A  21AE 0008  702          move.l    8(A6),0(A0,D0.L)
00000A5E  0800      
00000A60  4E5E       703          unlk      A6
00000A62  4E75       704          rts
                     705   ; }
                     706   ; void TestLEDS(void)
                     707   ; {
                     708   _TestLEDS:
00000A64  48E7 3000  709          movem.l   D2/D3,-(A7)
                     710   ; int delay ;
                     711   ; unsigned char count = 0 ;
00000A68  4202       712          clr.b     D2
                     713   ; while(1)    {
                     714   TestLEDS_1:
                     715   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A6A  1002       716          move.b    D2,D0
00000A6C  E908       717          lsl.b     #4,D0
00000A6E  1202       718          move.b    D2,D1
00000A70  C23C 000F  719          and.b     #15,D1
00000A74  D001       720          add.b     D1,D0
00000A76  13C0 0040  721          move.b    D0,4194326
00000A7A  0016      
00000A7C  13C0 0040  722          move.b    D0,4194324
00000A80  0014      
00000A82  13C0 0040  723          move.b    D0,4194322
00000A86  0012      
00000A88  13C0 0040  724          move.b    D0,4194320
00000A8C  0010      
00000A8E  13C0 0040  725          move.b    D0,4194310
00000A92  0006      
00000A94  13C0 0040  726          move.b    D0,4194308
00000A98  0004      
00000A9A  13C0 0040  727          move.b    D0,4194306
00000A9E  0002      
00000AA0  13C0 0040  728          move.b    D0,4194304
00000AA4  0000      
                     729   ; for(delay = 0; delay < 200000; delay ++)
00000AA6  4283       730          clr.l     D3
                     731   TestLEDS_4:
00000AA8  0C83 0003  732          cmp.l     #200000,D3
00000AAC  0D40      
00000AAE  6C04       733          bge.s     TestLEDS_6
00000AB0  5283       734          addq.l    #1,D3
00000AB2  60F4       735          bra       TestLEDS_4
                     736   TestLEDS_6:
                     737   ; ;
                     738   ; count ++;
00000AB4  5202       739          addq.b    #1,D2
00000AB6  60B2       740          bra       TestLEDS_1
                     741   ; }
                     742   ; }
                     743   ; void SwitchTest(void)
                     744   ; {
                     745   _SwitchTest:
00000AB8  48E7 3020  746          movem.l   D2/D3/A2,-(A7)
00000ABC  45F9 0000  747          lea       _printf.L,A2
00000AC0  57A6      
                     748   ; int i, switches = 0 ;
00000AC2  4283       749          clr.l     D3
                     750   ; printf("\r\n") ;
00000AC4  4879 0000  751          pea       @m68kde~1_1.L
00000AC8  60B8      
00000ACA  4E92       752          jsr       (A2)
00000ACC  584F       753          addq.w    #4,A7
                     754   ; while(1)    {
                     755   SwitchTest_1:
                     756   ; switches = (PortB << 8) | (PortA) ;
00000ACE  1039 0040  757          move.b    4194306,D0
00000AD2  0002      
00000AD4  C0BC 0000  758          and.l     #255,D0
00000AD8  00FF      
00000ADA  E188       759          lsl.l     #8,D0
00000ADC  1239 0040  760          move.b    4194304,D1
00000AE0  0000      
00000AE2  C2BC 0000  761          and.l     #255,D1
00000AE6  00FF      
00000AE8  8081       762          or.l      D1,D0
00000AEA  2600       763          move.l    D0,D3
                     764   ; printf("\rSwitches SW[7-0] = ") ;
00000AEC  4879 0000  765          pea       @m68kde~1_2.L
00000AF0  60BC      
00000AF2  4E92       766          jsr       (A2)
00000AF4  584F       767          addq.w    #4,A7
                     768   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AF6  243C 0000  769          move.l    #128,D2
00000AFA  0080      
                     770   SwitchTest_4:
00000AFC  0C82 0000  771          cmp.l     #0,D2
00000B00  0000      
00000B02  6F20       772          ble.s     SwitchTest_6
                     773   ; if((switches & i) == 0)
00000B04  2003       774          move.l    D3,D0
00000B06  C082       775          and.l     D2,D0
00000B08  660C       776          bne.s     SwitchTest_7
                     777   ; printf("0") ;
00000B0A  4879 0000  778          pea       @m68kde~1_3.L
00000B0E  60D2      
00000B10  4E92       779          jsr       (A2)
00000B12  584F       780          addq.w    #4,A7
00000B14  600A       781          bra.s     SwitchTest_8
                     782   SwitchTest_7:
                     783   ; else
                     784   ; printf("1") ;
00000B16  4879 0000  785          pea       @m68kde~1_4.L
00000B1A  60D4      
00000B1C  4E92       786          jsr       (A2)
00000B1E  584F       787          addq.w    #4,A7
                     788   SwitchTest_8:
00000B20  E282       789          asr.l     #1,D2
00000B22  60D8       790          bra       SwitchTest_4
                     791   SwitchTest_6:
00000B24  60A8       792          bra       SwitchTest_1
                     793   ; }
                     794   ; }
                     795   ; }
                     796   ; /*********************************************************************************************
                     797   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     798   ; *********************************************************************************************/
                     799   ; void Init_RS232(void)
                     800   ; {
                     801   _Init_RS232:
                     802   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B26  13FC 0015  803          move.b    #21,4194368
00000B2A  0040 0040 
                     804   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B2E  13FC 0001  805          move.b    #1,4194372
00000B32  0040 0044 
00000B36  4E75       806          rts
                     807   ; }
                     808   ; int kbhit(void)
                     809   ; {
                     810   _kbhit:
                     811   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B38  1039 0040  812          move.b    4194368,D0
00000B3C  0040      
00000B3E  C03C 0001  813          and.b     #1,D0
00000B42  0C00 0001  814          cmp.b     #1,D0
00000B46  6604       815          bne.s     kbhit_1
                     816   ; return 1 ;
00000B48  7001       817          moveq     #1,D0
00000B4A  6002       818          bra.s     kbhit_3
                     819   kbhit_1:
                     820   ; else
                     821   ; return 0 ;
00000B4C  4280       822          clr.l     D0
                     823   kbhit_3:
00000B4E  4E75       824          rts
                     825   ; }
                     826   ; /*********************************************************************************************************
                     827   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     828   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     829   ; **  to allow the board to communicate with HyperTerminal Program
                     830   ; **
                     831   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     832   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     833   ; **  call _putch() also
                     834   ; *********************************************************************************************************/
                     835   ; int _putch( int c)
                     836   ; {
                     837   __putch:
00000B50  4E56 0000  838          link      A6,#0
                     839   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     840   _putch_1:
00000B54  1039 0040  841          move.b    4194368,D0
00000B58  0040      
00000B5A  C03C 0002  842          and.b     #2,D0
00000B5E  0C00 0002  843          cmp.b     #2,D0
00000B62  6702       844          beq.s     _putch_3
00000B64  60EE       845          bra       _putch_1
                     846   _putch_3:
                     847   ; ;
                     848   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B66  202E 0008  849          move.l    8(A6),D0
00000B6A  C03C 007F  850          and.b     #127,D0
00000B6E  13C0 0040  851          move.b    D0,4194370
00000B72  0042      
                     852   ; return c ;                                              // putchar() expects the character to be returned
00000B74  202E 0008  853          move.l    8(A6),D0
00000B78  4E5E       854          unlk      A6
00000B7A  4E75       855          rts
                     856   ; }
                     857   ; /*********************************************************************************************************
                     858   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     859   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     860   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     861   ; **
                     862   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     863   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     864   ; **  call _getch() also
                     865   ; *********************************************************************************************************/
                     866   ; int _getch( void )
                     867   ; {
                     868   __getch:
00000B7C  2F02       869          move.l    D2,-(A7)
                     870   ; int c ;
                     871   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     872   _getch_1:
00000B7E  1039 0040  873          move.b    4194368,D0
00000B82  0040      
00000B84  C03C 0001  874          and.b     #1,D0
00000B88  0C00 0001  875          cmp.b     #1,D0
00000B8C  6702       876          beq.s     _getch_3
00000B8E  60EE       877          bra       _getch_1
                     878   _getch_3:
                     879   ; ;
                     880   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B90  1039 0040  881          move.b    4194370,D0
00000B94  0042      
00000B96  C0BC 0000  882          and.l     #255,D0
00000B9A  00FF      
00000B9C  C0BC 0000  883          and.l     #127,D0
00000BA0  007F      
00000BA2  2400       884          move.l    D0,D2
                     885   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     886   ; if(Echo)
00000BA4  4AB9 0803  887          tst.l     _Echo.L
00000BA8  00E0      
00000BAA  6708       888          beq.s     _getch_4
                     889   ; _putch(c);
00000BAC  2F02       890          move.l    D2,-(A7)
00000BAE  4EB8 0B50  891          jsr       __putch
00000BB2  584F       892          addq.w    #4,A7
                     893   _getch_4:
                     894   ; return c ;
00000BB4  2002       895          move.l    D2,D0
00000BB6  241F       896          move.l    (A7)+,D2
00000BB8  4E75       897          rts
                     898   ; }
                     899   ; // flush the input stream for any unread characters
                     900   ; void FlushKeyboard(void)
                     901   ; {
                     902   _FlushKeyboard:
00000BBA  4E56 FFFC  903          link      A6,#-4
                     904   ; char c ;
                     905   ; while(1)    {
                     906   FlushKeyboard_1:
                     907   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BBE  1039 0040  908          move.b    4194368,D0
00000BC2  0040      
00000BC4  C03C 0001  909          and.b     #1,D0
00000BC8  0C00 0001  910          cmp.b     #1,D0
00000BCC  6610       911          bne.s     FlushKeyboard_4
                     912   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BCE  1039 0040  913          move.b    4194370,D0
00000BD2  0042      
00000BD4  C03C 007F  914          and.b     #127,D0
00000BD8  1D40 FFFF  915          move.b    D0,-1(A6)
00000BDC  6002       916          bra.s     FlushKeyboard_5
                     917   FlushKeyboard_4:
                     918   ; else
                     919   ; return ;
00000BDE  6002       920          bra.s     FlushKeyboard_6
                     921   FlushKeyboard_5:
00000BE0  60DC       922          bra       FlushKeyboard_1
                     923   FlushKeyboard_6:
00000BE2  4E5E       924          unlk      A6
00000BE4  4E75       925          rts
                     926   ; }
                     927   ; }
                     928   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     929   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     930   ; char xtod(int c)
                     931   ; {
                     932   _xtod:
00000BE6  4E56 0000  933          link      A6,#0
00000BEA  2F02       934          move.l    D2,-(A7)
00000BEC  242E 0008  935          move.l    8(A6),D2
                     936   ; if ((char)(c) <= (char)('9'))
00000BF0  0C02 0039  937          cmp.b     #57,D2
00000BF4  6E08       938          bgt.s     xtod_1
                     939   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BF6  1002       940          move.b    D2,D0
00000BF8  0400 0030  941          sub.b     #48,D0
00000BFC  6014       942          bra.s     xtod_3
                     943   xtod_1:
                     944   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BFE  0C02 0046  945          cmp.b     #70,D2
00000C02  6F08       946          ble.s     xtod_4
                     947   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000C04  1002       948          move.b    D2,D0
00000C06  0400 0057  949          sub.b     #87,D0
00000C0A  6006       950          bra.s     xtod_3
                     951   xtod_4:
                     952   ; else
                     953   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000C0C  1002       954          move.b    D2,D0
00000C0E  0400 0037  955          sub.b     #55,D0
                     956   xtod_3:
00000C12  241F       957          move.l    (A7)+,D2
00000C14  4E5E       958          unlk      A6
00000C16  4E75       959          rts
                     960   ; }
                     961   ; int Get2HexDigits(char *CheckSumPtr)
                     962   ; {
                     963   _Get2HexDigits:
00000C18  4E56 0000  964          link      A6,#0
00000C1C  2F02       965          move.l    D2,-(A7)
                     966   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C1E  2F00       967          move.l    D0,-(A7)
00000C20  4EB8 0B7C  968          jsr       __getch
00000C24  2200       969          move.l    D0,D1
00000C26  201F       970          move.l    (A7)+,D0
00000C28  2F01       971          move.l    D1,-(A7)
00000C2A  4EB8 0BE6  972          jsr       _xtod
00000C2E  584F       973          addq.w    #4,A7
00000C30  C0BC 0000  974          and.l     #255,D0
00000C34  00FF      
00000C36  E980       975          asl.l     #4,D0
00000C38  2F00       976          move.l    D0,-(A7)
00000C3A  2F01       977          move.l    D1,-(A7)
00000C3C  4EB8 0B7C  978          jsr       __getch
00000C40  221F       979          move.l    (A7)+,D1
00000C42  2F00       980          move.l    D0,-(A7)
00000C44  4EB8 0BE6  981          jsr       _xtod
00000C48  584F       982          addq.w    #4,A7
00000C4A  2200       983          move.l    D0,D1
00000C4C  201F       984          move.l    (A7)+,D0
00000C4E  C2BC 0000  985          and.l     #255,D1
00000C52  00FF      
00000C54  8081       986          or.l      D1,D0
00000C56  2400       987          move.l    D0,D2
                     988   ; if(CheckSumPtr)
00000C58  4AAE 0008  989          tst.l     8(A6)
00000C5C  6706       990          beq.s     Get2HexDigits_1
                     991   ; *CheckSumPtr += i ;
00000C5E  206E 0008  992          move.l    8(A6),A0
00000C62  D510       993          add.b     D2,(A0)
                     994   Get2HexDigits_1:
                     995   ; return i ;
00000C64  2002       996          move.l    D2,D0
00000C66  241F       997          move.l    (A7)+,D2
00000C68  4E5E       998          unlk      A6
00000C6A  4E75       999          rts
                    1000   ; }
                    1001   ; int Get4HexDigits(char *CheckSumPtr)
                    1002   ; {
                    1003   _Get4HexDigits:
00000C6C  4E56 0000 1004          link      A6,#0
                    1005   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C70  2F2E 0008 1006          move.l    8(A6),-(A7)
00000C74  4EB8 0C18 1007          jsr       _Get2HexDigits
00000C78  584F      1008          addq.w    #4,A7
00000C7A  E180      1009          asl.l     #8,D0
00000C7C  2F00      1010          move.l    D0,-(A7)
00000C7E  2F2E 0008 1011          move.l    8(A6),-(A7)
00000C82  4EB8 0C18 1012          jsr       _Get2HexDigits
00000C86  584F      1013          addq.w    #4,A7
00000C88  2200      1014          move.l    D0,D1
00000C8A  201F      1015          move.l    (A7)+,D0
00000C8C  8081      1016          or.l      D1,D0
00000C8E  4E5E      1017          unlk      A6
00000C90  4E75      1018          rts
                    1019   ; }
                    1020   ; int Get6HexDigits(char *CheckSumPtr)
                    1021   ; {
                    1022   _Get6HexDigits:
00000C92  4E56 0000 1023          link      A6,#0
                    1024   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C96  2F2E 0008 1025          move.l    8(A6),-(A7)
00000C9A  4EB8 0C6C 1026          jsr       _Get4HexDigits
00000C9E  584F      1027          addq.w    #4,A7
00000CA0  E180      1028          asl.l     #8,D0
00000CA2  2F00      1029          move.l    D0,-(A7)
00000CA4  2F2E 0008 1030          move.l    8(A6),-(A7)
00000CA8  4EB8 0C18 1031          jsr       _Get2HexDigits
00000CAC  584F      1032          addq.w    #4,A7
00000CAE  2200      1033          move.l    D0,D1
00000CB0  201F      1034          move.l    (A7)+,D0
00000CB2  8081      1035          or.l      D1,D0
00000CB4  4E5E      1036          unlk      A6
00000CB6  4E75      1037          rts
                    1038   ; }
                    1039   ; int Get8HexDigits(char *CheckSumPtr)
                    1040   ; {
                    1041   _Get8HexDigits:
00000CB8  4E56 0000 1042          link      A6,#0
                    1043   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CBC  2F2E 0008 1044          move.l    8(A6),-(A7)
00000CC0  4EB8 0C6C 1045          jsr       _Get4HexDigits
00000CC4  584F      1046          addq.w    #4,A7
00000CC6  E180      1047          asl.l     #8,D0
00000CC8  E180      1048          asl.l     #8,D0
00000CCA  2F00      1049          move.l    D0,-(A7)
00000CCC  2F2E 0008 1050          move.l    8(A6),-(A7)
00000CD0  4EB8 0C6C 1051          jsr       _Get4HexDigits
00000CD4  584F      1052          addq.w    #4,A7
00000CD6  2200      1053          move.l    D0,D1
00000CD8  201F      1054          move.l    (A7)+,D0
00000CDA  8081      1055          or.l      D1,D0
00000CDC  4E5E      1056          unlk      A6
00000CDE  4E75      1057          rts
                    1058   ; }
                    1059   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1060   _strcatInstruction:
00000CE0  4E56 0000 1061          link      A6,#0
00000CE4  2F2E 0008 1062          move.l    8(A6),-(A7)
00000CE8  4879 0803 1063          pea       _Instruction.L
00000CEC  04E2      
00000CEE  4EB9 0000 1064          jsr       _strcat
00000CF2  5774      
00000CF4  504F      1065          addq.w    #8,A7
00000CF6  4E5E      1066          unlk      A6
00000CF8  4E75      1067          rts
                    1068   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1069   _strcpyInstruction:
00000CFA  4E56 0000 1070          link      A6,#0
00000CFE  2F2E 0008 1071          move.l    8(A6),-(A7)
00000D02  4879 0803 1072          pea       _Instruction.L
00000D06  04E2      
00000D08  4EB9 0000 1073          jsr       _strcpy
00000D0C  55D4      
00000D0E  504F      1074          addq.w    #8,A7
00000D10  4E5E      1075          unlk      A6
00000D12  4E75      1076          rts
                    1077   ; void DisassembleProgram(void )
                    1078   ; {
                    1079   _DisassembleProgram:
00000D14  4E56 FFF8 1080          link      A6,#-8
00000D18  48E7 3038 1081          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D1C  45F9 0803 1082          lea       _InstructionSize.L,A2
00000D20  017E      
00000D22  47F9 0000 1083          lea       _printf.L,A3
00000D26  57A6      
00000D28  49F9 0803 1084          lea       _Instruction.L,A4
00000D2C  04E2      
                    1085   ; char c ;
                    1086   ; int i, j ;
                    1087   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1088   ; printf("\r\nEnter Start Address: ") ;
00000D2E  4879 0000 1089          pea       @m68kde~1_5.L
00000D32  60D6      
00000D34  4E93      1090          jsr       (A3)
00000D36  584F      1091          addq.w    #4,A7
                    1092   ; ProgramPtr = Get8HexDigits(0) ;
00000D38  42A7      1093          clr.l     -(A7)
00000D3A  4EB8 0CB8 1094          jsr       _Get8HexDigits
00000D3E  584F      1095          addq.w    #4,A7
00000D40  2400      1096          move.l    D0,D2
                    1097   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D42  4879 0000 1098          pea       @m68kde~1_6.L
00000D46  60EE      
00000D48  4E93      1099          jsr       (A3)
00000D4A  584F      1100          addq.w    #4,A7
                    1101   ; while(1)    {
                    1102   DisassembleProgram_1:
                    1103   ; for(i = 0; i < 20; i ++)
00000D4C  4283      1104          clr.l     D3
                    1105   DisassembleProgram_4:
00000D4E  0C83 0000 1106          cmp.l     #20,D3
00000D52  0014      
00000D54  6C00 017E 1107          bge       DisassembleProgram_6
                    1108   ; {
                    1109   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D58  24BC 0000 1110          move.l    #1,(A2)
00000D5C  0001      
                    1111   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D5E  2F02      1112          move.l    D2,-(A7)
00000D60  4EB9 0000 1113          jsr       _DisassembleInstruction
00000D64  3732      
00000D66  584F      1114          addq.w    #4,A7
                    1115   ; if(InstructionSize == 1)
00000D68  2012      1116          move.l    (A2),D0
00000D6A  0C80 0000 1117          cmp.l     #1,D0
00000D6E  0001      
00000D70  6620      1118          bne.s     DisassembleProgram_7
                    1119   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D72  2F0C      1120          move.l    A4,-(A7)
00000D74  2042      1121          move.l    D2,A0
00000D76  3210      1122          move.w    (A0),D1
00000D78  C2BC 0000 1123          and.l     #65535,D1
00000D7C  FFFF      
00000D7E  2F01      1124          move.l    D1,-(A7)
00000D80  2F02      1125          move.l    D2,-(A7)
00000D82  4879 0000 1126          pea       @m68kde~1_7.L
00000D86  6112      
00000D88  4E93      1127          jsr       (A3)
00000D8A  DEFC 0010 1128          add.w     #16,A7
00000D8E  6000 0138 1129          bra       DisassembleProgram_15
                    1130   DisassembleProgram_7:
                    1131   ; else if(InstructionSize == 2)
00000D92  2012      1132          move.l    (A2),D0
00000D94  0C80 0000 1133          cmp.l     #2,D0
00000D98  0002      
00000D9A  662E      1134          bne.s     DisassembleProgram_9
                    1135   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D9C  2F0C      1136          move.l    A4,-(A7)
00000D9E  2042      1137          move.l    D2,A0
00000DA0  3228 0002 1138          move.w    2(A0),D1
00000DA4  C2BC 0000 1139          and.l     #65535,D1
00000DA8  FFFF      
00000DAA  2F01      1140          move.l    D1,-(A7)
00000DAC  2042      1141          move.l    D2,A0
00000DAE  3210      1142          move.w    (A0),D1
00000DB0  C2BC 0000 1143          and.l     #65535,D1
00000DB4  FFFF      
00000DB6  2F01      1144          move.l    D1,-(A7)
00000DB8  2F02      1145          move.l    D2,-(A7)
00000DBA  4879 0000 1146          pea       @m68kde~1_8.L
00000DBE  613A      
00000DC0  4E93      1147          jsr       (A3)
00000DC2  DEFC 0014 1148          add.w     #20,A7
00000DC6  6000 0100 1149          bra       DisassembleProgram_15
                    1150   DisassembleProgram_9:
                    1151   ; else if(InstructionSize == 3)
00000DCA  2012      1152          move.l    (A2),D0
00000DCC  0C80 0000 1153          cmp.l     #3,D0
00000DD0  0003      
00000DD2  6600 003E 1154          bne       DisassembleProgram_11
                    1155   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DD6  2F0C      1156          move.l    A4,-(A7)
00000DD8  2042      1157          move.l    D2,A0
00000DDA  3228 0004 1158          move.w    4(A0),D1
00000DDE  C2BC 0000 1159          and.l     #65535,D1
00000DE2  FFFF      
00000DE4  2F01      1160          move.l    D1,-(A7)
00000DE6  2042      1161          move.l    D2,A0
00000DE8  3228 0002 1162          move.w    2(A0),D1
00000DEC  C2BC 0000 1163          and.l     #65535,D1
00000DF0  FFFF      
00000DF2  2F01      1164          move.l    D1,-(A7)
00000DF4  2042      1165          move.l    D2,A0
00000DF6  3210      1166          move.w    (A0),D1
00000DF8  C2BC 0000 1167          and.l     #65535,D1
00000DFC  FFFF      
00000DFE  2F01      1168          move.l    D1,-(A7)
00000E00  2F02      1169          move.l    D2,-(A7)
00000E02  4879 0000 1170          pea       @m68kde~1_9.L
00000E06  6162      
00000E08  4E93      1171          jsr       (A3)
00000E0A  DEFC 0018 1172          add.w     #24,A7
00000E0E  6000 00B8 1173          bra       DisassembleProgram_15
                    1174   DisassembleProgram_11:
                    1175   ; else if(InstructionSize == 4)
00000E12  2012      1176          move.l    (A2),D0
00000E14  0C80 0000 1177          cmp.l     #4,D0
00000E18  0004      
00000E1A  6600 004C 1178          bne       DisassembleProgram_13
                    1179   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E1E  2F0C      1180          move.l    A4,-(A7)
00000E20  2042      1181          move.l    D2,A0
00000E22  3228 0006 1182          move.w    6(A0),D1
00000E26  C2BC 0000 1183          and.l     #65535,D1
00000E2A  FFFF      
00000E2C  2F01      1184          move.l    D1,-(A7)
00000E2E  2042      1185          move.l    D2,A0
00000E30  3228 0004 1186          move.w    4(A0),D1
00000E34  C2BC 0000 1187          and.l     #65535,D1
00000E38  FFFF      
00000E3A  2F01      1188          move.l    D1,-(A7)
00000E3C  2042      1189          move.l    D2,A0
00000E3E  3228 0002 1190          move.w    2(A0),D1
00000E42  C2BC 0000 1191          and.l     #65535,D1
00000E46  FFFF      
00000E48  2F01      1192          move.l    D1,-(A7)
00000E4A  2042      1193          move.l    D2,A0
00000E4C  3210      1194          move.w    (A0),D1
00000E4E  C2BC 0000 1195          and.l     #65535,D1
00000E52  FFFF      
00000E54  2F01      1196          move.l    D1,-(A7)
00000E56  2F02      1197          move.l    D2,-(A7)
00000E58  4879 0000 1198          pea       @m68kde~1_10.L
00000E5C  618A      
00000E5E  4E93      1199          jsr       (A3)
00000E60  DEFC 001C 1200          add.w     #28,A7
00000E64  6000 0062 1201          bra       DisassembleProgram_15
                    1202   DisassembleProgram_13:
                    1203   ; else if(InstructionSize == 5)
00000E68  2012      1204          move.l    (A2),D0
00000E6A  0C80 0000 1205          cmp.l     #5,D0
00000E6E  0005      
00000E70  6600 0056 1206          bne       DisassembleProgram_15
                    1207   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E74  2F0C      1208          move.l    A4,-(A7)
00000E76  2042      1209          move.l    D2,A0
00000E78  3228 0008 1210          move.w    8(A0),D1
00000E7C  C2BC 0000 1211          and.l     #65535,D1
00000E80  FFFF      
00000E82  2F01      1212          move.l    D1,-(A7)
00000E84  2042      1213          move.l    D2,A0
00000E86  3228 0006 1214          move.w    6(A0),D1
00000E8A  C2BC 0000 1215          and.l     #65535,D1
00000E8E  FFFF      
00000E90  2F01      1216          move.l    D1,-(A7)
00000E92  2042      1217          move.l    D2,A0
00000E94  3228 0004 1218          move.w    4(A0),D1
00000E98  C2BC 0000 1219          and.l     #65535,D1
00000E9C  FFFF      
00000E9E  2F01      1220          move.l    D1,-(A7)
00000EA0  2042      1221          move.l    D2,A0
00000EA2  3228 0002 1222          move.w    2(A0),D1
00000EA6  C2BC 0000 1223          and.l     #65535,D1
00000EAA  FFFF      
00000EAC  2F01      1224          move.l    D1,-(A7)
00000EAE  2042      1225          move.l    D2,A0
00000EB0  3210      1226          move.w    (A0),D1
00000EB2  C2BC 0000 1227          and.l     #65535,D1
00000EB6  FFFF      
00000EB8  2F01      1228          move.l    D1,-(A7)
00000EBA  2F02      1229          move.l    D2,-(A7)
00000EBC  4879 0000 1230          pea       @m68kde~1_11.L
00000EC0  61B2      
00000EC2  4E93      1231          jsr       (A3)
00000EC4  DEFC 0020 1232          add.w     #32,A7
                    1233   DisassembleProgram_15:
                    1234   ; ProgramPtr += InstructionSize ;
00000EC8  2012      1235          move.l    (A2),D0
00000ECA  E388      1236          lsl.l     #1,D0
00000ECC  D480      1237          add.l     D0,D2
00000ECE  5283      1238          addq.l    #1,D3
00000ED0  6000 FE7C 1239          bra       DisassembleProgram_4
                    1240   DisassembleProgram_6:
                    1241   ; }
                    1242   ; c = _getch() ;
00000ED4  4EB8 0B7C 1243          jsr       __getch
00000ED8  1D40 FFFB 1244          move.b    D0,-5(A6)
                    1245   ; if(c == 0x1b)          // break on ESC
00000EDC  102E FFFB 1246          move.b    -5(A6),D0
00000EE0  0C00 001B 1247          cmp.b     #27,D0
00000EE4  6602      1248          bne.s     DisassembleProgram_17
                    1249   ; return ;
00000EE6  6004      1250          bra.s     DisassembleProgram_19
                    1251   DisassembleProgram_17:
00000EE8  6000 FE62 1252          bra       DisassembleProgram_1
                    1253   DisassembleProgram_19:
00000EEC  4CDF 1C0C 1254          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EF0  4E5E      1255          unlk      A6
00000EF2  4E75      1256          rts
                    1257   ; }
                    1258   ; }
                    1259   ; void DumpMemory(void)   // simple dump memory fn
                    1260   ; {
                    1261   _DumpMemory:
00000EF4  48E7 3C30 1262          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EF8  45F9 0000 1263          lea       _printf.L,A2
00000EFC  57A6      
00000EFE  47F9 0000 1264          lea       _putch.L,A3
00000F02  56C2      
                    1265   ; int i, j ;
                    1266   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1267   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000F04  4879 0000 1268          pea       @m68kde~1_12.L
00000F08  61DA      
00000F0A  4E92      1269          jsr       (A2)
00000F0C  584F      1270          addq.w    #4,A7
                    1271   ; printf("\r\nEnter Start Address: ") ;
00000F0E  4879 0000 1272          pea       @m68kde~1_5.L
00000F12  60D6      
00000F14  4E92      1273          jsr       (A2)
00000F16  584F      1274          addq.w    #4,A7
                    1275   ; RamPtr = Get8HexDigits(0) ;
00000F18  42A7      1276          clr.l     -(A7)
00000F1A  4EB8 0CB8 1277          jsr       _Get8HexDigits
00000F1E  584F      1278          addq.w    #4,A7
00000F20  2600      1279          move.l    D0,D3
                    1280   ; while(1)    {
                    1281   DumpMemory_1:
                    1282   ; for(i = 0; i < 16; i ++)    {
00000F22  4285      1283          clr.l     D5
                    1284   DumpMemory_4:
00000F24  0C85 0000 1285          cmp.l     #16,D5
00000F28  0010      
00000F2A  6C00 0096 1286          bge       DumpMemory_6
                    1287   ; printf("\r\n%08x ", RamPtr) ;
00000F2E  2F03      1288          move.l    D3,-(A7)
00000F30  4879 0000 1289          pea       @m68kde~1_13.L
00000F34  6214      
00000F36  4E92      1290          jsr       (A2)
00000F38  504F      1291          addq.w    #8,A7
                    1292   ; for(j=0; j < 16; j ++)  {
00000F3A  4282      1293          clr.l     D2
                    1294   DumpMemory_7:
00000F3C  0C82 0000 1295          cmp.l     #16,D2
00000F40  0010      
00000F42  6C24      1296          bge.s     DumpMemory_9
                    1297   ; printf("%02X",RamPtr[j]) ;
00000F44  2043      1298          move.l    D3,A0
00000F46  1230 2800 1299          move.b    0(A0,D2.L),D1
00000F4A  C2BC 0000 1300          and.l     #255,D1
00000F4E  00FF      
00000F50  2F01      1301          move.l    D1,-(A7)
00000F52  4879 0000 1302          pea       @m68kde~1_14.L
00000F56  621C      
00000F58  4E92      1303          jsr       (A2)
00000F5A  504F      1304          addq.w    #8,A7
                    1305   ; putchar(' ') ;
00000F5C  4878 0020 1306          pea       32
00000F60  4E93      1307          jsr       (A3)
00000F62  584F      1308          addq.w    #4,A7
00000F64  5282      1309          addq.l    #1,D2
00000F66  60D4      1310          bra       DumpMemory_7
                    1311   DumpMemory_9:
                    1312   ; }
                    1313   ; // now display the data as ASCII at the end
                    1314   ; printf("  ") ;
00000F68  4879 0000 1315          pea       @m68kde~1_15.L
00000F6C  6222      
00000F6E  4E92      1316          jsr       (A2)
00000F70  584F      1317          addq.w    #4,A7
                    1318   ; for(j = 0; j < 16; j++) {
00000F72  4282      1319          clr.l     D2
                    1320   DumpMemory_10:
00000F74  0C82 0000 1321          cmp.l     #16,D2
00000F78  0010      
00000F7A  6C00 003A 1322          bge       DumpMemory_12
                    1323   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F7E  2043      1324          move.l    D3,A0
00000F80  1030 2800 1325          move.b    0(A0,D2.L),D0
00000F84  C03C 007F 1326          and.b     #127,D0
00000F88  1800      1327          move.b    D0,D4
                    1328   ; if((c > (char)(0x7f)) || (c < ' '))
00000F8A  0C04 007F 1329          cmp.b     #127,D4
00000F8E  6206      1330          bhi.s     DumpMemory_15
00000F90  0C04 0020 1331          cmp.b     #32,D4
00000F94  640A      1332          bhs.s     DumpMemory_13
                    1333   DumpMemory_15:
                    1334   ; putchar('.') ;
00000F96  4878 002E 1335          pea       46
00000F9A  4E93      1336          jsr       (A3)
00000F9C  584F      1337          addq.w    #4,A7
00000F9E  6012      1338          bra.s     DumpMemory_14
                    1339   DumpMemory_13:
                    1340   ; else
                    1341   ; putchar(RamPtr[j]) ;
00000FA0  2043      1342          move.l    D3,A0
00000FA2  1230 2800 1343          move.b    0(A0,D2.L),D1
00000FA6  C2BC 0000 1344          and.l     #255,D1
00000FAA  00FF      
00000FAC  2F01      1345          move.l    D1,-(A7)
00000FAE  4E93      1346          jsr       (A3)
00000FB0  584F      1347          addq.w    #4,A7
                    1348   DumpMemory_14:
00000FB2  5282      1349          addq.l    #1,D2
00000FB4  60BE      1350          bra       DumpMemory_10
                    1351   DumpMemory_12:
                    1352   ; }
                    1353   ; RamPtr = RamPtr + 16 ;
00000FB6  0683 0000 1354          add.l     #16,D3
00000FBA  0010      
00000FBC  5285      1355          addq.l    #1,D5
00000FBE  6000 FF64 1356          bra       DumpMemory_4
                    1357   DumpMemory_6:
                    1358   ; }
                    1359   ; printf("\r\n") ;
00000FC2  4879 0000 1360          pea       @m68kde~1_1.L
00000FC6  60B8      
00000FC8  4E92      1361          jsr       (A2)
00000FCA  584F      1362          addq.w    #4,A7
                    1363   ; c = _getch() ;
00000FCC  4EB8 0B7C 1364          jsr       __getch
00000FD0  1800      1365          move.b    D0,D4
                    1366   ; if(c == 0x1b)          // break on ESC
00000FD2  0C04 001B 1367          cmp.b     #27,D4
00000FD6  6602      1368          bne.s     DumpMemory_16
                    1369   ; break ;
00000FD8  6004      1370          bra.s     DumpMemory_3
                    1371   DumpMemory_16:
00000FDA  6000 FF46 1372          bra       DumpMemory_1
                    1373   DumpMemory_3:
00000FDE  4CDF 0C3C 1374          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FE2  4E75      1375          rts
                    1376   ; }
                    1377   ; }
                    1378   ; void FillMemory()
                    1379   ; {
                    1380   _FillMemory:
00000FE4  48E7 3820 1381          movem.l   D2/D3/D4/A2,-(A7)
00000FE8  45F9 0000 1382          lea       _printf.L,A2
00000FEC  57A6      
                    1383   ; char *StartRamPtr, *EndRamPtr ;
                    1384   ; unsigned char FillData ;
                    1385   ; printf("\r\nFill Memory Block") ;
00000FEE  4879 0000 1386          pea       @m68kde~1_16.L
00000FF2  6226      
00000FF4  4E92      1387          jsr       (A2)
00000FF6  584F      1388          addq.w    #4,A7
                    1389   ; printf("\r\nEnter Start Address: ") ;
00000FF8  4879 0000 1390          pea       @m68kde~1_5.L
00000FFC  60D6      
00000FFE  4E92      1391          jsr       (A2)
00001000  584F      1392          addq.w    #4,A7
                    1393   ; StartRamPtr = Get8HexDigits(0) ;
00001002  42A7      1394          clr.l     -(A7)
00001004  4EB8 0CB8 1395          jsr       _Get8HexDigits
00001008  584F      1396          addq.w    #4,A7
0000100A  2400      1397          move.l    D0,D2
                    1398   ; printf("\r\nEnter End Address: ") ;
0000100C  4879 0000 1399          pea       @m68kde~1_17.L
00001010  623A      
00001012  4E92      1400          jsr       (A2)
00001014  584F      1401          addq.w    #4,A7
                    1402   ; EndRamPtr = Get8HexDigits(0) ;
00001016  42A7      1403          clr.l     -(A7)
00001018  4EB8 0CB8 1404          jsr       _Get8HexDigits
0000101C  584F      1405          addq.w    #4,A7
0000101E  2800      1406          move.l    D0,D4
                    1407   ; printf("\r\nEnter Fill Data: ") ;
00001020  4879 0000 1408          pea       @m68kde~1_18.L
00001024  6250      
00001026  4E92      1409          jsr       (A2)
00001028  584F      1410          addq.w    #4,A7
                    1411   ; FillData = Get2HexDigits(0) ;
0000102A  42A7      1412          clr.l     -(A7)
0000102C  4EB8 0C18 1413          jsr       _Get2HexDigits
00001030  584F      1414          addq.w    #4,A7
00001032  1600      1415          move.b    D0,D3
                    1416   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001034  C6BC 0000 1417          and.l     #255,D3
00001038  00FF      
0000103A  2F03      1418          move.l    D3,-(A7)
0000103C  2F04      1419          move.l    D4,-(A7)
0000103E  2F02      1420          move.l    D2,-(A7)
00001040  4879 0000 1421          pea       @m68kde~1_19.L
00001044  6264      
00001046  4E92      1422          jsr       (A2)
00001048  DEFC 0010 1423          add.w     #16,A7
                    1424   ; while(StartRamPtr < EndRamPtr)
                    1425   FillMemory_1:
0000104C  B484      1426          cmp.l     D4,D2
0000104E  6408      1427          bhs.s     FillMemory_3
                    1428   ; *StartRamPtr++ = FillData ;
00001050  2042      1429          move.l    D2,A0
00001052  5282      1430          addq.l    #1,D2
00001054  1083      1431          move.b    D3,(A0)
00001056  60F4      1432          bra       FillMemory_1
                    1433   FillMemory_3:
00001058  4CDF 041C 1434          movem.l   (A7)+,D2/D3/D4/A2
0000105C  4E75      1435          rts
                    1436   ; }
                    1437   ; void Load_SRecordFile()
                    1438   ; {
                    1439   _Load_SRecordFile:
0000105E  4E56 FFDC 1440          link      A6,#-36
00001062  48E7 3F3C 1441          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001066  45EE FFFA 1442          lea       -6(A6),A2
0000106A  47F8 0C18 1443          lea       _Get2HexDigits.L,A3
0000106E  49F9 0000 1444          lea       _printf.L,A4
00001072  57A6      
                    1445   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001074  42AE FFEE 1446          clr.l     -18(A6)
00001078  3A7C 0000 1447          move.w    #0,A5
                    1448   ; int result, ByteCount ;
                    1449   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1450   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1451   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
0000107C  7E00      1452          moveq     #0,D7
                    1453   ; AddressFail = 0 ;
0000107E  42AE FFEA 1454          clr.l     -22(A6)
                    1455   ; Echo = 0 ;                              // don't echo S records during download
00001082  42B9 0803 1456          clr.l     _Echo.L
00001086  00E0      
                    1457   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001088  4879 0000 1458          pea       @m68kde~1_20.L
0000108C  6294      
0000108E  4E94      1459          jsr       (A4)
00001090  584F      1460          addq.w    #4,A7
                    1461   ; while(1)    {
                    1462   Load_SRecordFile_1:
                    1463   ; CheckSum = 0 ;
00001092  4212      1464          clr.b     (A2)
                    1465   ; do {
                    1466   Load_SRecordFile_4:
                    1467   ; c = toupper(_getch()) ;
00001094  2F00      1468          move.l    D0,-(A7)
00001096  4EB8 0B7C 1469          jsr       __getch
0000109A  2200      1470          move.l    D0,D1
0000109C  201F      1471          move.l    (A7)+,D0
0000109E  2F01      1472          move.l    D1,-(A7)
000010A0  4EB9 0000 1473          jsr       _toupper
000010A4  578A      
000010A6  584F      1474          addq.w    #4,A7
000010A8  1C00      1475          move.b    D0,D6
                    1476   ; if(c == 0x1b )      // if break
000010AA  0C06 001B 1477          cmp.b     #27,D6
000010AE  6604      1478          bne.s     Load_SRecordFile_6
                    1479   ; return;
000010B0  6000 0132 1480          bra       Load_SRecordFile_8
                    1481   Load_SRecordFile_6:
000010B4  0C06 0053 1482          cmp.b     #83,D6
000010B8  66DA      1483          bne       Load_SRecordFile_4
                    1484   ; }while(c != (char)('S'));   // wait for S start of header
                    1485   ; HeaderType = _getch() ;
000010BA  4EB8 0B7C 1486          jsr       __getch
000010BE  1600      1487          move.b    D0,D3
                    1488   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010C0  0C03 0030 1489          cmp.b     #48,D3
000010C4  6706      1490          beq.s     Load_SRecordFile_11
000010C6  0C03 0035 1491          cmp.b     #53,D3
000010CA  6604      1492          bne.s     Load_SRecordFile_9
                    1493   Load_SRecordFile_11:
                    1494   ; continue ;
000010CC  6000 00D2 1495          bra       Load_SRecordFile_23
                    1496   Load_SRecordFile_9:
                    1497   ; if(HeaderType >= (char)('7'))
000010D0  0C03 0037 1498          cmp.b     #55,D3
000010D4  6D04      1499          blt.s     Load_SRecordFile_12
                    1500   ; break ;                 // end load on s7,s8,s9 records
000010D6  6000 00CC 1501          bra       Load_SRecordFile_3
                    1502   Load_SRecordFile_12:
                    1503   ; // get the bytecount
                    1504   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010DA  2F0A      1505          move.l    A2,-(A7)
000010DC  4E93      1506          jsr       (A3)
000010DE  584F      1507          addq.w    #4,A7
000010E0  2D40 FFF6 1508          move.l    D0,-10(A6)
                    1509   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1510   ; if(HeaderType == (char)('1')) {
000010E4  0C03 0031 1511          cmp.b     #49,D3
000010E8  660E      1512          bne.s     Load_SRecordFile_14
                    1513   ; AddressSize = 2 ;       // 2 byte address
000010EA  7A02      1514          moveq     #2,D5
                    1515   ; Address = Get4HexDigits(&CheckSum);
000010EC  2F0A      1516          move.l    A2,-(A7)
000010EE  4EB8 0C6C 1517          jsr       _Get4HexDigits
000010F2  584F      1518          addq.w    #4,A7
000010F4  2800      1519          move.l    D0,D4
000010F6  6020      1520          bra.s     Load_SRecordFile_17
                    1521   Load_SRecordFile_14:
                    1522   ; }
                    1523   ; else if (HeaderType == (char)('2')) {
000010F8  0C03 0032 1524          cmp.b     #50,D3
000010FC  660E      1525          bne.s     Load_SRecordFile_16
                    1526   ; AddressSize = 3 ;       // 3 byte address
000010FE  7A03      1527          moveq     #3,D5
                    1528   ; Address = Get6HexDigits(&CheckSum) ;
00001100  2F0A      1529          move.l    A2,-(A7)
00001102  4EB8 0C92 1530          jsr       _Get6HexDigits
00001106  584F      1531          addq.w    #4,A7
00001108  2800      1532          move.l    D0,D4
0000110A  600C      1533          bra.s     Load_SRecordFile_17
                    1534   Load_SRecordFile_16:
                    1535   ; }
                    1536   ; else    {
                    1537   ; AddressSize = 4 ;       // 4 byte address
0000110C  7A04      1538          moveq     #4,D5
                    1539   ; Address = Get8HexDigits(&CheckSum) ;
0000110E  2F0A      1540          move.l    A2,-(A7)
00001110  4EB8 0CB8 1541          jsr       _Get8HexDigits
00001114  584F      1542          addq.w    #4,A7
00001116  2800      1543          move.l    D0,D4
                    1544   Load_SRecordFile_17:
                    1545   ; }
                    1546   ; RamPtr = (char *)(Address) ;                            // point to download area
00001118  2D44 FFFC 1547          move.l    D4,-4(A6)
                    1548   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
0000111C  202E FFF6 1549          move.l    -10(A6),D0
00001120  9085      1550          sub.l     D5,D0
00001122  5380      1551          subq.l    #1,D0
00001124  2D40 FFE2 1552          move.l    D0,-30(A6)
                    1553   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001128  4282      1554          clr.l     D2
                    1555   Load_SRecordFile_18:
0000112A  B4AE FFE2 1556          cmp.l     -30(A6),D2
0000112E  6C1E      1557          bge.s     Load_SRecordFile_20
                    1558   ; DataByte = Get2HexDigits(&CheckSum) ;
00001130  2F0A      1559          move.l    A2,-(A7)
00001132  4E93      1560          jsr       (A3)
00001134  584F      1561          addq.w    #4,A7
00001136  2D40 FFDE 1562          move.l    D0,-34(A6)
                    1563   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
0000113A  202E FFDE 1564          move.l    -34(A6),D0
0000113E  206E FFFC 1565          move.l    -4(A6),A0
00001142  52AE FFFC 1566          addq.l    #1,-4(A6)
00001146  1080      1567          move.b    D0,(A0)
                    1568   ; ByteTotal++;
00001148  524D      1569          addq.w    #1,A5
0000114A  5282      1570          addq.l    #1,D2
0000114C  60DC      1571          bra       Load_SRecordFile_18
                    1572   Load_SRecordFile_20:
                    1573   ; }
                    1574   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1575   ; ReadCheckSum = Get2HexDigits(0) ;
0000114E  42A7      1576          clr.l     -(A7)
00001150  4E93      1577          jsr       (A3)
00001152  584F      1578          addq.w    #4,A7
00001154  1D40 FFFB 1579          move.b    D0,-5(A6)
                    1580   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001158  1012      1581          move.b    (A2),D0
0000115A  4600      1582          not.b     D0
0000115C  4880      1583          ext.w     D0
0000115E  C07C 00FF 1584          and.w     #255,D0
00001162  122E FFFB 1585          move.b    -5(A6),D1
00001166  4881      1586          ext.w     D1
00001168  C27C 00FF 1587          and.w     #255,D1
0000116C  B041      1588          cmp.w     D1,D0
0000116E  6708      1589          beq.s     Load_SRecordFile_21
                    1590   ; LoadFailed = 1 ;
00001170  7E01      1591          moveq     #1,D7
                    1592   ; FailedAddress = Address ;
00001172  2D44 FFE6 1593          move.l    D4,-26(A6)
                    1594   ; break;
00001176  602C      1595          bra.s     Load_SRecordFile_3
                    1596   Load_SRecordFile_21:
                    1597   ; }
                    1598   ; SRecordCount++ ;
00001178  52AE FFEE 1599          addq.l    #1,-18(A6)
                    1600   ; // display feedback on progress
                    1601   ; if(SRecordCount % 25 == 0)
0000117C  2F2E FFEE 1602          move.l    -18(A6),-(A7)
00001180  4878 0019 1603          pea       25
00001184  4EB9 0000 1604          jsr       LDIV
00001188  55F6      
0000118A  202F 0004 1605          move.l    4(A7),D0
0000118E  504F      1606          addq.w    #8,A7
00001190  4A80      1607          tst.l     D0
00001192  660C      1608          bne.s     Load_SRecordFile_23
                    1609   ; putchar('.') ;
00001194  4878 002E 1610          pea       46
00001198  4EB9 0000 1611          jsr       _putch
0000119C  56C2      
0000119E  584F      1612          addq.w    #4,A7
                    1613   Load_SRecordFile_23:
000011A0  6000 FEF0 1614          bra       Load_SRecordFile_1
                    1615   Load_SRecordFile_3:
                    1616   ; }
                    1617   ; if(LoadFailed == 1) {
000011A4  0C87 0000 1618          cmp.l     #1,D7
000011A8  0001      
000011AA  6610      1619          bne.s     Load_SRecordFile_25
                    1620   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
000011AC  2F2E FFE6 1621          move.l    -26(A6),-(A7)
000011B0  4879 0000 1622          pea       @m68kde~1_21.L
000011B4  62C4      
000011B6  4E94      1623          jsr       (A4)
000011B8  504F      1624          addq.w    #8,A7
000011BA  600C      1625          bra.s     Load_SRecordFile_26
                    1626   Load_SRecordFile_25:
                    1627   ; }
                    1628   ; else
                    1629   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011BC  2F0D      1630          move.l    A5,-(A7)
000011BE  4879 0000 1631          pea       @m68kde~1_22.L
000011C2  62EA      
000011C4  4E94      1632          jsr       (A4)
000011C6  504F      1633          addq.w    #8,A7
                    1634   Load_SRecordFile_26:
                    1635   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1636   ; for(i = 0; i < 400000; i ++)
000011C8  4282      1637          clr.l     D2
                    1638   Load_SRecordFile_27:
000011CA  0C82 0006 1639          cmp.l     #400000,D2
000011CE  1A80      
000011D0  6C04      1640          bge.s     Load_SRecordFile_29
000011D2  5282      1641          addq.l    #1,D2
000011D4  60F4      1642          bra       Load_SRecordFile_27
                    1643   Load_SRecordFile_29:
                    1644   ; ;
                    1645   ; FlushKeyboard() ;
000011D6  4EB8 0BBA 1646          jsr       _FlushKeyboard
                    1647   ; Echo = 1;
000011DA  23FC 0000 1648          move.l    #1,_Echo.L
000011DE  0001 0803 
000011E2  00E0      
                    1649   Load_SRecordFile_8:
000011E4  4CDF 3CFC 1650          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011E8  4E5E      1651          unlk      A6
000011EA  4E75      1652          rts
                    1653   ; }
                    1654   ; void MemoryChange(void)
                    1655   ; {
                    1656   _MemoryChange:
000011EC  48E7 3820 1657          movem.l   D2/D3/D4/A2,-(A7)
000011F0  45F9 0000 1658          lea       _printf.L,A2
000011F4  57A6      
                    1659   ; unsigned char *RamPtr,c ; // pointer to memory
                    1660   ; int Data ;
                    1661   ; printf("\r\nExamine and Change Memory") ;
000011F6  4879 0000 1662          pea       @m68kde~1_23.L
000011FA  630C      
000011FC  4E92      1663          jsr       (A2)
000011FE  584F      1664          addq.w    #4,A7
                    1665   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00001200  4879 0000 1666          pea       @m68kde~1_24.L
00001204  6328      
00001206  4E92      1667          jsr       (A2)
00001208  584F      1668          addq.w    #4,A7
                    1669   ; printf("\r\nEnter Address: ") ;
0000120A  4879 0000 1670          pea       @m68kde~1_25.L
0000120E  636E      
00001210  4E92      1671          jsr       (A2)
00001212  584F      1672          addq.w    #4,A7
                    1673   ; RamPtr = Get8HexDigits(0) ;
00001214  42A7      1674          clr.l     -(A7)
00001216  4EB8 0CB8 1675          jsr       _Get8HexDigits
0000121A  584F      1676          addq.w    #4,A7
0000121C  2600      1677          move.l    D0,D3
                    1678   ; while(1)    {
                    1679   MemoryChange_1:
                    1680   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000121E  2043      1681          move.l    D3,A0
00001220  1210      1682          move.b    (A0),D1
00001222  C2BC 0000 1683          and.l     #255,D1
00001226  00FF      
00001228  2F01      1684          move.l    D1,-(A7)
0000122A  2F03      1685          move.l    D3,-(A7)
0000122C  4879 0000 1686          pea       @m68kde~1_26.L
00001230  6380      
00001232  4E92      1687          jsr       (A2)
00001234  DEFC 000C 1688          add.w     #12,A7
                    1689   ; c = tolower(_getch()) ;
00001238  2F00      1690          move.l    D0,-(A7)
0000123A  4EB8 0B7C 1691          jsr       __getch
0000123E  2200      1692          move.l    D0,D1
00001240  201F      1693          move.l    (A7)+,D0
00001242  2F01      1694          move.l    D1,-(A7)
00001244  4EB9 0000 1695          jsr       _tolower
00001248  5726      
0000124A  584F      1696          addq.w    #4,A7
0000124C  1400      1697          move.b    D0,D2
                    1698   ; if(c == (char)(0x1b))
0000124E  0C02 001B 1699          cmp.b     #27,D2
00001252  6604      1700          bne.s     MemoryChange_4
                    1701   ; return ;                                // abort on escape
00001254  6000 0090 1702          bra       MemoryChange_6
                    1703   MemoryChange_4:
                    1704   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001258  0C02 0030 1705          cmp.b     #48,D2
0000125C  6506      1706          blo.s     MemoryChange_10
0000125E  0C02 0039 1707          cmp.b     #57,D2
00001262  6310      1708          bls.s     MemoryChange_9
                    1709   MemoryChange_10:
00001264  0C02 0061 1710          cmp.b     #97,D2
00001268  6500 006E 1711          blo       MemoryChange_7
0000126C  0C02 0066 1712          cmp.b     #102,D2
00001270  6200 0066 1713          bhi       MemoryChange_7
                    1714   MemoryChange_9:
                    1715   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001274  C4BC 0000 1716          and.l     #255,D2
00001278  00FF      
0000127A  2F02      1717          move.l    D2,-(A7)
0000127C  4EB8 0BE6 1718          jsr       _xtod
00001280  584F      1719          addq.w    #4,A7
00001282  C0BC 0000 1720          and.l     #255,D0
00001286  00FF      
00001288  E980      1721          asl.l     #4,D0
0000128A  2F00      1722          move.l    D0,-(A7)
0000128C  2F01      1723          move.l    D1,-(A7)
0000128E  4EB8 0B7C 1724          jsr       __getch
00001292  221F      1725          move.l    (A7)+,D1
00001294  2F00      1726          move.l    D0,-(A7)
00001296  4EB8 0BE6 1727          jsr       _xtod
0000129A  584F      1728          addq.w    #4,A7
0000129C  2200      1729          move.l    D0,D1
0000129E  201F      1730          move.l    (A7)+,D0
000012A0  C2BC 0000 1731          and.l     #255,D1
000012A4  00FF      
000012A6  8081      1732          or.l      D1,D0
000012A8  2800      1733          move.l    D0,D4
                    1734   ; *RamPtr = (char)(Data) ;
000012AA  2043      1735          move.l    D3,A0
000012AC  1084      1736          move.b    D4,(A0)
                    1737   ; if(*RamPtr != Data) {
000012AE  2043      1738          move.l    D3,A0
000012B0  1010      1739          move.b    (A0),D0
000012B2  C0BC 0000 1740          and.l     #255,D0
000012B6  00FF      
000012B8  B084      1741          cmp.l     D4,D0
000012BA  671A      1742          beq.s     MemoryChange_11
                    1743   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012BC  2043      1744          move.l    D3,A0
000012BE  1210      1745          move.b    (A0),D1
000012C0  C2BC 0000 1746          and.l     #255,D1
000012C4  00FF      
000012C6  2F01      1747          move.l    D1,-(A7)
000012C8  2F04      1748          move.l    D4,-(A7)
000012CA  4879 0000 1749          pea       @m68kde~1_27.L
000012CE  6392      
000012D0  4E92      1750          jsr       (A2)
000012D2  DEFC 000C 1751          add.w     #12,A7
                    1752   MemoryChange_11:
000012D6  6008      1753          bra.s     MemoryChange_13
                    1754   MemoryChange_7:
                    1755   ; }
                    1756   ; }
                    1757   ; else if(c == (char)('-'))
000012D8  0C02 002D 1758          cmp.b     #45,D2
000012DC  6602      1759          bne.s     MemoryChange_13
                    1760   ; RamPtr -= 2 ; ;
000012DE  5583      1761          subq.l    #2,D3
                    1762   MemoryChange_13:
                    1763   ; RamPtr ++ ;
000012E0  5283      1764          addq.l    #1,D3
000012E2  6000 FF3A 1765          bra       MemoryChange_1
                    1766   MemoryChange_6:
000012E6  4CDF 041C 1767          movem.l   (A7)+,D2/D3/D4/A2
000012EA  4E75      1768          rts
                    1769   ; }
                    1770   ; }
                    1771   ; /*******************************************************************
                    1772   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1773   ; ********************************************************************/
                    1774   ; void ProgramFlashChip(void)
                    1775   ; {
                    1776   _ProgramFlashChip:
000012EC  4E75      1777          rts
                    1778   ; //
                    1779   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1780   ; // TODO : then verify by reading it back and comparing to memory
                    1781   ; //
                    1782   ; }
                    1783   ; /*************************************************************************
                    1784   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1785   ; **************************************************************************/
                    1786   ; void LoadFromFlashChip(void)
                    1787   ; {
                    1788   _LoadFromFlashChip:
                    1789   ; printf("\r\nLoading Program From SPI Flash....") ;
000012EE  4879 0000 1790          pea       @m68kde~1_28.L
000012F2  63C6      
000012F4  4EB9 0000 1791          jsr       _printf
000012F8  57A6      
000012FA  584F      1792          addq.w    #4,A7
000012FC  4E75      1793          rts
                    1794   ; //
                    1795   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1796   ; //
                    1797   ; }
                    1798   ; // get rid of excess spaces
                    1799   ; void FormatInstructionForTrace(void)
                    1800   ; {
                    1801   _FormatInstructionForTrace:
000012FE  4E56 FF9C 1802          link      A6,#-100
00001302  48E7 3C20 1803          movem.l   D2/D3/D4/D5/A2,-(A7)
00001306  45EE FF9C 1804          lea       -100(A6),A2
                    1805   ; unsigned short int i ;
                    1806   ; char c, temp[100], *iptr, *tempptr ;
                    1807   ; for(i=0; i < 100; i++)
0000130A  4244      1808          clr.w     D4
                    1809   FormatInstructionForTrace_1:
0000130C  0C44 0064 1810          cmp.w     #100,D4
00001310  640E      1811          bhs.s     FormatInstructionForTrace_3
                    1812   ; temp[i] = 0 ;
00001312  C8BC 0000 1813          and.l     #65535,D4
00001316  FFFF      
00001318  4232 4800 1814          clr.b     0(A2,D4.L)
0000131C  5244      1815          addq.w    #1,D4
0000131E  60EC      1816          bra       FormatInstructionForTrace_1
                    1817   FormatInstructionForTrace_3:
                    1818   ; iptr = Instruction ;
00001320  41F9 0803 1819          lea       _Instruction.L,A0
00001324  04E2      
00001326  2408      1820          move.l    A0,D2
                    1821   ; tempptr = temp ;
00001328  2A0A      1822          move.l    A2,D5
                    1823   ; do{
                    1824   FormatInstructionForTrace_4:
                    1825   ; c = *iptr++ ;
0000132A  2042      1826          move.l    D2,A0
0000132C  5282      1827          addq.l    #1,D2
0000132E  1610      1828          move.b    (A0),D3
                    1829   ; *tempptr++ = c ;  // copy chars over
00001330  2045      1830          move.l    D5,A0
00001332  5285      1831          addq.l    #1,D5
00001334  1083      1832          move.b    D3,(A0)
                    1833   ; if(c == ' ')  {   // if copied space
00001336  0C03 0020 1834          cmp.b     #32,D3
0000133A  6622      1835          bne.s     FormatInstructionForTrace_6
                    1836   ; while(*iptr == ' ') {
                    1837   FormatInstructionForTrace_8:
0000133C  2042      1838          move.l    D2,A0
0000133E  1010      1839          move.b    (A0),D0
00001340  0C00 0020 1840          cmp.b     #32,D0
00001344  660C      1841          bne.s     FormatInstructionForTrace_10
                    1842   ; if(*iptr == 0)  // if end of string then done
00001346  2042      1843          move.l    D2,A0
00001348  1010      1844          move.b    (A0),D0
0000134A  6602      1845          bne.s     FormatInstructionForTrace_11
                    1846   ; break ;
0000134C  6004      1847          bra.s     FormatInstructionForTrace_10
                    1848   FormatInstructionForTrace_11:
                    1849   ; iptr++ ; // skip over remaining spaces
0000134E  5282      1850          addq.l    #1,D2
00001350  60EA      1851          bra       FormatInstructionForTrace_8
                    1852   FormatInstructionForTrace_10:
                    1853   ; }
                    1854   ; strcat(tempptr,iptr) ;
00001352  2F02      1855          move.l    D2,-(A7)
00001354  2F05      1856          move.l    D5,-(A7)
00001356  4EB9 0000 1857          jsr       _strcat
0000135A  5774      
0000135C  504F      1858          addq.w    #8,A7
                    1859   FormatInstructionForTrace_6:
0000135E  4A03      1860          tst.b     D3
00001360  66C8      1861          bne       FormatInstructionForTrace_4
                    1862   ; }
                    1863   ; }while(c != 0) ;
                    1864   ; strcpyInstruction(temp) ;
00001362  2F0A      1865          move.l    A2,-(A7)
00001364  4EB8 0CFA 1866          jsr       _strcpyInstruction
00001368  584F      1867          addq.w    #4,A7
0000136A  4CDF 043C 1868          movem.l   (A7)+,D2/D3/D4/D5/A2
0000136E  4E5E      1869          unlk      A6
00001370  4E75      1870          rts
                    1871   ; }
                    1872   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1873   ; // IMPORTANT
                    1874   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1875   ; // has to be done with an interrupt (IRQ Level 6)
                    1876   ; //
                    1877   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1878   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1879   ; //
                    1880   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1881   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1882   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1883   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1884   ; // program area
                    1885   ; //
                    1886   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1887   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1888   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1889   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1890   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1891   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1892   ; void DumpRegisters()
                    1893   ; {
                    1894   _DumpRegisters:
00001372  48E7 3F3C 1895          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001376  45F9 0000 1896          lea       _putch.L,A2
0000137A  56C2      
0000137C  47F9 0000 1897          lea       _printf.L,A3
00001380  57A6      
00001382  49F9 0803 1898          lea       _SR.L,A4
00001386  012C      
00001388  4BF9 0803 1899          lea       _WatchPointString.L,A5
0000138C  01C2      
                    1900   ; short i, x, j, k ;
                    1901   ; unsigned char c, *BytePointer;
                    1902   ; // buld up strings for displaying watchpoints
                    1903   ; for(x = 0; x < (short)(8); x++)
0000138E  4242      1904          clr.w     D2
                    1905   DumpRegisters_1:
00001390  0C42 0008 1906          cmp.w     #8,D2
00001394  6C00 01C6 1907          bge       DumpRegisters_3
                    1908   ; {
                    1909   ; if(WatchPointSetOrCleared[x] == 1)
00001398  48C2      1910          ext.l     D2
0000139A  2002      1911          move.l    D2,D0
0000139C  E588      1912          lsl.l     #2,D0
0000139E  41F9 0803 1913          lea       _WatchPointSetOrCleared.L,A0
000013A2  01A2      
000013A4  2030 0800 1914          move.l    0(A0,D0.L),D0
000013A8  0C80 0000 1915          cmp.l     #1,D0
000013AC  0001      
000013AE  6600 0186 1916          bne       DumpRegisters_4
                    1917   ; {
                    1918   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000013B2  48C2      1919          ext.l     D2
000013B4  2202      1920          move.l    D2,D1
000013B6  E589      1921          lsl.l     #2,D1
000013B8  41F9 0803 1922          lea       _WatchPointAddress.L,A0
000013BC  0182      
000013BE  2F30 1800 1923          move.l    0(A0,D1.L),-(A7)
000013C2  4879 0000 1924          pea       @m68kde~1_29.L
000013C6  63EC      
000013C8  220D      1925          move.l    A5,D1
000013CA  48C2      1926          ext.l     D2
000013CC  2F00      1927          move.l    D0,-(A7)
000013CE  2002      1928          move.l    D2,D0
000013D0  C1FC 0064 1929          muls      #100,D0
000013D4  D280      1930          add.l     D0,D1
000013D6  201F      1931          move.l    (A7)+,D0
000013D8  2F01      1932          move.l    D1,-(A7)
000013DA  4EB9 0000 1933          jsr       _sprintf
000013DE  5742      
000013E0  DEFC 000C 1934          add.w     #12,A7
                    1935   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013E4  48C2      1936          ext.l     D2
000013E6  2002      1937          move.l    D2,D0
000013E8  E588      1938          lsl.l     #2,D0
000013EA  41F9 0803 1939          lea       _WatchPointAddress.L,A0
000013EE  0182      
000013F0  2A30 0800 1940          move.l    0(A0,D0.L),D5
                    1941   ; for(j = 0; j < (short)(16); j+=2)
000013F4  4243      1942          clr.w     D3
                    1943   DumpRegisters_6:
000013F6  0C43 0010 1944          cmp.w     #16,D3
000013FA  6C00 0082 1945          bge       DumpRegisters_8
                    1946   ; {
                    1947   ; for(k = 0; k < (short)(2); k++)
000013FE  4246      1948          clr.w     D6
                    1949   DumpRegisters_9:
00001400  0C46 0002 1950          cmp.w     #2,D6
00001404  6C00 0052 1951          bge       DumpRegisters_11
                    1952   ; {
                    1953   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
00001408  2045      1954          move.l    D5,A0
0000140A  48C3      1955          ext.l     D3
0000140C  2203      1956          move.l    D3,D1
0000140E  48C6      1957          ext.l     D6
00001410  D286      1958          add.l     D6,D1
00001412  1230 1800 1959          move.b    0(A0,D1.L),D1
00001416  C2BC 0000 1960          and.l     #255,D1
0000141A  00FF      
0000141C  2F01      1961          move.l    D1,-(A7)
0000141E  4879 0000 1962          pea       @m68kde~1_14.L
00001422  621C      
00001424  4879 0803 1963          pea       _TempString.L
00001428  0546      
0000142A  4EB9 0000 1964          jsr       _sprintf
0000142E  5742      
00001430  DEFC 000C 1965          add.w     #12,A7
                    1966   ; strcat(WatchPointString[x], TempString) ;
00001434  4879 0803 1967          pea       _TempString.L
00001438  0546      
0000143A  220D      1968          move.l    A5,D1
0000143C  48C2      1969          ext.l     D2
0000143E  2F00      1970          move.l    D0,-(A7)
00001440  2002      1971          move.l    D2,D0
00001442  C1FC 0064 1972          muls      #100,D0
00001446  D280      1973          add.l     D0,D1
00001448  201F      1974          move.l    (A7)+,D0
0000144A  2F01      1975          move.l    D1,-(A7)
0000144C  4EB9 0000 1976          jsr       _strcat
00001450  5774      
00001452  504F      1977          addq.w    #8,A7
00001454  5246      1978          addq.w    #1,D6
00001456  60A8      1979          bra       DumpRegisters_9
                    1980   DumpRegisters_11:
                    1981   ; }
                    1982   ; strcat(WatchPointString[x]," ") ;
00001458  4879 0000 1983          pea       @m68kde~1_30.L
0000145C  63F4      
0000145E  220D      1984          move.l    A5,D1
00001460  48C2      1985          ext.l     D2
00001462  2F00      1986          move.l    D0,-(A7)
00001464  2002      1987          move.l    D2,D0
00001466  C1FC 0064 1988          muls      #100,D0
0000146A  D280      1989          add.l     D0,D1
0000146C  201F      1990          move.l    (A7)+,D0
0000146E  2F01      1991          move.l    D1,-(A7)
00001470  4EB9 0000 1992          jsr       _strcat
00001474  5774      
00001476  504F      1993          addq.w    #8,A7
00001478  5443      1994          addq.w    #2,D3
0000147A  6000 FF7A 1995          bra       DumpRegisters_6
                    1996   DumpRegisters_8:
                    1997   ; }
                    1998   ; strcat(WatchPointString[x], "  ") ;
0000147E  4879 0000 1999          pea       @m68kde~1_15.L
00001482  6222      
00001484  220D      2000          move.l    A5,D1
00001486  48C2      2001          ext.l     D2
00001488  2F00      2002          move.l    D0,-(A7)
0000148A  2002      2003          move.l    D2,D0
0000148C  C1FC 0064 2004          muls      #100,D0
00001490  D280      2005          add.l     D0,D1
00001492  201F      2006          move.l    (A7)+,D0
00001494  2F01      2007          move.l    D1,-(A7)
00001496  4EB9 0000 2008          jsr       _strcat
0000149A  5774      
0000149C  504F      2009          addq.w    #8,A7
                    2010   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000149E  48C2      2011          ext.l     D2
000014A0  2002      2012          move.l    D2,D0
000014A2  E588      2013          lsl.l     #2,D0
000014A4  41F9 0803 2014          lea       _WatchPointAddress.L,A0
000014A8  0182      
000014AA  2A30 0800 2015          move.l    0(A0,D0.L),D5
                    2016   ; for(j = 0; j < (short)(16); j++)
000014AE  4243      2017          clr.w     D3
                    2018   DumpRegisters_12:
000014B0  0C43 0010 2019          cmp.w     #16,D3
000014B4  6C00 007E 2020          bge       DumpRegisters_14
                    2021   ; {
                    2022   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014B8  2045      2023          move.l    D5,A0
000014BA  48C3      2024          ext.l     D3
000014BC  1030 3800 2025          move.b    0(A0,D3.L),D0
000014C0  C03C 007F 2026          and.b     #127,D0
000014C4  1E00      2027          move.b    D0,D7
                    2028   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014C6  0C07 007F 2029          cmp.b     #127,D7
000014CA  6206      2030          bhi.s     DumpRegisters_17
000014CC  0C07 0020 2031          cmp.b     #32,D7
000014D0  6416      2032          bhs.s     DumpRegisters_15
                    2033   DumpRegisters_17:
                    2034   ; sprintf(TempString, ".") ;
000014D2  4879 0000 2035          pea       @m68kde~1_31.L
000014D6  63F6      
000014D8  4879 0803 2036          pea       _TempString.L
000014DC  0546      
000014DE  4EB9 0000 2037          jsr       _sprintf
000014E2  5742      
000014E4  504F      2038          addq.w    #8,A7
000014E6  6026      2039          bra.s     DumpRegisters_16
                    2040   DumpRegisters_15:
                    2041   ; else
                    2042   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014E8  2045      2043          move.l    D5,A0
000014EA  48C3      2044          ext.l     D3
000014EC  1230 3800 2045          move.b    0(A0,D3.L),D1
000014F0  C2BC 0000 2046          and.l     #255,D1
000014F4  00FF      
000014F6  2F01      2047          move.l    D1,-(A7)
000014F8  4879 0000 2048          pea       @m68kde~1_32.L
000014FC  63F8      
000014FE  4879 0803 2049          pea       _TempString.L
00001502  0546      
00001504  4EB9 0000 2050          jsr       _sprintf
00001508  5742      
0000150A  DEFC 000C 2051          add.w     #12,A7
                    2052   DumpRegisters_16:
                    2053   ; strcat(WatchPointString[x], TempString) ;
0000150E  4879 0803 2054          pea       _TempString.L
00001512  0546      
00001514  220D      2055          move.l    A5,D1
00001516  48C2      2056          ext.l     D2
00001518  2F00      2057          move.l    D0,-(A7)
0000151A  2002      2058          move.l    D2,D0
0000151C  C1FC 0064 2059          muls      #100,D0
00001520  D280      2060          add.l     D0,D1
00001522  201F      2061          move.l    (A7)+,D0
00001524  2F01      2062          move.l    D1,-(A7)
00001526  4EB9 0000 2063          jsr       _strcat
0000152A  5774      
0000152C  504F      2064          addq.w    #8,A7
0000152E  5243      2065          addq.w    #1,D3
00001530  6000 FF7E 2066          bra       DumpRegisters_12
                    2067   DumpRegisters_14:
00001534  6020      2068          bra.s     DumpRegisters_5
                    2069   DumpRegisters_4:
                    2070   ; }
                    2071   ; }
                    2072   ; else
                    2073   ; strcpy(WatchPointString[x], "") ;
00001536  4879 0000 2074          pea       @m68kde~1_33.L
0000153A  63FC      
0000153C  220D      2075          move.l    A5,D1
0000153E  48C2      2076          ext.l     D2
00001540  2F00      2077          move.l    D0,-(A7)
00001542  2002      2078          move.l    D2,D0
00001544  C1FC 0064 2079          muls      #100,D0
00001548  D280      2080          add.l     D0,D1
0000154A  201F      2081          move.l    (A7)+,D0
0000154C  2F01      2082          move.l    D1,-(A7)
0000154E  4EB9 0000 2083          jsr       _strcpy
00001552  55D4      
00001554  504F      2084          addq.w    #8,A7
                    2085   DumpRegisters_5:
00001556  5242      2086          addq.w    #1,D2
00001558  6000 FE36 2087          bra       DumpRegisters_1
                    2088   DumpRegisters_3:
                    2089   ; }
                    2090   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
0000155C  2F39 0803 2091          move.l    _a0.L,-(A7)
00001560  0104      
00001562  2F39 0803 2092          move.l    _d0.L,-(A7)
00001566  00E4      
00001568  4879 0000 2093          pea       @m68kde~1_34.L
0000156C  63FE      
0000156E  4E93      2094          jsr       (A3)
00001570  DEFC 000C 2095          add.w     #12,A7
                    2096   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001574  2F39 0803 2097          move.l    _a1.L,-(A7)
00001578  0108      
0000157A  2F39 0803 2098          move.l    _d1.L,-(A7)
0000157E  00E8      
00001580  4879 0000 2099          pea       @m68kde~1_35.L
00001584  641A      
00001586  4E93      2100          jsr       (A3)
00001588  DEFC 000C 2101          add.w     #12,A7
                    2102   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
0000158C  2F39 0803 2103          move.l    _a2.L,-(A7)
00001590  010C      
00001592  2F39 0803 2104          move.l    _d2.L,-(A7)
00001596  00EC      
00001598  4879 0000 2105          pea       @m68kde~1_36.L
0000159C  6434      
0000159E  4E93      2106          jsr       (A3)
000015A0  DEFC 000C 2107          add.w     #12,A7
                    2108   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000015A4  2F39 0803 2109          move.l    _a3.L,-(A7)
000015A8  0110      
000015AA  2F39 0803 2110          move.l    _d3.L,-(A7)
000015AE  00F0      
000015B0  4879 0000 2111          pea       @m68kde~1_37.L
000015B4  644E      
000015B6  4E93      2112          jsr       (A3)
000015B8  DEFC 000C 2113          add.w     #12,A7
                    2114   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015BC  2F39 0803 2115          move.l    _a4.L,-(A7)
000015C0  0114      
000015C2  2F39 0803 2116          move.l    _d4.L,-(A7)
000015C6  00F4      
000015C8  4879 0000 2117          pea       @m68kde~1_38.L
000015CC  6468      
000015CE  4E93      2118          jsr       (A3)
000015D0  DEFC 000C 2119          add.w     #12,A7
                    2120   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015D4  2F39 0803 2121          move.l    _a5.L,-(A7)
000015D8  0118      
000015DA  2F39 0803 2122          move.l    _d5.L,-(A7)
000015DE  00F8      
000015E0  4879 0000 2123          pea       @m68kde~1_39.L
000015E4  6482      
000015E6  4E93      2124          jsr       (A3)
000015E8  DEFC 000C 2125          add.w     #12,A7
                    2126   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015EC  2F39 0803 2127          move.l    _a6.L,-(A7)
000015F0  011C      
000015F2  2F39 0803 2128          move.l    _d6.L,-(A7)
000015F6  00FC      
000015F8  4879 0000 2129          pea       @m68kde~1_40.L
000015FC  649C      
000015FE  4E93      2130          jsr       (A3)
00001600  DEFC 000C 2131          add.w     #12,A7
                    2132   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001604  3214      2133          move.w    (A4),D1
00001606  C27C 2000 2134          and.w     #8192,D1
0000160A  0C41 2000 2135          cmp.w     #8192,D1
0000160E  6608      2136          bne.s     DumpRegisters_18
00001610  2239 0803 2137          move.l    _SSP.L,D1
00001614  0124      
00001616  6006      2138          bra.s     DumpRegisters_19
                    2139   DumpRegisters_18:
00001618  2239 0803 2140          move.l    _USP.L,D1
0000161C  0128      
                    2141   DumpRegisters_19:
0000161E  2F01      2142          move.l    D1,-(A7)
00001620  2F39 0803 2143          move.l    _d7.L,-(A7)
00001624  0100      
00001626  4879 0000 2144          pea       @m68kde~1_41.L
0000162A  64B6      
0000162C  4E93      2145          jsr       (A3)
0000162E  DEFC 000C 2146          add.w     #12,A7
                    2147   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001632  2F39 0803 2148          move.l    _USP.L,-(A7)
00001636  0128      
00001638  4879 0000 2149          pea       @m68kde~1_42.L
0000163C  64D0      
0000163E  4E93      2150          jsr       (A3)
00001640  504F      2151          addq.w    #8,A7
                    2152   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001642  2F39 0803 2153          move.l    _SSP.L,-(A7)
00001646  0124      
00001648  4879 0000 2154          pea       @m68kde~1_43.L
0000164C  64EE      
0000164E  4E93      2155          jsr       (A3)
00001650  504F      2156          addq.w    #8,A7
                    2157   ; printf("\r\n SR = $%04X   ",SR) ;
00001652  3214      2158          move.w    (A4),D1
00001654  C2BC 0000 2159          and.l     #65535,D1
00001658  FFFF      
0000165A  2F01      2160          move.l    D1,-(A7)
0000165C  4879 0000 2161          pea       @m68kde~1_44.L
00001660  6510      
00001662  4E93      2162          jsr       (A3)
00001664  504F      2163          addq.w    #8,A7
                    2164   ; // display the status word in characters etc.
                    2165   ; printf("   [") ;
00001666  4879 0000 2166          pea       @m68kde~1_45.L
0000166A  6522      
0000166C  4E93      2167          jsr       (A3)
0000166E  584F      2168          addq.w    #4,A7
                    2169   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001670  3014      2170          move.w    (A4),D0
00001672  C07C 8000 2171          and.w     #32768,D0
00001676  0C40 8000 2172          cmp.w     #32768,D0
0000167A  660A      2173          bne.s     DumpRegisters_20
0000167C  4878 0054 2174          pea       84
00001680  4E92      2175          jsr       (A2)
00001682  584F      2176          addq.w    #4,A7
00001684  6008      2177          bra.s     DumpRegisters_21
                    2178   DumpRegisters_20:
00001686  4878 002D 2179          pea       45
0000168A  4E92      2180          jsr       (A2)
0000168C  584F      2181          addq.w    #4,A7
                    2182   DumpRegisters_21:
                    2183   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000168E  3014      2184          move.w    (A4),D0
00001690  C07C 2000 2185          and.w     #8192,D0
00001694  0C40 2000 2186          cmp.w     #8192,D0
00001698  660A      2187          bne.s     DumpRegisters_22
0000169A  4878 0053 2188          pea       83
0000169E  4E92      2189          jsr       (A2)
000016A0  584F      2190          addq.w    #4,A7
000016A2  6008      2191          bra.s     DumpRegisters_23
                    2192   DumpRegisters_22:
000016A4  4878 0055 2193          pea       85
000016A8  4E92      2194          jsr       (A2)
000016AA  584F      2195          addq.w    #4,A7
                    2196   DumpRegisters_23:
                    2197   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000016AC  3014      2198          move.w    (A4),D0
000016AE  C07C 0400 2199          and.w     #1024,D0
000016B2  0C40 0400 2200          cmp.w     #1024,D0
000016B6  660A      2201          bne.s     DumpRegisters_24
000016B8  4878 0031 2202          pea       49
000016BC  4E92      2203          jsr       (A2)
000016BE  584F      2204          addq.w    #4,A7
000016C0  6008      2205          bra.s     DumpRegisters_25
                    2206   DumpRegisters_24:
000016C2  4878 0030 2207          pea       48
000016C6  4E92      2208          jsr       (A2)
000016C8  584F      2209          addq.w    #4,A7
                    2210   DumpRegisters_25:
                    2211   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016CA  3014      2212          move.w    (A4),D0
000016CC  C07C 0200 2213          and.w     #512,D0
000016D0  0C40 0200 2214          cmp.w     #512,D0
000016D4  660A      2215          bne.s     DumpRegisters_26
000016D6  4878 0031 2216          pea       49
000016DA  4E92      2217          jsr       (A2)
000016DC  584F      2218          addq.w    #4,A7
000016DE  6008      2219          bra.s     DumpRegisters_27
                    2220   DumpRegisters_26:
000016E0  4878 0030 2221          pea       48
000016E4  4E92      2222          jsr       (A2)
000016E6  584F      2223          addq.w    #4,A7
                    2224   DumpRegisters_27:
                    2225   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016E8  3014      2226          move.w    (A4),D0
000016EA  C07C 0100 2227          and.w     #256,D0
000016EE  0C40 0100 2228          cmp.w     #256,D0
000016F2  660A      2229          bne.s     DumpRegisters_28
000016F4  4878 0031 2230          pea       49
000016F8  4E92      2231          jsr       (A2)
000016FA  584F      2232          addq.w    #4,A7
000016FC  6008      2233          bra.s     DumpRegisters_29
                    2234   DumpRegisters_28:
000016FE  4878 0030 2235          pea       48
00001702  4E92      2236          jsr       (A2)
00001704  584F      2237          addq.w    #4,A7
                    2238   DumpRegisters_29:
                    2239   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001706  3014      2240          move.w    (A4),D0
00001708  C07C 0010 2241          and.w     #16,D0
0000170C  0C40 0010 2242          cmp.w     #16,D0
00001710  660A      2243          bne.s     DumpRegisters_30
00001712  4878 0058 2244          pea       88
00001716  4E92      2245          jsr       (A2)
00001718  584F      2246          addq.w    #4,A7
0000171A  6008      2247          bra.s     DumpRegisters_31
                    2248   DumpRegisters_30:
0000171C  4878 002D 2249          pea       45
00001720  4E92      2250          jsr       (A2)
00001722  584F      2251          addq.w    #4,A7
                    2252   DumpRegisters_31:
                    2253   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001724  3014      2254          move.w    (A4),D0
00001726  C07C 0008 2255          and.w     #8,D0
0000172A  0C40 0008 2256          cmp.w     #8,D0
0000172E  660A      2257          bne.s     DumpRegisters_32
00001730  4878 004E 2258          pea       78
00001734  4E92      2259          jsr       (A2)
00001736  584F      2260          addq.w    #4,A7
00001738  6008      2261          bra.s     DumpRegisters_33
                    2262   DumpRegisters_32:
0000173A  4878 002D 2263          pea       45
0000173E  4E92      2264          jsr       (A2)
00001740  584F      2265          addq.w    #4,A7
                    2266   DumpRegisters_33:
                    2267   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001742  3014      2268          move.w    (A4),D0
00001744  C07C 0004 2269          and.w     #4,D0
00001748  0C40 0004 2270          cmp.w     #4,D0
0000174C  660A      2271          bne.s     DumpRegisters_34
0000174E  4878 005A 2272          pea       90
00001752  4E92      2273          jsr       (A2)
00001754  584F      2274          addq.w    #4,A7
00001756  6008      2275          bra.s     DumpRegisters_35
                    2276   DumpRegisters_34:
00001758  4878 002D 2277          pea       45
0000175C  4E92      2278          jsr       (A2)
0000175E  584F      2279          addq.w    #4,A7
                    2280   DumpRegisters_35:
                    2281   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001760  3014      2282          move.w    (A4),D0
00001762  C07C 0002 2283          and.w     #2,D0
00001766  0C40 0002 2284          cmp.w     #2,D0
0000176A  660A      2285          bne.s     DumpRegisters_36
0000176C  4878 0056 2286          pea       86
00001770  4E92      2287          jsr       (A2)
00001772  584F      2288          addq.w    #4,A7
00001774  6008      2289          bra.s     DumpRegisters_37
                    2290   DumpRegisters_36:
00001776  4878 002D 2291          pea       45
0000177A  4E92      2292          jsr       (A2)
0000177C  584F      2293          addq.w    #4,A7
                    2294   DumpRegisters_37:
                    2295   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000177E  3014      2296          move.w    (A4),D0
00001780  C07C 0001 2297          and.w     #1,D0
00001784  0C40 0001 2298          cmp.w     #1,D0
00001788  660A      2299          bne.s     DumpRegisters_38
0000178A  4878 0043 2300          pea       67
0000178E  4E92      2301          jsr       (A2)
00001790  584F      2302          addq.w    #4,A7
00001792  6008      2303          bra.s     DumpRegisters_39
                    2304   DumpRegisters_38:
00001794  4878 002D 2305          pea       45
00001798  4E92      2306          jsr       (A2)
0000179A  584F      2307          addq.w    #4,A7
                    2308   DumpRegisters_39:
                    2309   ; putchar(']') ;
0000179C  4878 005D 2310          pea       93
000017A0  4E92      2311          jsr       (A2)
000017A2  584F      2312          addq.w    #4,A7
                    2313   ; printf("\r\n PC = $%08X  ", PC) ;
000017A4  2F39 0803 2314          move.l    _PC.L,-(A7)
000017A8  0120      
000017AA  4879 0000 2315          pea       @m68kde~1_46.L
000017AE  6528      
000017B0  4E93      2316          jsr       (A3)
000017B2  504F      2317          addq.w    #8,A7
                    2318   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017B4  2039 0803 2319          move.l    _PC.L,D0
000017B8  0120      
000017BA  2040      2320          move.l    D0,A0
000017BC  3010      2321          move.w    (A0),D0
000017BE  0C40 4E4E 2322          cmp.w     #20046,D0
000017C2  6724      2323          beq.s     DumpRegisters_40
                    2324   ; DisassembleInstruction(PC) ;
000017C4  2F39 0803 2325          move.l    _PC.L,-(A7)
000017C8  0120      
000017CA  4EB9 0000 2326          jsr       _DisassembleInstruction
000017CE  3732      
000017D0  584F      2327          addq.w    #4,A7
                    2328   ; FormatInstructionForTrace() ;
000017D2  4EB8 12FE 2329          jsr       _FormatInstructionForTrace
                    2330   ; printf("%s", Instruction) ;
000017D6  4879 0803 2331          pea       _Instruction.L
000017DA  04E2      
000017DC  4879 0000 2332          pea       @m68kde~1_47.L
000017E0  6538      
000017E2  4E93      2333          jsr       (A3)
000017E4  504F      2334          addq.w    #8,A7
000017E6  600A      2335          bra.s     DumpRegisters_41
                    2336   DumpRegisters_40:
                    2337   ; }
                    2338   ; else
                    2339   ; printf("[BREAKPOINT]") ;
000017E8  4879 0000 2340          pea       @m68kde~1_48.L
000017EC  653C      
000017EE  4E93      2341          jsr       (A3)
000017F0  584F      2342          addq.w    #4,A7
                    2343   DumpRegisters_41:
                    2344   ; printf("\r\n") ;
000017F2  4879 0000 2345          pea       @m68kde~1_1.L
000017F6  60B8      
000017F8  4E93      2346          jsr       (A3)
000017FA  584F      2347          addq.w    #4,A7
                    2348   ; for(i=0; i < 8; i++)    {
000017FC  4244      2349          clr.w     D4
                    2350   DumpRegisters_42:
000017FE  0C44 0008 2351          cmp.w     #8,D4
00001802  6C00 0040 2352          bge       DumpRegisters_44
                    2353   ; if(WatchPointSetOrCleared[i] == 1)
00001806  48C4      2354          ext.l     D4
00001808  2004      2355          move.l    D4,D0
0000180A  E588      2356          lsl.l     #2,D0
0000180C  41F9 0803 2357          lea       _WatchPointSetOrCleared.L,A0
00001810  01A2      
00001812  2030 0800 2358          move.l    0(A0,D0.L),D0
00001816  0C80 0000 2359          cmp.l     #1,D0
0000181A  0001      
0000181C  6622      2360          bne.s     DumpRegisters_45
                    2361   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000181E  220D      2362          move.l    A5,D1
00001820  48C4      2363          ext.l     D4
00001822  2F00      2364          move.l    D0,-(A7)
00001824  2004      2365          move.l    D4,D0
00001826  C1FC 0064 2366          muls      #100,D0
0000182A  D280      2367          add.l     D0,D1
0000182C  201F      2368          move.l    (A7)+,D0
0000182E  2F01      2369          move.l    D1,-(A7)
00001830  48C4      2370          ext.l     D4
00001832  2F04      2371          move.l    D4,-(A7)
00001834  4879 0000 2372          pea       @m68kde~1_49.L
00001838  654A      
0000183A  4E93      2373          jsr       (A3)
0000183C  DEFC 000C 2374          add.w     #12,A7
                    2375   DumpRegisters_45:
00001840  5244      2376          addq.w    #1,D4
00001842  60BA      2377          bra       DumpRegisters_42
                    2378   DumpRegisters_44:
00001844  4CDF 3CFC 2379          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001848  4E75      2380          rts
                    2381   ; }
                    2382   ; }
                    2383   ; // Trace Exception Handler
                    2384   ; void DumpRegistersandPause(void)
                    2385   ; {
                    2386   _DumpRegistersandPause:
0000184A  2F0A      2387          move.l    A2,-(A7)
0000184C  45F9 0000 2388          lea       _printf.L,A2
00001850  57A6      
                    2389   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001852  4879 0000 2390          pea       @m68kde~1_50.L
00001856  6556      
00001858  4E92      2391          jsr       (A2)
0000185A  584F      2392          addq.w    #4,A7
                    2393   ; printf("\r\nBreak Points :[Disabled]") ;
0000185C  4879 0000 2394          pea       @m68kde~1_51.L
00001860  6576      
00001862  4E92      2395          jsr       (A2)
00001864  584F      2396          addq.w    #4,A7
                    2397   ; DumpRegisters() ;
00001866  4EB8 1372 2398          jsr       _DumpRegisters
                    2399   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000186A  4879 0000 2400          pea       @m68kde~1_52.L
0000186E  6592      
00001870  4E92      2401          jsr       (A2)
00001872  584F      2402          addq.w    #4,A7
                    2403   ; printf("\r\nPress <ESC> to Resume Program") ;
00001874  4879 0000 2404          pea       @m68kde~1_53.L
00001878  65BE      
0000187A  4E92      2405          jsr       (A2)
0000187C  584F      2406          addq.w    #4,A7
                    2407   ; menu() ;
0000187E  4EB9 0000 2408          jsr       _menu
00001882  24B4      
00001884  245F      2409          move.l    (A7)+,A2
00001886  4E75      2410          rts
                    2411   ; }
                    2412   ; void ChangeRegisters(void)
                    2413   ; {
                    2414   _ChangeRegisters:
00001888  4E56 FFFC 2415          link      A6,#-4
0000188C  48E7 303C 2416          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001890  45F9 0000 2417          lea       _printf.L,A2
00001894  57A6      
00001896  47EE FFFC 2418          lea       -4(A6),A3
0000189A  49F8 0CB8 2419          lea       _Get8HexDigits.L,A4
0000189E  4BF8 0B7C 2420          lea       __getch.L,A5
                    2421   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2422   ; int reg_val ;
                    2423   ; char c, reg[3] ;
                    2424   ; reg[0] = tolower(_getch()) ;
000018A2  2F00      2425          move.l    D0,-(A7)
000018A4  4E95      2426          jsr       (A5)
000018A6  2200      2427          move.l    D0,D1
000018A8  201F      2428          move.l    (A7)+,D0
000018AA  2F01      2429          move.l    D1,-(A7)
000018AC  4EB9 0000 2430          jsr       _tolower
000018B0  5726      
000018B2  584F      2431          addq.w    #4,A7
000018B4  1680      2432          move.b    D0,(A3)
                    2433   ; reg[1] = c = tolower(_getch()) ;
000018B6  2F00      2434          move.l    D0,-(A7)
000018B8  4E95      2435          jsr       (A5)
000018BA  2200      2436          move.l    D0,D1
000018BC  201F      2437          move.l    (A7)+,D0
000018BE  2F01      2438          move.l    D1,-(A7)
000018C0  4EB9 0000 2439          jsr       _tolower
000018C4  5726      
000018C6  584F      2440          addq.w    #4,A7
000018C8  1400      2441          move.b    D0,D2
000018CA  1740 0001 2442          move.b    D0,1(A3)
                    2443   ; if(reg[0] == (char)('d'))  {    // change data register
000018CE  1013      2444          move.b    (A3),D0
000018D0  0C00 0064 2445          cmp.b     #100,D0
000018D4  6600 00AE 2446          bne       ChangeRegisters_1
                    2447   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018D8  102B 0001 2448          move.b    1(A3),D0
000018DC  0C00 0037 2449          cmp.b     #55,D0
000018E0  6E0A      2450          bgt.s     ChangeRegisters_5
000018E2  102B 0001 2451          move.b    1(A3),D0
000018E6  0C00 0030 2452          cmp.b     #48,D0
000018EA  6C0E      2453          bge.s     ChangeRegisters_3
                    2454   ChangeRegisters_5:
                    2455   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018EC  4879 0000 2456          pea       @m68kde~1_54.L
000018F0  65DE      
000018F2  4E92      2457          jsr       (A2)
000018F4  584F      2458          addq.w    #4,A7
                    2459   ; return ;
000018F6  6000 0244 2460          bra       ChangeRegisters_6
                    2461   ChangeRegisters_3:
                    2462   ; }
                    2463   ; else {
                    2464   ; printf("\r\nD%c = ", c) ;
000018FA  4882      2465          ext.w     D2
000018FC  48C2      2466          ext.l     D2
000018FE  2F02      2467          move.l    D2,-(A7)
00001900  4879 0000 2468          pea       @m68kde~1_55.L
00001904  660A      
00001906  4E92      2469          jsr       (A2)
00001908  504F      2470          addq.w    #8,A7
                    2471   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000190A  42A7      2472          clr.l     -(A7)
0000190C  4E94      2473          jsr       (A4)
0000190E  584F      2474          addq.w    #4,A7
00001910  2600      2475          move.l    D0,D3
                    2476   ; }
                    2477   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2478   ; if(c == (char)('0'))
00001912  0C02 0030 2479          cmp.b     #48,D2
00001916  660A      2480          bne.s     ChangeRegisters_7
                    2481   ; d0 = reg_val ;
00001918  23C3 0803 2482          move.l    D3,_d0.L
0000191C  00E4      
0000191E  6000 0060 2483          bra       ChangeRegisters_20
                    2484   ChangeRegisters_7:
                    2485   ; else if(c == (char)('1'))
00001922  0C02 0031 2486          cmp.b     #49,D2
00001926  660A      2487          bne.s     ChangeRegisters_9
                    2488   ; d1 = reg_val ;
00001928  23C3 0803 2489          move.l    D3,_d1.L
0000192C  00E8      
0000192E  6000 0050 2490          bra       ChangeRegisters_20
                    2491   ChangeRegisters_9:
                    2492   ; else if(c == (char)('2'))
00001932  0C02 0032 2493          cmp.b     #50,D2
00001936  660A      2494          bne.s     ChangeRegisters_11
                    2495   ; d2 = reg_val ;
00001938  23C3 0803 2496          move.l    D3,_d2.L
0000193C  00EC      
0000193E  6000 0040 2497          bra       ChangeRegisters_20
                    2498   ChangeRegisters_11:
                    2499   ; else if(c == (char)('3'))
00001942  0C02 0033 2500          cmp.b     #51,D2
00001946  6608      2501          bne.s     ChangeRegisters_13
                    2502   ; d3 = reg_val ;
00001948  23C3 0803 2503          move.l    D3,_d3.L
0000194C  00F0      
0000194E  6030      2504          bra.s     ChangeRegisters_20
                    2505   ChangeRegisters_13:
                    2506   ; else if(c == (char)('4'))
00001950  0C02 0034 2507          cmp.b     #52,D2
00001954  6608      2508          bne.s     ChangeRegisters_15
                    2509   ; d4 = reg_val ;
00001956  23C3 0803 2510          move.l    D3,_d4.L
0000195A  00F4      
0000195C  6022      2511          bra.s     ChangeRegisters_20
                    2512   ChangeRegisters_15:
                    2513   ; else if(c == (char)('5'))
0000195E  0C02 0035 2514          cmp.b     #53,D2
00001962  6608      2515          bne.s     ChangeRegisters_17
                    2516   ; d5 = reg_val ;
00001964  23C3 0803 2517          move.l    D3,_d5.L
00001968  00F8      
0000196A  6014      2518          bra.s     ChangeRegisters_20
                    2519   ChangeRegisters_17:
                    2520   ; else if(c == (char)('6'))
0000196C  0C02 0036 2521          cmp.b     #54,D2
00001970  6608      2522          bne.s     ChangeRegisters_19
                    2523   ; d6 = reg_val ;
00001972  23C3 0803 2524          move.l    D3,_d6.L
00001976  00FC      
00001978  6006      2525          bra.s     ChangeRegisters_20
                    2526   ChangeRegisters_19:
                    2527   ; else
                    2528   ; d7 = reg_val ;
0000197A  23C3 0803 2529          move.l    D3,_d7.L
0000197E  0100      
                    2530   ChangeRegisters_20:
00001980  6000 01B6 2531          bra       ChangeRegisters_51
                    2532   ChangeRegisters_1:
                    2533   ; }
                    2534   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001984  1013      2535          move.b    (A3),D0
00001986  0C00 0061 2536          cmp.b     #97,D0
0000198A  6600 00A6 2537          bne       ChangeRegisters_21
                    2538   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000198E  0C02 0037 2539          cmp.b     #55,D2
00001992  6E06      2540          bgt.s     ChangeRegisters_25
00001994  0C02 0030 2541          cmp.b     #48,D2
00001998  6C0E      2542          bge.s     ChangeRegisters_23
                    2543   ChangeRegisters_25:
                    2544   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
0000199A  4879 0000 2545          pea       @m68kde~1_56.L
0000199E  6614      
000019A0  4E92      2546          jsr       (A2)
000019A2  584F      2547          addq.w    #4,A7
                    2548   ; return ;
000019A4  6000 0196 2549          bra       ChangeRegisters_6
                    2550   ChangeRegisters_23:
                    2551   ; }
                    2552   ; else {
                    2553   ; printf("\r\nA%c = ", c) ;
000019A8  4882      2554          ext.w     D2
000019AA  48C2      2555          ext.l     D2
000019AC  2F02      2556          move.l    D2,-(A7)
000019AE  4879 0000 2557          pea       @m68kde~1_57.L
000019B2  6642      
000019B4  4E92      2558          jsr       (A2)
000019B6  504F      2559          addq.w    #8,A7
                    2560   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019B8  42A7      2561          clr.l     -(A7)
000019BA  4E94      2562          jsr       (A4)
000019BC  584F      2563          addq.w    #4,A7
000019BE  2600      2564          move.l    D0,D3
                    2565   ; }
                    2566   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2567   ; if(c == (char)('0'))
000019C0  0C02 0030 2568          cmp.b     #48,D2
000019C4  660A      2569          bne.s     ChangeRegisters_26
                    2570   ; a0 = reg_val ;
000019C6  23C3 0803 2571          move.l    D3,_a0.L
000019CA  0104      
000019CC  6000 0060 2572          bra       ChangeRegisters_39
                    2573   ChangeRegisters_26:
                    2574   ; else if(c == (char)('1'))
000019D0  0C02 0031 2575          cmp.b     #49,D2
000019D4  660A      2576          bne.s     ChangeRegisters_28
                    2577   ; a1 = reg_val ;
000019D6  23C3 0803 2578          move.l    D3,_a1.L
000019DA  0108      
000019DC  6000 0050 2579          bra       ChangeRegisters_39
                    2580   ChangeRegisters_28:
                    2581   ; else if(c == (char)('2'))
000019E0  0C02 0032 2582          cmp.b     #50,D2
000019E4  660A      2583          bne.s     ChangeRegisters_30
                    2584   ; a2 = reg_val ;
000019E6  23C3 0803 2585          move.l    D3,_a2.L
000019EA  010C      
000019EC  6000 0040 2586          bra       ChangeRegisters_39
                    2587   ChangeRegisters_30:
                    2588   ; else if(c == (char)('3'))
000019F0  0C02 0033 2589          cmp.b     #51,D2
000019F4  6608      2590          bne.s     ChangeRegisters_32
                    2591   ; a3 = reg_val ;
000019F6  23C3 0803 2592          move.l    D3,_a3.L
000019FA  0110      
000019FC  6030      2593          bra.s     ChangeRegisters_39
                    2594   ChangeRegisters_32:
                    2595   ; else if(c == (char)('4'))
000019FE  0C02 0034 2596          cmp.b     #52,D2
00001A02  6608      2597          bne.s     ChangeRegisters_34
                    2598   ; a4 = reg_val ;
00001A04  23C3 0803 2599          move.l    D3,_a4.L
00001A08  0114      
00001A0A  6022      2600          bra.s     ChangeRegisters_39
                    2601   ChangeRegisters_34:
                    2602   ; else if(c == (char)('5'))
00001A0C  0C02 0035 2603          cmp.b     #53,D2
00001A10  6608      2604          bne.s     ChangeRegisters_36
                    2605   ; a5 = reg_val ;
00001A12  23C3 0803 2606          move.l    D3,_a5.L
00001A16  0118      
00001A18  6014      2607          bra.s     ChangeRegisters_39
                    2608   ChangeRegisters_36:
                    2609   ; else if(c == (char)('6'))
00001A1A  0C02 0036 2610          cmp.b     #54,D2
00001A1E  6608      2611          bne.s     ChangeRegisters_38
                    2612   ; a6 = reg_val ;
00001A20  23C3 0803 2613          move.l    D3,_a6.L
00001A24  011C      
00001A26  6006      2614          bra.s     ChangeRegisters_39
                    2615   ChangeRegisters_38:
                    2616   ; else
                    2617   ; USP = reg_val ;
00001A28  23C3 0803 2618          move.l    D3,_USP.L
00001A2C  0128      
                    2619   ChangeRegisters_39:
00001A2E  6000 0108 2620          bra       ChangeRegisters_51
                    2621   ChangeRegisters_21:
                    2622   ; }
                    2623   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A32  1013      2624          move.b    (A3),D0
00001A34  0C00 0075 2625          cmp.b     #117,D0
00001A38  6600 004E 2626          bne       ChangeRegisters_40
00001A3C  0C02 0073 2627          cmp.b     #115,D2
00001A40  6600 0046 2628          bne       ChangeRegisters_40
                    2629   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A44  2F00      2630          move.l    D0,-(A7)
00001A46  4E95      2631          jsr       (A5)
00001A48  2200      2632          move.l    D0,D1
00001A4A  201F      2633          move.l    (A7)+,D0
00001A4C  2F01      2634          move.l    D1,-(A7)
00001A4E  4EB9 0000 2635          jsr       _tolower
00001A52  5726      
00001A54  584F      2636          addq.w    #4,A7
00001A56  0C80 0000 2637          cmp.l     #112,D0
00001A5A  0070      
00001A5C  6618      2638          bne.s     ChangeRegisters_42
                    2639   ; printf("\r\nUser SP = ") ;
00001A5E  4879 0000 2640          pea       @m68kde~1_58.L
00001A62  664C      
00001A64  4E92      2641          jsr       (A2)
00001A66  584F      2642          addq.w    #4,A7
                    2643   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A68  42A7      2644          clr.l     -(A7)
00001A6A  4E94      2645          jsr       (A4)
00001A6C  584F      2646          addq.w    #4,A7
00001A6E  23C0 0803 2647          move.l    D0,_USP.L
00001A72  0128      
00001A74  600E      2648          bra.s     ChangeRegisters_43
                    2649   ChangeRegisters_42:
                    2650   ; }
                    2651   ; else {
                    2652   ; printf("\r\nIllegal Register....") ;
00001A76  4879 0000 2653          pea       @m68kde~1_59.L
00001A7A  665A      
00001A7C  4E92      2654          jsr       (A2)
00001A7E  584F      2655          addq.w    #4,A7
                    2656   ; return ;
00001A80  6000 00BA 2657          bra       ChangeRegisters_6
                    2658   ChangeRegisters_43:
00001A84  6000 00B2 2659          bra       ChangeRegisters_51
                    2660   ChangeRegisters_40:
                    2661   ; }
                    2662   ; }
                    2663   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A88  1013      2664          move.b    (A3),D0
00001A8A  0C00 0073 2665          cmp.b     #115,D0
00001A8E  6600 004E 2666          bne       ChangeRegisters_44
00001A92  0C02 0073 2667          cmp.b     #115,D2
00001A96  6600 0046 2668          bne       ChangeRegisters_44
                    2669   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A9A  2F00      2670          move.l    D0,-(A7)
00001A9C  4E95      2671          jsr       (A5)
00001A9E  2200      2672          move.l    D0,D1
00001AA0  201F      2673          move.l    (A7)+,D0
00001AA2  2F01      2674          move.l    D1,-(A7)
00001AA4  4EB9 0000 2675          jsr       _tolower
00001AA8  5726      
00001AAA  584F      2676          addq.w    #4,A7
00001AAC  0C80 0000 2677          cmp.l     #112,D0
00001AB0  0070      
00001AB2  6618      2678          bne.s     ChangeRegisters_46
                    2679   ; printf("\r\nSystem SP = ") ;
00001AB4  4879 0000 2680          pea       @m68kde~1_60.L
00001AB8  6672      
00001ABA  4E92      2681          jsr       (A2)
00001ABC  584F      2682          addq.w    #4,A7
                    2683   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001ABE  42A7      2684          clr.l     -(A7)
00001AC0  4E94      2685          jsr       (A4)
00001AC2  584F      2686          addq.w    #4,A7
00001AC4  23C0 0803 2687          move.l    D0,_SSP.L
00001AC8  0124      
00001ACA  600E      2688          bra.s     ChangeRegisters_47
                    2689   ChangeRegisters_46:
                    2690   ; }
                    2691   ; else {
                    2692   ; printf("\r\nIllegal Register....") ;
00001ACC  4879 0000 2693          pea       @m68kde~1_59.L
00001AD0  665A      
00001AD2  4E92      2694          jsr       (A2)
00001AD4  584F      2695          addq.w    #4,A7
                    2696   ; return ;
00001AD6  6000 0064 2697          bra       ChangeRegisters_6
                    2698   ChangeRegisters_47:
00001ADA  6000 005C 2699          bra       ChangeRegisters_51
                    2700   ChangeRegisters_44:
                    2701   ; }
                    2702   ; }
                    2703   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ADE  1013      2704          move.b    (A3),D0
00001AE0  0C00 0070 2705          cmp.b     #112,D0
00001AE4  6620      2706          bne.s     ChangeRegisters_48
00001AE6  0C02 0063 2707          cmp.b     #99,D2
00001AEA  661A      2708          bne.s     ChangeRegisters_48
                    2709   ; printf("\r\nPC = ") ;
00001AEC  4879 0000 2710          pea       @m68kde~1_61.L
00001AF0  6682      
00001AF2  4E92      2711          jsr       (A2)
00001AF4  584F      2712          addq.w    #4,A7
                    2713   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AF6  42A7      2714          clr.l     -(A7)
00001AF8  4E94      2715          jsr       (A4)
00001AFA  584F      2716          addq.w    #4,A7
00001AFC  23C0 0803 2717          move.l    D0,_PC.L
00001B00  0120      
00001B02  6000 0034 2718          bra       ChangeRegisters_51
                    2719   ChangeRegisters_48:
                    2720   ; }
                    2721   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001B06  1013      2722          move.b    (A3),D0
00001B08  0C00 0073 2723          cmp.b     #115,D0
00001B0C  6620      2724          bne.s     ChangeRegisters_50
00001B0E  0C02 0072 2725          cmp.b     #114,D2
00001B12  661A      2726          bne.s     ChangeRegisters_50
                    2727   ; printf("\r\nSR = ") ;
00001B14  4879 0000 2728          pea       @m68kde~1_62.L
00001B18  668A      
00001B1A  4E92      2729          jsr       (A2)
00001B1C  584F      2730          addq.w    #4,A7
                    2731   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B1E  42A7      2732          clr.l     -(A7)
00001B20  4EB8 0C6C 2733          jsr       _Get4HexDigits
00001B24  584F      2734          addq.w    #4,A7
00001B26  33C0 0803 2735          move.w    D0,_SR.L
00001B2A  012C      
00001B2C  600A      2736          bra.s     ChangeRegisters_51
                    2737   ChangeRegisters_50:
                    2738   ; }
                    2739   ; else
                    2740   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B2E  4879 0000 2741          pea       @m68kde~1_63.L
00001B32  6692      
00001B34  4E92      2742          jsr       (A2)
00001B36  584F      2743          addq.w    #4,A7
                    2744   ChangeRegisters_51:
                    2745   ; DumpRegisters() ;
00001B38  4EB8 1372 2746          jsr       _DumpRegisters
                    2747   ChangeRegisters_6:
00001B3C  4CDF 3C0C 2748          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B40  4E5E      2749          unlk      A6
00001B42  4E75      2750          rts
                    2751   ; }
                    2752   ; void BreakPointDisplay(void)
                    2753   ; {
                    2754   _BreakPointDisplay:
00001B44  48E7 3030 2755          movem.l   D2/D3/A2/A3,-(A7)
00001B48  45F9 0000 2756          lea       _printf.L,A2
00001B4C  57A6      
00001B4E  47F9 0803 2757          lea       _BreakPointAddress.L,A3
00001B52  012E      
                    2758   ; int i, BreakPointsSet = 0 ;
00001B54  4283      2759          clr.l     D3
                    2760   ; // any break points  set
                    2761   ; for(i = 0; i < 8; i++)  {
00001B56  4282      2762          clr.l     D2
                    2763   BreakPointDisplay_1:
00001B58  0C82 0000 2764          cmp.l     #8,D2
00001B5C  0008      
00001B5E  6C1C      2765          bge.s     BreakPointDisplay_3
                    2766   ; if(BreakPointSetOrCleared[i] == 1)
00001B60  2002      2767          move.l    D2,D0
00001B62  E588      2768          lsl.l     #2,D0
00001B64  41F9 0803 2769          lea       _BreakPointSetOrCleared.L,A0
00001B68  015E      
00001B6A  2030 0800 2770          move.l    0(A0,D0.L),D0
00001B6E  0C80 0000 2771          cmp.l     #1,D0
00001B72  0001      
00001B74  6602      2772          bne.s     BreakPointDisplay_4
                    2773   ; BreakPointsSet = 1;
00001B76  7601      2774          moveq     #1,D3
                    2775   BreakPointDisplay_4:
00001B78  5282      2776          addq.l    #1,D2
00001B7A  60DC      2777          bra       BreakPointDisplay_1
                    2778   BreakPointDisplay_3:
                    2779   ; }
                    2780   ; if(BreakPointsSet == 1) {
00001B7C  0C83 0000 2781          cmp.l     #1,D3
00001B80  0001      
00001B82  6616      2782          bne.s     BreakPointDisplay_6
                    2783   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B84  4879 0000 2784          pea       @m68kde~1_64.L
00001B88  66CE      
00001B8A  4E92      2785          jsr       (A2)
00001B8C  584F      2786          addq.w    #4,A7
                    2787   ; printf("\r\n---     ---------    -----------") ;
00001B8E  4879 0000 2788          pea       @m68kde~1_65.L
00001B92  66F4      
00001B94  4E92      2789          jsr       (A2)
00001B96  584F      2790          addq.w    #4,A7
00001B98  600A      2791          bra.s     BreakPointDisplay_7
                    2792   BreakPointDisplay_6:
                    2793   ; }
                    2794   ; else
                    2795   ; printf("\r\nNo BreakPoints Set") ;
00001B9A  4879 0000 2796          pea       @m68kde~1_66.L
00001B9E  6718      
00001BA0  4E92      2797          jsr       (A2)
00001BA2  584F      2798          addq.w    #4,A7
                    2799   BreakPointDisplay_7:
                    2800   ; for(i = 0; i < 8; i++)  {
00001BA4  4282      2801          clr.l     D2
                    2802   BreakPointDisplay_8:
00001BA6  0C82 0000 2803          cmp.l     #8,D2
00001BAA  0008      
00001BAC  6C00 0080 2804          bge       BreakPointDisplay_10
                    2805   ; // put opcode back to disassemble it, then put break point back
                    2806   ; if(BreakPointSetOrCleared[i] == 1)  {
00001BB0  2002      2807          move.l    D2,D0
00001BB2  E588      2808          lsl.l     #2,D0
00001BB4  41F9 0803 2809          lea       _BreakPointSetOrCleared.L,A0
00001BB8  015E      
00001BBA  2030 0800 2810          move.l    0(A0,D0.L),D0
00001BBE  0C80 0000 2811          cmp.l     #1,D0
00001BC2  0001      
00001BC4  6600 0062 2812          bne       BreakPointDisplay_11
                    2813   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BC8  2002      2814          move.l    D2,D0
00001BCA  E388      2815          lsl.l     #1,D0
00001BCC  41F9 0803 2816          lea       _BreakPointInstruction.L,A0
00001BD0  014E      
00001BD2  2202      2817          move.l    D2,D1
00001BD4  E589      2818          lsl.l     #2,D1
00001BD6  2233 1800 2819          move.l    0(A3,D1.L),D1
00001BDA  2241      2820          move.l    D1,A1
00001BDC  32B0 0800 2821          move.w    0(A0,D0.L),(A1)
                    2822   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BE0  2202      2823          move.l    D2,D1
00001BE2  E589      2824          lsl.l     #2,D1
00001BE4  2F33 1800 2825          move.l    0(A3,D1.L),-(A7)
00001BE8  4EB9 0000 2826          jsr       _DisassembleInstruction
00001BEC  3732      
00001BEE  584F      2827          addq.w    #4,A7
                    2828   ; FormatInstructionForTrace() ;
00001BF0  4EB8 12FE 2829          jsr       _FormatInstructionForTrace
                    2830   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BF4  2002      2831          move.l    D2,D0
00001BF6  E588      2832          lsl.l     #2,D0
00001BF8  2033 0800 2833          move.l    0(A3,D0.L),D0
00001BFC  2040      2834          move.l    D0,A0
00001BFE  30BC 4E4E 2835          move.w    #20046,(A0)
                    2836   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001C02  2202      2837          move.l    D2,D1
00001C04  E589      2838          lsl.l     #2,D1
00001C06  2F33 1800 2839          move.l    0(A3,D1.L),-(A7)
00001C0A  2F02      2840          move.l    D2,-(A7)
00001C0C  4879 0000 2841          pea       @m68kde~1_67.L
00001C10  672E      
00001C12  4E92      2842          jsr       (A2)
00001C14  DEFC 000C 2843          add.w     #12,A7
                    2844   ; printf("    %s", Instruction);
00001C18  4879 0803 2845          pea       _Instruction.L
00001C1C  04E2      
00001C1E  4879 0000 2846          pea       @m68kde~1_68.L
00001C22  673E      
00001C24  4E92      2847          jsr       (A2)
00001C26  504F      2848          addq.w    #8,A7
                    2849   BreakPointDisplay_11:
00001C28  5282      2850          addq.l    #1,D2
00001C2A  6000 FF7A 2851          bra       BreakPointDisplay_8
                    2852   BreakPointDisplay_10:
                    2853   ; }
                    2854   ; }
                    2855   ; printf("\r\n") ;
00001C2E  4879 0000 2856          pea       @m68kde~1_1.L
00001C32  60B8      
00001C34  4E92      2857          jsr       (A2)
00001C36  584F      2858          addq.w    #4,A7
00001C38  4CDF 0C0C 2859          movem.l   (A7)+,D2/D3/A2/A3
00001C3C  4E75      2860          rts
                    2861   ; }
                    2862   ; void WatchPointDisplay(void)
                    2863   ; {
                    2864   _WatchPointDisplay:
00001C3E  48E7 3020 2865          movem.l   D2/D3/A2,-(A7)
00001C42  45F9 0000 2866          lea       _printf.L,A2
00001C46  57A6      
                    2867   ; int i ;
                    2868   ; int WatchPointsSet = 0 ;
00001C48  4283      2869          clr.l     D3
                    2870   ; // any watchpoints set
                    2871   ; for(i = 0; i < 8; i++)  {
00001C4A  4282      2872          clr.l     D2
                    2873   WatchPointDisplay_1:
00001C4C  0C82 0000 2874          cmp.l     #8,D2
00001C50  0008      
00001C52  6C1C      2875          bge.s     WatchPointDisplay_3
                    2876   ; if(WatchPointSetOrCleared[i] == 1)
00001C54  2002      2877          move.l    D2,D0
00001C56  E588      2878          lsl.l     #2,D0
00001C58  41F9 0803 2879          lea       _WatchPointSetOrCleared.L,A0
00001C5C  01A2      
00001C5E  2030 0800 2880          move.l    0(A0,D0.L),D0
00001C62  0C80 0000 2881          cmp.l     #1,D0
00001C66  0001      
00001C68  6602      2882          bne.s     WatchPointDisplay_4
                    2883   ; WatchPointsSet = 1;
00001C6A  7601      2884          moveq     #1,D3
                    2885   WatchPointDisplay_4:
00001C6C  5282      2886          addq.l    #1,D2
00001C6E  60DC      2887          bra       WatchPointDisplay_1
                    2888   WatchPointDisplay_3:
                    2889   ; }
                    2890   ; if(WatchPointsSet == 1) {
00001C70  0C83 0000 2891          cmp.l     #1,D3
00001C74  0001      
00001C76  6616      2892          bne.s     WatchPointDisplay_6
                    2893   ; printf("\r\nNum     Address") ;
00001C78  4879 0000 2894          pea       @m68kde~1_69.L
00001C7C  6746      
00001C7E  4E92      2895          jsr       (A2)
00001C80  584F      2896          addq.w    #4,A7
                    2897   ; printf("\r\n---     ---------") ;
00001C82  4879 0000 2898          pea       @m68kde~1_70.L
00001C86  6758      
00001C88  4E92      2899          jsr       (A2)
00001C8A  584F      2900          addq.w    #4,A7
00001C8C  600A      2901          bra.s     WatchPointDisplay_7
                    2902   WatchPointDisplay_6:
                    2903   ; }
                    2904   ; else
                    2905   ; printf("\r\nNo WatchPoints Set") ;
00001C8E  4879 0000 2906          pea       @m68kde~1_71.L
00001C92  676C      
00001C94  4E92      2907          jsr       (A2)
00001C96  584F      2908          addq.w    #4,A7
                    2909   WatchPointDisplay_7:
                    2910   ; for(i = 0; i < 8; i++)  {
00001C98  4282      2911          clr.l     D2
                    2912   WatchPointDisplay_8:
00001C9A  0C82 0000 2913          cmp.l     #8,D2
00001C9E  0008      
00001CA0  6C00 0038 2914          bge       WatchPointDisplay_10
                    2915   ; if(WatchPointSetOrCleared[i] == 1)
00001CA4  2002      2916          move.l    D2,D0
00001CA6  E588      2917          lsl.l     #2,D0
00001CA8  41F9 0803 2918          lea       _WatchPointSetOrCleared.L,A0
00001CAC  01A2      
00001CAE  2030 0800 2919          move.l    0(A0,D0.L),D0
00001CB2  0C80 0000 2920          cmp.l     #1,D0
00001CB6  0001      
00001CB8  661C      2921          bne.s     WatchPointDisplay_11
                    2922   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CBA  2202      2923          move.l    D2,D1
00001CBC  E589      2924          lsl.l     #2,D1
00001CBE  41F9 0803 2925          lea       _WatchPointAddress.L,A0
00001CC2  0182      
00001CC4  2F30 1800 2926          move.l    0(A0,D1.L),-(A7)
00001CC8  2F02      2927          move.l    D2,-(A7)
00001CCA  4879 0000 2928          pea       @m68kde~1_67.L
00001CCE  672E      
00001CD0  4E92      2929          jsr       (A2)
00001CD2  DEFC 000C 2930          add.w     #12,A7
                    2931   WatchPointDisplay_11:
00001CD6  5282      2932          addq.l    #1,D2
00001CD8  60C0      2933          bra       WatchPointDisplay_8
                    2934   WatchPointDisplay_10:
                    2935   ; }
                    2936   ; printf("\r\n") ;
00001CDA  4879 0000 2937          pea       @m68kde~1_1.L
00001CDE  60B8      
00001CE0  4E92      2938          jsr       (A2)
00001CE2  584F      2939          addq.w    #4,A7
00001CE4  4CDF 040C 2940          movem.l   (A7)+,D2/D3/A2
00001CE8  4E75      2941          rts
                    2942   ; }
                    2943   ; void BreakPointClear(void)
                    2944   ; {
                    2945   _BreakPointClear:
00001CEA  4E56 FFFC 2946          link      A6,#-4
00001CEE  48E7 2020 2947          movem.l   D2/A2,-(A7)
00001CF2  45F9 0000 2948          lea       _printf.L,A2
00001CF6  57A6      
                    2949   ; unsigned int i ;
                    2950   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2951   ; BreakPointDisplay() ;
00001CF8  4EB8 1B44 2952          jsr       _BreakPointDisplay
                    2953   ; printf("\r\nEnter Break Point Number: ") ;
00001CFC  4879 0000 2954          pea       @m68kde~1_72.L
00001D00  6782      
00001D02  4E92      2955          jsr       (A2)
00001D04  584F      2956          addq.w    #4,A7
                    2957   ; i = xtod(_getch()) ;           // get break pointer number
00001D06  2F00      2958          move.l    D0,-(A7)
00001D08  4EB8 0B7C 2959          jsr       __getch
00001D0C  2200      2960          move.l    D0,D1
00001D0E  201F      2961          move.l    (A7)+,D0
00001D10  2F01      2962          move.l    D1,-(A7)
00001D12  4EB8 0BE6 2963          jsr       _xtod
00001D16  584F      2964          addq.w    #4,A7
00001D18  C0BC 0000 2965          and.l     #255,D0
00001D1C  00FF      
00001D1E  2400      2966          move.l    D0,D2
                    2967   ; if((i < 0) || (i > 7))   {
00001D20  0C82 0000 2968          cmp.l     #0,D2
00001D24  0000      
00001D26  6508      2969          blo.s     BreakPointClear_3
00001D28  0C82 0000 2970          cmp.l     #7,D2
00001D2C  0007      
00001D2E  630E      2971          bls.s     BreakPointClear_1
                    2972   BreakPointClear_3:
                    2973   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D30  4879 0000 2974          pea       @m68kde~1_73.L
00001D34  67A0      
00001D36  4E92      2975          jsr       (A2)
00001D38  584F      2976          addq.w    #4,A7
                    2977   ; return ;
00001D3A  6000 0080 2978          bra       BreakPointClear_4
                    2979   BreakPointClear_1:
                    2980   ; }
                    2981   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D3E  2002      2982          move.l    D2,D0
00001D40  E588      2983          lsl.l     #2,D0
00001D42  41F9 0803 2984          lea       _BreakPointSetOrCleared.L,A0
00001D46  015E      
00001D48  2030 0800 2985          move.l    0(A0,D0.L),D0
00001D4C  0C80 0000 2986          cmp.l     #1,D0
00001D50  0001      
00001D52  6600 005A 2987          bne       BreakPointClear_5
                    2988   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D56  2002      2989          move.l    D2,D0
00001D58  E588      2990          lsl.l     #2,D0
00001D5A  41F9 0803 2991          lea       _BreakPointAddress.L,A0
00001D5E  012E      
00001D60  2D70 0800 2992          move.l    0(A0,D0.L),-4(A6)
00001D64  FFFC      
                    2993   ; BreakPointAddress[i] = 0 ;
00001D66  2002      2994          move.l    D2,D0
00001D68  E588      2995          lsl.l     #2,D0
00001D6A  41F9 0803 2996          lea       _BreakPointAddress.L,A0
00001D6E  012E      
00001D70  42B0 0800 2997          clr.l     0(A0,D0.L)
                    2998   ; BreakPointSetOrCleared[i] = 0 ;
00001D74  2002      2999          move.l    D2,D0
00001D76  E588      3000          lsl.l     #2,D0
00001D78  41F9 0803 3001          lea       _BreakPointSetOrCleared.L,A0
00001D7C  015E      
00001D7E  42B0 0800 3002          clr.l     0(A0,D0.L)
                    3003   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D82  2002      3004          move.l    D2,D0
00001D84  E388      3005          lsl.l     #1,D0
00001D86  41F9 0803 3006          lea       _BreakPointInstruction.L,A0
00001D8A  014E      
00001D8C  226E FFFC 3007          move.l    -4(A6),A1
00001D90  32B0 0800 3008          move.w    0(A0,D0.L),(A1)
                    3009   ; BreakPointInstruction[i] = 0 ;
00001D94  2002      3010          move.l    D2,D0
00001D96  E388      3011          lsl.l     #1,D0
00001D98  41F9 0803 3012          lea       _BreakPointInstruction.L,A0
00001D9C  014E      
00001D9E  4270 0800 3013          clr.w     0(A0,D0.L)
                    3014   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001DA2  4879 0000 3015          pea       @m68kde~1_74.L
00001DA6  67BC      
00001DA8  4E92      3016          jsr       (A2)
00001DAA  584F      3017          addq.w    #4,A7
00001DAC  600A      3018          bra.s     BreakPointClear_6
                    3019   BreakPointClear_5:
                    3020   ; }
                    3021   ; else
                    3022   ; printf("\r\nBreak Point wasn't Set.....") ;
00001DAE  4879 0000 3023          pea       @m68kde~1_75.L
00001DB2  67DA      
00001DB4  4E92      3024          jsr       (A2)
00001DB6  584F      3025          addq.w    #4,A7
                    3026   BreakPointClear_6:
                    3027   ; BreakPointDisplay() ;
00001DB8  4EB8 1B44 3028          jsr       _BreakPointDisplay
                    3029   ; return ;
                    3030   BreakPointClear_4:
00001DBC  4CDF 0404 3031          movem.l   (A7)+,D2/A2
00001DC0  4E5E      3032          unlk      A6
00001DC2  4E75      3033          rts
                    3034   ; }
                    3035   ; void WatchPointClear(void)
                    3036   ; {
                    3037   _WatchPointClear:
00001DC4  48E7 2020 3038          movem.l   D2/A2,-(A7)
00001DC8  45F9 0000 3039          lea       _printf.L,A2
00001DCC  57A6      
                    3040   ; unsigned int i ;
                    3041   ; WatchPointDisplay() ;
00001DCE  4EB8 1C3E 3042          jsr       _WatchPointDisplay
                    3043   ; printf("\r\nEnter Watch Point Number: ") ;
00001DD2  4879 0000 3044          pea       @m68kde~1_76.L
00001DD6  67F8      
00001DD8  4E92      3045          jsr       (A2)
00001DDA  584F      3046          addq.w    #4,A7
                    3047   ; i = xtod(_getch()) ;           // get watch pointer number
00001DDC  2F00      3048          move.l    D0,-(A7)
00001DDE  4EB8 0B7C 3049          jsr       __getch
00001DE2  2200      3050          move.l    D0,D1
00001DE4  201F      3051          move.l    (A7)+,D0
00001DE6  2F01      3052          move.l    D1,-(A7)
00001DE8  4EB8 0BE6 3053          jsr       _xtod
00001DEC  584F      3054          addq.w    #4,A7
00001DEE  C0BC 0000 3055          and.l     #255,D0
00001DF2  00FF      
00001DF4  2400      3056          move.l    D0,D2
                    3057   ; if((i < 0) || (i > 7))   {
00001DF6  0C82 0000 3058          cmp.l     #0,D2
00001DFA  0000      
00001DFC  6508      3059          blo.s     WatchPointClear_3
00001DFE  0C82 0000 3060          cmp.l     #7,D2
00001E02  0007      
00001E04  630E      3061          bls.s     WatchPointClear_1
                    3062   WatchPointClear_3:
                    3063   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E06  4879 0000 3064          pea       @m68kde~1_73.L
00001E0A  67A0      
00001E0C  4E92      3065          jsr       (A2)
00001E0E  584F      3066          addq.w    #4,A7
                    3067   ; return ;
00001E10  6000 004E 3068          bra       WatchPointClear_4
                    3069   WatchPointClear_1:
                    3070   ; }
                    3071   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E14  2002      3072          move.l    D2,D0
00001E16  E588      3073          lsl.l     #2,D0
00001E18  41F9 0803 3074          lea       _WatchPointSetOrCleared.L,A0
00001E1C  01A2      
00001E1E  2030 0800 3075          move.l    0(A0,D0.L),D0
00001E22  0C80 0000 3076          cmp.l     #1,D0
00001E26  0001      
00001E28  6628      3077          bne.s     WatchPointClear_5
                    3078   ; WatchPointAddress[i] = 0 ;
00001E2A  2002      3079          move.l    D2,D0
00001E2C  E588      3080          lsl.l     #2,D0
00001E2E  41F9 0803 3081          lea       _WatchPointAddress.L,A0
00001E32  0182      
00001E34  42B0 0800 3082          clr.l     0(A0,D0.L)
                    3083   ; WatchPointSetOrCleared[i] = 0 ;
00001E38  2002      3084          move.l    D2,D0
00001E3A  E588      3085          lsl.l     #2,D0
00001E3C  41F9 0803 3086          lea       _WatchPointSetOrCleared.L,A0
00001E40  01A2      
00001E42  42B0 0800 3087          clr.l     0(A0,D0.L)
                    3088   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E46  4879 0000 3089          pea       @m68kde~1_77.L
00001E4A  6816      
00001E4C  4E92      3090          jsr       (A2)
00001E4E  584F      3091          addq.w    #4,A7
00001E50  600A      3092          bra.s     WatchPointClear_6
                    3093   WatchPointClear_5:
                    3094   ; }
                    3095   ; else
                    3096   ; printf("\r\nWatch Point Was not Set.....") ;
00001E52  4879 0000 3097          pea       @m68kde~1_78.L
00001E56  6834      
00001E58  4E92      3098          jsr       (A2)
00001E5A  584F      3099          addq.w    #4,A7
                    3100   WatchPointClear_6:
                    3101   ; WatchPointDisplay() ;
00001E5C  4EB8 1C3E 3102          jsr       _WatchPointDisplay
                    3103   ; return ;
                    3104   WatchPointClear_4:
00001E60  4CDF 0404 3105          movem.l   (A7)+,D2/A2
00001E64  4E75      3106          rts
                    3107   ; }
                    3108   ; void DisableBreakPoints(void)
                    3109   ; {
                    3110   _DisableBreakPoints:
00001E66  4E56 FFFC 3111          link      A6,#-4
00001E6A  2F02      3112          move.l    D2,-(A7)
                    3113   ; int i ;
                    3114   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3115   ; for(i = 0; i < 8; i++)  {
00001E6C  4282      3116          clr.l     D2
                    3117   DisableBreakPoints_1:
00001E6E  0C82 0000 3118          cmp.l     #8,D2
00001E72  0008      
00001E74  6C00 003E 3119          bge       DisableBreakPoints_3
                    3120   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E78  2002      3121          move.l    D2,D0
00001E7A  E588      3122          lsl.l     #2,D0
00001E7C  41F9 0803 3123          lea       _BreakPointSetOrCleared.L,A0
00001E80  015E      
00001E82  2030 0800 3124          move.l    0(A0,D0.L),D0
00001E86  0C80 0000 3125          cmp.l     #1,D0
00001E8A  0001      
00001E8C  6622      3126          bne.s     DisableBreakPoints_4
                    3127   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E8E  2002      3128          move.l    D2,D0
00001E90  E588      3129          lsl.l     #2,D0
00001E92  41F9 0803 3130          lea       _BreakPointAddress.L,A0
00001E96  012E      
00001E98  2D70 0800 3131          move.l    0(A0,D0.L),-4(A6)
00001E9C  FFFC      
                    3132   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E9E  2002      3133          move.l    D2,D0
00001EA0  E388      3134          lsl.l     #1,D0
00001EA2  41F9 0803 3135          lea       _BreakPointInstruction.L,A0
00001EA6  014E      
00001EA8  226E FFFC 3136          move.l    -4(A6),A1
00001EAC  32B0 0800 3137          move.w    0(A0,D0.L),(A1)
                    3138   DisableBreakPoints_4:
00001EB0  5282      3139          addq.l    #1,D2
00001EB2  60BA      3140          bra       DisableBreakPoints_1
                    3141   DisableBreakPoints_3:
00001EB4  241F      3142          move.l    (A7)+,D2
00001EB6  4E5E      3143          unlk      A6
00001EB8  4E75      3144          rts
                    3145   ; }
                    3146   ; }
                    3147   ; }
                    3148   ; void EnableBreakPoints(void)
                    3149   ; {
                    3150   _EnableBreakPoints:
00001EBA  4E56 FFFC 3151          link      A6,#-4
00001EBE  2F02      3152          move.l    D2,-(A7)
                    3153   ; int i ;
                    3154   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3155   ; for(i = 0; i < 8; i++)  {
00001EC0  4282      3156          clr.l     D2
                    3157   EnableBreakPoints_1:
00001EC2  0C82 0000 3158          cmp.l     #8,D2
00001EC6  0008      
00001EC8  6C32      3159          bge.s     EnableBreakPoints_3
                    3160   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001ECA  2002      3161          move.l    D2,D0
00001ECC  E588      3162          lsl.l     #2,D0
00001ECE  41F9 0803 3163          lea       _BreakPointSetOrCleared.L,A0
00001ED2  015E      
00001ED4  2030 0800 3164          move.l    0(A0,D0.L),D0
00001ED8  0C80 0000 3165          cmp.l     #1,D0
00001EDC  0001      
00001EDE  6618      3166          bne.s     EnableBreakPoints_4
                    3167   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001EE0  2002      3168          move.l    D2,D0
00001EE2  E588      3169          lsl.l     #2,D0
00001EE4  41F9 0803 3170          lea       _BreakPointAddress.L,A0
00001EE8  012E      
00001EEA  2D70 0800 3171          move.l    0(A0,D0.L),-4(A6)
00001EEE  FFFC      
                    3172   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EF0  206E FFFC 3173          move.l    -4(A6),A0
00001EF4  30BC 4E4E 3174          move.w    #20046,(A0)
                    3175   EnableBreakPoints_4:
00001EF8  5282      3176          addq.l    #1,D2
00001EFA  60C6      3177          bra       EnableBreakPoints_1
                    3178   EnableBreakPoints_3:
00001EFC  241F      3179          move.l    (A7)+,D2
00001EFE  4E5E      3180          unlk      A6
00001F00  4E75      3181          rts
                    3182   ; }
                    3183   ; }
                    3184   ; }
                    3185   ; void KillAllBreakPoints(void)
                    3186   ; {
                    3187   _KillAllBreakPoints:
00001F02  4E56 FFFC 3188          link      A6,#-4
00001F06  2F02      3189          move.l    D2,-(A7)
                    3190   ; int i ;
                    3191   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3192   ; for(i = 0; i < 8; i++)  {
00001F08  4282      3193          clr.l     D2
                    3194   KillAllBreakPoints_1:
00001F0A  0C82 0000 3195          cmp.l     #8,D2
00001F0E  0008      
00001F10  6C00 0052 3196          bge       KillAllBreakPoints_3
                    3197   ; // clear BP
                    3198   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F14  2002      3199          move.l    D2,D0
00001F16  E588      3200          lsl.l     #2,D0
00001F18  41F9 0803 3201          lea       _BreakPointAddress.L,A0
00001F1C  012E      
00001F1E  2D70 0800 3202          move.l    0(A0,D0.L),-4(A6)
00001F22  FFFC      
                    3203   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F24  2002      3204          move.l    D2,D0
00001F26  E388      3205          lsl.l     #1,D0
00001F28  41F9 0803 3206          lea       _BreakPointInstruction.L,A0
00001F2C  014E      
00001F2E  226E FFFC 3207          move.l    -4(A6),A1
00001F32  32B0 0800 3208          move.w    0(A0,D0.L),(A1)
                    3209   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F36  2002      3210          move.l    D2,D0
00001F38  E588      3211          lsl.l     #2,D0
00001F3A  41F9 0803 3212          lea       _BreakPointAddress.L,A0
00001F3E  012E      
00001F40  42B0 0800 3213          clr.l     0(A0,D0.L)
                    3214   ; BreakPointInstruction[i] = 0 ;
00001F44  2002      3215          move.l    D2,D0
00001F46  E388      3216          lsl.l     #1,D0
00001F48  41F9 0803 3217          lea       _BreakPointInstruction.L,A0
00001F4C  014E      
00001F4E  4270 0800 3218          clr.w     0(A0,D0.L)
                    3219   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F52  2002      3220          move.l    D2,D0
00001F54  E588      3221          lsl.l     #2,D0
00001F56  41F9 0803 3222          lea       _BreakPointSetOrCleared.L,A0
00001F5A  015E      
00001F5C  42B0 0800 3223          clr.l     0(A0,D0.L)
00001F60  5282      3224          addq.l    #1,D2
00001F62  60A6      3225          bra       KillAllBreakPoints_1
                    3226   KillAllBreakPoints_3:
00001F64  241F      3227          move.l    (A7)+,D2
00001F66  4E5E      3228          unlk      A6
00001F68  4E75      3229          rts
                    3230   ; }
                    3231   ; //BreakPointDisplay() ;       // display the break points
                    3232   ; }
                    3233   ; void KillAllWatchPoints(void)
                    3234   ; {
                    3235   _KillAllWatchPoints:
00001F6A  2F02      3236          move.l    D2,-(A7)
                    3237   ; int i ;
                    3238   ; for(i = 0; i < 8; i++)  {
00001F6C  4282      3239          clr.l     D2
                    3240   KillAllWatchPoints_1:
00001F6E  0C82 0000 3241          cmp.l     #8,D2
00001F72  0008      
00001F74  6C20      3242          bge.s     KillAllWatchPoints_3
                    3243   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F76  2002      3244          move.l    D2,D0
00001F78  E588      3245          lsl.l     #2,D0
00001F7A  41F9 0803 3246          lea       _WatchPointAddress.L,A0
00001F7E  0182      
00001F80  42B0 0800 3247          clr.l     0(A0,D0.L)
                    3248   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F84  2002      3249          move.l    D2,D0
00001F86  E588      3250          lsl.l     #2,D0
00001F88  41F9 0803 3251          lea       _WatchPointSetOrCleared.L,A0
00001F8C  01A2      
00001F8E  42B0 0800 3252          clr.l     0(A0,D0.L)
00001F92  5282      3253          addq.l    #1,D2
00001F94  60D8      3254          bra       KillAllWatchPoints_1
                    3255   KillAllWatchPoints_3:
00001F96  241F      3256          move.l    (A7)+,D2
00001F98  4E75      3257          rts
                    3258   ; }
                    3259   ; //WatchPointDisplay() ;       // display the break points
                    3260   ; }
                    3261   ; void SetBreakPoint(void)
                    3262   ; {
                    3263   _SetBreakPoint:
00001F9A  4E56 FFFC 3264          link      A6,#-4
00001F9E  48E7 3830 3265          movem.l   D2/D3/D4/A2/A3,-(A7)
00001FA2  45F9 0000 3266          lea       _printf.L,A2
00001FA6  57A6      
00001FA8  47F9 0803 3267          lea       _BreakPointSetOrCleared.L,A3
00001FAC  015E      
                    3268   ; int i ;
                    3269   ; int BPNumber;
                    3270   ; int BPAddress;
                    3271   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3272   ; // see if any free break points
                    3273   ; for(i = 0; i < 8; i ++) {
00001FAE  4282      3274          clr.l     D2
                    3275   SetBreakPoint_1:
00001FB0  0C82 0000 3276          cmp.l     #8,D2
00001FB4  0008      
00001FB6  6C10      3277          bge.s     SetBreakPoint_3
                    3278   ; if( BreakPointSetOrCleared[i] == 0)
00001FB8  2002      3279          move.l    D2,D0
00001FBA  E588      3280          lsl.l     #2,D0
00001FBC  2033 0800 3281          move.l    0(A3,D0.L),D0
00001FC0  6602      3282          bne.s     SetBreakPoint_4
                    3283   ; break ;         // if spare BP found allow user to set it
00001FC2  6004      3284          bra.s     SetBreakPoint_3
                    3285   SetBreakPoint_4:
00001FC4  5282      3286          addq.l    #1,D2
00001FC6  60E8      3287          bra       SetBreakPoint_1
                    3288   SetBreakPoint_3:
                    3289   ; }
                    3290   ; if(i == 8) {
00001FC8  0C82 0000 3291          cmp.l     #8,D2
00001FCC  0008      
00001FCE  660E      3292          bne.s     SetBreakPoint_6
                    3293   ; printf("\r\nNo FREE Break Points.....") ;
00001FD0  4879 0000 3294          pea       @m68kde~1_79.L
00001FD4  6854      
00001FD6  4E92      3295          jsr       (A2)
00001FD8  584F      3296          addq.w    #4,A7
                    3297   ; return ;
00001FDA  6000 00EC 3298          bra       SetBreakPoint_15
                    3299   SetBreakPoint_6:
                    3300   ; }
                    3301   ; printf("\r\nBreak Point Address: ") ;
00001FDE  4879 0000 3302          pea       @m68kde~1_80.L
00001FE2  6870      
00001FE4  4E92      3303          jsr       (A2)
00001FE6  584F      3304          addq.w    #4,A7
                    3305   ; BPAddress = Get8HexDigits(0) ;
00001FE8  42A7      3306          clr.l     -(A7)
00001FEA  4EB8 0CB8 3307          jsr       _Get8HexDigits
00001FEE  584F      3308          addq.w    #4,A7
00001FF0  2600      3309          move.l    D0,D3
                    3310   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FF2  2803      3311          move.l    D3,D4
                    3312   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FF4  2003      3313          move.l    D3,D0
00001FF6  C0BC 0000 3314          and.l     #1,D0
00001FFA  0001      
00001FFC  0C80 0000 3315          cmp.l     #1,D0
00002000  0001      
00002002  660E      3316          bne.s     SetBreakPoint_9
                    3317   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002004  4879 0000 3318          pea       @m68kde~1_81.L
00002008  6888      
0000200A  4E92      3319          jsr       (A2)
0000200C  584F      3320          addq.w    #4,A7
                    3321   ; return ;
0000200E  6000 00B8 3322          bra       SetBreakPoint_15
                    3323   SetBreakPoint_9:
                    3324   ; }
                    3325   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00002012  0C83 0000 3326          cmp.l     #32768,D3
00002016  8000      
00002018  640E      3327          bhs.s     SetBreakPoint_11
                    3328   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000201A  4879 0000 3329          pea       @m68kde~1_82.L
0000201E  68BE      
00002020  4E92      3330          jsr       (A2)
00002022  584F      3331          addq.w    #4,A7
                    3332   ; return ;
00002024  6000 00A2 3333          bra       SetBreakPoint_15
                    3334   SetBreakPoint_11:
                    3335   ; }
                    3336   ; // search for first free bp or existing same BP
                    3337   ; for(i = 0; i < 8; i++)  {
00002028  4282      3338          clr.l     D2
                    3339   SetBreakPoint_13:
0000202A  0C82 0000 3340          cmp.l     #8,D2
0000202E  0008      
00002030  6C00 0096 3341          bge       SetBreakPoint_15
                    3342   ; if(BreakPointAddress[i] == BPAddress)   {
00002034  2002      3343          move.l    D2,D0
00002036  E588      3344          lsl.l     #2,D0
00002038  41F9 0803 3345          lea       _BreakPointAddress.L,A0
0000203C  012E      
0000203E  B6B0 0800 3346          cmp.l     0(A0,D0.L),D3
00002042  6610      3347          bne.s     SetBreakPoint_16
                    3348   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002044  2F03      3349          move.l    D3,-(A7)
00002046  4879 0000 3350          pea       @m68kde~1_83.L
0000204A  6906      
0000204C  4E92      3351          jsr       (A2)
0000204E  504F      3352          addq.w    #8,A7
                    3353   ; return ;
00002050  6000 0076 3354          bra       SetBreakPoint_15
                    3355   SetBreakPoint_16:
                    3356   ; }
                    3357   ; if(BreakPointSetOrCleared[i] == 0) {
00002054  2002      3358          move.l    D2,D0
00002056  E588      3359          lsl.l     #2,D0
00002058  2033 0800 3360          move.l    0(A3,D0.L),D0
0000205C  6600 0064 3361          bne       SetBreakPoint_18
                    3362   ; // set BP here
                    3363   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002060  2002      3364          move.l    D2,D0
00002062  E588      3365          lsl.l     #2,D0
00002064  27BC 0000 3366          move.l    #1,0(A3,D0.L)
00002068  0001 0800 
                    3367   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000206C  2044      3368          move.l    D4,A0
0000206E  2002      3369          move.l    D2,D0
00002070  E388      3370          lsl.l     #1,D0
00002072  43F9 0803 3371          lea       _BreakPointInstruction.L,A1
00002076  014E      
00002078  3390 0800 3372          move.w    (A0),0(A1,D0.L)
                    3373   ; DisassembleInstruction(ProgramBreakPointAddress) ;
0000207C  2F04      3374          move.l    D4,-(A7)
0000207E  4EB9 0000 3375          jsr       _DisassembleInstruction
00002082  3732      
00002084  584F      3376          addq.w    #4,A7
                    3377   ; FormatInstructionForTrace() ;
00002086  4EB8 12FE 3378          jsr       _FormatInstructionForTrace
                    3379   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
0000208A  4879 0803 3380          pea       _Instruction.L
0000208E  04E2      
00002090  2F04      3381          move.l    D4,-(A7)
00002092  4879 0000 3382          pea       @m68kde~1_84.L
00002096  693E      
00002098  4E92      3383          jsr       (A2)
0000209A  DEFC 000C 3384          add.w     #12,A7
                    3385   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000209E  2044      3386          move.l    D4,A0
000020A0  30BC 4E4E 3387          move.w    #20046,(A0)
                    3388   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000020A4  2002      3389          move.l    D2,D0
000020A6  E588      3390          lsl.l     #2,D0
000020A8  41F9 0803 3391          lea       _BreakPointAddress.L,A0
000020AC  012E      
000020AE  2183 0800 3392          move.l    D3,0(A0,D0.L)
                    3393   ; printf("\r\n") ;
000020B2  4879 0000 3394          pea       @m68kde~1_1.L
000020B6  60B8      
000020B8  4E92      3395          jsr       (A2)
000020BA  584F      3396          addq.w    #4,A7
                    3397   ; BreakPointDisplay() ;       // display the break points
000020BC  4EB8 1B44 3398          jsr       _BreakPointDisplay
                    3399   ; return ;
000020C0  6006      3400          bra.s     SetBreakPoint_15
                    3401   SetBreakPoint_18:
000020C2  5282      3402          addq.l    #1,D2
000020C4  6000 FF64 3403          bra       SetBreakPoint_13
                    3404   SetBreakPoint_15:
000020C8  4CDF 0C1C 3405          movem.l   (A7)+,D2/D3/D4/A2/A3
000020CC  4E5E      3406          unlk      A6
000020CE  4E75      3407          rts
                    3408   ; }
                    3409   ; }
                    3410   ; }
                    3411   ; void SetWatchPoint(void)
                    3412   ; {
                    3413   _SetWatchPoint:
000020D0  4E56 FFF8 3414          link      A6,#-8
000020D4  48E7 3030 3415          movem.l   D2/D3/A2/A3,-(A7)
000020D8  45F9 0000 3416          lea       _printf.L,A2
000020DC  57A6      
000020DE  47F9 0803 3417          lea       _WatchPointSetOrCleared.L,A3
000020E2  01A2      
                    3418   ; int i ;
                    3419   ; int WPNumber;
                    3420   ; int WPAddress;
                    3421   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3422   ; // see if any free break points
                    3423   ; for(i = 0; i < 8; i ++) {
000020E4  4282      3424          clr.l     D2
                    3425   SetWatchPoint_1:
000020E6  0C82 0000 3426          cmp.l     #8,D2
000020EA  0008      
000020EC  6C10      3427          bge.s     SetWatchPoint_3
                    3428   ; if( WatchPointSetOrCleared[i] == 0)
000020EE  2002      3429          move.l    D2,D0
000020F0  E588      3430          lsl.l     #2,D0
000020F2  2033 0800 3431          move.l    0(A3,D0.L),D0
000020F6  6602      3432          bne.s     SetWatchPoint_4
                    3433   ; break ;         // if spare WP found allow user to set it
000020F8  6004      3434          bra.s     SetWatchPoint_3
                    3435   SetWatchPoint_4:
000020FA  5282      3436          addq.l    #1,D2
000020FC  60E8      3437          bra       SetWatchPoint_1
                    3438   SetWatchPoint_3:
                    3439   ; }
                    3440   ; if(i == 8) {
000020FE  0C82 0000 3441          cmp.l     #8,D2
00002102  0008      
00002104  660E      3442          bne.s     SetWatchPoint_6
                    3443   ; printf("\r\nNo FREE Watch Points.....") ;
00002106  4879 0000 3444          pea       @m68kde~1_85.L
0000210A  6976      
0000210C  4E92      3445          jsr       (A2)
0000210E  584F      3446          addq.w    #4,A7
                    3447   ; return ;
00002110  6000 008C 3448          bra       SetWatchPoint_11
                    3449   SetWatchPoint_6:
                    3450   ; }
                    3451   ; printf("\r\nWatch Point Address: ") ;
00002114  4879 0000 3452          pea       @m68kde~1_86.L
00002118  6992      
0000211A  4E92      3453          jsr       (A2)
0000211C  584F      3454          addq.w    #4,A7
                    3455   ; WPAddress = Get8HexDigits(0) ;
0000211E  42A7      3456          clr.l     -(A7)
00002120  4EB8 0CB8 3457          jsr       _Get8HexDigits
00002124  584F      3458          addq.w    #4,A7
00002126  2600      3459          move.l    D0,D3
                    3460   ; // search for first free wp or existing same wp
                    3461   ; for(i = 0; i < 8; i++)  {
00002128  4282      3462          clr.l     D2
                    3463   SetWatchPoint_9:
0000212A  0C82 0000 3464          cmp.l     #8,D2
0000212E  0008      
00002130  6C00 006C 3465          bge       SetWatchPoint_11
                    3466   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002134  2002      3467          move.l    D2,D0
00002136  E588      3468          lsl.l     #2,D0
00002138  41F9 0803 3469          lea       _WatchPointAddress.L,A0
0000213C  0182      
0000213E  B6B0 0800 3470          cmp.l     0(A0,D0.L),D3
00002142  6614      3471          bne.s     SetWatchPoint_12
00002144  4A83      3472          tst.l     D3
00002146  6710      3473          beq.s     SetWatchPoint_12
                    3474   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002148  2F03      3475          move.l    D3,-(A7)
0000214A  4879 0000 3476          pea       @m68kde~1_87.L
0000214E  69AA      
00002150  4E92      3477          jsr       (A2)
00002152  504F      3478          addq.w    #8,A7
                    3479   ; return ;
00002154  6000 0048 3480          bra       SetWatchPoint_11
                    3481   SetWatchPoint_12:
                    3482   ; }
                    3483   ; if(WatchPointSetOrCleared[i] == 0) {
00002158  2002      3484          move.l    D2,D0
0000215A  E588      3485          lsl.l     #2,D0
0000215C  2033 0800 3486          move.l    0(A3,D0.L),D0
00002160  6600 0038 3487          bne       SetWatchPoint_14
                    3488   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002164  2002      3489          move.l    D2,D0
00002166  E588      3490          lsl.l     #2,D0
00002168  27BC 0000 3491          move.l    #1,0(A3,D0.L)
0000216C  0001 0800 
                    3492   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002170  2F03      3493          move.l    D3,-(A7)
00002172  4879 0000 3494          pea       @m68kde~1_88.L
00002176  69E0      
00002178  4E92      3495          jsr       (A2)
0000217A  504F      3496          addq.w    #8,A7
                    3497   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000217C  2002      3498          move.l    D2,D0
0000217E  E588      3499          lsl.l     #2,D0
00002180  41F9 0803 3500          lea       _WatchPointAddress.L,A0
00002184  0182      
00002186  2183 0800 3501          move.l    D3,0(A0,D0.L)
                    3502   ; printf("\r\n") ;
0000218A  4879 0000 3503          pea       @m68kde~1_1.L
0000218E  60B8      
00002190  4E92      3504          jsr       (A2)
00002192  584F      3505          addq.w    #4,A7
                    3506   ; WatchPointDisplay() ;       // display the break points
00002194  4EB8 1C3E 3507          jsr       _WatchPointDisplay
                    3508   ; return ;
00002198  6004      3509          bra.s     SetWatchPoint_11
                    3510   SetWatchPoint_14:
0000219A  5282      3511          addq.l    #1,D2
0000219C  608C      3512          bra       SetWatchPoint_9
                    3513   SetWatchPoint_11:
0000219E  4CDF 0C0C 3514          movem.l   (A7)+,D2/D3/A2/A3
000021A2  4E5E      3515          unlk      A6
000021A4  4E75      3516          rts
                    3517   ; }
                    3518   ; }
                    3519   ; }
                    3520   ; void HandleBreakPoint(void)
                    3521   ; {
                    3522   _HandleBreakPoint:
000021A6  4E56 FFFC 3523          link      A6,#-4
000021AA  48E7 0038 3524          movem.l   A2/A3/A4,-(A7)
000021AE  45F9 0803 3525          lea       _i.L,A2
000021B2  00C4      
000021B4  47F9 0000 3526          lea       _printf.L,A3
000021B8  57A6      
000021BA  49F9 0803 3527          lea       _PC.L,A4
000021BE  0120      
                    3528   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3529   ; // now we have to put the break point back to run the instruction
                    3530   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3531   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021C0  5594      3532          subq.l    #2,(A4)
                    3533   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021C2  4879 0000 3534          pea       @m68kde~1_89.L
000021C6  6A06      
000021C8  4E93      3535          jsr       (A3)
000021CA  584F      3536          addq.w    #4,A7
                    3537   ; printf("\r\nSingle Step : [ON]") ;
000021CC  4879 0000 3538          pea       @m68kde~1_90.L
000021D0  6A1A      
000021D2  4E93      3539          jsr       (A3)
000021D4  584F      3540          addq.w    #4,A7
                    3541   ; printf("\r\nBreakPoints : [Enabled]") ;
000021D6  4879 0000 3542          pea       @m68kde~1_91.L
000021DA  6A30      
000021DC  4E93      3543          jsr       (A3)
000021DE  584F      3544          addq.w    #4,A7
                    3545   ; // now clear the break point (put original instruction back)
                    3546   ; ProgramBreakPointAddress = PC ;
000021E0  2D54 FFFC 3547          move.l    (A4),-4(A6)
                    3548   ; for(i = 0; i < 8; i ++) {
000021E4  4292      3549          clr.l     (A2)
                    3550   HandleBreakPoint_1:
000021E6  2012      3551          move.l    (A2),D0
000021E8  0C80 0000 3552          cmp.l     #8,D0
000021EC  0008      
000021EE  6400 0056 3553          bhs       HandleBreakPoint_3
                    3554   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021F2  2012      3555          move.l    (A2),D0
000021F4  E588      3556          lsl.l     #2,D0
000021F6  41F9 0803 3557          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  2230 0800 3558          move.l    0(A0,D0.L),D1
00002200  B294      3559          cmp.l     (A4),D1
00002202  6600 003E 3560          bne       HandleBreakPoint_4
                    3561   ; BreakPointAddress[i] = 0 ;
00002206  2012      3562          move.l    (A2),D0
00002208  E588      3563          lsl.l     #2,D0
0000220A  41F9 0803 3564          lea       _BreakPointAddress.L,A0
0000220E  012E      
00002210  42B0 0800 3565          clr.l     0(A0,D0.L)
                    3566   ; BreakPointSetOrCleared[i] = 0 ;
00002214  2012      3567          move.l    (A2),D0
00002216  E588      3568          lsl.l     #2,D0
00002218  41F9 0803 3569          lea       _BreakPointSetOrCleared.L,A0
0000221C  015E      
0000221E  42B0 0800 3570          clr.l     0(A0,D0.L)
                    3571   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002222  2012      3572          move.l    (A2),D0
00002224  E388      3573          lsl.l     #1,D0
00002226  41F9 0803 3574          lea       _BreakPointInstruction.L,A0
0000222A  014E      
0000222C  226E FFFC 3575          move.l    -4(A6),A1
00002230  32B0 0800 3576          move.w    0(A0,D0.L),(A1)
                    3577   ; BreakPointInstruction[i] = 0 ;
00002234  2012      3578          move.l    (A2),D0
00002236  E388      3579          lsl.l     #1,D0
00002238  41F9 0803 3580          lea       _BreakPointInstruction.L,A0
0000223C  014E      
0000223E  4270 0800 3581          clr.w     0(A0,D0.L)
                    3582   HandleBreakPoint_4:
00002242  5292      3583          addq.l    #1,(A2)
00002244  60A0      3584          bra       HandleBreakPoint_1
                    3585   HandleBreakPoint_3:
                    3586   ; }
                    3587   ; }
                    3588   ; DumpRegisters() ;
00002246  4EB8 1372 3589          jsr       _DumpRegisters
                    3590   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000224A  4879 0000 3591          pea       @m68kde~1_52.L
0000224E  6592      
00002250  4E93      3592          jsr       (A3)
00002252  584F      3593          addq.w    #4,A7
                    3594   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002254  4879 0000 3595          pea       @m68kde~1_92.L
00002258  6A4A      
0000225A  4E93      3596          jsr       (A3)
0000225C  584F      3597          addq.w    #4,A7
                    3598   ; menu() ;
0000225E  4EB9 0000 3599          jsr       _menu
00002262  24B4      
00002264  4CDF 1C00 3600          movem.l   (A7)+,A2/A3/A4
00002268  4E5E      3601          unlk      A6
0000226A  4E75      3602          rts
                    3603   ; }
                    3604   ; void UnknownCommand()
                    3605   ; {
                    3606   _UnknownCommand:
                    3607   ; printf("\r\nUnknown Command.....\r\n") ;
0000226C  4879 0000 3608          pea       @m68kde~1_93.L
00002270  6A72      
00002272  4EB9 0000 3609          jsr       _printf
00002276  57A6      
00002278  584F      3610          addq.w    #4,A7
                    3611   ; Help() ;
0000227A  4EB9 0000 3612          jsr       _Help
0000227E  23D0      
00002280  4E75      3613          rts
                    3614   ; }
                    3615   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3616   ; void CallDebugMonitor(void)
                    3617   ; {
                    3618   _CallDebugMonitor:
                    3619   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00002282  4879 0000 3620          pea       @m68kde~1_94.L
00002286  6A8C      
00002288  4EB9 0000 3621          jsr       _printf
0000228C  57A6      
0000228E  584F      3622          addq.w    #4,A7
                    3623   ; menu();
00002290  4EB9 0000 3624          jsr       _menu
00002294  24B4      
00002296  4E75      3625          rts
                    3626   ; }
                    3627   ; void Breakpoint(void)
                    3628   ; {
                    3629   _Breakpoint:
00002298  2F02      3630          move.l    D2,-(A7)
                    3631   ; char c;
                    3632   ; c = toupper(_getch());
0000229A  2F00      3633          move.l    D0,-(A7)
0000229C  4EB8 0B7C 3634          jsr       __getch
000022A0  2200      3635          move.l    D0,D1
000022A2  201F      3636          move.l    (A7)+,D0
000022A4  2F01      3637          move.l    D1,-(A7)
000022A6  4EB9 0000 3638          jsr       _toupper
000022AA  578A      
000022AC  584F      3639          addq.w    #4,A7
000022AE  1400      3640          move.b    D0,D2
                    3641   ; if( c == (char)('D'))                                      // BreakPoint Display
000022B0  0C02 0044 3642          cmp.b     #68,D2
000022B4  6608      3643          bne.s     Breakpoint_1
                    3644   ; BreakPointDisplay() ;
000022B6  4EB8 1B44 3645          jsr       _BreakPointDisplay
000022BA  6000 0054 3646          bra       Breakpoint_10
                    3647   Breakpoint_1:
                    3648   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022BE  0C02 004B 3649          cmp.b     #75,D2
000022C2  6630      3650          bne.s     Breakpoint_3
                    3651   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022C4  4879 0000 3652          pea       @m68kde~1_95.L
000022C8  6AAC      
000022CA  4EB9 0000 3653          jsr       _printf
000022CE  57A6      
000022D0  584F      3654          addq.w    #4,A7
                    3655   ; c = toupper(_getch());
000022D2  2F00      3656          move.l    D0,-(A7)
000022D4  4EB8 0B7C 3657          jsr       __getch
000022D8  2200      3658          move.l    D0,D1
000022DA  201F      3659          move.l    (A7)+,D0
000022DC  2F01      3660          move.l    D1,-(A7)
000022DE  4EB9 0000 3661          jsr       _toupper
000022E2  578A      
000022E4  584F      3662          addq.w    #4,A7
000022E6  1400      3663          move.b    D0,D2
                    3664   ; if(c == (char)('Y'))
000022E8  0C02 0059 3665          cmp.b     #89,D2
000022EC  6604      3666          bne.s     Breakpoint_5
                    3667   ; KillAllBreakPoints() ;
000022EE  4EB8 1F02 3668          jsr       _KillAllBreakPoints
                    3669   Breakpoint_5:
000022F2  601C      3670          bra.s     Breakpoint_10
                    3671   Breakpoint_3:
                    3672   ; }
                    3673   ; else if(c == (char)('S')) {
000022F4  0C02 0053 3674          cmp.b     #83,D2
000022F8  6606      3675          bne.s     Breakpoint_7
                    3676   ; SetBreakPoint() ;
000022FA  4EB8 1F9A 3677          jsr       _SetBreakPoint
000022FE  6010      3678          bra.s     Breakpoint_10
                    3679   Breakpoint_7:
                    3680   ; }
                    3681   ; else if(c == (char)('C')) {
00002300  0C02 0043 3682          cmp.b     #67,D2
00002304  6606      3683          bne.s     Breakpoint_9
                    3684   ; BreakPointClear() ;
00002306  4EB8 1CEA 3685          jsr       _BreakPointClear
0000230A  6004      3686          bra.s     Breakpoint_10
                    3687   Breakpoint_9:
                    3688   ; }
                    3689   ; else
                    3690   ; UnknownCommand() ;
0000230C  4EB8 226C 3691          jsr       _UnknownCommand
                    3692   Breakpoint_10:
00002310  241F      3693          move.l    (A7)+,D2
00002312  4E75      3694          rts
                    3695   ; }
                    3696   ; void Watchpoint(void)
                    3697   ; {
                    3698   _Watchpoint:
00002314  2F02      3699          move.l    D2,-(A7)
                    3700   ; char c;
                    3701   ; c = toupper(_getch());
00002316  2F00      3702          move.l    D0,-(A7)
00002318  4EB8 0B7C 3703          jsr       __getch
0000231C  2200      3704          move.l    D0,D1
0000231E  201F      3705          move.l    (A7)+,D0
00002320  2F01      3706          move.l    D1,-(A7)
00002322  4EB9 0000 3707          jsr       _toupper
00002326  578A      
00002328  584F      3708          addq.w    #4,A7
0000232A  1400      3709          move.b    D0,D2
                    3710   ; if( c == (char)('D'))                                      // WatchPoint Display
0000232C  0C02 0044 3711          cmp.b     #68,D2
00002330  6608      3712          bne.s     Watchpoint_1
                    3713   ; WatchPointDisplay() ;
00002332  4EB8 1C3E 3714          jsr       _WatchPointDisplay
00002336  6000 0054 3715          bra       Watchpoint_10
                    3716   Watchpoint_1:
                    3717   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000233A  0C02 004B 3718          cmp.b     #75,D2
0000233E  6630      3719          bne.s     Watchpoint_3
                    3720   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002340  4879 0000 3721          pea       @m68kde~1_96.L
00002344  6ACE      
00002346  4EB9 0000 3722          jsr       _printf
0000234A  57A6      
0000234C  584F      3723          addq.w    #4,A7
                    3724   ; c = toupper(_getch());
0000234E  2F00      3725          move.l    D0,-(A7)
00002350  4EB8 0B7C 3726          jsr       __getch
00002354  2200      3727          move.l    D0,D1
00002356  201F      3728          move.l    (A7)+,D0
00002358  2F01      3729          move.l    D1,-(A7)
0000235A  4EB9 0000 3730          jsr       _toupper
0000235E  578A      
00002360  584F      3731          addq.w    #4,A7
00002362  1400      3732          move.b    D0,D2
                    3733   ; if(c == (char)('Y'))
00002364  0C02 0059 3734          cmp.b     #89,D2
00002368  6604      3735          bne.s     Watchpoint_5
                    3736   ; KillAllWatchPoints() ;
0000236A  4EB8 1F6A 3737          jsr       _KillAllWatchPoints
                    3738   Watchpoint_5:
0000236E  601C      3739          bra.s     Watchpoint_10
                    3740   Watchpoint_3:
                    3741   ; }
                    3742   ; else if(c == (char)('S')) {
00002370  0C02 0053 3743          cmp.b     #83,D2
00002374  6606      3744          bne.s     Watchpoint_7
                    3745   ; SetWatchPoint() ;
00002376  4EB8 20D0 3746          jsr       _SetWatchPoint
0000237A  6010      3747          bra.s     Watchpoint_10
                    3748   Watchpoint_7:
                    3749   ; }
                    3750   ; else if(c == (char)('C')) {
0000237C  0C02 0043 3751          cmp.b     #67,D2
00002380  6606      3752          bne.s     Watchpoint_9
                    3753   ; WatchPointClear() ;
00002382  4EB8 1DC4 3754          jsr       _WatchPointClear
00002386  6004      3755          bra.s     Watchpoint_10
                    3756   Watchpoint_9:
                    3757   ; }
                    3758   ; else
                    3759   ; UnknownCommand() ;
00002388  4EB8 226C 3760          jsr       _UnknownCommand
                    3761   Watchpoint_10:
0000238C  241F      3762          move.l    (A7)+,D2
0000238E  4E75      3763          rts
                    3764   ; }
                    3765   ; void DMenu(void)
                    3766   ; {
                    3767   _DMenu:
00002390  2F02      3768          move.l    D2,-(A7)
                    3769   ; char c;
                    3770   ; c = toupper(_getch());
00002392  2F00      3771          move.l    D0,-(A7)
00002394  4EB8 0B7C 3772          jsr       __getch
00002398  2200      3773          move.l    D0,D1
0000239A  201F      3774          move.l    (A7)+,D0
0000239C  2F01      3775          move.l    D1,-(A7)
0000239E  4EB9 0000 3776          jsr       _toupper
000023A2  578A      
000023A4  584F      3777          addq.w    #4,A7
000023A6  1400      3778          move.b    D0,D2
                    3779   ; if( c == (char)('U'))                                     // Dump Memory
000023A8  0C02 0055 3780          cmp.b     #85,D2
000023AC  6606      3781          bne.s     DMenu_1
                    3782   ; DumpMemory() ;
000023AE  4EB8 0EF4 3783          jsr       _DumpMemory
000023B2  6018      3784          bra.s     DMenu_4
                    3785   DMenu_1:
                    3786   ; else if(c == (char)('I'))   {
000023B4  0C02 0049 3787          cmp.b     #73,D2
000023B8  660E      3788          bne.s     DMenu_3
                    3789   ; DisableBreakPoints() ;
000023BA  4EB8 1E66 3790          jsr       _DisableBreakPoints
                    3791   ; DisassembleProgram() ;
000023BE  4EB8 0D14 3792          jsr       _DisassembleProgram
                    3793   ; EnableBreakPoints() ;
000023C2  4EB8 1EBA 3794          jsr       _EnableBreakPoints
000023C6  6004      3795          bra.s     DMenu_4
                    3796   DMenu_3:
                    3797   ; }
                    3798   ; else
                    3799   ; UnknownCommand() ;
000023C8  4EB8 226C 3800          jsr       _UnknownCommand
                    3801   DMenu_4:
000023CC  241F      3802          move.l    (A7)+,D2
000023CE  4E75      3803          rts
                    3804   ; }
                    3805   ; void Help(void)
                    3806   ; {
                    3807   _Help:
000023D0  48E7 2020 3808          movem.l   D2/A2,-(A7)
000023D4  45F9 0000 3809          lea       _printf.L,A2
000023D8  57A6      
                    3810   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023DA  41F9 0000 3811          lea       @m68kde~1_97.L,A0
000023DE  6AF0      
000023E0  2408      3812          move.l    A0,D2
                    3813   ; printf(banner) ;
000023E2  2F02      3814          move.l    D2,-(A7)
000023E4  4E92      3815          jsr       (A2)
000023E6  584F      3816          addq.w    #4,A7
                    3817   ; printf("\r\n  Debugger Command Summary") ;
000023E8  4879 0000 3818          pea       @m68kde~1_98.L
000023EC  6B34      
000023EE  4E92      3819          jsr       (A2)
000023F0  584F      3820          addq.w    #4,A7
                    3821   ; printf(banner) ;
000023F2  2F02      3822          move.l    D2,-(A7)
000023F4  4E92      3823          jsr       (A2)
000023F6  584F      3824          addq.w    #4,A7
                    3825   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023F8  4879 0000 3826          pea       @m68kde~1_99.L
000023FC  6B52      
000023FE  4E92      3827          jsr       (A2)
00002400  584F      3828          addq.w    #4,A7
                    3829   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002402  4879 0000 3830          pea       @m68kde~1_100.L
00002406  6B96      
00002408  4E92      3831          jsr       (A2)
0000240A  584F      3832          addq.w    #4,A7
                    3833   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
0000240C  4879 0000 3834          pea       @m68kde~1_101.L
00002410  6BCE      
00002412  4E92      3835          jsr       (A2)
00002414  584F      3836          addq.w    #4,A7
                    3837   ; printf("\r\n  DI           - Disassemble Program");
00002416  4879 0000 3838          pea       @m68kde~1_102.L
0000241A  6C08      
0000241C  4E92      3839          jsr       (A2)
0000241E  584F      3840          addq.w    #4,A7
                    3841   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
00002420  4879 0000 3842          pea       @m68kde~1_103.L
00002424  6C30      
00002426  4E92      3843          jsr       (A2)
00002428  584F      3844          addq.w    #4,A7
                    3845   ; printf("\r\n  E            - Enter String into Memory") ;
0000242A  4879 0000 3846          pea       @m68kde~1_104.L
0000242E  6C62      
00002430  4E92      3847          jsr       (A2)
00002432  584F      3848          addq.w    #4,A7
                    3849   ; printf("\r\n  F            - Fill Memory with Data") ;
00002434  4879 0000 3850          pea       @m68kde~1_105.L
00002438  6C8E      
0000243A  4E92      3851          jsr       (A2)
0000243C  584F      3852          addq.w    #4,A7
                    3853   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000243E  2F39 0803 3854          move.l    _PC.L,-(A7)
00002442  0120      
00002444  4879 0000 3855          pea       @m68kde~1_106.L
00002448  6CB8      
0000244A  4E92      3856          jsr       (A2)
0000244C  504F      3857          addq.w    #8,A7
                    3858   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000244E  4879 0000 3859          pea       @m68kde~1_107.L
00002452  6CF2      
00002454  4E92      3860          jsr       (A2)
00002456  584F      3861          addq.w    #4,A7
                    3862   ; printf("\r\n  M            - Memory Examine and Change");
00002458  4879 0000 3863          pea       @m68kde~1_108.L
0000245C  6D2A      
0000245E  4E92      3864          jsr       (A2)
00002460  584F      3865          addq.w    #4,A7
                    3866   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002462  4879 0000 3867          pea       @m68kde~1_109.L
00002466  6D58      
00002468  4E92      3868          jsr       (A2)
0000246A  584F      3869          addq.w    #4,A7
                    3870   ; printf("\r\n  R            - Display 68000 Registers") ;
0000246C  4879 0000 3871          pea       @m68kde~1_110.L
00002470  6D92      
00002472  4E92      3872          jsr       (A2)
00002474  584F      3873          addq.w    #4,A7
                    3874   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002476  4879 0000 3875          pea       @m68kde~1_111.L
0000247A  6DBE      
0000247C  4E92      3876          jsr       (A2)
0000247E  584F      3877          addq.w    #4,A7
                    3878   ; printf("\r\n  TM           - Test Memory") ;
00002480  4879 0000 3879          pea       @m68kde~1_112.L
00002484  6DF0      
00002486  4E92      3880          jsr       (A2)
00002488  584F      3881          addq.w    #4,A7
                    3882   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
0000248A  4879 0000 3883          pea       @m68kde~1_113.L
0000248E  6E10      
00002490  4E92      3884          jsr       (A2)
00002492  584F      3885          addq.w    #4,A7
                    3886   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002494  4879 0000 3887          pea       @m68kde~1_114.L
00002498  6E38      
0000249A  4E92      3888          jsr       (A2)
0000249C  584F      3889          addq.w    #4,A7
                    3890   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000249E  4879 0000 3891          pea       @m68kde~1_115.L
000024A2  6E6E      
000024A4  4E92      3892          jsr       (A2)
000024A6  584F      3893          addq.w    #4,A7
                    3894   ; printf(banner) ;
000024A8  2F02      3895          move.l    D2,-(A7)
000024AA  4E92      3896          jsr       (A2)
000024AC  584F      3897          addq.w    #4,A7
000024AE  4CDF 0404 3898          movem.l   (A7)+,D2/A2
000024B2  4E75      3899          rts
                    3900   ; }
                    3901   ; void menu(void)
                    3902   ; {
                    3903   _menu:
000024B4  48E7 303C 3904          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024B8  45F9 0000 3905          lea       _printf.L,A2
000024BC  57A6      
000024BE  47F9 0803 3906          lea       _Trace.L,A3
000024C2  00D8      
000024C4  49F9 0803 3907          lea       _x.L,A4
000024C8  00C8      
000024CA  4BF9 0803 3908          lea       _SR.L,A5
000024CE  012C      
                    3909   ; char c,c1 ;
                    3910   ; while(1)    {
                    3911   menu_1:
                    3912   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024D0  4EB8 0BBA 3913          jsr       _FlushKeyboard
                    3914   ; printf("\r\n#") ;
000024D4  4879 0000 3915          pea       @m68kde~1_116.L
000024D8  6EA6      
000024DA  4E92      3916          jsr       (A2)
000024DC  584F      3917          addq.w    #4,A7
                    3918   ; c = toupper(_getch());
000024DE  2F00      3919          move.l    D0,-(A7)
000024E0  4EB8 0B7C 3920          jsr       __getch
000024E4  2200      3921          move.l    D0,D1
000024E6  201F      3922          move.l    (A7)+,D0
000024E8  2F01      3923          move.l    D1,-(A7)
000024EA  4EB9 0000 3924          jsr       _toupper
000024EE  578A      
000024F0  584F      3925          addq.w    #4,A7
000024F2  1400      3926          move.b    D0,D2
                    3927   ; if( c == (char)('L'))                  // load s record file
000024F4  0C02 004C 3928          cmp.b     #76,D2
000024F8  6608      3929          bne.s     menu_4
                    3930   ; Load_SRecordFile() ;
000024FA  4EB8 105E 3931          jsr       _Load_SRecordFile
000024FE  6000 021E 3932          bra       menu_46
                    3933   menu_4:
                    3934   ; else if( c == (char)('D'))             // dump memory
00002502  0C02 0044 3935          cmp.b     #68,D2
00002506  6608      3936          bne.s     menu_6
                    3937   ; DMenu() ;
00002508  4EB8 2390 3938          jsr       _DMenu
0000250C  6000 0210 3939          bra       menu_46
                    3940   menu_6:
                    3941   ; else if( c == (char)('E'))             // Enter String into memory
00002510  0C02 0045 3942          cmp.b     #69,D2
00002514  660A      3943          bne.s     menu_8
                    3944   ; EnterString() ;
00002516  4EB9 0000 3945          jsr       _EnterString
0000251A  2866      
0000251C  6000 0200 3946          bra       menu_46
                    3947   menu_8:
                    3948   ; else if( c == (char)('F'))             // fill memory
00002520  0C02 0046 3949          cmp.b     #70,D2
00002524  6608      3950          bne.s     menu_10
                    3951   ; FillMemory() ;
00002526  4EB8 0FE4 3952          jsr       _FillMemory
0000252A  6000 01F2 3953          bra       menu_46
                    3954   menu_10:
                    3955   ; else if( c == (char)('G'))  {           // go user program
0000252E  0C02 0047 3956          cmp.b     #71,D2
00002532  6626      3957          bne.s     menu_12
                    3958   ; printf("\r\nProgram Running.....") ;
00002534  4879 0000 3959          pea       @m68kde~1_117.L
00002538  6EAA      
0000253A  4E92      3960          jsr       (A2)
0000253C  584F      3961          addq.w    #4,A7
                    3962   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000253E  4879 0000 3963          pea       @m68kde~1_118.L
00002542  6EC2      
00002544  4E92      3964          jsr       (A2)
00002546  584F      3965          addq.w    #4,A7
                    3966   ; GoFlag = 1 ;
00002548  23FC 0000 3967          move.l    #1,_GoFlag.L
0000254C  0001 0803 
00002550  00DC      
                    3968   ; go() ;
00002552  4EB8 08B8 3969          jsr       _go
00002556  6000 01C6 3970          bra       menu_46
                    3971   menu_12:
                    3972   ; }
                    3973   ; else if( c == (char)('M'))           // memory examine and modify
0000255A  0C02 004D 3974          cmp.b     #77,D2
0000255E  6608      3975          bne.s     menu_14
                    3976   ; MemoryChange() ;
00002560  4EB8 11EC 3977          jsr       _MemoryChange
00002564  6000 01B8 3978          bra       menu_46
                    3979   menu_14:
                    3980   ; else if( c == (char)('P'))            // Program Flash Chip
00002568  0C02 0050 3981          cmp.b     #80,D2
0000256C  6608      3982          bne.s     menu_16
                    3983   ; ProgramFlashChip() ;
0000256E  4EB8 12EC 3984          jsr       _ProgramFlashChip
00002572  6000 01AA 3985          bra       menu_46
                    3986   menu_16:
                    3987   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002576  0C02 0043 3988          cmp.b     #67,D2
0000257A  6608      3989          bne.s     menu_18
                    3990   ; LoadFromFlashChip();
0000257C  4EB8 12EE 3991          jsr       _LoadFromFlashChip
00002580  6000 019C 3992          bra       menu_46
                    3993   menu_18:
                    3994   ; else if( c == (char)('R'))             // dump registers
00002584  0C02 0052 3995          cmp.b     #82,D2
00002588  6608      3996          bne.s     menu_20
                    3997   ; DumpRegisters() ;
0000258A  4EB8 1372 3998          jsr       _DumpRegisters
0000258E  6000 018E 3999          bra       menu_46
                    4000   menu_20:
                    4001   ; else if( c == (char)('.'))           // change registers
00002592  0C02 002E 4002          cmp.b     #46,D2
00002596  6608      4003          bne.s     menu_22
                    4004   ; ChangeRegisters() ;
00002598  4EB8 1888 4005          jsr       _ChangeRegisters
0000259C  6000 0180 4006          bra       menu_46
                    4007   menu_22:
                    4008   ; else if( c == (char)('B'))              // breakpoint command
000025A0  0C02 0042 4009          cmp.b     #66,D2
000025A4  6608      4010          bne.s     menu_24
                    4011   ; Breakpoint() ;
000025A6  4EB8 2298 4012          jsr       _Breakpoint
000025AA  6000 0172 4013          bra       menu_46
                    4014   menu_24:
                    4015   ; else if( c == (char)('T'))  {          // Test command
000025AE  0C02 0054 4016          cmp.b     #84,D2
000025B2  6600 0046 4017          bne       menu_26
                    4018   ; c1 = toupper(_getch()) ;
000025B6  2F00      4019          move.l    D0,-(A7)
000025B8  4EB8 0B7C 4020          jsr       __getch
000025BC  2200      4021          move.l    D0,D1
000025BE  201F      4022          move.l    (A7)+,D0
000025C0  2F01      4023          move.l    D1,-(A7)
000025C2  4EB9 0000 4024          jsr       _toupper
000025C6  578A      
000025C8  584F      4025          addq.w    #4,A7
000025CA  1600      4026          move.b    D0,D3
                    4027   ; if(c1 == (char)('M'))                    // memory test
000025CC  0C03 004D 4028          cmp.b     #77,D3
000025D0  6608      4029          bne.s     menu_28
                    4030   ; MemoryTest() ;
000025D2  4EB9 0000 4031          jsr       _MemoryTest
000025D6  28B6      
000025D8  601C      4032          bra.s     menu_33
                    4033   menu_28:
                    4034   ; else if( c1 == (char)('S'))              // Switch Test command
000025DA  0C03 0053 4035          cmp.b     #83,D3
000025DE  6606      4036          bne.s     menu_30
                    4037   ; SwitchTest() ;
000025E0  4EB8 0AB8 4038          jsr       _SwitchTest
000025E4  6010      4039          bra.s     menu_33
                    4040   menu_30:
                    4041   ; else if( c1 == (char)('D'))              // display Test command
000025E6  0C03 0044 4042          cmp.b     #68,D3
000025EA  6606      4043          bne.s     menu_32
                    4044   ; TestLEDS() ;
000025EC  4EB8 0A64 4045          jsr       _TestLEDS
000025F0  6004      4046          bra.s     menu_33
                    4047   menu_32:
                    4048   ; else
                    4049   ; UnknownCommand() ;
000025F2  4EB8 226C 4050          jsr       _UnknownCommand
                    4051   menu_33:
000025F6  6000 0126 4052          bra       menu_46
                    4053   menu_26:
                    4054   ; }
                    4055   ; else if( c == (char)(' ')) {             // Next instruction command
000025FA  0C02 0020 4056          cmp.b     #32,D2
000025FE  6636      4057          bne.s     menu_34
                    4058   ; DisableBreakPoints() ;
00002600  4EB8 1E66 4059          jsr       _DisableBreakPoints
                    4060   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002604  2013      4061          move.l    (A3),D0
00002606  0C80 0000 4062          cmp.l     #1,D0
0000260A  0001      
0000260C  661A      4063          bne.s     menu_36
0000260E  2039 0803 4064          move.l    _GoFlag.L,D0
00002612  00DC      
00002614  0C80 0000 4065          cmp.l     #1,D0
00002618  0001      
0000261A  660C      4066          bne.s     menu_36
                    4067   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000261C  13FC 0001 4068          move.b    #1,4194314
00002620  0040 000A 
                    4069   ; return ;
00002624  6000 00FC 4070          bra       menu_38
                    4071   menu_36:
                    4072   ; }
                    4073   ; else
                    4074   ; printf("\r\nError: Press 'G' first to start program") ;
00002628  4879 0000 4075          pea       @m68kde~1_119.L
0000262C  6EF0      
0000262E  4E92      4076          jsr       (A2)
00002630  584F      4077          addq.w    #4,A7
00002632  6000 00EA 4078          bra       menu_46
                    4079   menu_34:
                    4080   ; }
                    4081   ; else if( c == (char)('S')) {             // single step
00002636  0C02 0053 4082          cmp.b     #83,D2
0000263A  6600 008C 4083          bne       menu_39
                    4084   ; if(Trace == 0) {
0000263E  2013      4085          move.l    (A3),D0
00002640  6600 0050 4086          bne       menu_41
                    4087   ; DisableBreakPoints() ;
00002644  4EB8 1E66 4088          jsr       _DisableBreakPoints
                    4089   ; printf("\r\nSingle Step  :[ON]") ;
00002648  4879 0000 4090          pea       @m68kde~1_120.L
0000264C  6F1A      
0000264E  4E92      4091          jsr       (A2)
00002650  584F      4092          addq.w    #4,A7
                    4093   ; printf("\r\nBreak Points :[Disabled]") ;
00002652  4879 0000 4094          pea       @m68kde~1_51.L
00002656  6576      
00002658  4E92      4095          jsr       (A2)
0000265A  584F      4096          addq.w    #4,A7
                    4097   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
0000265C  0055 8000 4098          or.w      #32768,(A5)
                    4099   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002660  2F39 0803 4100          move.l    _PC.L,-(A7)
00002664  0120      
00002666  4879 0000 4101          pea       @m68kde~1_121.L
0000266A  6F30      
0000266C  4E92      4102          jsr       (A2)
0000266E  504F      4103          addq.w    #8,A7
                    4104   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002670  4879 0000 4105          pea       @m68kde~1_122.L
00002674  6F64      
00002676  4E92      4106          jsr       (A2)
00002678  584F      4107          addq.w    #4,A7
                    4108   ; DumpRegisters() ;
0000267A  4EB8 1372 4109          jsr       _DumpRegisters
                    4110   ; Trace = 1;
0000267E  26BC 0000 4111          move.l    #1,(A3)
00002682  0001      
                    4112   ; TraceException = 1;
00002684  13FC 0001 4113          move.b    #1,4194314
00002688  0040 000A 
                    4114   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000268C  28B8 0074 4115          move.l    116,(A4)
00002690  6032      4116          bra.s     menu_42
                    4117   menu_41:
                    4118   ; }
                    4119   ; else {
                    4120   ; Trace = 0 ;
00002692  4293      4121          clr.l     (A3)
                    4122   ; TraceException = 0 ;
00002694  4239 0040 4123          clr.b     4194314
00002698  000A      
                    4124   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
0000269A  28B8 0074 4125          move.l    116,(A4)
                    4126   ; EnableBreakPoints() ;
0000269E  4EB8 1EBA 4127          jsr       _EnableBreakPoints
                    4128   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026A2  0255 7FFF 4129          and.w     #32767,(A5)
                    4130   ; printf("\r\nSingle Step : [OFF]") ;
000026A6  4879 0000 4131          pea       @m68kde~1_123.L
000026AA  6F88      
000026AC  4E92      4132          jsr       (A2)
000026AE  584F      4133          addq.w    #4,A7
                    4134   ; printf("\r\nBreak Points :[Enabled]") ;
000026B0  4879 0000 4135          pea       @m68kde~1_124.L
000026B4  6F9E      
000026B6  4E92      4136          jsr       (A2)
000026B8  584F      4137          addq.w    #4,A7
                    4138   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026BA  4879 0000 4139          pea       @m68kde~1_125.L
000026BE  6FB8      
000026C0  4E92      4140          jsr       (A2)
000026C2  584F      4141          addq.w    #4,A7
                    4142   menu_42:
000026C4  6000 0058 4143          bra       menu_46
                    4144   menu_39:
                    4145   ; }
                    4146   ; }
                    4147   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026C8  0C02 001B 4148          cmp.b     #27,D2
000026CC  6600 0040 4149          bne       menu_43
                    4150   ; Trace = 0;
000026D0  4293      4151          clr.l     (A3)
                    4152   ; TraceException = 0;
000026D2  4239 0040 4153          clr.b     4194314
000026D6  000A      
                    4154   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026D8  28B8 0074 4155          move.l    116,(A4)
                    4156   ; EnableBreakPoints() ;
000026DC  4EB8 1EBA 4157          jsr       _EnableBreakPoints
                    4158   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026E0  0255 7FFF 4159          and.w     #32767,(A5)
                    4160   ; printf("\r\nSingle Step  :[OFF]") ;
000026E4  4879 0000 4161          pea       @m68kde~1_126.L
000026E8  6FE2      
000026EA  4E92      4162          jsr       (A2)
000026EC  584F      4163          addq.w    #4,A7
                    4164   ; printf("\r\nBreak Points :[Enabled]");
000026EE  4879 0000 4165          pea       @m68kde~1_124.L
000026F2  6F9E      
000026F4  4E92      4166          jsr       (A2)
000026F6  584F      4167          addq.w    #4,A7
                    4168   ; printf("\r\nProgram Running.....") ;
000026F8  4879 0000 4169          pea       @m68kde~1_117.L
000026FC  6EAA      
000026FE  4E92      4170          jsr       (A2)
00002700  584F      4171          addq.w    #4,A7
                    4172   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
00002702  4879 0000 4173          pea       @m68kde~1_118.L
00002706  6EC2      
00002708  4E92      4174          jsr       (A2)
0000270A  584F      4175          addq.w    #4,A7
                    4176   ; return ;
0000270C  6014      4177          bra.s     menu_38
                    4178   menu_43:
                    4179   ; }
                    4180   ; else if( c == (char)('W'))              // Watchpoint command
0000270E  0C02 0057 4181          cmp.b     #87,D2
00002712  6606      4182          bne.s     menu_45
                    4183   ; Watchpoint() ;
00002714  4EB8 2314 4184          jsr       _Watchpoint
00002718  6004      4185          bra.s     menu_46
                    4186   menu_45:
                    4187   ; else
                    4188   ; UnknownCommand() ;
0000271A  4EB8 226C 4189          jsr       _UnknownCommand
                    4190   menu_46:
0000271E  6000 FDB0 4191          bra       menu_1
                    4192   menu_38:
00002722  4CDF 3C0C 4193          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002726  4E75      4194          rts
                    4195   ; }
                    4196   ; }
                    4197   ; void PrintErrorMessageandAbort(char *string) {
                    4198   _PrintErrorMessageandAbort:
00002728  4E56 0000 4199          link      A6,#0
                    4200   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
0000272C  4879 0000 4201          pea       @m68kde~1_127.L
00002730  6FF8      
00002732  4EB9 0000 4202          jsr       _printf
00002736  57A6      
00002738  584F      4203          addq.w    #4,A7
                    4204   ; printf("%s\r\n", string) ;
0000273A  2F2E 0008 4205          move.l    8(A6),-(A7)
0000273E  4879 0000 4206          pea       @m68kde~1_128.L
00002742  7014      
00002744  4EB9 0000 4207          jsr       _printf
00002748  57A6      
0000274A  504F      4208          addq.w    #8,A7
                    4209   ; menu() ;
0000274C  4EB8 24B4 4210          jsr       _menu
00002750  4E5E      4211          unlk      A6
00002752  4E75      4212          rts
                    4213   ; }
                    4214   ; void IRQMessage(int level) {
                    4215   _IRQMessage:
00002754  4E56 0000 4216          link      A6,#0
                    4217   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002758  4879 0000 4218          pea       @m68kde~1_129.L
0000275C  701A      
0000275E  4EB9 0000 4219          jsr       _printf
00002762  57A6      
00002764  584F      4220          addq.w    #4,A7
                    4221   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002766  2F2E 0008 4222          move.l    8(A6),-(A7)
0000276A  4879 0000 4223          pea       @m68kde~1_130.L
0000276E  7032      
00002770  4EB9 0000 4224          jsr       _printf
00002774  57A6      
00002776  504F      4225          addq.w    #8,A7
                    4226   ; menu() ;
00002778  4EB8 24B4 4227          jsr       _menu
0000277C  4E5E      4228          unlk      A6
0000277E  4E75      4229          rts
                    4230   ; }
                    4231   ; void UnhandledIRQ1(void) {
                    4232   _UnhandledIRQ1:
                    4233   ; IRQMessage(1);
00002780  4878 0001 4234          pea       1
00002784  4EB8 2754 4235          jsr       _IRQMessage
00002788  584F      4236          addq.w    #4,A7
0000278A  4E75      4237          rts
                    4238   ; }
                    4239   ; void UnhandledIRQ2(void) {
                    4240   _UnhandledIRQ2:
                    4241   ; IRQMessage(2);
0000278C  4878 0002 4242          pea       2
00002790  4EB8 2754 4243          jsr       _IRQMessage
00002794  584F      4244          addq.w    #4,A7
00002796  4E75      4245          rts
                    4246   ; }
                    4247   ; void UnhandledIRQ3(void){
                    4248   _UnhandledIRQ3:
                    4249   ; IRQMessage(3);
00002798  4878 0003 4250          pea       3
0000279C  4EB8 2754 4251          jsr       _IRQMessage
000027A0  584F      4252          addq.w    #4,A7
000027A2  4E75      4253          rts
                    4254   ; }
                    4255   ; void UnhandledIRQ4(void) {
                    4256   _UnhandledIRQ4:
                    4257   ; IRQMessage(4);
000027A4  4878 0004 4258          pea       4
000027A8  4EB8 2754 4259          jsr       _IRQMessage
000027AC  584F      4260          addq.w    #4,A7
000027AE  4E75      4261          rts
                    4262   ; }
                    4263   ; void UnhandledIRQ5(void) {
                    4264   _UnhandledIRQ5:
                    4265   ; IRQMessage(5);
000027B0  4878 0005 4266          pea       5
000027B4  4EB8 2754 4267          jsr       _IRQMessage
000027B8  584F      4268          addq.w    #4,A7
000027BA  4E75      4269          rts
                    4270   ; }
                    4271   ; void UnhandledIRQ6(void) {
                    4272   _UnhandledIRQ6:
                    4273   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027BC  4879 0000 4274          pea       @m68kde~1_131.L
000027C0  7056      
000027C2  4EB8 2728 4275          jsr       _PrintErrorMessageandAbort
000027C6  584F      4276          addq.w    #4,A7
                    4277   ; menu() ;
000027C8  4EB8 24B4 4278          jsr       _menu
000027CC  4E75      4279          rts
                    4280   ; }
                    4281   ; void UnhandledIRQ7(void) {
                    4282   _UnhandledIRQ7:
                    4283   ; IRQMessage(7);
000027CE  4878 0007 4284          pea       7
000027D2  4EB8 2754 4285          jsr       _IRQMessage
000027D6  584F      4286          addq.w    #4,A7
000027D8  4E75      4287          rts
                    4288   ; }
                    4289   ; void UnhandledTrap(void) {
                    4290   _UnhandledTrap:
                    4291   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027DA  4879 0000 4292          pea       @m68kde~1_132.L
000027DE  7096      
000027E0  4EB8 2728 4293          jsr       _PrintErrorMessageandAbort
000027E4  584F      4294          addq.w    #4,A7
000027E6  4E75      4295          rts
                    4296   ; }
                    4297   ; void BusError() {
                    4298   _BusError:
                    4299   ; PrintErrorMessageandAbort("BUS Error!") ;
000027E8  4879 0000 4300          pea       @m68kde~1_133.L
000027EC  70AC      
000027EE  4EB8 2728 4301          jsr       _PrintErrorMessageandAbort
000027F2  584F      4302          addq.w    #4,A7
000027F4  4E75      4303          rts
                    4304   ; }
                    4305   ; void AddressError() {
                    4306   _AddressError:
                    4307   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027F6  4879 0000 4308          pea       @m68kde~1_134.L
000027FA  70B8      
000027FC  4EB8 2728 4309          jsr       _PrintErrorMessageandAbort
00002800  584F      4310          addq.w    #4,A7
00002802  4E75      4311          rts
                    4312   ; }
                    4313   ; void IllegalInstruction() {
                    4314   _IllegalInstruction:
                    4315   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002804  4879 0000 4316          pea       @m68kde~1_135.L
00002808  70C8      
0000280A  4EB8 2728 4317          jsr       _PrintErrorMessageandAbort
0000280E  584F      4318          addq.w    #4,A7
00002810  4E75      4319          rts
                    4320   ; }
                    4321   ; void Dividebyzero() {
                    4322   _Dividebyzero:
                    4323   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002812  4879 0000 4324          pea       @m68kde~1_136.L
00002816  70DC      
00002818  4EB8 2728 4325          jsr       _PrintErrorMessageandAbort
0000281C  584F      4326          addq.w    #4,A7
0000281E  4E75      4327          rts
                    4328   ; }
                    4329   ; void Check() {
                    4330   _Check:
                    4331   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002820  4879 0000 4332          pea       @m68kde~1_137.L
00002824  70EC      
00002826  4EB8 2728 4333          jsr       _PrintErrorMessageandAbort
0000282A  584F      4334          addq.w    #4,A7
0000282C  4E75      4335          rts
                    4336   ; }
                    4337   ; void Trapv() {
                    4338   _Trapv:
                    4339   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000282E  4879 0000 4340          pea       @m68kde~1_138.L
00002832  70FE      
00002834  4EB8 2728 4341          jsr       _PrintErrorMessageandAbort
00002838  584F      4342          addq.w    #4,A7
0000283A  4E75      4343          rts
                    4344   ; }
                    4345   ; void PrivError() {
                    4346   _PrivError:
                    4347   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000283C  4879 0000 4348          pea       @m68kde~1_139.L
00002840  7110      
00002842  4EB8 2728 4349          jsr       _PrintErrorMessageandAbort
00002846  584F      4350          addq.w    #4,A7
00002848  4E75      4351          rts
                    4352   ; }
                    4353   ; void UnitIRQ() {
                    4354   _UnitIRQ:
                    4355   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000284A  4879 0000 4356          pea       @m68kde~1_140.L
0000284E  7124      
00002850  4EB8 2728 4357          jsr       _PrintErrorMessageandAbort
00002854  584F      4358          addq.w    #4,A7
00002856  4E75      4359          rts
                    4360   ; }
                    4361   ; void Spurious() {
                    4362   _Spurious:
                    4363   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002858  4879 0000 4364          pea       @m68kde~1_141.L
0000285C  7136      
0000285E  4EB8 2728 4365          jsr       _PrintErrorMessageandAbort
00002862  584F      4366          addq.w    #4,A7
00002864  4E75      4367          rts
                    4368   ; }
                    4369   ; void EnterString(void)
                    4370   ; {
                    4371   _EnterString:
00002866  4E56 FFFC 4372          link      A6,#-4
0000286A  2F02      4373          move.l    D2,-(A7)
                    4374   ; unsigned char *Start;
                    4375   ; unsigned char c;
                    4376   ; printf("\r\nStart Address in Memory: ") ;
0000286C  4879 0000 4377          pea       @m68kde~1_142.L
00002870  7144      
00002872  4EB9 0000 4378          jsr       _printf
00002876  57A6      
00002878  584F      4379          addq.w    #4,A7
                    4380   ; Start = Get8HexDigits(0) ;
0000287A  42A7      4381          clr.l     -(A7)
0000287C  4EB8 0CB8 4382          jsr       _Get8HexDigits
00002880  584F      4383          addq.w    #4,A7
00002882  2400      4384          move.l    D0,D2
                    4385   ; printf("\r\nEnter String (ESC to end) :") ;
00002884  4879 0000 4386          pea       @m68kde~1_143.L
00002888  7160      
0000288A  4EB9 0000 4387          jsr       _printf
0000288E  57A6      
00002890  584F      4388          addq.w    #4,A7
                    4389   ; while((c = getchar()) != 0x1b)
                    4390   EnterString_1:
00002892  4EB9 0000 4391          jsr       _getch
00002896  56EE      
00002898  1D40 FFFF 4392          move.b    D0,-1(A6)
0000289C  0C00 001B 4393          cmp.b     #27,D0
000028A0  670A      4394          beq.s     EnterString_3
                    4395   ; *Start++ = c ;
000028A2  2042      4396          move.l    D2,A0
000028A4  5282      4397          addq.l    #1,D2
000028A6  10AE FFFF 4398          move.b    -1(A6),(A0)
000028AA  60E6      4399          bra       EnterString_1
                    4400   EnterString_3:
                    4401   ; *Start = 0x00;  // terminate with a null
000028AC  2042      4402          move.l    D2,A0
000028AE  4210      4403          clr.b     (A0)
000028B0  241F      4404          move.l    (A7)+,D2
000028B2  4E5E      4405          unlk      A6
000028B4  4E75      4406          rts
                    4407   ; }
                    4408   ; void MemoryTest(void)
                    4409   ; {
                    4410   _MemoryTest:
000028B6  4E56 FF88 4411          link      A6,#-120
000028BA  48E7 3F3C 4412          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000028BE  45F9 0000 4413          lea       _printf.L,A2
000028C2  57A6      
000028C4  47F8 09E8 4414          lea       _Oline0.L,A3
000028C8  49F8 0A16 4415          lea       _Oline1.L,A4
                    4416   ; unsigned int *RamPtr, counter1=1, *failPtr;
000028CC  2D7C 0000 4417          move.l    #1,-118(A6)
000028D0  0001 FF8A 
                    4418   ; register unsigned int i ;
                    4419   ; unsigned int Start, End, writeVal, readVal;
                    4420   ; unsigned int cp, failAddr; 
                    4421   ; char c;
                    4422   ; bool memTestFail = FALSE; 
000028D4  426E FF9C 4423          clr.w     -100(A6)
                    4424   ; char progressBarStringWrite[24] = {""}; 
000028D8  41EE FF9E 4425          lea       -98(A6),A0
000028DC  43F9 0000 4426          lea       MemoryTest_progressBarStringWrite.L,A1
000028E0  788C      
000028E2  7005      4427          moveq     #5,D0
000028E4  20D9      4428          move.l    (A1)+,(A0)+
000028E6  51C8 FFFC 4429          dbra      D0,*-2
                    4430   ; char progressBarStringRead[24] = {""}; 
000028EA  41EE FFB6 4431          lea       -74(A6),A0
000028EE  43F9 0000 4432          lea       MemoryTest_progressBarStringRead.L,A1
000028F2  7766      
000028F4  7005      4433          moveq     #5,D0
000028F6  20D9      4434          move.l    (A1)+,(A0)+
000028F8  51C8 FFFC 4435          dbra      D0,*-2
                    4436   ; char failureString0[24];
                    4437   ; char failureString1[24];
                    4438   ; unsigned int progBarIndex = 0;
000028FC  4286      4439          clr.l     D6
                    4440   ; bool invalidAddress = FALSE; 
000028FE  426E FFFE 4441          clr.w     -2(A6)
                    4442   ; Oline0("Memory Test"); 
00002902  4879 0000 4443          pea       @m68kde~1_144.L
00002906  717E      
00002908  4E93      4444          jsr       (A3)
0000290A  584F      4445          addq.w    #4,A7
                    4446   ; Oline1(" "); 
0000290C  4879 0000 4447          pea       @m68kde~1_30.L
00002910  63F4      
00002912  4E94      4448          jsr       (A4)
00002914  584F      4449          addq.w    #4,A7
                    4450   ; printf("\r\nStart Address: ") ;
00002916  4879 0000 4451          pea       @m68kde~1_145.L
0000291A  718A      
0000291C  4E92      4452          jsr       (A2)
0000291E  584F      4453          addq.w    #4,A7
                    4454   ; Start = Get8HexDigits(0) ;
00002920  42A7      4455          clr.l     -(A7)
00002922  4EB8 0CB8 4456          jsr       _Get8HexDigits
00002926  584F      4457          addq.w    #4,A7
00002928  2600      4458          move.l    D0,D3
                    4459   ; printf("\r\nEnd Address: ") ;
0000292A  4879 0000 4460          pea       @m68kde~1_146.L
0000292E  719C      
00002930  4E92      4461          jsr       (A2)
00002932  584F      4462          addq.w    #4,A7
                    4463   ; End = Get8HexDigits(0) ;
00002934  42A7      4464          clr.l     -(A7)
00002936  4EB8 0CB8 4465          jsr       _Get8HexDigits
0000293A  584F      4466          addq.w    #4,A7
0000293C  2800      4467          move.l    D0,D4
                    4468   ; if (!(End < Start))
0000293E  B883      4469          cmp.l     D3,D4
00002940  6500 01D8 4470          blo       MemoryTest_1
                    4471   ; {
                    4472   ; RamPtr = (unsigned int*)Start;
00002944  2403      4473          move.l    D3,D2
                    4474   ; cp = (End-Start)/24 + Start; // Initial displacement for LCD
00002946  2004      4475          move.l    D4,D0
00002948  9083      4476          sub.l     D3,D0
0000294A  2F00      4477          move.l    D0,-(A7)
0000294C  4878 0018 4478          pea       24
00002950  4EB9 0000 4479          jsr       ULDIV
00002954  55E4      
00002956  2017      4480          move.l    (A7),D0
00002958  504F      4481          addq.w    #8,A7
0000295A  D083      4482          add.l     D3,D0
0000295C  2A00      4483          move.l    D0,D5
                    4484   ; printf("\r\nWriting\n"); 
0000295E  4879 0000 4485          pea       @m68kde~1_147.L
00002962  71AC      
00002964  4E92      4486          jsr       (A2)
00002966  584F      4487          addq.w    #4,A7
                    4488   ; // Test 1: Write all ones and read them back
                    4489   ; writeVal = 0xFEE1DEAD; 
00002968  2E3C FEE1 4490          move.l    #-18751827,D7
0000296C  DEAD      
                    4491   ; Oline0("Writing");
0000296E  4879 0000 4492          pea       @m68kde~1_148.L
00002972  71B8      
00002974  4E93      4493          jsr       (A3)
00002976  584F      4494          addq.w    #4,A7
                    4495   ; while (RamPtr<End)
                    4496   MemoryTest_3:
00002978  B484      4497          cmp.l     D4,D2
0000297A  6400 004A 4498          bhs       MemoryTest_5
                    4499   ; {
                    4500   ; if ((unsigned int)RamPtr >= cp)
0000297E  B485      4501          cmp.l     D5,D2
00002980  6500 0038 4502          blo       MemoryTest_6
                    4503   ; {
                    4504   ; cp += (End-Start)/24; 
00002984  2004      4505          move.l    D4,D0
00002986  9083      4506          sub.l     D3,D0
00002988  2F00      4507          move.l    D0,-(A7)
0000298A  4878 0018 4508          pea       24
0000298E  4EB9 0000 4509          jsr       ULDIV
00002992  55E4      
00002994  2017      4510          move.l    (A7),D0
00002996  504F      4511          addq.w    #8,A7
00002998  DA80      4512          add.l     D0,D5
                    4513   ; progressBarStringWrite[progBarIndex] = '#';
0000299A  1DBC 0023 4514          move.b    #35,-98(A6,D6.L)
0000299E  689E      
                    4515   ; printf("%s", "#"); 
000029A0  4879 0000 4516          pea       @m68kde~1_149.L
000029A4  71C0      
000029A6  4879 0000 4517          pea       @m68kde~1_47.L
000029AA  6538      
000029AC  4E92      4518          jsr       (A2)
000029AE  504F      4519          addq.w    #8,A7
                    4520   ; Oline1(progressBarStringWrite);
000029B0  486E FF9E 4521          pea       -98(A6)
000029B4  4E94      4522          jsr       (A4)
000029B6  584F      4523          addq.w    #4,A7
                    4524   ; progBarIndex++; 
000029B8  5286      4525          addq.l    #1,D6
                    4526   MemoryTest_6:
                    4527   ; }
                    4528   ; *RamPtr = writeVal; 
000029BA  2042      4529          move.l    D2,A0
000029BC  2087      4530          move.l    D7,(A0)
                    4531   ; RamPtr++; 
000029BE  5882      4532          addq.l    #4,D2
                    4533   ; Wait500us(); 
000029C0  4EB8 0932 4534          jsr       _Wait500us
000029C4  60B2      4535          bra       MemoryTest_3
                    4536   MemoryTest_5:
                    4537   ; }
                    4538   ; // Inject failure halfway between start and end
                    4539   ; failAddr = Start + (End-Start)/2; 
000029C6  2003      4540          move.l    D3,D0
000029C8  2204      4541          move.l    D4,D1
000029CA  9283      4542          sub.l     D3,D1
000029CC  2F01      4543          move.l    D1,-(A7)
000029CE  4878 0002 4544          pea       2
000029D2  4EB9 0000 4545          jsr       ULDIV
000029D6  55E4      
000029D8  2217      4546          move.l    (A7),D1
000029DA  504F      4547          addq.w    #8,A7
000029DC  D081      4548          add.l     D1,D0
000029DE  2D40 FF96 4549          move.l    D0,-106(A6)
                    4550   ; failPtr = (unsigned int *)(failAddr); 
000029E2  2D6E FF96 4551          move.l    -106(A6),-114(A6)
000029E6  FF8E      
                    4552   ; *failPtr = 0xCCCCCCCC; 
000029E8  206E FF8E 4553          move.l    -114(A6),A0
000029EC  20BC CCCC 4554          move.l    #-858993460,(A0)
000029F0  CCCC      
                    4555   ; printf("\r\nReading\n"); 
000029F2  4879 0000 4556          pea       @m68kde~1_150.L
000029F6  71C2      
000029F8  4E92      4557          jsr       (A2)
000029FA  584F      4558          addq.w    #4,A7
                    4559   ; RamPtr = (unsigned int*)Start; 
000029FC  2403      4560          move.l    D3,D2
                    4561   ; cp = (End-Start)/24 + Start; // Initial displacement for LCD
000029FE  2004      4562          move.l    D4,D0
00002A00  9083      4563          sub.l     D3,D0
00002A02  2F00      4564          move.l    D0,-(A7)
00002A04  4878 0018 4565          pea       24
00002A08  4EB9 0000 4566          jsr       ULDIV
00002A0C  55E4      
00002A0E  2017      4567          move.l    (A7),D0
00002A10  504F      4568          addq.w    #8,A7
00002A12  D083      4569          add.l     D3,D0
00002A14  2A00      4570          move.l    D0,D5
                    4571   ; progBarIndex = 0; 
00002A16  4286      4572          clr.l     D6
                    4573   ; Oline0("Reading");
00002A18  4879 0000 4574          pea       @m68kde~1_151.L
00002A1C  71CE      
00002A1E  4E93      4575          jsr       (A3)
00002A20  584F      4576          addq.w    #4,A7
                    4577   ; while (RamPtr<End)
                    4578   MemoryTest_8:
00002A22  B484      4579          cmp.l     D4,D2
00002A24  6400 0062 4580          bhs       MemoryTest_10
                    4581   ; {
                    4582   ; if ((unsigned int)RamPtr >= cp)
00002A28  B485      4583          cmp.l     D5,D2
00002A2A  6500 0038 4584          blo       MemoryTest_11
                    4585   ; {
                    4586   ; cp += (End-Start)/24; 
00002A2E  2004      4587          move.l    D4,D0
00002A30  9083      4588          sub.l     D3,D0
00002A32  2F00      4589          move.l    D0,-(A7)
00002A34  4878 0018 4590          pea       24
00002A38  4EB9 0000 4591          jsr       ULDIV
00002A3C  55E4      
00002A3E  2017      4592          move.l    (A7),D0
00002A40  504F      4593          addq.w    #8,A7
00002A42  DA80      4594          add.l     D0,D5
                    4595   ; progressBarStringRead[progBarIndex] = '#';
00002A44  1DBC 0023 4596          move.b    #35,-74(A6,D6.L)
00002A48  68B6      
                    4597   ; Oline1(progressBarStringRead);
00002A4A  486E FFB6 4598          pea       -74(A6)
00002A4E  4E94      4599          jsr       (A4)
00002A50  584F      4600          addq.w    #4,A7
                    4601   ; printf("%s", "#");
00002A52  4879 0000 4602          pea       @m68kde~1_149.L
00002A56  71C0      
00002A58  4879 0000 4603          pea       @m68kde~1_47.L
00002A5C  6538      
00002A5E  4E92      4604          jsr       (A2)
00002A60  504F      4605          addq.w    #8,A7
                    4606   ; progBarIndex++; 
00002A62  5286      4607          addq.l    #1,D6
                    4608   MemoryTest_11:
                    4609   ; }
                    4610   ; readVal = *RamPtr;
00002A64  2042      4611          move.l    D2,A0
00002A66  2A50      4612          move.l    (A0),A5
                    4613   ; if (readVal != writeVal)
00002A68  200D      4614          move.l    A5,D0
00002A6A  B087      4615          cmp.l     D7,D0
00002A6C  6712      4616          beq.s     MemoryTest_13
                    4617   ; {
                    4618   ; printf("\r\nFAILED!!!!!!");
00002A6E  4879 0000 4619          pea       @m68kde~1_152.L
00002A72  71D6      
00002A74  4E92      4620          jsr       (A2)
00002A76  584F      4621          addq.w    #4,A7
                    4622   ; memTestFail = TRUE; 
00002A78  3D7C 0001 4623          move.w    #1,-100(A6)
00002A7C  FF9C      
                    4624   ; break; 
00002A7E  6008      4625          bra.s     MemoryTest_10
                    4626   MemoryTest_13:
                    4627   ; }
                    4628   ; RamPtr++; 
00002A80  5882      4629          addq.l    #4,D2
                    4630   ; Wait500us(); 
00002A82  4EB8 0932 4631          jsr       _Wait500us
00002A86  609A      4632          bra       MemoryTest_8
                    4633   MemoryTest_10:
                    4634   ; }
                    4635   ; if (memTestFail == TRUE)
00002A88  302E FF9C 4636          move.w    -100(A6),D0
00002A8C  48C0      4637          ext.l     D0
00002A8E  0C80 0000 4638          cmp.l     #1,D0
00002A92  0001      
00002A94  6600 0066 4639          bne       MemoryTest_15
                    4640   ; {
                    4641   ; printf("\r\nFailed at address %X", RamPtr); 
00002A98  2F02      4642          move.l    D2,-(A7)
00002A9A  4879 0000 4643          pea       @m68kde~1_153.L
00002A9E  71E6      
00002AA0  4E92      4644          jsr       (A2)
00002AA2  504F      4645          addq.w    #8,A7
                    4646   ; printf("\r\nExpected value: %X", writeVal);
00002AA4  2F07      4647          move.l    D7,-(A7)
00002AA6  4879 0000 4648          pea       @m68kde~1_154.L
00002AAA  71FE      
00002AAC  4E92      4649          jsr       (A2)
00002AAE  504F      4650          addq.w    #8,A7
                    4651   ; printf("\r\nActual Value: %X", readVal); 
00002AB0  2F0D      4652          move.l    A5,-(A7)
00002AB2  4879 0000 4653          pea       @m68kde~1_155.L
00002AB6  7214      
00002AB8  4E92      4654          jsr       (A2)
00002ABA  504F      4655          addq.w    #8,A7
                    4656   ; sprintf(failureString0, "Failed at %X", RamPtr);
00002ABC  2F02      4657          move.l    D2,-(A7)
00002ABE  4879 0000 4658          pea       @m68kde~1_156.L
00002AC2  7228      
00002AC4  486E FFCE 4659          pea       -50(A6)
00002AC8  4EB9 0000 4660          jsr       _sprintf
00002ACC  5742      
00002ACE  DEFC 000C 4661          add.w     #12,A7
                    4662   ; sprintf(failureString1, "W:%X R:%X", writeVal, readVal); 
00002AD2  2F0D      4663          move.l    A5,-(A7)
00002AD4  2F07      4664          move.l    D7,-(A7)
00002AD6  4879 0000 4665          pea       @m68kde~1_157.L
00002ADA  7236      
00002ADC  486E FFE6 4666          pea       -26(A6)
00002AE0  4EB9 0000 4667          jsr       _sprintf
00002AE4  5742      
00002AE6  DEFC 0010 4668          add.w     #16,A7
                    4669   ; Oline0(failureString0);
00002AEA  486E FFCE 4670          pea       -50(A6)
00002AEE  4E93      4671          jsr       (A3)
00002AF0  584F      4672          addq.w    #4,A7
                    4673   ; Oline1(failureString1);  
00002AF2  486E FFE6 4674          pea       -26(A6)
00002AF6  4E94      4675          jsr       (A4)
00002AF8  584F      4676          addq.w    #4,A7
00002AFA  601C      4677          bra.s     MemoryTest_16
                    4678   MemoryTest_15:
                    4679   ; }
                    4680   ; else
                    4681   ; {
                    4682   ; Oline0("Memory Test Successful");
00002AFC  4879 0000 4683          pea       @m68kde~1_158.L
00002B00  7240      
00002B02  4E93      4684          jsr       (A3)
00002B04  584F      4685          addq.w    #4,A7
                    4686   ; printf("\r\nMemory Test Successful");
00002B06  4879 0000 4687          pea       @m68kde~1_159.L
00002B0A  7258      
00002B0C  4E92      4688          jsr       (A2)
00002B0E  584F      4689          addq.w    #4,A7
                    4690   ; PortA = 0x3FF; 
00002B10  13FC 00FF 4691          move.b    #255,4194304
00002B14  0040 0000 
                    4692   MemoryTest_16:
00002B18  601E      4693          bra.s     MemoryTest_2
                    4694   MemoryTest_1:
                    4695   ; }
                    4696   ; }
                    4697   ; else
                    4698   ; {
                    4699   ; printf("\r\nInvalid Address: End must be greater than Start");
00002B1A  4879 0000 4700          pea       @m68kde~1_160.L
00002B1E  7272      
00002B20  4E92      4701          jsr       (A2)
00002B22  584F      4702          addq.w    #4,A7
                    4703   ; Oline0("Invalid Address");
00002B24  4879 0000 4704          pea       @m68kde~1_161.L
00002B28  72A4      
00002B2A  4E93      4705          jsr       (A3)
00002B2C  584F      4706          addq.w    #4,A7
                    4707   ; Oline1(" "); 
00002B2E  4879 0000 4708          pea       @m68kde~1_30.L
00002B32  63F4      
00002B34  4E94      4709          jsr       (A4)
00002B36  584F      4710          addq.w    #4,A7
                    4711   MemoryTest_2:
00002B38  4CDF 3CFC 4712          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002B3C  4E5E      4713          unlk      A6
00002B3E  4E75      4714          rts
                    4715   ; }
                    4716   ; }
                    4717   ; void main(void)
                    4718   ; {
                    4719   _main:
00002B40  4E56 FFF0 4720          link      A6,#-16
00002B44  48E7 2030 4721          movem.l   D2/A2/A3,-(A7)
00002B48  45F8 0A44 4722          lea       _InstallExceptionHandler.L,A2
00002B4C  47F9 0000 4723          lea       _printf.L,A3
00002B50  57A6      
                    4724   ; char c ;
                    4725   ; int i, j ;
                    4726   ; char *BugMessage = "DE1-68k Bug V1.77";
00002B52  41F9 0000 4727          lea       @m68kde~1_162.L,A0
00002B56  72B4      
00002B58  2D48 FFF8 4728          move.l    A0,-8(A6)
                    4729   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002B5C  41F9 0000 4730          lea       @m68kde~1_163.L,A0
00002B60  72C6      
00002B62  2D48 FFFC 4731          move.l    A0,-4(A6)
                    4732   ; KillAllBreakPoints() ;
00002B66  4EB8 1F02 4733          jsr       _KillAllBreakPoints
                    4734   ; i = x = y = z = PortA_Count = 0;
00002B6A  42B9 0803 4735          clr.l     _PortA_Count.L
00002B6E  00D4      
00002B70  42B9 0803 4736          clr.l     _z.L
00002B74  00D0      
00002B76  42B9 0803 4737          clr.l     _y.L
00002B7A  00CC      
00002B7C  42B9 0803 4738          clr.l     _x.L
00002B80  00C8      
00002B82  4282      4739          clr.l     D2
                    4740   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B84  42B9 0803 4741          clr.l     _GoFlag.L
00002B88  00DC      
00002B8A  42B9 0803 4742          clr.l     _Trace.L
00002B8E  00D8      
                    4743   ; Echo = 1 ;
00002B90  23FC 0000 4744          move.l    #1,_Echo.L
00002B94  0001 0803 
00002B98  00E0      
                    4745   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B9A  42B9 0803 4746          clr.l     _d7.L
00002B9E  0100      
00002BA0  42B9 0803 4747          clr.l     _d6.L
00002BA4  00FC      
00002BA6  42B9 0803 4748          clr.l     _d5.L
00002BAA  00F8      
00002BAC  42B9 0803 4749          clr.l     _d4.L
00002BB0  00F4      
00002BB2  42B9 0803 4750          clr.l     _d3.L
00002BB6  00F0      
00002BB8  42B9 0803 4751          clr.l     _d2.L
00002BBC  00EC      
00002BBE  42B9 0803 4752          clr.l     _d1.L
00002BC2  00E8      
00002BC4  42B9 0803 4753          clr.l     _d0.L
00002BC8  00E4      
                    4754   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002BCA  42B9 0803 4755          clr.l     _a6.L
00002BCE  011C      
00002BD0  42B9 0803 4756          clr.l     _a5.L
00002BD4  0118      
00002BD6  42B9 0803 4757          clr.l     _a4.L
00002BDA  0114      
00002BDC  42B9 0803 4758          clr.l     _a3.L
00002BE0  0110      
00002BE2  42B9 0803 4759          clr.l     _a2.L
00002BE6  010C      
00002BE8  42B9 0803 4760          clr.l     _a1.L
00002BEC  0108      
00002BEE  42B9 0803 4761          clr.l     _a0.L
00002BF2  0104      
                    4762   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002BF4  23FC 0800 4763          move.l    #134217728,_PC.L
00002BF8  0000 0803 
00002BFC  0120      
00002BFE  23FC 0804 4764          move.l    #134479872,_SSP.L
00002C02  0000 0803 
00002C06  0124      
00002C08  23FC 0804 4765          move.l    #134479872,_USP.L
00002C0C  0000 0803 
00002C10  0128      
                    4766   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002C12  33FC 2000 4767          move.w    #8192,_SR.L
00002C16  0803 012C 
                    4768   ; // Initialise Breakpoint variables
                    4769   ; for(i = 0; i < 8; i++)  {
00002C1A  4282      4770          clr.l     D2
                    4771   main_1:
00002C1C  0C82 0000 4772          cmp.l     #8,D2
00002C20  0008      
00002C22  6C00 004C 4773          bge       main_3
                    4774   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002C26  2002      4775          move.l    D2,D0
00002C28  E588      4776          lsl.l     #2,D0
00002C2A  41F9 0803 4777          lea       _BreakPointAddress.L,A0
00002C2E  012E      
00002C30  42B0 0800 4778          clr.l     0(A0,D0.L)
                    4779   ; WatchPointAddress[i] = 0 ;
00002C34  2002      4780          move.l    D2,D0
00002C36  E588      4781          lsl.l     #2,D0
00002C38  41F9 0803 4782          lea       _WatchPointAddress.L,A0
00002C3C  0182      
00002C3E  42B0 0800 4783          clr.l     0(A0,D0.L)
                    4784   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002C42  2002      4785          move.l    D2,D0
00002C44  E388      4786          lsl.l     #1,D0
00002C46  41F9 0803 4787          lea       _BreakPointInstruction.L,A0
00002C4A  014E      
00002C4C  4270 0800 4788          clr.w     0(A0,D0.L)
                    4789   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002C50  2002      4790          move.l    D2,D0
00002C52  E588      4791          lsl.l     #2,D0
00002C54  41F9 0803 4792          lea       _BreakPointSetOrCleared.L,A0
00002C58  015E      
00002C5A  42B0 0800 4793          clr.l     0(A0,D0.L)
                    4794   ; WatchPointSetOrCleared[i] = 0;
00002C5E  2002      4795          move.l    D2,D0
00002C60  E588      4796          lsl.l     #2,D0
00002C62  41F9 0803 4797          lea       _WatchPointSetOrCleared.L,A0
00002C66  01A2      
00002C68  42B0 0800 4798          clr.l     0(A0,D0.L)
00002C6C  5282      4799          addq.l    #1,D2
00002C6E  60AC      4800          bra       main_1
                    4801   main_3:
                    4802   ; }
                    4803   ; Init_RS232() ;     // initialise the RS232 port
00002C70  4EB8 0B26 4804          jsr       _Init_RS232
                    4805   ; Init_LCD() ;
00002C74  4EB8 0972 4806          jsr       _Init_LCD
                    4807   ; for( i = 32; i < 48; i++)
00002C78  7420      4808          moveq     #32,D2
                    4809   main_4:
00002C7A  0C82 0000 4810          cmp.l     #48,D2
00002C7E  0030      
00002C80  6C0E      4811          bge.s     main_6
                    4812   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C82  2F02      4813          move.l    D2,-(A7)
00002C84  4878 27DA 4814          pea       _UnhandledTrap.L
00002C88  4E92      4815          jsr       (A2)
00002C8A  504F      4816          addq.w    #8,A7
00002C8C  5282      4817          addq.l    #1,D2
00002C8E  60EA      4818          bra       main_4
                    4819   main_6:
                    4820   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C90  4878 002F 4821          pea       47
00002C94  4878 24B4 4822          pea       _menu.L
00002C98  4E92      4823          jsr       (A2)
00002C9A  504F      4824          addq.w    #8,A7
                    4825   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C9C  4878 0019 4826          pea       25
00002CA0  4878 2780 4827          pea       _UnhandledIRQ1.L
00002CA4  4E92      4828          jsr       (A2)
00002CA6  504F      4829          addq.w    #8,A7
                    4830   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002CA8  4878 001A 4831          pea       26
00002CAC  4878 278C 4832          pea       _UnhandledIRQ2.L
00002CB0  4E92      4833          jsr       (A2)
00002CB2  504F      4834          addq.w    #8,A7
                    4835   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002CB4  4878 001B 4836          pea       27
00002CB8  4878 2798 4837          pea       _UnhandledIRQ3.L
00002CBC  4E92      4838          jsr       (A2)
00002CBE  504F      4839          addq.w    #8,A7
                    4840   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002CC0  4878 001C 4841          pea       28
00002CC4  4878 27A4 4842          pea       _UnhandledIRQ4.L
00002CC8  4E92      4843          jsr       (A2)
00002CCA  504F      4844          addq.w    #8,A7
                    4845   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002CCC  4878 001D 4846          pea       29
00002CD0  4878 27B0 4847          pea       _UnhandledIRQ5.L
00002CD4  4E92      4848          jsr       (A2)
00002CD6  504F      4849          addq.w    #8,A7
                    4850   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002CD8  4878 001E 4851          pea       30
00002CDC  4878 27BC 4852          pea       _UnhandledIRQ6.L
00002CE0  4E92      4853          jsr       (A2)
00002CE2  504F      4854          addq.w    #8,A7
                    4855   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002CE4  4878 001F 4856          pea       31
00002CE8  4878 27CE 4857          pea       _UnhandledIRQ7.L
00002CEC  4E92      4858          jsr       (A2)
00002CEE  504F      4859          addq.w    #8,A7
                    4860   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002CF0  4878 002E 4861          pea       46
00002CF4  4878 21A6 4862          pea       _HandleBreakPoint.L
00002CF8  4E92      4863          jsr       (A2)
00002CFA  504F      4864          addq.w    #8,A7
                    4865   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002CFC  4878 001D 4866          pea       29
00002D00  4878 184A 4867          pea       _DumpRegistersandPause.L
00002D04  4E92      4868          jsr       (A2)
00002D06  504F      4869          addq.w    #8,A7
                    4870   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002D08  4878 0002 4871          pea       2
00002D0C  4878 27E8 4872          pea       _BusError.L
00002D10  4E92      4873          jsr       (A2)
00002D12  504F      4874          addq.w    #8,A7
                    4875   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002D14  4878 0003 4876          pea       3
00002D18  4878 27F6 4877          pea       _AddressError.L
00002D1C  4E92      4878          jsr       (A2)
00002D1E  504F      4879          addq.w    #8,A7
                    4880   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002D20  4878 0004 4881          pea       4
00002D24  4878 2804 4882          pea       _IllegalInstruction.L
00002D28  4E92      4883          jsr       (A2)
00002D2A  504F      4884          addq.w    #8,A7
                    4885   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002D2C  4878 0005 4886          pea       5
00002D30  4878 2812 4887          pea       _Dividebyzero.L
00002D34  4E92      4888          jsr       (A2)
00002D36  504F      4889          addq.w    #8,A7
                    4890   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002D38  4878 0006 4891          pea       6
00002D3C  4878 2820 4892          pea       _Check.L
00002D40  4E92      4893          jsr       (A2)
00002D42  504F      4894          addq.w    #8,A7
                    4895   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002D44  4878 0007 4896          pea       7
00002D48  4878 282E 4897          pea       _Trapv.L
00002D4C  4E92      4898          jsr       (A2)
00002D4E  504F      4899          addq.w    #8,A7
                    4900   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002D50  4878 0008 4901          pea       8
00002D54  4878 283C 4902          pea       _PrivError.L
00002D58  4E92      4903          jsr       (A2)
00002D5A  504F      4904          addq.w    #8,A7
                    4905   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002D5C  4878 000F 4906          pea       15
00002D60  4878 284A 4907          pea       _UnitIRQ.L
00002D64  4E92      4908          jsr       (A2)
00002D66  504F      4909          addq.w    #8,A7
                    4910   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002D68  4878 0018 4911          pea       24
00002D6C  4878 2820 4912          pea       _Check.L
00002D70  4E92      4913          jsr       (A2)
00002D72  504F      4914          addq.w    #8,A7
                    4915   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002D74  4EB8 0BBA 4916          jsr       _FlushKeyboard
                    4917   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D78  4239 0040 4918          clr.b     4194314
00002D7C  000A      
                    4919   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4920   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4921   main_7:
00002D7E  1039 0040 4922          move.b    4194306,D0
00002D82  0002      
00002D84  C03C 0002 4923          and.b     #2,D0
00002D88  0C00 0002 4924          cmp.b     #2,D0
00002D8C  662A      4925          bne.s     main_9
                    4926   ; LoadFromFlashChip();
00002D8E  4EB8 12EE 4927          jsr       _LoadFromFlashChip
                    4928   ; printf("\r\nRunning.....") ;
00002D92  4879 0000 4929          pea       @m68kde~1_164.L
00002D96  72E4      
00002D98  4E93      4930          jsr       (A3)
00002D9A  584F      4931          addq.w    #4,A7
                    4932   ; Oline1("Running.....") ;
00002D9C  4879 0000 4933          pea       @m68kde~1_165.L
00002DA0  72F4      
00002DA2  4EB8 0A16 4934          jsr       _Oline1
00002DA6  584F      4935          addq.w    #4,A7
                    4936   ; GoFlag = 1;
00002DA8  23FC 0000 4937          move.l    #1,_GoFlag.L
00002DAC  0001 0803 
00002DB0  00DC      
                    4938   ; go() ;
00002DB2  4EB8 08B8 4939          jsr       _go
00002DB6  60C6      4940          bra       main_7
                    4941   main_9:
                    4942   ; }
                    4943   ; // otherwise start the debug monitor
                    4944   ; Oline0("J.Law   48718150") ;
00002DB8  4879 0000 4945          pea       @m68kde~1_166.L
00002DBC  7302      
00002DBE  4EB8 09E8 4946          jsr       _Oline0
00002DC2  584F      4947          addq.w    #4,A7
                    4948   ; Oline1("G.Whyte 45688158") ;
00002DC4  4879 0000 4949          pea       @m68kde~1_167.L
00002DC8  7314      
00002DCA  4EB8 0A16 4950          jsr       _Oline1
00002DCE  584F      4951          addq.w    #4,A7
                    4952   ; printf("\r\n%s", BugMessage) ;
00002DD0  2F2E FFF8 4953          move.l    -8(A6),-(A7)
00002DD4  4879 0000 4954          pea       @m68kde~1_168.L
00002DD8  7326      
00002DDA  4E93      4955          jsr       (A3)
00002DDC  504F      4956          addq.w    #8,A7
                    4957   ; printf("\r\n%s", CopyrightMessage) ;
00002DDE  2F2E FFFC 4958          move.l    -4(A6),-(A7)
00002DE2  4879 0000 4959          pea       @m68kde~1_168.L
00002DE6  7326      
00002DE8  4E93      4960          jsr       (A3)
00002DEA  504F      4961          addq.w    #8,A7
                    4962   ; menu();
00002DEC  4EB8 24B4 4963          jsr       _menu
00002DF0  4CDF 0C04 4964          movem.l   (A7)+,D2/A2/A3
00002DF4  4E5E      4965          unlk      A6
00002DF6  4E75      4966          rts
                    4967   ; }
                    4968   ; void FormatInstruction(void)    // for disassembly
                    4969   ; {
                    4970   _FormatInstruction:
00002DF8  4E56 FEC0 4971          link      A6,#-320
00002DFC  48E7 3C20 4972          movem.l   D2/D3/D4/D5/A2,-(A7)
00002E00  45EE FEC0 4973          lea       -320(A6),A2
                    4974   ; short i, ilen = 0 ;
00002E04  4245      4975          clr.w     D5
                    4976   ; char *iptr = Instruction ;
00002E06  41F9 0803 4977          lea       _Instruction.L,A0
00002E0A  04E2      
00002E0C  2608      4978          move.l    A0,D3
                    4979   ; char *Formatted[80], *fptr ;
                    4980   ; fptr = Formatted ;
00002E0E  280A      4981          move.l    A2,D4
                    4982   ; for(i = 0; i < (short)(80); i ++)
00002E10  4242      4983          clr.w     D2
                    4984   FormatInstruction_1:
00002E12  0C42 0050 4985          cmp.w     #80,D2
00002E16  6C0E      4986          bge.s     FormatInstruction_3
                    4987   ; Formatted[i] = (char)(0);          // set formatted string to null
00002E18  48C2      4988          ext.l     D2
00002E1A  2002      4989          move.l    D2,D0
00002E1C  E588      4990          lsl.l     #2,D0
00002E1E  42B2 0800 4991          clr.l     0(A2,D0.L)
00002E22  5242      4992          addq.w    #1,D2
00002E24  60EC      4993          bra       FormatInstruction_1
                    4994   FormatInstruction_3:
                    4995   ; while((*iptr != ' '))   {   // while ot a space char
                    4996   FormatInstruction_4:
00002E26  2043      4997          move.l    D3,A0
00002E28  1010      4998          move.b    (A0),D0
00002E2A  0C00 0020 4999          cmp.b     #32,D0
00002E2E  6718      5000          beq.s     FormatInstruction_6
                    5001   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002E30  2043      5002          move.l    D3,A0
00002E32  5283      5003          addq.l    #1,D3
00002E34  2244      5004          move.l    D4,A1
00002E36  5284      5005          addq.l    #1,D4
00002E38  1290      5006          move.b    (A0),(A1)
                    5007   ; ilen ++ ;               // count length of string as we go
00002E3A  5245      5008          addq.w    #1,D5
                    5009   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002E3C  2043      5010          move.l    D3,A0
00002E3E  1010      5011          move.b    (A0),D0
00002E40  6604      5012          bne.s     FormatInstruction_7
                    5013   ; return ;
00002E42  6000 003E 5014          bra       FormatInstruction_9
                    5015   FormatInstruction_7:
00002E46  60DE      5016          bra       FormatInstruction_4
                    5017   FormatInstruction_6:
                    5018   ; }
                    5019   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5020   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002E48  4242      5021          clr.w     D2
                    5022   FormatInstruction_10:
00002E4A  7008      5023          moveq     #8,D0
00002E4C  4880      5024          ext.w     D0
00002E4E  9045      5025          sub.w     D5,D0
00002E50  B440      5026          cmp.w     D0,D2
00002E52  6C0C      5027          bge.s     FormatInstruction_12
                    5028   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002E54  2044      5029          move.l    D4,A0
00002E56  5284      5030          addq.l    #1,D4
00002E58  10BC 0020 5031          move.b    #32,(A0)
00002E5C  5242      5032          addq.w    #1,D2
00002E5E  60EA      5033          bra       FormatInstruction_10
                    5034   FormatInstruction_12:
                    5035   ; // now skip over any spaces in original unformatted string before copying the rest
                    5036   ; while((*iptr == ' '))
                    5037   FormatInstruction_13:
00002E60  2043      5038          move.l    D3,A0
00002E62  1010      5039          move.b    (A0),D0
00002E64  0C00 0020 5040          cmp.b     #32,D0
00002E68  6604      5041          bne.s     FormatInstruction_15
                    5042   ; iptr++ ;
00002E6A  5283      5043          addq.l    #1,D3
00002E6C  60F2      5044          bra       FormatInstruction_13
                    5045   FormatInstruction_15:
                    5046   ; strcat(fptr,iptr) ;
00002E6E  2F03      5047          move.l    D3,-(A7)
00002E70  2F04      5048          move.l    D4,-(A7)
00002E72  4EB9 0000 5049          jsr       _strcat
00002E76  5774      
00002E78  504F      5050          addq.w    #8,A7
                    5051   ; strcpyInstruction(Formatted) ;
00002E7A  2F0A      5052          move.l    A2,-(A7)
00002E7C  4EB8 0CFA 5053          jsr       _strcpyInstruction
00002E80  584F      5054          addq.w    #4,A7
                    5055   FormatInstruction_9:
00002E82  4CDF 043C 5056          movem.l   (A7)+,D2/D3/D4/D5/A2
00002E86  4E5E      5057          unlk      A6
00002E88  4E75      5058          rts
                    5059   ; }
                    5060   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5061   ; {
                    5062   _Decode2BitOperandSize:
00002E8A  4E56 0000 5063          link      A6,#0
00002E8E  48E7 3020 5064          movem.l   D2/D3/A2,-(A7)
00002E92  362E 000A 5065          move.w    10(A6),D3
00002E96  C6BC 0000 5066          and.l     #65535,D3
00002E9A  FFFF      
00002E9C  45F8 0CE0 5067          lea       _strcatInstruction.L,A2
                    5068   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5069   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002EA0  3003      5070          move.w    D3,D0
00002EA2  C07C 00C0 5071          and.w     #192,D0
00002EA6  EC48      5072          lsr.w     #6,D0
00002EA8  3600      5073          move.w    D0,D3
                    5074   ; if(OpCode == (unsigned short int)(0))   {
00002EAA  4A43      5075          tst.w     D3
00002EAC  660E      5076          bne.s     Decode2BitOperandSize_1
                    5077   ; strcatInstruction(".B ") ;
00002EAE  4879 0000 5078          pea       @m68kde~1_169.L
00002EB2  732C      
00002EB4  4E92      5079          jsr       (A2)
00002EB6  584F      5080          addq.w    #4,A7
                    5081   ; DataSize = 1 ;
00002EB8  7401      5082          moveq     #1,D2
00002EBA  6020      5083          bra.s     Decode2BitOperandSize_4
                    5084   Decode2BitOperandSize_1:
                    5085   ; }
                    5086   ; else if(OpCode == (unsigned short int)(1)) {
00002EBC  0C43 0001 5087          cmp.w     #1,D3
00002EC0  660E      5088          bne.s     Decode2BitOperandSize_3
                    5089   ; strcatInstruction(".W ") ;
00002EC2  4879 0000 5090          pea       @m68kde~1_170.L
00002EC6  7330      
00002EC8  4E92      5091          jsr       (A2)
00002ECA  584F      5092          addq.w    #4,A7
                    5093   ; DataSize = 1 ;
00002ECC  7401      5094          moveq     #1,D2
00002ECE  600C      5095          bra.s     Decode2BitOperandSize_4
                    5096   Decode2BitOperandSize_3:
                    5097   ; }
                    5098   ; else {
                    5099   ; strcatInstruction(".L ") ;
00002ED0  4879 0000 5100          pea       @m68kde~1_171.L
00002ED4  7334      
00002ED6  4E92      5101          jsr       (A2)
00002ED8  584F      5102          addq.w    #4,A7
                    5103   ; DataSize = 2 ;
00002EDA  7402      5104          moveq     #2,D2
                    5105   Decode2BitOperandSize_4:
                    5106   ; }
                    5107   ; return DataSize;
00002EDC  3002      5108          move.w    D2,D0
00002EDE  4CDF 040C 5109          movem.l   (A7)+,D2/D3/A2
00002EE2  4E5E      5110          unlk      A6
00002EE4  4E75      5111          rts
                    5112   ; }
                    5113   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5114   ; {
                    5115   _Decode3BitDataRegister:
00002EE6  4E56 FFFC 5116          link      A6,#-4
00002EEA  2F0A      5117          move.l    A2,-(A7)
00002EEC  45EE FFFC 5118          lea       -4(A6),A2
                    5119   ; unsigned char RegNumber[3] ;
                    5120   ; RegNumber[0] = 'D' ;
00002EF0  14BC 0044 5121          move.b    #68,(A2)
                    5122   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EF4  7030      5123          moveq     #48,D0
00002EF6  322E 000A 5124          move.w    10(A6),D1
00002EFA  C27C 0E00 5125          and.w     #3584,D1
00002EFE  E049      5126          lsr.w     #8,D1
00002F00  E249      5127          lsr.w     #1,D1
00002F02  D001      5128          add.b     D1,D0
00002F04  1540 0001 5129          move.b    D0,1(A2)
                    5130   ; RegNumber[2] = 0 ;
00002F08  422A 0002 5131          clr.b     2(A2)
                    5132   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002F0C  2F0A      5133          move.l    A2,-(A7)
00002F0E  4EB8 0CE0 5134          jsr       _strcatInstruction
00002F12  584F      5135          addq.w    #4,A7
00002F14  245F      5136          move.l    (A7)+,A2
00002F16  4E5E      5137          unlk      A6
00002F18  4E75      5138          rts
                    5139   ; }
                    5140   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5141   ; {
                    5142   _Decode3BitAddressRegister:
00002F1A  4E56 FFFC 5143          link      A6,#-4
00002F1E  2F0A      5144          move.l    A2,-(A7)
00002F20  45EE FFFC 5145          lea       -4(A6),A2
                    5146   ; unsigned char RegNumber[3];
                    5147   ; RegNumber[0] = 'A' ;
00002F24  14BC 0041 5148          move.b    #65,(A2)
                    5149   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002F28  7030      5150          moveq     #48,D0
00002F2A  322E 000A 5151          move.w    10(A6),D1
00002F2E  D001      5152          add.b     D1,D0
00002F30  1540 0001 5153          move.b    D0,1(A2)
                    5154   ; RegNumber[2] = 0 ;
00002F34  422A 0002 5155          clr.b     2(A2)
                    5156   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002F38  2F0A      5157          move.l    A2,-(A7)
00002F3A  4EB8 0CE0 5158          jsr       _strcatInstruction
00002F3E  584F      5159          addq.w    #4,A7
00002F40  245F      5160          move.l    (A7)+,A2
00002F42  4E5E      5161          unlk      A6
00002F44  4E75      5162          rts
                    5163   ; }
                    5164   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5165   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5166   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5167   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5168   ; {
                    5169   _DecodeBWLDataAfterOpCodeForMove:
00002F46  4E56 0000 5170          link      A6,#0
00002F4A  48E7 3030 5171          movem.l   D2/D3/A2/A3,-(A7)
00002F4E  242E 0008 5172          move.l    8(A6),D2
00002F52  45F9 0803 5173          lea       _TempString.L,A2
00002F56  0546      
00002F58  47F9 0000 5174          lea       _sprintf.L,A3
00002F5C  5742      
                    5175   ; unsigned char OperandSize ;
                    5176   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002F5E  2042      5177          move.l    D2,A0
00002F60  3010      5178          move.w    (A0),D0
00002F62  E048      5179          lsr.w     #8,D0
00002F64  E848      5180          lsr.w     #4,D0
00002F66  C07C 0003 5181          and.w     #3,D0
00002F6A  1600      5182          move.b    D0,D3
                    5183   ; InstructionSize += 1;
00002F6C  52B9 0803 5184          addq.l    #1,_InstructionSize.L
00002F70  017E      
                    5185   ; if(OperandSize == (char)(1))                // #byte value
00002F72  0C03 0001 5186          cmp.b     #1,D3
00002F76  6620      5187          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5188   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F78  2042      5189          move.l    D2,A0
00002F7A  3228 0002 5190          move.w    2(A0),D1
00002F7E  C2BC 0000 5191          and.l     #65535,D1
00002F82  FFFF      
00002F84  2F01      5192          move.l    D1,-(A7)
00002F86  4879 0000 5193          pea       @m68kde~1_172.L
00002F8A  7338      
00002F8C  2F0A      5194          move.l    A2,-(A7)
00002F8E  4E93      5195          jsr       (A3)
00002F90  DEFC 000C 5196          add.w     #12,A7
00002F94  6000 0068 5197          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5198   DecodeBWLDataAfterOpCodeForMove_1:
                    5199   ; else if(OperandSize == (char)(3))          // #word value
00002F98  0C03 0003 5200          cmp.b     #3,D3
00002F9C  6620      5201          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5202   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F9E  2042      5203          move.l    D2,A0
00002FA0  3228 0002 5204          move.w    2(A0),D1
00002FA4  C2BC 0000 5205          and.l     #65535,D1
00002FA8  FFFF      
00002FAA  2F01      5206          move.l    D1,-(A7)
00002FAC  4879 0000 5207          pea       @m68kde~1_172.L
00002FB0  7338      
00002FB2  2F0A      5208          move.l    A2,-(A7)
00002FB4  4E93      5209          jsr       (A3)
00002FB6  DEFC 000C 5210          add.w     #12,A7
00002FBA  6000 0042 5211          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5212   DecodeBWLDataAfterOpCodeForMove_3:
                    5213   ; else if(OperandSize == (char)(2)) {                                       // long value
00002FBE  0C03 0002 5214          cmp.b     #2,D3
00002FC2  6600 003A 5215          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5216   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002FC6  2042      5217          move.l    D2,A0
00002FC8  3228 0002 5218          move.w    2(A0),D1
00002FCC  C2BC 0000 5219          and.l     #65535,D1
00002FD0  FFFF      
00002FD2  E189      5220          lsl.l     #8,D1
00002FD4  E189      5221          lsl.l     #8,D1
00002FD6  2042      5222          move.l    D2,A0
00002FD8  2F00      5223          move.l    D0,-(A7)
00002FDA  3028 0004 5224          move.w    4(A0),D0
00002FDE  C0BC 0000 5225          and.l     #65535,D0
00002FE2  FFFF      
00002FE4  8280      5226          or.l      D0,D1
00002FE6  201F      5227          move.l    (A7)+,D0
00002FE8  2F01      5228          move.l    D1,-(A7)
00002FEA  4879 0000 5229          pea       @m68kde~1_172.L
00002FEE  7338      
00002FF0  2F0A      5230          move.l    A2,-(A7)
00002FF2  4E93      5231          jsr       (A3)
00002FF4  DEFC 000C 5232          add.w     #12,A7
                    5233   ; InstructionSize += 1;
00002FF8  52B9 0803 5234          addq.l    #1,_InstructionSize.L
00002FFC  017E      
                    5235   DecodeBWLDataAfterOpCodeForMove_5:
                    5236   ; }
                    5237   ; strcatInstruction(TempString) ;
00002FFE  2F0A      5238          move.l    A2,-(A7)
00003000  4EB8 0CE0 5239          jsr       _strcatInstruction
00003004  584F      5240          addq.w    #4,A7
00003006  4CDF 0C0C 5241          movem.l   (A7)+,D2/D3/A2/A3
0000300A  4E5E      5242          unlk      A6
0000300C  4E75      5243          rts
                    5244   ; }
                    5245   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5246   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5247   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5248   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5249   ; {
                    5250   _DecodeBWLDataAfterOpCode:
0000300E  4E56 0000 5251          link      A6,#0
00003012  48E7 3038 5252          movem.l   D2/D3/A2/A3/A4,-(A7)
00003016  262E 0008 5253          move.l    8(A6),D3
0000301A  45F9 0803 5254          lea       _TempString.L,A2
0000301E  0546      
00003020  47F9 0000 5255          lea       _sprintf.L,A3
00003024  5742      
00003026  49F9 0803 5256          lea       _InstructionSize.L,A4
0000302A  017E      
                    5257   ; unsigned char OperandSize ;
                    5258   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
0000302C  2043      5259          move.l    D3,A0
0000302E  3010      5260          move.w    (A0),D0
00003030  C07C 01C0 5261          and.w     #448,D0
00003034  EC48      5262          lsr.w     #6,D0
00003036  1400      5263          move.b    D0,D2
                    5264   ; InstructionSize += 1;
00003038  5294      5265          addq.l    #1,(A4)
                    5266   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
0000303A  4A02      5267          tst.b     D2
0000303C  6706      5268          beq.s     DecodeBWLDataAfterOpCode_3
0000303E  0C02 0004 5269          cmp.b     #4,D2
00003042  6620      5270          bne.s     DecodeBWLDataAfterOpCode_1
                    5271   DecodeBWLDataAfterOpCode_3:
                    5272   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003044  2043      5273          move.l    D3,A0
00003046  3228 0002 5274          move.w    2(A0),D1
0000304A  C2BC 0000 5275          and.l     #65535,D1
0000304E  FFFF      
00003050  2F01      5276          move.l    D1,-(A7)
00003052  4879 0000 5277          pea       @m68kde~1_172.L
00003056  7338      
00003058  2F0A      5278          move.l    A2,-(A7)
0000305A  4E93      5279          jsr       (A3)
0000305C  DEFC 000C 5280          add.w     #12,A7
00003060  6000 007C 5281          bra       DecodeBWLDataAfterOpCode_7
                    5282   DecodeBWLDataAfterOpCode_1:
                    5283   ; // #word value 7 is used by divs.w instruction (not divu)
                    5284   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5285   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5286   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003064  0C02 0001 5287          cmp.b     #1,D2
00003068  670C      5288          beq.s     DecodeBWLDataAfterOpCode_6
0000306A  0C02 0005 5289          cmp.b     #5,D2
0000306E  6706      5290          beq.s     DecodeBWLDataAfterOpCode_6
00003070  0C02 0003 5291          cmp.b     #3,D2
00003074  6620      5292          bne.s     DecodeBWLDataAfterOpCode_4
                    5293   DecodeBWLDataAfterOpCode_6:
                    5294   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003076  2043      5295          move.l    D3,A0
00003078  3228 0002 5296          move.w    2(A0),D1
0000307C  C2BC 0000 5297          and.l     #65535,D1
00003080  FFFF      
00003082  2F01      5298          move.l    D1,-(A7)
00003084  4879 0000 5299          pea       @m68kde~1_172.L
00003088  7338      
0000308A  2F0A      5300          move.l    A2,-(A7)
0000308C  4E93      5301          jsr       (A3)
0000308E  DEFC 000C 5302          add.w     #12,A7
00003092  6000 004A 5303          bra       DecodeBWLDataAfterOpCode_7
                    5304   DecodeBWLDataAfterOpCode_4:
                    5305   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003096  0C02 0002 5306          cmp.b     #2,D2
0000309A  670E      5307          beq.s     DecodeBWLDataAfterOpCode_9
0000309C  0C02 0006 5308          cmp.b     #6,D2
000030A0  6708      5309          beq.s     DecodeBWLDataAfterOpCode_9
000030A2  0C02 0007 5310          cmp.b     #7,D2
000030A6  6600 0036 5311          bne       DecodeBWLDataAfterOpCode_7
                    5312   DecodeBWLDataAfterOpCode_9:
                    5313   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
000030AA  2043      5314          move.l    D3,A0
000030AC  3228 0002 5315          move.w    2(A0),D1
000030B0  C2BC 0000 5316          and.l     #65535,D1
000030B4  FFFF      
000030B6  E189      5317          lsl.l     #8,D1
000030B8  E189      5318          lsl.l     #8,D1
000030BA  2043      5319          move.l    D3,A0
000030BC  2F00      5320          move.l    D0,-(A7)
000030BE  3028 0004 5321          move.w    4(A0),D0
000030C2  C0BC 0000 5322          and.l     #65535,D0
000030C6  FFFF      
000030C8  8280      5323          or.l      D0,D1
000030CA  201F      5324          move.l    (A7)+,D0
000030CC  2F01      5325          move.l    D1,-(A7)
000030CE  4879 0000 5326          pea       @m68kde~1_172.L
000030D2  7338      
000030D4  2F0A      5327          move.l    A2,-(A7)
000030D6  4E93      5328          jsr       (A3)
000030D8  DEFC 000C 5329          add.w     #12,A7
                    5330   ; InstructionSize += 1;
000030DC  5294      5331          addq.l    #1,(A4)
                    5332   DecodeBWLDataAfterOpCode_7:
                    5333   ; }
                    5334   ; // special case for divs - bugger!!!
                    5335   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
000030DE  2043      5336          move.l    D3,A0
000030E0  3010      5337          move.w    (A0),D0
000030E2  C07C F1C0 5338          and.w     #61888,D0
000030E6  0C40 81C0 5339          cmp.w     #33216,D0
000030EA  6622      5340          bne.s     DecodeBWLDataAfterOpCode_10
                    5341   ; {
                    5342   ; InstructionSize = 2 ;
000030EC  28BC 0000 5343          move.l    #2,(A4)
000030F0  0002      
                    5344   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030F2  2043      5345          move.l    D3,A0
000030F4  3228 0002 5346          move.w    2(A0),D1
000030F8  C2BC 0000 5347          and.l     #65535,D1
000030FC  FFFF      
000030FE  2F01      5348          move.l    D1,-(A7)
00003100  4879 0000 5349          pea       @m68kde~1_172.L
00003104  7338      
00003106  2F0A      5350          move.l    A2,-(A7)
00003108  4E93      5351          jsr       (A3)
0000310A  DEFC 000C 5352          add.w     #12,A7
                    5353   DecodeBWLDataAfterOpCode_10:
                    5354   ; }
                    5355   ; strcatInstruction(TempString) ;
0000310E  2F0A      5356          move.l    A2,-(A7)
00003110  4EB8 0CE0 5357          jsr       _strcatInstruction
00003114  584F      5358          addq.w    #4,A7
00003116  4CDF 1C0C 5359          movem.l   (A7)+,D2/D3/A2/A3/A4
0000311A  4E5E      5360          unlk      A6
0000311C  4E75      5361          rts
                    5362   ; }
                    5363   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5364   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5365   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5366   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5367   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5368   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5369   ; {
                    5370   _Decode6BitEA:
0000311E  4E56 FFF4 5371          link      A6,#-12
00003122  48E7 3F3C 5372          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003126  45F8 0CE0 5373          lea       _strcatInstruction.L,A2
0000312A  47F9 0803 5374          lea       _TempString.L,A3
0000312E  0546      
00003130  282E 0008 5375          move.l    8(A6),D4
00003134  49F9 0000 5376          lea       _sprintf.L,A4
00003138  5742      
0000313A  4BF9 0803 5377          lea       _InstructionSize.L,A5
0000313E  017E      
00003140  3C2E 0012 5378          move.w    18(A6),D6
00003144  CCBC 0000 5379          and.l     #65535,D6
00003148  FFFF      
                    5380   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5381   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5382   ; unsigned char RegNumber[3];
                    5383   ; signed char offset ;
                    5384   ; unsigned short int Xn, XnSize ;
                    5385   ; if(EAChoice == 0)   {   // if EA in bits 5-0
0000314A  202E 000C 5386          move.l    12(A6),D0
0000314E  6620      5387          bne.s     Decode6BitEA_1
                    5388   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00003150  2044      5389          move.l    D4,A0
00003152  3010      5390          move.w    (A0),D0
00003154  E648      5391          lsr.w     #3,D0
00003156  C07C 00FF 5392          and.w     #255,D0
0000315A  C07C 0007 5393          and.w     #7,D0
0000315E  1A00      5394          move.b    D0,D5
                    5395   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003160  2044      5396          move.l    D4,A0
00003162  3010      5397          move.w    (A0),D0
00003164  C07C 00FF 5398          and.w     #255,D0
00003168  C07C 0007 5399          and.w     #7,D0
0000316C  1600      5400          move.b    D0,D3
0000316E  6022      5401          bra.s     Decode6BitEA_2
                    5402   Decode6BitEA_1:
                    5403   ; }
                    5404   ; else    {               // else EA in bits 11-6
                    5405   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003170  2044      5406          move.l    D4,A0
00003172  3010      5407          move.w    (A0),D0
00003174  EC48      5408          lsr.w     #6,D0
00003176  C07C 00FF 5409          and.w     #255,D0
0000317A  C07C 0007 5410          and.w     #7,D0
0000317E  1A00      5411          move.b    D0,D5
                    5412   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003180  2044      5413          move.l    D4,A0
00003182  3010      5414          move.w    (A0),D0
00003184  E048      5415          lsr.w     #8,D0
00003186  E248      5416          lsr.w     #1,D0
00003188  C07C 00FF 5417          and.w     #255,D0
0000318C  C07C 0007 5418          and.w     #7,D0
00003190  1600      5419          move.b    D0,D3
                    5420   Decode6BitEA_2:
                    5421   ; }
                    5422   ; if(EAChoice == 0)    {
00003192  202E 000C 5423          move.l    12(A6),D0
00003196  6600 0034 5424          bne       Decode6BitEA_3
                    5425   ; ExWord1 = OpCode[1+DataSize] ;
0000319A  2044      5426          move.l    D4,A0
0000319C  7001      5427          moveq     #1,D0
0000319E  4880      5428          ext.w     D0
000031A0  48C0      5429          ext.l     D0
000031A2  CCBC 0000 5430          and.l     #65535,D6
000031A6  FFFF      
000031A8  D086      5431          add.l     D6,D0
000031AA  E388      5432          lsl.l     #1,D0
000031AC  3430 0800 5433          move.w    0(A0,D0.L),D2
                    5434   ; ExWord2 = OpCode[2+DataSize] ;
000031B0  2044      5435          move.l    D4,A0
000031B2  7002      5436          moveq     #2,D0
000031B4  4880      5437          ext.w     D0
000031B6  48C0      5438          ext.l     D0
000031B8  CCBC 0000 5439          and.l     #65535,D6
000031BC  FFFF      
000031BE  D086      5440          add.l     D6,D0
000031C0  E388      5441          lsl.l     #1,D0
000031C2  3D70 0800 5442          move.w    0(A0,D0.L),-8(A6)
000031C6  FFF8      
000031C8  6000 007E 5443          bra       Decode6BitEA_7
                    5444   Decode6BitEA_3:
                    5445   ; }
                    5446   ; else if(EAChoice == 1)   {
000031CC  202E 000C 5447          move.l    12(A6),D0
000031D0  0C80 0000 5448          cmp.l     #1,D0
000031D4  0001      
000031D6  6600 0034 5449          bne       Decode6BitEA_5
                    5450   ; ExWord1 = OpCode[3+DataSize] ;
000031DA  2044      5451          move.l    D4,A0
000031DC  7003      5452          moveq     #3,D0
000031DE  4880      5453          ext.w     D0
000031E0  48C0      5454          ext.l     D0
000031E2  CCBC 0000 5455          and.l     #65535,D6
000031E6  FFFF      
000031E8  D086      5456          add.l     D6,D0
000031EA  E388      5457          lsl.l     #1,D0
000031EC  3430 0800 5458          move.w    0(A0,D0.L),D2
                    5459   ; ExWord2 = OpCode[4+DataSize] ;
000031F0  2044      5460          move.l    D4,A0
000031F2  7004      5461          moveq     #4,D0
000031F4  4880      5462          ext.w     D0
000031F6  48C0      5463          ext.l     D0
000031F8  CCBC 0000 5464          and.l     #65535,D6
000031FC  FFFF      
000031FE  D086      5465          add.l     D6,D0
00003200  E388      5466          lsl.l     #1,D0
00003202  3D70 0800 5467          move.w    0(A0,D0.L),-8(A6)
00003206  FFF8      
00003208  6000 003E 5468          bra       Decode6BitEA_7
                    5469   Decode6BitEA_5:
                    5470   ; }
                    5471   ; else if(EAChoice == 2)   {  // for move instruction
0000320C  202E 000C 5472          move.l    12(A6),D0
00003210  0C80 0000 5473          cmp.l     #2,D0
00003214  0002      
00003216  6600 0030 5474          bne       Decode6BitEA_7
                    5475   ; ExWord1 = OpCode[1+DataSize] ;
0000321A  2044      5476          move.l    D4,A0
0000321C  7001      5477          moveq     #1,D0
0000321E  4880      5478          ext.w     D0
00003220  48C0      5479          ext.l     D0
00003222  CCBC 0000 5480          and.l     #65535,D6
00003226  FFFF      
00003228  D086      5481          add.l     D6,D0
0000322A  E388      5482          lsl.l     #1,D0
0000322C  3430 0800 5483          move.w    0(A0,D0.L),D2
                    5484   ; ExWord2 = OpCode[2+DataSize] ;
00003230  2044      5485          move.l    D4,A0
00003232  7002      5486          moveq     #2,D0
00003234  4880      5487          ext.w     D0
00003236  48C0      5488          ext.l     D0
00003238  CCBC 0000 5489          and.l     #65535,D6
0000323C  FFFF      
0000323E  D086      5490          add.l     D6,D0
00003240  E388      5491          lsl.l     #1,D0
00003242  3D70 0800 5492          move.w    0(A0,D0.L),-8(A6)
00003246  FFF8      
                    5493   Decode6BitEA_7:
                    5494   ; }
                    5495   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00003248  4A05      5496          tst.b     D5
0000324A  661E      5497          bne.s     Decode6BitEA_9
                    5498   ; RegNumber[0] = 'D' ;
0000324C  1D7C 0044 5499          move.b    #68,-6+0(A6)
00003250  FFFA      
                    5500   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003252  7030      5501          moveq     #48,D0
00003254  D003      5502          add.b     D3,D0
00003256  1D40 FFFB 5503          move.b    D0,-6+1(A6)
                    5504   ; RegNumber[2] = 0 ;
0000325A  422E FFFC 5505          clr.b     -6+2(A6)
                    5506   ; strcatInstruction(RegNumber) ;
0000325E  486E FFFA 5507          pea       -6(A6)
00003262  4E92      5508          jsr       (A2)
00003264  584F      5509          addq.w    #4,A7
00003266  6000 02D6 5510          bra       Decode6BitEA_44
                    5511   Decode6BitEA_9:
                    5512   ; }
                    5513   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
0000326A  0C05 0001 5514          cmp.b     #1,D5
0000326E  6616      5515          bne.s     Decode6BitEA_11
                    5516   ; Decode3BitAddressRegister(OperandRegister) ;
00003270  C67C 00FF 5517          and.w     #255,D3
00003274  C6BC 0000 5518          and.l     #65535,D3
00003278  FFFF      
0000327A  2F03      5519          move.l    D3,-(A7)
0000327C  4EB8 2F1A 5520          jsr       _Decode3BitAddressRegister
00003280  584F      5521          addq.w    #4,A7
00003282  6000 02BA 5522          bra       Decode6BitEA_44
                    5523   Decode6BitEA_11:
                    5524   ; }
                    5525   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003286  0C05 0002 5526          cmp.b     #2,D5
0000328A  662A      5527          bne.s     Decode6BitEA_13
                    5528   ; strcatInstruction("(") ;
0000328C  4879 0000 5529          pea       @m68kde~1_173.L
00003290  733E      
00003292  4E92      5530          jsr       (A2)
00003294  584F      5531          addq.w    #4,A7
                    5532   ; Decode3BitAddressRegister(OperandRegister) ;
00003296  C67C 00FF 5533          and.w     #255,D3
0000329A  C6BC 0000 5534          and.l     #65535,D3
0000329E  FFFF      
000032A0  2F03      5535          move.l    D3,-(A7)
000032A2  4EB8 2F1A 5536          jsr       _Decode3BitAddressRegister
000032A6  584F      5537          addq.w    #4,A7
                    5538   ; strcatInstruction(")") ;
000032A8  4879 0000 5539          pea       @m68kde~1_174.L
000032AC  7340      
000032AE  4E92      5540          jsr       (A2)
000032B0  584F      5541          addq.w    #4,A7
000032B2  6000 028A 5542          bra       Decode6BitEA_44
                    5543   Decode6BitEA_13:
                    5544   ; }
                    5545   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000032B6  0C05 0003 5546          cmp.b     #3,D5
000032BA  662A      5547          bne.s     Decode6BitEA_15
                    5548   ; strcatInstruction("(") ;
000032BC  4879 0000 5549          pea       @m68kde~1_173.L
000032C0  733E      
000032C2  4E92      5550          jsr       (A2)
000032C4  584F      5551          addq.w    #4,A7
                    5552   ; Decode3BitAddressRegister(OperandRegister) ;
000032C6  C67C 00FF 5553          and.w     #255,D3
000032CA  C6BC 0000 5554          and.l     #65535,D3
000032CE  FFFF      
000032D0  2F03      5555          move.l    D3,-(A7)
000032D2  4EB8 2F1A 5556          jsr       _Decode3BitAddressRegister
000032D6  584F      5557          addq.w    #4,A7
                    5558   ; strcatInstruction(")+") ;
000032D8  4879 0000 5559          pea       @m68kde~1_175.L
000032DC  7342      
000032DE  4E92      5560          jsr       (A2)
000032E0  584F      5561          addq.w    #4,A7
000032E2  6000 025A 5562          bra       Decode6BitEA_44
                    5563   Decode6BitEA_15:
                    5564   ; }
                    5565   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
000032E6  0C05 0004 5566          cmp.b     #4,D5
000032EA  662A      5567          bne.s     Decode6BitEA_17
                    5568   ; strcatInstruction("-(") ;
000032EC  4879 0000 5569          pea       @m68kde~1_176.L
000032F0  7346      
000032F2  4E92      5570          jsr       (A2)
000032F4  584F      5571          addq.w    #4,A7
                    5572   ; Decode3BitAddressRegister(OperandRegister) ;
000032F6  C67C 00FF 5573          and.w     #255,D3
000032FA  C6BC 0000 5574          and.l     #65535,D3
000032FE  FFFF      
00003300  2F03      5575          move.l    D3,-(A7)
00003302  4EB8 2F1A 5576          jsr       _Decode3BitAddressRegister
00003306  584F      5577          addq.w    #4,A7
                    5578   ; strcatInstruction(")") ;
00003308  4879 0000 5579          pea       @m68kde~1_174.L
0000330C  7340      
0000330E  4E92      5580          jsr       (A2)
00003310  584F      5581          addq.w    #4,A7
00003312  6000 022A 5582          bra       Decode6BitEA_44
                    5583   Decode6BitEA_17:
                    5584   ; }
                    5585   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003316  0C05 0005 5586          cmp.b     #5,D5
0000331A  6626      5587          bne.s     Decode6BitEA_19
                    5588   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
0000331C  C6BC 0000 5589          and.l     #255,D3
00003320  00FF      
00003322  2F03      5590          move.l    D3,-(A7)
00003324  48C2      5591          ext.l     D2
00003326  2F02      5592          move.l    D2,-(A7)
00003328  4879 0000 5593          pea       @m68kde~1_177.L
0000332C  734A      
0000332E  2F0B      5594          move.l    A3,-(A7)
00003330  4E94      5595          jsr       (A4)
00003332  DEFC 0010 5596          add.w     #16,A7
                    5597   ; strcatInstruction(TempString) ;
00003336  2F0B      5598          move.l    A3,-(A7)
00003338  4E92      5599          jsr       (A2)
0000333A  584F      5600          addq.w    #4,A7
                    5601   ; InstructionSize += 1;
0000333C  5295      5602          addq.l    #1,(A5)
0000333E  6000 01FE 5603          bra       Decode6BitEA_44
                    5604   Decode6BitEA_19:
                    5605   ; }
                    5606   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003342  0C05 0006 5607          cmp.b     #6,D5
00003346  6600 00AA 5608          bne       Decode6BitEA_21
                    5609   ; offset = ExWord1 & (short int)(0x00FF);
0000334A  3002      5610          move.w    D2,D0
0000334C  C07C 00FF 5611          and.w     #255,D0
00003350  1D40 FFFD 5612          move.b    D0,-3(A6)
                    5613   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003354  C6BC 0000 5614          and.l     #255,D3
00003358  00FF      
0000335A  2F03      5615          move.l    D3,-(A7)
0000335C  122E FFFD 5616          move.b    -3(A6),D1
00003360  4881      5617          ext.w     D1
00003362  48C1      5618          ext.l     D1
00003364  2F01      5619          move.l    D1,-(A7)
00003366  4879 0000 5620          pea       @m68kde~1_178.L
0000336A  7352      
0000336C  2F0B      5621          move.l    A3,-(A7)
0000336E  4E94      5622          jsr       (A4)
00003370  DEFC 0010 5623          add.w     #16,A7
                    5624   ; strcatInstruction(TempString) ;
00003374  2F0B      5625          move.l    A3,-(A7)
00003376  4E92      5626          jsr       (A2)
00003378  584F      5627          addq.w    #4,A7
                    5628   ; InstructionSize += 1;
0000337A  5295      5629          addq.l    #1,(A5)
                    5630   ; // decode the Xn bit
                    5631   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000337C  3002      5632          move.w    D2,D0
0000337E  C07C 8000 5633          and.w     #32768,D0
00003382  660C      5634          bne.s     Decode6BitEA_23
                    5635   ; strcatInstruction("D") ;
00003384  4879 0000 5636          pea       @m68kde~1_179.L
00003388  735A      
0000338A  4E92      5637          jsr       (A2)
0000338C  584F      5638          addq.w    #4,A7
0000338E  600A      5639          bra.s     Decode6BitEA_24
                    5640   Decode6BitEA_23:
                    5641   ; else
                    5642   ; strcatInstruction("A") ;
00003390  4879 0000 5643          pea       @m68kde~1_180.L
00003394  735C      
00003396  4E92      5644          jsr       (A2)
00003398  584F      5645          addq.w    #4,A7
                    5646   Decode6BitEA_24:
                    5647   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000339A  3002      5648          move.w    D2,D0
0000339C  C07C 7000 5649          and.w     #28672,D0
000033A0  E048      5650          lsr.w     #8,D0
000033A2  E848      5651          lsr.w     #4,D0
000033A4  3D40 FFFE 5652          move.w    D0,-2(A6)
                    5653   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000033A8  322E FFFE 5654          move.w    -2(A6),D1
000033AC  C2BC 0000 5655          and.l     #65535,D1
000033B0  FFFF      
000033B2  2F01      5656          move.l    D1,-(A7)
000033B4  4879 0000 5657          pea       @m68kde~1_181.L
000033B8  735E      
000033BA  2F0B      5658          move.l    A3,-(A7)
000033BC  4E94      5659          jsr       (A4)
000033BE  DEFC 000C 5660          add.w     #12,A7
                    5661   ; strcatInstruction(TempString) ;
000033C2  2F0B      5662          move.l    A3,-(A7)
000033C4  4E92      5663          jsr       (A2)
000033C6  584F      5664          addq.w    #4,A7
                    5665   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000033C8  3002      5666          move.w    D2,D0
000033CA  C07C 0800 5667          and.w     #2048,D0
000033CE  E048      5668          lsr.w     #8,D0
000033D0  E648      5669          lsr.w     #3,D0
000033D2  3E00      5670          move.w    D0,D7
                    5671   ; if(XnSize == 0)
000033D4  4A47      5672          tst.w     D7
000033D6  660C      5673          bne.s     Decode6BitEA_25
                    5674   ; strcatInstruction(".W)") ;
000033D8  4879 0000 5675          pea       @m68kde~1_182.L
000033DC  7362      
000033DE  4E92      5676          jsr       (A2)
000033E0  584F      5677          addq.w    #4,A7
000033E2  600A      5678          bra.s     Decode6BitEA_26
                    5679   Decode6BitEA_25:
                    5680   ; else
                    5681   ; strcatInstruction(".L)") ;
000033E4  4879 0000 5682          pea       @m68kde~1_183.L
000033E8  7366      
000033EA  4E92      5683          jsr       (A2)
000033EC  584F      5684          addq.w    #4,A7
                    5685   Decode6BitEA_26:
000033EE  6000 014E 5686          bra       Decode6BitEA_44
                    5687   Decode6BitEA_21:
                    5688   ; }
                    5689   ; else if(OperandMode == (unsigned char)(7)) {
000033F2  0C05 0007 5690          cmp.b     #7,D5
000033F6  6600 0146 5691          bne       Decode6BitEA_44
                    5692   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000033FA  4A03      5693          tst.b     D3
000033FC  661E      5694          bne.s     Decode6BitEA_29
                    5695   ; sprintf(TempString, "$%X", ExWord1) ;
000033FE  48C2      5696          ext.l     D2
00003400  2F02      5697          move.l    D2,-(A7)
00003402  4879 0000 5698          pea       @m68kde~1_184.L
00003406  736A      
00003408  2F0B      5699          move.l    A3,-(A7)
0000340A  4E94      5700          jsr       (A4)
0000340C  DEFC 000C 5701          add.w     #12,A7
                    5702   ; strcatInstruction(TempString) ;
00003410  2F0B      5703          move.l    A3,-(A7)
00003412  4E92      5704          jsr       (A2)
00003414  584F      5705          addq.w    #4,A7
                    5706   ; InstructionSize += 1;
00003416  5295      5707          addq.l    #1,(A5)
00003418  6000 0124 5708          bra       Decode6BitEA_44
                    5709   Decode6BitEA_29:
                    5710   ; }
                    5711   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
0000341C  0C03 0001 5712          cmp.b     #1,D3
00003420  6600 0032 5713          bne       Decode6BitEA_31
                    5714   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003424  3202      5715          move.w    D2,D1
00003426  48C1      5716          ext.l     D1
00003428  E189      5717          lsl.l     #8,D1
0000342A  E189      5718          lsl.l     #8,D1
0000342C  2F00      5719          move.l    D0,-(A7)
0000342E  302E FFF8 5720          move.w    -8(A6),D0
00003432  48C0      5721          ext.l     D0
00003434  8280      5722          or.l      D0,D1
00003436  201F      5723          move.l    (A7)+,D0
00003438  2F01      5724          move.l    D1,-(A7)
0000343A  4879 0000 5725          pea       @m68kde~1_184.L
0000343E  736A      
00003440  2F0B      5726          move.l    A3,-(A7)
00003442  4E94      5727          jsr       (A4)
00003444  DEFC 000C 5728          add.w     #12,A7
                    5729   ; strcatInstruction(TempString) ;
00003448  2F0B      5730          move.l    A3,-(A7)
0000344A  4E92      5731          jsr       (A2)
0000344C  584F      5732          addq.w    #4,A7
                    5733   ; InstructionSize += 2;
0000344E  5495      5734          addq.l    #2,(A5)
00003450  6000 00EC 5735          bra       Decode6BitEA_44
                    5736   Decode6BitEA_31:
                    5737   ; }
                    5738   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003454  0C03 0004 5739          cmp.b     #4,D3
00003458  661C      5740          bne.s     Decode6BitEA_33
                    5741   ; if(IsItMoveInstruction == 0)        //not move instruction
0000345A  302E 0016 5742          move.w    22(A6),D0
0000345E  660A      5743          bne.s     Decode6BitEA_35
                    5744   ; DecodeBWLDataAfterOpCode(OpCode);
00003460  2F04      5745          move.l    D4,-(A7)
00003462  4EB8 300E 5746          jsr       _DecodeBWLDataAfterOpCode
00003466  584F      5747          addq.w    #4,A7
00003468  6008      5748          bra.s     Decode6BitEA_36
                    5749   Decode6BitEA_35:
                    5750   ; else
                    5751   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
0000346A  2F04      5752          move.l    D4,-(A7)
0000346C  4EB8 2F46 5753          jsr       _DecodeBWLDataAfterOpCodeForMove
00003470  584F      5754          addq.w    #4,A7
                    5755   Decode6BitEA_36:
00003472  6000 00CA 5756          bra       Decode6BitEA_44
                    5757   Decode6BitEA_33:
                    5758   ; }
                    5759   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003476  0C03 0002 5760          cmp.b     #2,D3
0000347A  661E      5761          bne.s     Decode6BitEA_37
                    5762   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000347C  48C2      5763          ext.l     D2
0000347E  2F02      5764          move.l    D2,-(A7)
00003480  4879 0000 5765          pea       @m68kde~1_185.L
00003484  736E      
00003486  2F0B      5766          move.l    A3,-(A7)
00003488  4E94      5767          jsr       (A4)
0000348A  DEFC 000C 5768          add.w     #12,A7
                    5769   ; strcatInstruction(TempString) ;
0000348E  2F0B      5770          move.l    A3,-(A7)
00003490  4E92      5771          jsr       (A2)
00003492  584F      5772          addq.w    #4,A7
                    5773   ; InstructionSize += 1;
00003494  5295      5774          addq.l    #1,(A5)
00003496  6000 00A6 5775          bra       Decode6BitEA_44
                    5776   Decode6BitEA_37:
                    5777   ; }
                    5778   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000349A  0C03 0003 5779          cmp.b     #3,D3
0000349E  6600 009E 5780          bne       Decode6BitEA_44
                    5781   ; offset = ExWord1 & (short int)(0x00FF);
000034A2  3002      5782          move.w    D2,D0
000034A4  C07C 00FF 5783          and.w     #255,D0
000034A8  1D40 FFFD 5784          move.b    D0,-3(A6)
                    5785   ; sprintf(TempString, "%d(PC,", offset ) ;
000034AC  122E FFFD 5786          move.b    -3(A6),D1
000034B0  4881      5787          ext.w     D1
000034B2  48C1      5788          ext.l     D1
000034B4  2F01      5789          move.l    D1,-(A7)
000034B6  4879 0000 5790          pea       @m68kde~1_186.L
000034BA  7376      
000034BC  2F0B      5791          move.l    A3,-(A7)
000034BE  4E94      5792          jsr       (A4)
000034C0  DEFC 000C 5793          add.w     #12,A7
                    5794   ; strcatInstruction(TempString) ;
000034C4  2F0B      5795          move.l    A3,-(A7)
000034C6  4E92      5796          jsr       (A2)
000034C8  584F      5797          addq.w    #4,A7
                    5798   ; InstructionSize += 1;
000034CA  5295      5799          addq.l    #1,(A5)
                    5800   ; // decode the Xn bit
                    5801   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000034CC  3002      5802          move.w    D2,D0
000034CE  C07C 8000 5803          and.w     #32768,D0
000034D2  660C      5804          bne.s     Decode6BitEA_41
                    5805   ; strcatInstruction("D") ;
000034D4  4879 0000 5806          pea       @m68kde~1_179.L
000034D8  735A      
000034DA  4E92      5807          jsr       (A2)
000034DC  584F      5808          addq.w    #4,A7
000034DE  600A      5809          bra.s     Decode6BitEA_42
                    5810   Decode6BitEA_41:
                    5811   ; else
                    5812   ; strcatInstruction("A") ;
000034E0  4879 0000 5813          pea       @m68kde~1_180.L
000034E4  735C      
000034E6  4E92      5814          jsr       (A2)
000034E8  584F      5815          addq.w    #4,A7
                    5816   Decode6BitEA_42:
                    5817   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000034EA  3002      5818          move.w    D2,D0
000034EC  C07C 7000 5819          and.w     #28672,D0
000034F0  E048      5820          lsr.w     #8,D0
000034F2  E848      5821          lsr.w     #4,D0
000034F4  3D40 FFFE 5822          move.w    D0,-2(A6)
                    5823   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000034F8  322E FFFE 5824          move.w    -2(A6),D1
000034FC  C2BC 0000 5825          and.l     #65535,D1
00003500  FFFF      
00003502  2F01      5826          move.l    D1,-(A7)
00003504  4879 0000 5827          pea       @m68kde~1_181.L
00003508  735E      
0000350A  2F0B      5828          move.l    A3,-(A7)
0000350C  4E94      5829          jsr       (A4)
0000350E  DEFC 000C 5830          add.w     #12,A7
                    5831   ; strcatInstruction(TempString) ;
00003512  2F0B      5832          move.l    A3,-(A7)
00003514  4E92      5833          jsr       (A2)
00003516  584F      5834          addq.w    #4,A7
                    5835   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003518  3002      5836          move.w    D2,D0
0000351A  C07C 0800 5837          and.w     #2048,D0
0000351E  E048      5838          lsr.w     #8,D0
00003520  E648      5839          lsr.w     #3,D0
00003522  3E00      5840          move.w    D0,D7
                    5841   ; if(XnSize == 0)
00003524  4A47      5842          tst.w     D7
00003526  660C      5843          bne.s     Decode6BitEA_43
                    5844   ; strcatInstruction(".W)") ;
00003528  4879 0000 5845          pea       @m68kde~1_182.L
0000352C  7362      
0000352E  4E92      5846          jsr       (A2)
00003530  584F      5847          addq.w    #4,A7
00003532  600A      5848          bra.s     Decode6BitEA_44
                    5849   Decode6BitEA_43:
                    5850   ; else
                    5851   ; strcatInstruction(".L)") ;
00003534  4879 0000 5852          pea       @m68kde~1_183.L
00003538  7366      
0000353A  4E92      5853          jsr       (A2)
0000353C  584F      5854          addq.w    #4,A7
                    5855   Decode6BitEA_44:
0000353E  4CDF 3CFC 5856          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003542  4E5E      5857          unlk      A6
00003544  4E75      5858          rts
                    5859   ; }
                    5860   ; }
                    5861   ; }
                    5862   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5863   ; {
                    5864   _Decode3BitOperandMode:
00003546  4E56 FFFC 5865          link      A6,#-4
0000354A  2F02      5866          move.l    D2,-(A7)
0000354C  242E 0008 5867          move.l    8(A6),D2
                    5868   ; unsigned short int OperandMode;
                    5869   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003550  2042      5870          move.l    D2,A0
00003552  3010      5871          move.w    (A0),D0
00003554  C07C 0100 5872          and.w     #256,D0
00003558  E048      5873          lsr.w     #8,D0
0000355A  3D40 FFFE 5874          move.w    D0,-2(A6)
                    5875   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000355E  2042      5876          move.l    D2,A0
00003560  3210      5877          move.w    (A0),D1
00003562  C2BC 0000 5878          and.l     #65535,D1
00003566  FFFF      
00003568  2F01      5879          move.l    D1,-(A7)
0000356A  4EB8 2E8A 5880          jsr       _Decode2BitOperandSize
0000356E  584F      5881          addq.w    #4,A7
                    5882   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003570  302E FFFE 5883          move.w    -2(A6),D0
00003574  6600 0032 5884          bne       Decode3BitOperandMode_1
                    5885   ; Decode6BitEA(OpCode,0,0,0) ;
00003578  42A7      5886          clr.l     -(A7)
0000357A  42A7      5887          clr.l     -(A7)
0000357C  42A7      5888          clr.l     -(A7)
0000357E  2F02      5889          move.l    D2,-(A7)
00003580  4EB8 311E 5890          jsr       _Decode6BitEA
00003584  DEFC 0010 5891          add.w     #16,A7
                    5892   ; strcatInstruction(",") ;
00003588  4879 0000 5893          pea       @m68kde~1_187.L
0000358C  737E      
0000358E  4EB8 0CE0 5894          jsr       _strcatInstruction
00003592  584F      5895          addq.w    #4,A7
                    5896   ; Decode3BitDataRegister(*OpCode) ;
00003594  2042      5897          move.l    D2,A0
00003596  3210      5898          move.w    (A0),D1
00003598  C2BC 0000 5899          and.l     #65535,D1
0000359C  FFFF      
0000359E  2F01      5900          move.l    D1,-(A7)
000035A0  4EB8 2EE6 5901          jsr       _Decode3BitDataRegister
000035A4  584F      5902          addq.w    #4,A7
000035A6  602E      5903          bra.s     Decode3BitOperandMode_2
                    5904   Decode3BitOperandMode_1:
                    5905   ; }
                    5906   ; else {                                                         // Destination is in EA
                    5907   ; Decode3BitDataRegister(*OpCode) ;
000035A8  2042      5908          move.l    D2,A0
000035AA  3210      5909          move.w    (A0),D1
000035AC  C2BC 0000 5910          and.l     #65535,D1
000035B0  FFFF      
000035B2  2F01      5911          move.l    D1,-(A7)
000035B4  4EB8 2EE6 5912          jsr       _Decode3BitDataRegister
000035B8  584F      5913          addq.w    #4,A7
                    5914   ; strcatInstruction(",") ;
000035BA  4879 0000 5915          pea       @m68kde~1_187.L
000035BE  737E      
000035C0  4EB8 0CE0 5916          jsr       _strcatInstruction
000035C4  584F      5917          addq.w    #4,A7
                    5918   ; Decode6BitEA(OpCode,0,0,0) ;
000035C6  42A7      5919          clr.l     -(A7)
000035C8  42A7      5920          clr.l     -(A7)
000035CA  42A7      5921          clr.l     -(A7)
000035CC  2F02      5922          move.l    D2,-(A7)
000035CE  4EB8 311E 5923          jsr       _Decode6BitEA
000035D2  DEFC 0010 5924          add.w     #16,A7
                    5925   Decode3BitOperandMode_2:
000035D6  241F      5926          move.l    (A7)+,D2
000035D8  4E5E      5927          unlk      A6
000035DA  4E75      5928          rts
                    5929   ; }
                    5930   ; }
                    5931   ; void DecodeBranchCondition(unsigned short int Condition)
                    5932   ; {
                    5933   _DecodeBranchCondition:
000035DC  4E56 0000 5934          link      A6,#0
000035E0  48E7 2020 5935          movem.l   D2/A2,-(A7)
000035E4  45F8 0CE0 5936          lea       _strcatInstruction.L,A2
000035E8  342E 000A 5937          move.w    10(A6),D2
000035EC  C4BC 0000 5938          and.l     #65535,D2
000035F0  FFFF      
                    5939   ; if(Condition == (unsigned short int)(0x04))
000035F2  0C42 0004 5940          cmp.w     #4,D2
000035F6  660E      5941          bne.s     DecodeBranchCondition_1
                    5942   ; strcatInstruction("CC") ;
000035F8  4879 0000 5943          pea       @m68kde~1_188.L
000035FC  7380      
000035FE  4E92      5944          jsr       (A2)
00003600  584F      5945          addq.w    #4,A7
00003602  6000 011C 5946          bra       DecodeBranchCondition_30
                    5947   DecodeBranchCondition_1:
                    5948   ; else if(Condition == (unsigned short int)(0x05))
00003606  0C42 0005 5949          cmp.w     #5,D2
0000360A  660E      5950          bne.s     DecodeBranchCondition_3
                    5951   ; strcatInstruction("CS") ;
0000360C  4879 0000 5952          pea       @m68kde~1_189.L
00003610  7384      
00003612  4E92      5953          jsr       (A2)
00003614  584F      5954          addq.w    #4,A7
00003616  6000 0108 5955          bra       DecodeBranchCondition_30
                    5956   DecodeBranchCondition_3:
                    5957   ; else if(Condition == (unsigned short int)(0x07))
0000361A  0C42 0007 5958          cmp.w     #7,D2
0000361E  660E      5959          bne.s     DecodeBranchCondition_5
                    5960   ; strcatInstruction("EQ") ;
00003620  4879 0000 5961          pea       @m68kde~1_190.L
00003624  7388      
00003626  4E92      5962          jsr       (A2)
00003628  584F      5963          addq.w    #4,A7
0000362A  6000 00F4 5964          bra       DecodeBranchCondition_30
                    5965   DecodeBranchCondition_5:
                    5966   ; else if(Condition == (unsigned short int)(0x0C))
0000362E  0C42 000C 5967          cmp.w     #12,D2
00003632  660E      5968          bne.s     DecodeBranchCondition_7
                    5969   ; strcatInstruction("GE") ;
00003634  4879 0000 5970          pea       @m68kde~1_191.L
00003638  738C      
0000363A  4E92      5971          jsr       (A2)
0000363C  584F      5972          addq.w    #4,A7
0000363E  6000 00E0 5973          bra       DecodeBranchCondition_30
                    5974   DecodeBranchCondition_7:
                    5975   ; else if(Condition == (unsigned short int)(0x0E))
00003642  0C42 000E 5976          cmp.w     #14,D2
00003646  660E      5977          bne.s     DecodeBranchCondition_9
                    5978   ; strcatInstruction("GT") ;
00003648  4879 0000 5979          pea       @m68kde~1_192.L
0000364C  7390      
0000364E  4E92      5980          jsr       (A2)
00003650  584F      5981          addq.w    #4,A7
00003652  6000 00CC 5982          bra       DecodeBranchCondition_30
                    5983   DecodeBranchCondition_9:
                    5984   ; else if(Condition == (unsigned short int)(0x02))
00003656  0C42 0002 5985          cmp.w     #2,D2
0000365A  660E      5986          bne.s     DecodeBranchCondition_11
                    5987   ; strcatInstruction("HI") ;
0000365C  4879 0000 5988          pea       @m68kde~1_193.L
00003660  7394      
00003662  4E92      5989          jsr       (A2)
00003664  584F      5990          addq.w    #4,A7
00003666  6000 00B8 5991          bra       DecodeBranchCondition_30
                    5992   DecodeBranchCondition_11:
                    5993   ; else if(Condition == (unsigned short int)(0x0F))
0000366A  0C42 000F 5994          cmp.w     #15,D2
0000366E  660E      5995          bne.s     DecodeBranchCondition_13
                    5996   ; strcatInstruction("LE") ;
00003670  4879 0000 5997          pea       @m68kde~1_194.L
00003674  7398      
00003676  4E92      5998          jsr       (A2)
00003678  584F      5999          addq.w    #4,A7
0000367A  6000 00A4 6000          bra       DecodeBranchCondition_30
                    6001   DecodeBranchCondition_13:
                    6002   ; else if(Condition == (unsigned short int)(0x03))
0000367E  0C42 0003 6003          cmp.w     #3,D2
00003682  660E      6004          bne.s     DecodeBranchCondition_15
                    6005   ; strcatInstruction("LS") ;
00003684  4879 0000 6006          pea       @m68kde~1_195.L
00003688  739C      
0000368A  4E92      6007          jsr       (A2)
0000368C  584F      6008          addq.w    #4,A7
0000368E  6000 0090 6009          bra       DecodeBranchCondition_30
                    6010   DecodeBranchCondition_15:
                    6011   ; else if(Condition == (unsigned short int)(0x0D))
00003692  0C42 000D 6012          cmp.w     #13,D2
00003696  660E      6013          bne.s     DecodeBranchCondition_17
                    6014   ; strcatInstruction("LT") ;
00003698  4879 0000 6015          pea       @m68kde~1_196.L
0000369C  73A0      
0000369E  4E92      6016          jsr       (A2)
000036A0  584F      6017          addq.w    #4,A7
000036A2  6000 007C 6018          bra       DecodeBranchCondition_30
                    6019   DecodeBranchCondition_17:
                    6020   ; else if(Condition == (unsigned short int)(0x0B))
000036A6  0C42 000B 6021          cmp.w     #11,D2
000036AA  660E      6022          bne.s     DecodeBranchCondition_19
                    6023   ; strcatInstruction("MI") ;
000036AC  4879 0000 6024          pea       @m68kde~1_197.L
000036B0  73A4      
000036B2  4E92      6025          jsr       (A2)
000036B4  584F      6026          addq.w    #4,A7
000036B6  6000 0068 6027          bra       DecodeBranchCondition_30
                    6028   DecodeBranchCondition_19:
                    6029   ; else if(Condition == (unsigned short int)(0x06))
000036BA  0C42 0006 6030          cmp.w     #6,D2
000036BE  660E      6031          bne.s     DecodeBranchCondition_21
                    6032   ; strcatInstruction("NE") ;
000036C0  4879 0000 6033          pea       @m68kde~1_198.L
000036C4  73A8      
000036C6  4E92      6034          jsr       (A2)
000036C8  584F      6035          addq.w    #4,A7
000036CA  6000 0054 6036          bra       DecodeBranchCondition_30
                    6037   DecodeBranchCondition_21:
                    6038   ; else if(Condition == (unsigned short int)(0x0A))
000036CE  0C42 000A 6039          cmp.w     #10,D2
000036D2  660E      6040          bne.s     DecodeBranchCondition_23
                    6041   ; strcatInstruction("PL") ;
000036D4  4879 0000 6042          pea       @m68kde~1_199.L
000036D8  73AC      
000036DA  4E92      6043          jsr       (A2)
000036DC  584F      6044          addq.w    #4,A7
000036DE  6000 0040 6045          bra       DecodeBranchCondition_30
                    6046   DecodeBranchCondition_23:
                    6047   ; else if(Condition == (unsigned short int)(0x09))
000036E2  0C42 0009 6048          cmp.w     #9,D2
000036E6  660C      6049          bne.s     DecodeBranchCondition_25
                    6050   ; strcatInstruction("VS") ;
000036E8  4879 0000 6051          pea       @m68kde~1_200.L
000036EC  73B0      
000036EE  4E92      6052          jsr       (A2)
000036F0  584F      6053          addq.w    #4,A7
000036F2  602C      6054          bra.s     DecodeBranchCondition_30
                    6055   DecodeBranchCondition_25:
                    6056   ; else if(Condition == (unsigned short int)(0x08))
000036F4  0C42 0008 6057          cmp.w     #8,D2
000036F8  660C      6058          bne.s     DecodeBranchCondition_27
                    6059   ; strcatInstruction("VC") ;
000036FA  4879 0000 6060          pea       @m68kde~1_201.L
000036FE  73B4      
00003700  4E92      6061          jsr       (A2)
00003702  584F      6062          addq.w    #4,A7
00003704  601A      6063          bra.s     DecodeBranchCondition_30
                    6064   DecodeBranchCondition_27:
                    6065   ; else if(Condition == (unsigned short int)(0))
00003706  4A42      6066          tst.w     D2
00003708  660C      6067          bne.s     DecodeBranchCondition_29
                    6068   ; strcatInstruction("RA") ;
0000370A  4879 0000 6069          pea       @m68kde~1_202.L
0000370E  73B8      
00003710  4E92      6070          jsr       (A2)
00003712  584F      6071          addq.w    #4,A7
00003714  600A      6072          bra.s     DecodeBranchCondition_30
                    6073   DecodeBranchCondition_29:
                    6074   ; else
                    6075   ; strcatInstruction("SR");
00003716  4879 0000 6076          pea       @m68kde~1_203.L
0000371A  73BC      
0000371C  4E92      6077          jsr       (A2)
0000371E  584F      6078          addq.w    #4,A7
                    6079   DecodeBranchCondition_30:
                    6080   ; strcatInstruction(" ") ;
00003720  4879 0000 6081          pea       @m68kde~1_30.L
00003724  63F4      
00003726  4E92      6082          jsr       (A2)
00003728  584F      6083          addq.w    #4,A7
0000372A  4CDF 0404 6084          movem.l   (A7)+,D2/A2
0000372E  4E5E      6085          unlk      A6
00003730  4E75      6086          rts
                    6087   ; }
                    6088   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6089   ; {
                    6090   _DisassembleInstruction:
00003732  4E56 FFD8 6091          link      A6,#-40
00003736  48E7 3F3C 6092          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000373A  242E 0008 6093          move.l    8(A6),D2
0000373E  45F9 0803 6094          lea       _InstructionSize.L,A2
00003742  017E      
00003744  47F8 0CFA 6095          lea       _strcpyInstruction.L,A3
00003748  49F9 0803 6096          lea       _TempString.L,A4
0000374C  0546      
0000374E  4BF9 0000 6097          lea       _sprintf.L,A5
00003752  5742      
                    6098   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003754  2042      6099          move.l    D2,A0
00003756  3010      6100          move.w    (A0),D0
00003758  E040      6101          asr.w     #8,D0
0000375A  E840      6102          asr.w     #4,D0
0000375C  3D40 FFDA 6103          move.w    D0,-38(A6)
                    6104   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003760  2042      6105          move.l    D2,A0
00003762  3010      6106          move.w    (A0),D0
00003764  C07C 0FFF 6107          and.w     #4095,D0
00003768  3D40 FFDC 6108          move.w    D0,-36(A6)
                    6109   ; unsigned short int SourceBits, DestBits, Size ;
                    6110   ; unsigned char *Mode, Condition;
                    6111   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6112   ; unsigned short int DataRegister, AddressRegister;
                    6113   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6114   ; signed short int Displacement16Bit;
                    6115   ; short int Mask, DoneSlash;
                    6116   ; int i;
                    6117   ; strcpyInstruction("Unknown") ;
0000376C  4879 0000 6118          pea       @m68kde~1_204.L
00003770  73C0      
00003772  4E93      6119          jsr       (A3)
00003774  584F      6120          addq.w    #4,A7
                    6121   ; /////////////////////////////////////////////////////////////////////////////////
                    6122   ; // if instruction is ABCD
                    6123   ; /////////////////////////////////////////////////////////////////////////////////
                    6124   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003776  2042      6125          move.l    D2,A0
00003778  3010      6126          move.w    (A0),D0
0000377A  C07C F1F0 6127          and.w     #61936,D0
0000377E  0C40 C100 6128          cmp.w     #49408,D0
00003782  6600 008C 6129          bne       DisassembleInstruction_4
                    6130   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003786  2042      6131          move.l    D2,A0
00003788  3010      6132          move.w    (A0),D0
0000378A  E040      6133          asr.w     #8,D0
0000378C  E240      6134          asr.w     #1,D0
0000378E  C07C 0007 6135          and.w     #7,D0
00003792  3D40 FFE0 6136          move.w    D0,-32(A6)
                    6137   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003796  2042      6138          move.l    D2,A0
00003798  3010      6139          move.w    (A0),D0
0000379A  C07C 0007 6140          and.w     #7,D0
0000379E  3D40 FFDE 6141          move.w    D0,-34(A6)
                    6142   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000037A2  2042      6143          move.l    D2,A0
000037A4  3010      6144          move.w    (A0),D0
000037A6  E640      6145          asr.w     #3,D0
000037A8  48C0      6146          ext.l     D0
000037AA  C0BC 0000 6147          and.l     #1,D0
000037AE  0001      
000037B0  2D40 FFE4 6148          move.l    D0,-28(A6)
                    6149   ; if(Mode == 0)
000037B4  202E FFE4 6150          move.l    -28(A6),D0
000037B8  662C      6151          bne.s     DisassembleInstruction_3
                    6152   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
000037BA  322E FFE0 6153          move.w    -32(A6),D1
000037BE  C2BC 0000 6154          and.l     #65535,D1
000037C2  FFFF      
000037C4  2F01      6155          move.l    D1,-(A7)
000037C6  322E FFDE 6156          move.w    -34(A6),D1
000037CA  C2BC 0000 6157          and.l     #65535,D1
000037CE  FFFF      
000037D0  2F01      6158          move.l    D1,-(A7)
000037D2  4879 0000 6159          pea       @m68kde~1_205.L
000037D6  73C8      
000037D8  4879 0803 6160          pea       _Instruction.L
000037DC  04E2      
000037DE  4E95      6161          jsr       (A5)
000037E0  DEFC 0010 6162          add.w     #16,A7
000037E4  602A      6163          bra.s     DisassembleInstruction_4
                    6164   DisassembleInstruction_3:
                    6165   ; else
                    6166   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000037E6  322E FFE0 6167          move.w    -32(A6),D1
000037EA  C2BC 0000 6168          and.l     #65535,D1
000037EE  FFFF      
000037F0  2F01      6169          move.l    D1,-(A7)
000037F2  322E FFDE 6170          move.w    -34(A6),D1
000037F6  C2BC 0000 6171          and.l     #65535,D1
000037FA  FFFF      
000037FC  2F01      6172          move.l    D1,-(A7)
000037FE  4879 0000 6173          pea       @m68kde~1_206.L
00003802  73D6      
00003804  4879 0803 6174          pea       _Instruction.L
00003808  04E2      
0000380A  4E95      6175          jsr       (A5)
0000380C  DEFC 0010 6176          add.w     #16,A7
                    6177   DisassembleInstruction_4:
                    6178   ; }
                    6179   ; /////////////////////////////////////////////////////////////////////////////////
                    6180   ; // if instruction is ADD or ADDA
                    6181   ; /////////////////////////////////////////////////////////////////////////////////
                    6182   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003810  2042      6183          move.l    D2,A0
00003812  3010      6184          move.w    (A0),D0
00003814  C07C F000 6185          and.w     #61440,D0
00003818  0C40 D000 6186          cmp.w     #53248,D0
0000381C  6600 008C 6187          bne       DisassembleInstruction_8
                    6188   ; InstructionSize = 1;
00003820  24BC 0000 6189          move.l    #1,(A2)
00003824  0001      
                    6190   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003826  2042      6191          move.l    D2,A0
00003828  3010      6192          move.w    (A0),D0
0000382A  EC40      6193          asr.w     #6,D0
0000382C  C07C 0007 6194          and.w     #7,D0
00003830  3600      6195          move.w    D0,D3
                    6196   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003832  0C43 0003 6197          cmp.w     #3,D3
00003836  6708      6198          beq.s     DisassembleInstruction_9
00003838  0C43 0007 6199          cmp.w     #7,D3
0000383C  6600 005A 6200          bne       DisassembleInstruction_7
                    6201   DisassembleInstruction_9:
                    6202   ; {
                    6203   ; if(OpMode == (unsigned short int)(0x0003))
00003840  0C43 0003 6204          cmp.w     #3,D3
00003844  660C      6205          bne.s     DisassembleInstruction_10
                    6206   ; strcpyInstruction("ADDA.W ") ;
00003846  4879 0000 6207          pea       @m68kde~1_207.L
0000384A  73EA      
0000384C  4E93      6208          jsr       (A3)
0000384E  584F      6209          addq.w    #4,A7
00003850  600A      6210          bra.s     DisassembleInstruction_11
                    6211   DisassembleInstruction_10:
                    6212   ; else
                    6213   ; strcpyInstruction("ADDA.L ") ;
00003852  4879 0000 6214          pea       @m68kde~1_208.L
00003856  73F2      
00003858  4E93      6215          jsr       (A3)
0000385A  584F      6216          addq.w    #4,A7
                    6217   DisassembleInstruction_11:
                    6218   ; Decode6BitEA(OpCode,0,0,0)  ;
0000385C  42A7      6219          clr.l     -(A7)
0000385E  42A7      6220          clr.l     -(A7)
00003860  42A7      6221          clr.l     -(A7)
00003862  2F02      6222          move.l    D2,-(A7)
00003864  4EB8 311E 6223          jsr       _Decode6BitEA
00003868  DEFC 0010 6224          add.w     #16,A7
                    6225   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000386C  2042      6226          move.l    D2,A0
0000386E  3210      6227          move.w    (A0),D1
00003870  E041      6228          asr.w     #8,D1
00003872  E241      6229          asr.w     #1,D1
00003874  C27C 0007 6230          and.w     #7,D1
00003878  C2BC 0000 6231          and.l     #65535,D1
0000387C  FFFF      
0000387E  2F01      6232          move.l    D1,-(A7)
00003880  4879 0000 6233          pea       @m68kde~1_209.L
00003884  73FA      
00003886  2F0C      6234          move.l    A4,-(A7)
00003888  4E95      6235          jsr       (A5)
0000388A  DEFC 000C 6236          add.w     #12,A7
                    6237   ; strcatInstruction(TempString) ;
0000388E  2F0C      6238          move.l    A4,-(A7)
00003890  4EB8 0CE0 6239          jsr       _strcatInstruction
00003894  584F      6240          addq.w    #4,A7
00003896  6012      6241          bra.s     DisassembleInstruction_8
                    6242   DisassembleInstruction_7:
                    6243   ; }
                    6244   ; else {
                    6245   ; strcpyInstruction("ADD") ;
00003898  4879 0000 6246          pea       @m68kde~1_210.L
0000389C  7400      
0000389E  4E93      6247          jsr       (A3)
000038A0  584F      6248          addq.w    #4,A7
                    6249   ; Decode3BitOperandMode(OpCode) ;
000038A2  2F02      6250          move.l    D2,-(A7)
000038A4  4EB8 3546 6251          jsr       _Decode3BitOperandMode
000038A8  584F      6252          addq.w    #4,A7
                    6253   DisassembleInstruction_8:
                    6254   ; }
                    6255   ; }
                    6256   ; /////////////////////////////////////////////////////////////////////////////////
                    6257   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6258   ; /////////////////////////////////////////////////////////////////////////////////
                    6259   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
000038AA  2042      6260          move.l    D2,A0
000038AC  3010      6261          move.w    (A0),D0
000038AE  C07C FF00 6262          and.w     #65280,D0
000038B2  0C40 0600 6263          cmp.w     #1536,D0
000038B6  6604      6264          bne.s     DisassembleInstruction_14
000038B8  7001      6265          moveq     #1,D0
000038BA  6002      6266          bra.s     DisassembleInstruction_15
                    6267   DisassembleInstruction_14:
000038BC  4280      6268          clr.l     D0
                    6269   DisassembleInstruction_15:
000038BE  2042      6270          move.l    D2,A0
000038C0  3210      6271          move.w    (A0),D1
000038C2  C27C FF00 6272          and.w     #65280,D1
000038C6  0C41 0200 6273          cmp.w     #512,D1
000038CA  6604      6274          bne.s     DisassembleInstruction_16
000038CC  7201      6275          moveq     #1,D1
000038CE  6002      6276          bra.s     DisassembleInstruction_17
                    6277   DisassembleInstruction_16:
000038D0  4281      6278          clr.l     D1
                    6279   DisassembleInstruction_17:
000038D2  8041      6280          or.w      D1,D0
000038D4  2042      6281          move.l    D2,A0
000038D6  3210      6282          move.w    (A0),D1
000038D8  C27C FF00 6283          and.w     #65280,D1
000038DC  0C41 0C00 6284          cmp.w     #3072,D1
000038E0  6604      6285          bne.s     DisassembleInstruction_18
000038E2  7201      6286          moveq     #1,D1
000038E4  6002      6287          bra.s     DisassembleInstruction_19
                    6288   DisassembleInstruction_18:
000038E6  4281      6289          clr.l     D1
                    6290   DisassembleInstruction_19:
000038E8  8041      6291          or.w      D1,D0
000038EA  2042      6292          move.l    D2,A0
000038EC  3210      6293          move.w    (A0),D1
000038EE  C27C FF00 6294          and.w     #65280,D1
000038F2  0C41 0A00 6295          cmp.w     #2560,D1
000038F6  6604      6296          bne.s     DisassembleInstruction_20
000038F8  7201      6297          moveq     #1,D1
000038FA  6002      6298          bra.s     DisassembleInstruction_21
                    6299   DisassembleInstruction_20:
000038FC  4281      6300          clr.l     D1
                    6301   DisassembleInstruction_21:
000038FE  8041      6302          or.w      D1,D0
00003900  2042      6303          move.l    D2,A0
00003902  3210      6304          move.w    (A0),D1
00003904  C27C FF00 6305          and.w     #65280,D1
00003908  6604      6306          bne.s     DisassembleInstruction_22
0000390A  7201      6307          moveq     #1,D1
0000390C  6002      6308          bra.s     DisassembleInstruction_23
                    6309   DisassembleInstruction_22:
0000390E  4281      6310          clr.l     D1
                    6311   DisassembleInstruction_23:
00003910  8041      6312          or.w      D1,D0
00003912  2042      6313          move.l    D2,A0
00003914  3210      6314          move.w    (A0),D1
00003916  C27C FF00 6315          and.w     #65280,D1
0000391A  0C41 0400 6316          cmp.w     #1024,D1
0000391E  6604      6317          bne.s     DisassembleInstruction_24
00003920  7201      6318          moveq     #1,D1
00003922  6002      6319          bra.s     DisassembleInstruction_25
                    6320   DisassembleInstruction_24:
00003924  4281      6321          clr.l     D1
                    6322   DisassembleInstruction_25:
00003926  8041      6323          or.w      D1,D0
00003928  6700 00E4 6324          beq       DisassembleInstruction_12
                    6325   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6326   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6327   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6328   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6329   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6330   ; {
                    6331   ; InstructionSize = 1;
0000392C  24BC 0000 6332          move.l    #1,(A2)
00003930  0001      
                    6333   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003932  2042      6334          move.l    D2,A0
00003934  3010      6335          move.w    (A0),D0
00003936  C07C FF00 6336          and.w     #65280,D0
0000393A  0C40 0600 6337          cmp.w     #1536,D0
0000393E  660E      6338          bne.s     DisassembleInstruction_26
                    6339   ; strcpyInstruction("ADDI") ;
00003940  4879 0000 6340          pea       @m68kde~1_211.L
00003944  7404      
00003946  4E93      6341          jsr       (A3)
00003948  584F      6342          addq.w    #4,A7
0000394A  6000 0084 6343          bra       DisassembleInstruction_36
                    6344   DisassembleInstruction_26:
                    6345   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
0000394E  2042      6346          move.l    D2,A0
00003950  3010      6347          move.w    (A0),D0
00003952  C07C FF00 6348          and.w     #65280,D0
00003956  0C40 0200 6349          cmp.w     #512,D0
0000395A  660E      6350          bne.s     DisassembleInstruction_28
                    6351   ; strcpyInstruction("ANDI") ;
0000395C  4879 0000 6352          pea       @m68kde~1_212.L
00003960  740A      
00003962  4E93      6353          jsr       (A3)
00003964  584F      6354          addq.w    #4,A7
00003966  6000 0068 6355          bra       DisassembleInstruction_36
                    6356   DisassembleInstruction_28:
                    6357   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
0000396A  2042      6358          move.l    D2,A0
0000396C  3010      6359          move.w    (A0),D0
0000396E  C07C FF00 6360          and.w     #65280,D0
00003972  0C40 0C00 6361          cmp.w     #3072,D0
00003976  660E      6362          bne.s     DisassembleInstruction_30
                    6363   ; strcpyInstruction("CMPI") ;
00003978  4879 0000 6364          pea       @m68kde~1_213.L
0000397C  7410      
0000397E  4E93      6365          jsr       (A3)
00003980  584F      6366          addq.w    #4,A7
00003982  6000 004C 6367          bra       DisassembleInstruction_36
                    6368   DisassembleInstruction_30:
                    6369   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003986  2042      6370          move.l    D2,A0
00003988  3010      6371          move.w    (A0),D0
0000398A  C07C FF00 6372          and.w     #65280,D0
0000398E  0C40 0A00 6373          cmp.w     #2560,D0
00003992  660E      6374          bne.s     DisassembleInstruction_32
                    6375   ; strcpyInstruction("EORI") ;
00003994  4879 0000 6376          pea       @m68kde~1_214.L
00003998  7416      
0000399A  4E93      6377          jsr       (A3)
0000399C  584F      6378          addq.w    #4,A7
0000399E  6000 0030 6379          bra       DisassembleInstruction_36
                    6380   DisassembleInstruction_32:
                    6381   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
000039A2  2042      6382          move.l    D2,A0
000039A4  3010      6383          move.w    (A0),D0
000039A6  C07C FF00 6384          and.w     #65280,D0
000039AA  660C      6385          bne.s     DisassembleInstruction_34
                    6386   ; strcpyInstruction("ORI") ;
000039AC  4879 0000 6387          pea       @m68kde~1_215.L
000039B0  741C      
000039B2  4E93      6388          jsr       (A3)
000039B4  584F      6389          addq.w    #4,A7
000039B6  6018      6390          bra.s     DisassembleInstruction_36
                    6391   DisassembleInstruction_34:
                    6392   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
000039B8  2042      6393          move.l    D2,A0
000039BA  3010      6394          move.w    (A0),D0
000039BC  C07C FF00 6395          and.w     #65280,D0
000039C0  0C40 0400 6396          cmp.w     #1024,D0
000039C4  660A      6397          bne.s     DisassembleInstruction_36
                    6398   ; strcpyInstruction("SUBI") ;
000039C6  4879 0000 6399          pea       @m68kde~1_216.L
000039CA  7420      
000039CC  4E93      6400          jsr       (A3)
000039CE  584F      6401          addq.w    #4,A7
                    6402   DisassembleInstruction_36:
                    6403   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000039D0  2042      6404          move.l    D2,A0
000039D2  3210      6405          move.w    (A0),D1
000039D4  C2BC 0000 6406          and.l     #65535,D1
000039D8  FFFF      
000039DA  2F01      6407          move.l    D1,-(A7)
000039DC  4EB8 2E8A 6408          jsr       _Decode2BitOperandSize
000039E0  584F      6409          addq.w    #4,A7
000039E2  3E00      6410          move.w    D0,D7
                    6411   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
000039E4  2F02      6412          move.l    D2,-(A7)
000039E6  4EB8 300E 6413          jsr       _DecodeBWLDataAfterOpCode
000039EA  584F      6414          addq.w    #4,A7
                    6415   ; strcatInstruction(",") ;
000039EC  4879 0000 6416          pea       @m68kde~1_187.L
000039F0  737E      
000039F2  4EB8 0CE0 6417          jsr       _strcatInstruction
000039F6  584F      6418          addq.w    #4,A7
                    6419   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
000039F8  42A7      6420          clr.l     -(A7)
000039FA  CEBC 0000 6421          and.l     #65535,D7
000039FE  FFFF      
00003A00  2F07      6422          move.l    D7,-(A7)
00003A02  42A7      6423          clr.l     -(A7)
00003A04  2F02      6424          move.l    D2,-(A7)
00003A06  4EB8 311E 6425          jsr       _Decode6BitEA
00003A0A  DEFC 0010 6426          add.w     #16,A7
                    6427   DisassembleInstruction_12:
                    6428   ; }
                    6429   ; /////////////////////////////////////////////////////////////////////////////////
                    6430   ; // if instruction is ADDI #data,SR
                    6431   ; /////////////////////////////////////////////////////////////////////////////////
                    6432   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003A0E  2042      6433          move.l    D2,A0
00003A10  3010      6434          move.w    (A0),D0
00003A12  0C40 027C 6435          cmp.w     #636,D0
00003A16  6622      6436          bne.s     DisassembleInstruction_38
                    6437   ; InstructionSize = 2;
00003A18  24BC 0000 6438          move.l    #2,(A2)
00003A1C  0002      
                    6439   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003A1E  2042      6440          move.l    D2,A0
00003A20  3228 0002 6441          move.w    2(A0),D1
00003A24  48C1      6442          ext.l     D1
00003A26  2F01      6443          move.l    D1,-(A7)
00003A28  4879 0000 6444          pea       @m68kde~1_217.L
00003A2C  7426      
00003A2E  4879 0803 6445          pea       _Instruction.L
00003A32  04E2      
00003A34  4E95      6446          jsr       (A5)
00003A36  DEFC 000C 6447          add.w     #12,A7
                    6448   DisassembleInstruction_38:
                    6449   ; }
                    6450   ; /////////////////////////////////////////////////////////////////////////////////
                    6451   ; // if instruction is ADDQ
                    6452   ; /////////////////////////////////////////////////////////////////////////////////
                    6453   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003A3A  2042      6454          move.l    D2,A0
00003A3C  3010      6455          move.w    (A0),D0
00003A3E  C07C F100 6456          and.w     #61696,D0
00003A42  0C40 5000 6457          cmp.w     #20480,D0
00003A46  6600 005E 6458          bne       DisassembleInstruction_40
                    6459   ; InstructionSize = 1;
00003A4A  24BC 0000 6460          move.l    #1,(A2)
00003A4E  0001      
                    6461   ; strcpyInstruction("ADDQ") ;
00003A50  4879 0000 6462          pea       @m68kde~1_218.L
00003A54  7434      
00003A56  4E93      6463          jsr       (A3)
00003A58  584F      6464          addq.w    #4,A7
                    6465   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003A5A  2042      6466          move.l    D2,A0
00003A5C  3210      6467          move.w    (A0),D1
00003A5E  C2BC 0000 6468          and.l     #65535,D1
00003A62  FFFF      
00003A64  2F01      6469          move.l    D1,-(A7)
00003A66  4EB8 2E8A 6470          jsr       _Decode2BitOperandSize
00003A6A  584F      6471          addq.w    #4,A7
                    6472   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003A6C  2042      6473          move.l    D2,A0
00003A6E  3210      6474          move.w    (A0),D1
00003A70  E041      6475          asr.w     #8,D1
00003A72  E241      6476          asr.w     #1,D1
00003A74  C27C 0007 6477          and.w     #7,D1
00003A78  C2BC 0000 6478          and.l     #65535,D1
00003A7C  FFFF      
00003A7E  2F01      6479          move.l    D1,-(A7)
00003A80  4879 0000 6480          pea       @m68kde~1_219.L
00003A84  743A      
00003A86  2F0C      6481          move.l    A4,-(A7)
00003A88  4E95      6482          jsr       (A5)
00003A8A  DEFC 000C 6483          add.w     #12,A7
                    6484   ; strcatInstruction(TempString) ;
00003A8E  2F0C      6485          move.l    A4,-(A7)
00003A90  4EB8 0CE0 6486          jsr       _strcatInstruction
00003A94  584F      6487          addq.w    #4,A7
                    6488   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003A96  42A7      6489          clr.l     -(A7)
00003A98  42A7      6490          clr.l     -(A7)
00003A9A  42A7      6491          clr.l     -(A7)
00003A9C  2F02      6492          move.l    D2,-(A7)
00003A9E  4EB8 311E 6493          jsr       _Decode6BitEA
00003AA2  DEFC 0010 6494          add.w     #16,A7
                    6495   DisassembleInstruction_40:
                    6496   ; }
                    6497   ; /////////////////////////////////////////////////////////////////////////////////
                    6498   ; // if instruction is ADDX
                    6499   ; /////////////////////////////////////////////////////////////////////////////////
                    6500   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003AA6  2042      6501          move.l    D2,A0
00003AA8  3010      6502          move.w    (A0),D0
00003AAA  C07C F130 6503          and.w     #61744,D0
00003AAE  0C40 D100 6504          cmp.w     #53504,D0
00003AB2  6600 00A4 6505          bne       DisassembleInstruction_44
                    6506   ; InstructionSize = 1;
00003AB6  24BC 0000 6507          move.l    #1,(A2)
00003ABA  0001      
                    6508   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003ABC  2042      6509          move.l    D2,A0
00003ABE  3010      6510          move.w    (A0),D0
00003AC0  EC40      6511          asr.w     #6,D0
00003AC2  C07C 0003 6512          and.w     #3,D0
00003AC6  3600      6513          move.w    D0,D3
                    6514   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003AC8  0C43 0003 6515          cmp.w     #3,D3
00003ACC  6700 008A 6516          beq       DisassembleInstruction_44
                    6517   ; {
                    6518   ; strcpyInstruction("ADDX") ;
00003AD0  4879 0000 6519          pea       @m68kde~1_220.L
00003AD4  7440      
00003AD6  4E93      6520          jsr       (A3)
00003AD8  584F      6521          addq.w    #4,A7
                    6522   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003ADA  2042      6523          move.l    D2,A0
00003ADC  3210      6524          move.w    (A0),D1
00003ADE  C2BC 0000 6525          and.l     #65535,D1
00003AE2  FFFF      
00003AE4  2F01      6526          move.l    D1,-(A7)
00003AE6  4EB8 2E8A 6527          jsr       _Decode2BitOperandSize
00003AEA  584F      6528          addq.w    #4,A7
                    6529   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003AEC  2042      6530          move.l    D2,A0
00003AEE  3010      6531          move.w    (A0),D0
00003AF0  C07C 0008 6532          and.w     #8,D0
00003AF4  6600 0030 6533          bne       DisassembleInstruction_46
                    6534   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003AF8  2042      6535          move.l    D2,A0
00003AFA  3210      6536          move.w    (A0),D1
00003AFC  E041      6537          asr.w     #8,D1
00003AFE  E241      6538          asr.w     #1,D1
00003B00  C27C 0007 6539          and.w     #7,D1
00003B04  48C1      6540          ext.l     D1
00003B06  2F01      6541          move.l    D1,-(A7)
00003B08  2042      6542          move.l    D2,A0
00003B0A  3210      6543          move.w    (A0),D1
00003B0C  C27C 0007 6544          and.w     #7,D1
00003B10  48C1      6545          ext.l     D1
00003B12  2F01      6546          move.l    D1,-(A7)
00003B14  4879 0000 6547          pea       @m68kde~1_221.L
00003B18  7446      
00003B1A  2F0C      6548          move.l    A4,-(A7)
00003B1C  4E95      6549          jsr       (A5)
00003B1E  DEFC 0010 6550          add.w     #16,A7
00003B22  6000 002C 6551          bra       DisassembleInstruction_47
                    6552   DisassembleInstruction_46:
                    6553   ; else        // -(ax),-(ay) mode used
                    6554   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003B26  2042      6555          move.l    D2,A0
00003B28  3210      6556          move.w    (A0),D1
00003B2A  E041      6557          asr.w     #8,D1
00003B2C  E241      6558          asr.w     #1,D1
00003B2E  C27C 0007 6559          and.w     #7,D1
00003B32  48C1      6560          ext.l     D1
00003B34  2F01      6561          move.l    D1,-(A7)
00003B36  2042      6562          move.l    D2,A0
00003B38  3210      6563          move.w    (A0),D1
00003B3A  C27C 0007 6564          and.w     #7,D1
00003B3E  48C1      6565          ext.l     D1
00003B40  2F01      6566          move.l    D1,-(A7)
00003B42  4879 0000 6567          pea       @m68kde~1_222.L
00003B46  744E      
00003B48  2F0C      6568          move.l    A4,-(A7)
00003B4A  4E95      6569          jsr       (A5)
00003B4C  DEFC 0010 6570          add.w     #16,A7
                    6571   DisassembleInstruction_47:
                    6572   ; strcatInstruction(TempString) ;
00003B50  2F0C      6573          move.l    A4,-(A7)
00003B52  4EB8 0CE0 6574          jsr       _strcatInstruction
00003B56  584F      6575          addq.w    #4,A7
                    6576   DisassembleInstruction_44:
                    6577   ; }
                    6578   ; }
                    6579   ; /////////////////////////////////////////////////////////////////////////////////
                    6580   ; // if instruction is AND
                    6581   ; /////////////////////////////////////////////////////////////////////////////////
                    6582   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003B58  2042      6583          move.l    D2,A0
00003B5A  3010      6584          move.w    (A0),D0
00003B5C  C07C F000 6585          and.w     #61440,D0
00003B60  0C40 C000 6586          cmp.w     #49152,D0
00003B64  662A      6587          bne.s     DisassembleInstruction_50
                    6588   ; InstructionSize = 1;
00003B66  24BC 0000 6589          move.l    #1,(A2)
00003B6A  0001      
                    6590   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6591   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003B6C  2042      6592          move.l    D2,A0
00003B6E  3010      6593          move.w    (A0),D0
00003B70  E840      6594          asr.w     #4,D0
00003B72  C07C 001F 6595          and.w     #31,D0
00003B76  3600      6596          move.w    D0,D3
                    6597   ; if(OpMode != (unsigned short int)(0x0010))   {
00003B78  0C43 0010 6598          cmp.w     #16,D3
00003B7C  6712      6599          beq.s     DisassembleInstruction_50
                    6600   ; strcpyInstruction("AND") ;
00003B7E  4879 0000 6601          pea       @m68kde~1_223.L
00003B82  745C      
00003B84  4E93      6602          jsr       (A3)
00003B86  584F      6603          addq.w    #4,A7
                    6604   ; Decode3BitOperandMode(OpCode) ;
00003B88  2F02      6605          move.l    D2,-(A7)
00003B8A  4EB8 3546 6606          jsr       _Decode3BitOperandMode
00003B8E  584F      6607          addq.w    #4,A7
                    6608   DisassembleInstruction_50:
                    6609   ; }
                    6610   ; }
                    6611   ; /////////////////////////////////////////////////////////////////////////////////
                    6612   ; // if instruction is ANDI to CCR
                    6613   ; /////////////////////////////////////////////////////////////////////////////////
                    6614   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003B90  2042      6615          move.l    D2,A0
00003B92  3010      6616          move.w    (A0),D0
00003B94  0C40 023C 6617          cmp.w     #572,D0
00003B98  662A      6618          bne.s     DisassembleInstruction_52
                    6619   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003B9A  2042      6620          move.l    D2,A0
00003B9C  3228 0002 6621          move.w    2(A0),D1
00003BA0  C27C 00FF 6622          and.w     #255,D1
00003BA4  C2BC 0000 6623          and.l     #65535,D1
00003BA8  FFFF      
00003BAA  2F01      6624          move.l    D1,-(A7)
00003BAC  4879 0000 6625          pea       @m68kde~1_224.L
00003BB0  7460      
00003BB2  4879 0803 6626          pea       _Instruction.L
00003BB6  04E2      
00003BB8  4E95      6627          jsr       (A5)
00003BBA  DEFC 000C 6628          add.w     #12,A7
                    6629   ; InstructionSize = 2;
00003BBE  24BC 0000 6630          move.l    #2,(A2)
00003BC2  0002      
                    6631   DisassembleInstruction_52:
                    6632   ; }
                    6633   ; /////////////////////////////////////////////////////////////////////////////////
                    6634   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6635   ; /////////////////////////////////////////////////////////////////////////////////
                    6636   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003BC4  2042      6637          move.l    D2,A0
00003BC6  3010      6638          move.w    (A0),D0
00003BC8  C07C F018 6639          and.w     #61464,D0
00003BCC  0C40 E000 6640          cmp.w     #57344,D0
00003BD0  6604      6641          bne.s     DisassembleInstruction_56
00003BD2  7001      6642          moveq     #1,D0
00003BD4  6002      6643          bra.s     DisassembleInstruction_57
                    6644   DisassembleInstruction_56:
00003BD6  4280      6645          clr.l     D0
                    6646   DisassembleInstruction_57:
00003BD8  2042      6647          move.l    D2,A0
00003BDA  3210      6648          move.w    (A0),D1
00003BDC  C27C FEC0 6649          and.w     #65216,D1
00003BE0  0C41 E0C0 6650          cmp.w     #57536,D1
00003BE4  6604      6651          bne.s     DisassembleInstruction_58
00003BE6  7201      6652          moveq     #1,D1
00003BE8  6002      6653          bra.s     DisassembleInstruction_59
                    6654   DisassembleInstruction_58:
00003BEA  4281      6655          clr.l     D1
                    6656   DisassembleInstruction_59:
00003BEC  8041      6657          or.w      D1,D0
00003BEE  2042      6658          move.l    D2,A0
00003BF0  3210      6659          move.w    (A0),D1
00003BF2  C27C F018 6660          and.w     #61464,D1
00003BF6  0C41 E008 6661          cmp.w     #57352,D1
00003BFA  6604      6662          bne.s     DisassembleInstruction_60
00003BFC  7201      6663          moveq     #1,D1
00003BFE  6002      6664          bra.s     DisassembleInstruction_61
                    6665   DisassembleInstruction_60:
00003C00  4281      6666          clr.l     D1
                    6667   DisassembleInstruction_61:
00003C02  8041      6668          or.w      D1,D0
00003C04  2042      6669          move.l    D2,A0
00003C06  3210      6670          move.w    (A0),D1
00003C08  C27C FEC0 6671          and.w     #65216,D1
00003C0C  0C41 E2C0 6672          cmp.w     #58048,D1
00003C10  6604      6673          bne.s     DisassembleInstruction_62
00003C12  7201      6674          moveq     #1,D1
00003C14  6002      6675          bra.s     DisassembleInstruction_63
                    6676   DisassembleInstruction_62:
00003C16  4281      6677          clr.l     D1
                    6678   DisassembleInstruction_63:
00003C18  8041      6679          or.w      D1,D0
00003C1A  2042      6680          move.l    D2,A0
00003C1C  3210      6681          move.w    (A0),D1
00003C1E  C27C F018 6682          and.w     #61464,D1
00003C22  0C41 E018 6683          cmp.w     #57368,D1
00003C26  6604      6684          bne.s     DisassembleInstruction_64
00003C28  7201      6685          moveq     #1,D1
00003C2A  6002      6686          bra.s     DisassembleInstruction_65
                    6687   DisassembleInstruction_64:
00003C2C  4281      6688          clr.l     D1
                    6689   DisassembleInstruction_65:
00003C2E  8041      6690          or.w      D1,D0
00003C30  2042      6691          move.l    D2,A0
00003C32  3210      6692          move.w    (A0),D1
00003C34  C27C FEC0 6693          and.w     #65216,D1
00003C38  0C41 E6C0 6694          cmp.w     #59072,D1
00003C3C  6604      6695          bne.s     DisassembleInstruction_66
00003C3E  7201      6696          moveq     #1,D1
00003C40  6002      6697          bra.s     DisassembleInstruction_67
                    6698   DisassembleInstruction_66:
00003C42  4281      6699          clr.l     D1
                    6700   DisassembleInstruction_67:
00003C44  8041      6701          or.w      D1,D0
00003C46  2042      6702          move.l    D2,A0
00003C48  3210      6703          move.w    (A0),D1
00003C4A  C27C F018 6704          and.w     #61464,D1
00003C4E  0C41 E010 6705          cmp.w     #57360,D1
00003C52  6604      6706          bne.s     DisassembleInstruction_68
00003C54  7201      6707          moveq     #1,D1
00003C56  6002      6708          bra.s     DisassembleInstruction_69
                    6709   DisassembleInstruction_68:
00003C58  4281      6710          clr.l     D1
                    6711   DisassembleInstruction_69:
00003C5A  8041      6712          or.w      D1,D0
00003C5C  2042      6713          move.l    D2,A0
00003C5E  3210      6714          move.w    (A0),D1
00003C60  C27C FEC0 6715          and.w     #65216,D1
00003C64  0C41 E4C0 6716          cmp.w     #58560,D1
00003C68  6604      6717          bne.s     DisassembleInstruction_70
00003C6A  7201      6718          moveq     #1,D1
00003C6C  6002      6719          bra.s     DisassembleInstruction_71
                    6720   DisassembleInstruction_70:
00003C6E  4281      6721          clr.l     D1
                    6722   DisassembleInstruction_71:
00003C70  8041      6723          or.w      D1,D0
00003C72  6700 0252 6724          beq       DisassembleInstruction_73
                    6725   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6726   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6727   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6728   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6729   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6730   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6731   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6732   ; {
                    6733   ; InstructionSize = 1;
00003C76  24BC 0000 6734          move.l    #1,(A2)
00003C7A  0001      
                    6735   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6736   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003C7C  2042      6737          move.l    D2,A0
00003C7E  3010      6738          move.w    (A0),D0
00003C80  C07C 00C0 6739          and.w     #192,D0
00003C84  0C40 00C0 6740          cmp.w     #192,D0
00003C88  6600 00EA 6741          bne       DisassembleInstruction_72
                    6742   ; {
                    6743   ; // test direction by testing bit 8
                    6744   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003C8C  2042      6745          move.l    D2,A0
00003C8E  3010      6746          move.w    (A0),D0
00003C90  C07C FEC0 6747          and.w     #65216,D0
00003C94  0C40 E0C0 6748          cmp.w     #57536,D0
00003C98  6624      6749          bne.s     DisassembleInstruction_77
                    6750   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C9A  2042      6751          move.l    D2,A0
00003C9C  3010      6752          move.w    (A0),D0
00003C9E  C07C 0100 6753          and.w     #256,D0
00003CA2  0C40 0100 6754          cmp.w     #256,D0
00003CA6  660C      6755          bne.s     DisassembleInstruction_76
                    6756   ; strcpyInstruction("ASL") ;
00003CA8  4879 0000 6757          pea       @m68kde~1_225.L
00003CAC  7470      
00003CAE  4E93      6758          jsr       (A3)
00003CB0  584F      6759          addq.w    #4,A7
00003CB2  600A      6760          bra.s     DisassembleInstruction_77
                    6761   DisassembleInstruction_76:
                    6762   ; else
                    6763   ; strcpyInstruction("ASR") ;
00003CB4  4879 0000 6764          pea       @m68kde~1_226.L
00003CB8  7474      
00003CBA  4E93      6765          jsr       (A3)
00003CBC  584F      6766          addq.w    #4,A7
                    6767   DisassembleInstruction_77:
                    6768   ; // test direction by testing bit 8
                    6769   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003CBE  2042      6770          move.l    D2,A0
00003CC0  3010      6771          move.w    (A0),D0
00003CC2  C07C FEC0 6772          and.w     #65216,D0
00003CC6  0C40 E2C0 6773          cmp.w     #58048,D0
00003CCA  6624      6774          bne.s     DisassembleInstruction_81
                    6775   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CCC  2042      6776          move.l    D2,A0
00003CCE  3010      6777          move.w    (A0),D0
00003CD0  C07C 0100 6778          and.w     #256,D0
00003CD4  0C40 0100 6779          cmp.w     #256,D0
00003CD8  660C      6780          bne.s     DisassembleInstruction_80
                    6781   ; strcpyInstruction("LSL") ;
00003CDA  4879 0000 6782          pea       @m68kde~1_227.L
00003CDE  7478      
00003CE0  4E93      6783          jsr       (A3)
00003CE2  584F      6784          addq.w    #4,A7
00003CE4  600A      6785          bra.s     DisassembleInstruction_81
                    6786   DisassembleInstruction_80:
                    6787   ; else
                    6788   ; strcpyInstruction("LSR") ;
00003CE6  4879 0000 6789          pea       @m68kde~1_228.L
00003CEA  747C      
00003CEC  4E93      6790          jsr       (A3)
00003CEE  584F      6791          addq.w    #4,A7
                    6792   DisassembleInstruction_81:
                    6793   ; // test direction by testing bit 8
                    6794   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003CF0  2042      6795          move.l    D2,A0
00003CF2  3010      6796          move.w    (A0),D0
00003CF4  C07C FEC0 6797          and.w     #65216,D0
00003CF8  0C40 E6C0 6798          cmp.w     #59072,D0
00003CFC  6624      6799          bne.s     DisassembleInstruction_85
                    6800   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CFE  2042      6801          move.l    D2,A0
00003D00  3010      6802          move.w    (A0),D0
00003D02  C07C 0100 6803          and.w     #256,D0
00003D06  0C40 0100 6804          cmp.w     #256,D0
00003D0A  660C      6805          bne.s     DisassembleInstruction_84
                    6806   ; strcpyInstruction("ROL") ;
00003D0C  4879 0000 6807          pea       @m68kde~1_229.L
00003D10  7480      
00003D12  4E93      6808          jsr       (A3)
00003D14  584F      6809          addq.w    #4,A7
00003D16  600A      6810          bra.s     DisassembleInstruction_85
                    6811   DisassembleInstruction_84:
                    6812   ; else
                    6813   ; strcpyInstruction("ROR") ;
00003D18  4879 0000 6814          pea       @m68kde~1_230.L
00003D1C  7484      
00003D1E  4E93      6815          jsr       (A3)
00003D20  584F      6816          addq.w    #4,A7
                    6817   DisassembleInstruction_85:
                    6818   ; // test direction by testing bit 8
                    6819   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003D22  2042      6820          move.l    D2,A0
00003D24  3010      6821          move.w    (A0),D0
00003D26  C07C FEC0 6822          and.w     #65216,D0
00003D2A  0C40 E4C0 6823          cmp.w     #58560,D0
00003D2E  6624      6824          bne.s     DisassembleInstruction_89
                    6825   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D30  2042      6826          move.l    D2,A0
00003D32  3010      6827          move.w    (A0),D0
00003D34  C07C 0100 6828          and.w     #256,D0
00003D38  0C40 0100 6829          cmp.w     #256,D0
00003D3C  660C      6830          bne.s     DisassembleInstruction_88
                    6831   ; strcpyInstruction("ROXL") ;
00003D3E  4879 0000 6832          pea       @m68kde~1_231.L
00003D42  7488      
00003D44  4E93      6833          jsr       (A3)
00003D46  584F      6834          addq.w    #4,A7
00003D48  600A      6835          bra.s     DisassembleInstruction_89
                    6836   DisassembleInstruction_88:
                    6837   ; else
                    6838   ; strcpyInstruction("ROXR") ;
00003D4A  4879 0000 6839          pea       @m68kde~1_232.L
00003D4E  748E      
00003D50  4E93      6840          jsr       (A3)
00003D52  584F      6841          addq.w    #4,A7
                    6842   DisassembleInstruction_89:
                    6843   ; strcatInstruction("  ") ;
00003D54  4879 0000 6844          pea       @m68kde~1_15.L
00003D58  6222      
00003D5A  4EB8 0CE0 6845          jsr       _strcatInstruction
00003D5E  584F      6846          addq.w    #4,A7
                    6847   ; Decode6BitEA(OpCode,0, 0,0) ;
00003D60  42A7      6848          clr.l     -(A7)
00003D62  42A7      6849          clr.l     -(A7)
00003D64  42A7      6850          clr.l     -(A7)
00003D66  2F02      6851          move.l    D2,-(A7)
00003D68  4EB8 311E 6852          jsr       _Decode6BitEA
00003D6C  DEFC 0010 6853          add.w     #16,A7
00003D70  6000 0154 6854          bra       DisassembleInstruction_73
                    6855   DisassembleInstruction_72:
                    6856   ; }
                    6857   ; // first version of above instructions, bit 5 is 0
                    6858   ; else
                    6859   ; {
                    6860   ; // test instruction and direction by testing bits 4,3
                    6861   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003D74  2042      6862          move.l    D2,A0
00003D76  3010      6863          move.w    (A0),D0
00003D78  C07C 0018 6864          and.w     #24,D0
00003D7C  6624      6865          bne.s     DisassembleInstruction_93
                    6866   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D7E  2042      6867          move.l    D2,A0
00003D80  3010      6868          move.w    (A0),D0
00003D82  C07C 0100 6869          and.w     #256,D0
00003D86  0C40 0100 6870          cmp.w     #256,D0
00003D8A  660C      6871          bne.s     DisassembleInstruction_92
                    6872   ; strcpyInstruction("ASL") ;
00003D8C  4879 0000 6873          pea       @m68kde~1_225.L
00003D90  7470      
00003D92  4E93      6874          jsr       (A3)
00003D94  584F      6875          addq.w    #4,A7
00003D96  600A      6876          bra.s     DisassembleInstruction_93
                    6877   DisassembleInstruction_92:
                    6878   ; else
                    6879   ; strcpyInstruction("ASR") ;
00003D98  4879 0000 6880          pea       @m68kde~1_226.L
00003D9C  7474      
00003D9E  4E93      6881          jsr       (A3)
00003DA0  584F      6882          addq.w    #4,A7
                    6883   DisassembleInstruction_93:
                    6884   ; // test instruction and direction by testing bits 4,3
                    6885   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003DA2  2042      6886          move.l    D2,A0
00003DA4  3010      6887          move.w    (A0),D0
00003DA6  C07C 0018 6888          and.w     #24,D0
00003DAA  0C40 0008 6889          cmp.w     #8,D0
00003DAE  6624      6890          bne.s     DisassembleInstruction_97
                    6891   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DB0  2042      6892          move.l    D2,A0
00003DB2  3010      6893          move.w    (A0),D0
00003DB4  C07C 0100 6894          and.w     #256,D0
00003DB8  0C40 0100 6895          cmp.w     #256,D0
00003DBC  660C      6896          bne.s     DisassembleInstruction_96
                    6897   ; strcpyInstruction("LSL") ;
00003DBE  4879 0000 6898          pea       @m68kde~1_227.L
00003DC2  7478      
00003DC4  4E93      6899          jsr       (A3)
00003DC6  584F      6900          addq.w    #4,A7
00003DC8  600A      6901          bra.s     DisassembleInstruction_97
                    6902   DisassembleInstruction_96:
                    6903   ; else
                    6904   ; strcpyInstruction("LSR") ;
00003DCA  4879 0000 6905          pea       @m68kde~1_228.L
00003DCE  747C      
00003DD0  4E93      6906          jsr       (A3)
00003DD2  584F      6907          addq.w    #4,A7
                    6908   DisassembleInstruction_97:
                    6909   ; // test instruction and direction by testing bits 4,3
                    6910   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003DD4  2042      6911          move.l    D2,A0
00003DD6  3010      6912          move.w    (A0),D0
00003DD8  C07C 0018 6913          and.w     #24,D0
00003DDC  0C40 0018 6914          cmp.w     #24,D0
00003DE0  6624      6915          bne.s     DisassembleInstruction_101
                    6916   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DE2  2042      6917          move.l    D2,A0
00003DE4  3010      6918          move.w    (A0),D0
00003DE6  C07C 0100 6919          and.w     #256,D0
00003DEA  0C40 0100 6920          cmp.w     #256,D0
00003DEE  660C      6921          bne.s     DisassembleInstruction_100
                    6922   ; strcpyInstruction("ROL") ;
00003DF0  4879 0000 6923          pea       @m68kde~1_229.L
00003DF4  7480      
00003DF6  4E93      6924          jsr       (A3)
00003DF8  584F      6925          addq.w    #4,A7
00003DFA  600A      6926          bra.s     DisassembleInstruction_101
                    6927   DisassembleInstruction_100:
                    6928   ; else
                    6929   ; strcpyInstruction("ROR") ;
00003DFC  4879 0000 6930          pea       @m68kde~1_230.L
00003E00  7484      
00003E02  4E93      6931          jsr       (A3)
00003E04  584F      6932          addq.w    #4,A7
                    6933   DisassembleInstruction_101:
                    6934   ; // test instruction and direction by testing bits 4,3
                    6935   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003E06  2042      6936          move.l    D2,A0
00003E08  3010      6937          move.w    (A0),D0
00003E0A  C07C 0018 6938          and.w     #24,D0
00003E0E  0C40 0010 6939          cmp.w     #16,D0
00003E12  6624      6940          bne.s     DisassembleInstruction_105
                    6941   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003E14  2042      6942          move.l    D2,A0
00003E16  3010      6943          move.w    (A0),D0
00003E18  C07C 0100 6944          and.w     #256,D0
00003E1C  0C40 0100 6945          cmp.w     #256,D0
00003E20  660C      6946          bne.s     DisassembleInstruction_104
                    6947   ; strcpyInstruction("ROXL") ;
00003E22  4879 0000 6948          pea       @m68kde~1_231.L
00003E26  7488      
00003E28  4E93      6949          jsr       (A3)
00003E2A  584F      6950          addq.w    #4,A7
00003E2C  600A      6951          bra.s     DisassembleInstruction_105
                    6952   DisassembleInstruction_104:
                    6953   ; else
                    6954   ; strcpyInstruction("ROXR") ;
00003E2E  4879 0000 6955          pea       @m68kde~1_232.L
00003E32  748E      
00003E34  4E93      6956          jsr       (A3)
00003E36  584F      6957          addq.w    #4,A7
                    6958   DisassembleInstruction_105:
                    6959   ; Decode2BitOperandSize(*OpCode) ;
00003E38  2042      6960          move.l    D2,A0
00003E3A  3210      6961          move.w    (A0),D1
00003E3C  C2BC 0000 6962          and.l     #65535,D1
00003E40  FFFF      
00003E42  2F01      6963          move.l    D1,-(A7)
00003E44  4EB8 2E8A 6964          jsr       _Decode2BitOperandSize
00003E48  584F      6965          addq.w    #4,A7
                    6966   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003E4A  2042      6967          move.l    D2,A0
00003E4C  3010      6968          move.w    (A0),D0
00003E4E  C07C 0020 6969          and.w     #32,D0
00003E52  6600 0038 6970          bne       DisassembleInstruction_106
                    6971   ; sprintf(TempString,"#$%X,D%X",
00003E56  2042      6972          move.l    D2,A0
00003E58  3210      6973          move.w    (A0),D1
00003E5A  C27C 0007 6974          and.w     #7,D1
00003E5E  C2BC 0000 6975          and.l     #65535,D1
00003E62  FFFF      
00003E64  2F01      6976          move.l    D1,-(A7)
00003E66  2042      6977          move.l    D2,A0
00003E68  3210      6978          move.w    (A0),D1
00003E6A  E041      6979          asr.w     #8,D1
00003E6C  E241      6980          asr.w     #1,D1
00003E6E  C27C 0007 6981          and.w     #7,D1
00003E72  C2BC 0000 6982          and.l     #65535,D1
00003E76  FFFF      
00003E78  2F01      6983          move.l    D1,-(A7)
00003E7A  4879 0000 6984          pea       @m68kde~1_233.L
00003E7E  7494      
00003E80  2F0C      6985          move.l    A4,-(A7)
00003E82  4E95      6986          jsr       (A5)
00003E84  DEFC 0010 6987          add.w     #16,A7
00003E88  6000 0034 6988          bra       DisassembleInstruction_107
                    6989   DisassembleInstruction_106:
                    6990   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6991   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6992   ; }
                    6993   ; else {                                                                      // if shift is for example ASR D1,D2
                    6994   ; sprintf(TempString,"D%X,D%X",
00003E8C  2042      6995          move.l    D2,A0
00003E8E  3210      6996          move.w    (A0),D1
00003E90  C27C 0007 6997          and.w     #7,D1
00003E94  C2BC 0000 6998          and.l     #65535,D1
00003E98  FFFF      
00003E9A  2F01      6999          move.l    D1,-(A7)
00003E9C  2042      7000          move.l    D2,A0
00003E9E  3210      7001          move.w    (A0),D1
00003EA0  E041      7002          asr.w     #8,D1
00003EA2  E241      7003          asr.w     #1,D1
00003EA4  C27C 0007 7004          and.w     #7,D1
00003EA8  C2BC 0000 7005          and.l     #65535,D1
00003EAC  FFFF      
00003EAE  2F01      7006          move.l    D1,-(A7)
00003EB0  4879 0000 7007          pea       @m68kde~1_221.L
00003EB4  7446      
00003EB6  2F0C      7008          move.l    A4,-(A7)
00003EB8  4E95      7009          jsr       (A5)
00003EBA  DEFC 0010 7010          add.w     #16,A7
                    7011   DisassembleInstruction_107:
                    7012   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7013   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7014   ; }
                    7015   ; strcatInstruction(TempString) ;
00003EBE  2F0C      7016          move.l    A4,-(A7)
00003EC0  4EB8 0CE0 7017          jsr       _strcatInstruction
00003EC4  584F      7018          addq.w    #4,A7
                    7019   DisassembleInstruction_73:
                    7020   ; }
                    7021   ; }
                    7022   ; /////////////////////////////////////////////////////////////////////////////////
                    7023   ; // if instruction is BCC and BSR and BRA
                    7024   ; /////////////////////////////////////////////////////////////////////////////////
                    7025   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003EC6  2042      7026          move.l    D2,A0
00003EC8  3010      7027          move.w    (A0),D0
00003ECA  C07C F000 7028          and.w     #61440,D0
00003ECE  0C40 6000 7029          cmp.w     #24576,D0
00003ED2  6600 00A0 7030          bne       DisassembleInstruction_108
                    7031   ; {
                    7032   ; InstructionSize = 1;
00003ED6  24BC 0000 7033          move.l    #1,(A2)
00003EDA  0001      
                    7034   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003EDC  2042      7035          move.l    D2,A0
00003EDE  3010      7036          move.w    (A0),D0
00003EE0  E040      7037          asr.w     #8,D0
00003EE2  C07C 000F 7038          and.w     #15,D0
00003EE6  1D40 FFE9 7039          move.b    D0,-23(A6)
                    7040   ; strcpyInstruction("B") ;
00003EEA  4879 0000 7041          pea       @m68kde~1_234.L
00003EEE  749E      
00003EF0  4E93      7042          jsr       (A3)
00003EF2  584F      7043          addq.w    #4,A7
                    7044   ; DecodeBranchCondition(Condition) ;
00003EF4  122E FFE9 7045          move.b    -23(A6),D1
00003EF8  C27C 00FF 7046          and.w     #255,D1
00003EFC  C2BC 0000 7047          and.l     #65535,D1
00003F00  FFFF      
00003F02  2F01      7048          move.l    D1,-(A7)
00003F04  4EB8 35DC 7049          jsr       _DecodeBranchCondition
00003F08  584F      7050          addq.w    #4,A7
                    7051   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003F0A  2042      7052          move.l    D2,A0
00003F0C  3010      7053          move.w    (A0),D0
00003F0E  C07C 00FF 7054          and.w     #255,D0
00003F12  1D40 FFFB 7055          move.b    D0,-5(A6)
                    7056   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003F16  102E FFFB 7057          move.b    -5(A6),D0
00003F1A  4880      7058          ext.w     D0
00003F1C  4A40      7059          tst.w     D0
00003F1E  662A      7060          bne.s     DisassembleInstruction_110
                    7061   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003F20  2202      7062          move.l    D2,D1
00003F22  2042      7063          move.l    D2,A0
00003F24  2F00      7064          move.l    D0,-(A7)
00003F26  3028 0002 7065          move.w    2(A0),D0
00003F2A  48C0      7066          ext.l     D0
00003F2C  D280      7067          add.l     D0,D1
00003F2E  201F      7068          move.l    (A7)+,D0
00003F30  5481      7069          addq.l    #2,D1
00003F32  2F01      7070          move.l    D1,-(A7)
00003F34  4879 0000 7071          pea       @m68kde~1_184.L
00003F38  736A      
00003F3A  2F0C      7072          move.l    A4,-(A7)
00003F3C  4E95      7073          jsr       (A5)
00003F3E  DEFC 000C 7074          add.w     #12,A7
                    7075   ; InstructionSize = 2 ;
00003F42  24BC 0000 7076          move.l    #2,(A2)
00003F46  0002      
00003F48  6022      7077          bra.s     DisassembleInstruction_111
                    7078   DisassembleInstruction_110:
                    7079   ; }
                    7080   ; else
                    7081   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003F4A  2202      7082          move.l    D2,D1
00003F4C  2F00      7083          move.l    D0,-(A7)
00003F4E  102E FFFB 7084          move.b    -5(A6),D0
00003F52  4880      7085          ext.w     D0
00003F54  48C0      7086          ext.l     D0
00003F56  D280      7087          add.l     D0,D1
00003F58  201F      7088          move.l    (A7)+,D0
00003F5A  5481      7089          addq.l    #2,D1
00003F5C  2F01      7090          move.l    D1,-(A7)
00003F5E  4879 0000 7091          pea       @m68kde~1_184.L
00003F62  736A      
00003F64  2F0C      7092          move.l    A4,-(A7)
00003F66  4E95      7093          jsr       (A5)
00003F68  DEFC 000C 7094          add.w     #12,A7
                    7095   DisassembleInstruction_111:
                    7096   ; strcatInstruction(TempString) ;
00003F6C  2F0C      7097          move.l    A4,-(A7)
00003F6E  4EB8 0CE0 7098          jsr       _strcatInstruction
00003F72  584F      7099          addq.w    #4,A7
                    7100   DisassembleInstruction_108:
                    7101   ; }
                    7102   ; /////////////////////////////////////////////////////////////////////////////////
                    7103   ; // if instruction is BCHG dn,<EA>
                    7104   ; /////////////////////////////////////////////////////////////////////////////////
                    7105   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003F74  2042      7106          move.l    D2,A0
00003F76  3010      7107          move.w    (A0),D0
00003F78  C07C F1C0 7108          and.w     #61888,D0
00003F7C  0C40 0140 7109          cmp.w     #320,D0
00003F80  6600 004C 7110          bne       DisassembleInstruction_112
                    7111   ; InstructionSize = 1;
00003F84  24BC 0000 7112          move.l    #1,(A2)
00003F88  0001      
                    7113   ; strcpyInstruction("BCHG ") ;
00003F8A  4879 0000 7114          pea       @m68kde~1_235.L
00003F8E  74A0      
00003F90  4E93      7115          jsr       (A3)
00003F92  584F      7116          addq.w    #4,A7
                    7117   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F94  2042      7118          move.l    D2,A0
00003F96  3210      7119          move.w    (A0),D1
00003F98  E041      7120          asr.w     #8,D1
00003F9A  E241      7121          asr.w     #1,D1
00003F9C  C27C 0007 7122          and.w     #7,D1
00003FA0  C2BC 0000 7123          and.l     #65535,D1
00003FA4  FFFF      
00003FA6  2F01      7124          move.l    D1,-(A7)
00003FA8  4879 0000 7125          pea       @m68kde~1_236.L
00003FAC  74A6      
00003FAE  2F0C      7126          move.l    A4,-(A7)
00003FB0  4E95      7127          jsr       (A5)
00003FB2  DEFC 000C 7128          add.w     #12,A7
                    7129   ; strcatInstruction(TempString) ;
00003FB6  2F0C      7130          move.l    A4,-(A7)
00003FB8  4EB8 0CE0 7131          jsr       _strcatInstruction
00003FBC  584F      7132          addq.w    #4,A7
                    7133   ; Decode6BitEA(OpCode,0,0,0) ;
00003FBE  42A7      7134          clr.l     -(A7)
00003FC0  42A7      7135          clr.l     -(A7)
00003FC2  42A7      7136          clr.l     -(A7)
00003FC4  2F02      7137          move.l    D2,-(A7)
00003FC6  4EB8 311E 7138          jsr       _Decode6BitEA
00003FCA  DEFC 0010 7139          add.w     #16,A7
                    7140   DisassembleInstruction_112:
                    7141   ; }
                    7142   ; /////////////////////////////////////////////////////////////////////////////////
                    7143   ; // if instruction is BCHG #data,<EA>
                    7144   ; /////////////////////////////////////////////////////////////////////////////////
                    7145   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003FCE  2042      7146          move.l    D2,A0
00003FD0  3010      7147          move.w    (A0),D0
00003FD2  C07C FFC0 7148          and.w     #65472,D0
00003FD6  0C40 0840 7149          cmp.w     #2112,D0
00003FDA  6600 0044 7150          bne       DisassembleInstruction_114
                    7151   ; strcpyInstruction("BCHG ") ;
00003FDE  4879 0000 7152          pea       @m68kde~1_235.L
00003FE2  74A0      
00003FE4  4E93      7153          jsr       (A3)
00003FE6  584F      7154          addq.w    #4,A7
                    7155   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003FE8  2042      7156          move.l    D2,A0
00003FEA  3228 0002 7157          move.w    2(A0),D1
00003FEE  48C1      7158          ext.l     D1
00003FF0  2F01      7159          move.l    D1,-(A7)
00003FF2  4879 0000 7160          pea       @m68kde~1_237.L
00003FF6  74AC      
00003FF8  2F0C      7161          move.l    A4,-(A7)
00003FFA  4E95      7162          jsr       (A5)
00003FFC  DEFC 000C 7163          add.w     #12,A7
                    7164   ; InstructionSize = 2 ;
00004000  24BC 0000 7165          move.l    #2,(A2)
00004004  0002      
                    7166   ; strcatInstruction(TempString) ;
00004006  2F0C      7167          move.l    A4,-(A7)
00004008  4EB8 0CE0 7168          jsr       _strcatInstruction
0000400C  584F      7169          addq.w    #4,A7
                    7170   ; Decode6BitEA(OpCode,0,1,0) ;
0000400E  42A7      7171          clr.l     -(A7)
00004010  4878 0001 7172          pea       1
00004014  42A7      7173          clr.l     -(A7)
00004016  2F02      7174          move.l    D2,-(A7)
00004018  4EB8 311E 7175          jsr       _Decode6BitEA
0000401C  DEFC 0010 7176          add.w     #16,A7
                    7177   DisassembleInstruction_114:
                    7178   ; }
                    7179   ; /////////////////////////////////////////////////////////////////////////////////
                    7180   ; // if instruction is BCLR  dn,<EA>
                    7181   ; /////////////////////////////////////////////////////////////////////////////////
                    7182   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00004020  2042      7183          move.l    D2,A0
00004022  3010      7184          move.w    (A0),D0
00004024  C07C F1C0 7185          and.w     #61888,D0
00004028  0C40 0180 7186          cmp.w     #384,D0
0000402C  6600 004C 7187          bne       DisassembleInstruction_116
                    7188   ; InstructionSize = 1;
00004030  24BC 0000 7189          move.l    #1,(A2)
00004034  0001      
                    7190   ; strcpyInstruction("BCLR ") ;
00004036  4879 0000 7191          pea       @m68kde~1_238.L
0000403A  74B2      
0000403C  4E93      7192          jsr       (A3)
0000403E  584F      7193          addq.w    #4,A7
                    7194   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004040  2042      7195          move.l    D2,A0
00004042  3210      7196          move.w    (A0),D1
00004044  E041      7197          asr.w     #8,D1
00004046  E241      7198          asr.w     #1,D1
00004048  C27C 0007 7199          and.w     #7,D1
0000404C  C2BC 0000 7200          and.l     #65535,D1
00004050  FFFF      
00004052  2F01      7201          move.l    D1,-(A7)
00004054  4879 0000 7202          pea       @m68kde~1_236.L
00004058  74A6      
0000405A  2F0C      7203          move.l    A4,-(A7)
0000405C  4E95      7204          jsr       (A5)
0000405E  DEFC 000C 7205          add.w     #12,A7
                    7206   ; strcatInstruction(TempString) ;
00004062  2F0C      7207          move.l    A4,-(A7)
00004064  4EB8 0CE0 7208          jsr       _strcatInstruction
00004068  584F      7209          addq.w    #4,A7
                    7210   ; Decode6BitEA(OpCode,0,0,0) ;
0000406A  42A7      7211          clr.l     -(A7)
0000406C  42A7      7212          clr.l     -(A7)
0000406E  42A7      7213          clr.l     -(A7)
00004070  2F02      7214          move.l    D2,-(A7)
00004072  4EB8 311E 7215          jsr       _Decode6BitEA
00004076  DEFC 0010 7216          add.w     #16,A7
                    7217   DisassembleInstruction_116:
                    7218   ; }
                    7219   ; /////////////////////////////////////////////////////////////////////////////////
                    7220   ; // if instruction is BCLR #data,<EA>
                    7221   ; /////////////////////////////////////////////////////////////////////////////////
                    7222   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000407A  2042      7223          move.l    D2,A0
0000407C  3010      7224          move.w    (A0),D0
0000407E  C07C FFC0 7225          and.w     #65472,D0
00004082  0C40 0880 7226          cmp.w     #2176,D0
00004086  6600 0044 7227          bne       DisassembleInstruction_118
                    7228   ; strcpyInstruction("BCLR ") ;
0000408A  4879 0000 7229          pea       @m68kde~1_238.L
0000408E  74B2      
00004090  4E93      7230          jsr       (A3)
00004092  584F      7231          addq.w    #4,A7
                    7232   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004094  2042      7233          move.l    D2,A0
00004096  3228 0002 7234          move.w    2(A0),D1
0000409A  48C1      7235          ext.l     D1
0000409C  2F01      7236          move.l    D1,-(A7)
0000409E  4879 0000 7237          pea       @m68kde~1_237.L
000040A2  74AC      
000040A4  2F0C      7238          move.l    A4,-(A7)
000040A6  4E95      7239          jsr       (A5)
000040A8  DEFC 000C 7240          add.w     #12,A7
                    7241   ; InstructionSize = 2 ;
000040AC  24BC 0000 7242          move.l    #2,(A2)
000040B0  0002      
                    7243   ; strcatInstruction(TempString) ;
000040B2  2F0C      7244          move.l    A4,-(A7)
000040B4  4EB8 0CE0 7245          jsr       _strcatInstruction
000040B8  584F      7246          addq.w    #4,A7
                    7247   ; Decode6BitEA(OpCode,0,1,0) ;
000040BA  42A7      7248          clr.l     -(A7)
000040BC  4878 0001 7249          pea       1
000040C0  42A7      7250          clr.l     -(A7)
000040C2  2F02      7251          move.l    D2,-(A7)
000040C4  4EB8 311E 7252          jsr       _Decode6BitEA
000040C8  DEFC 0010 7253          add.w     #16,A7
                    7254   DisassembleInstruction_118:
                    7255   ; }
                    7256   ; /////////////////////////////////////////////////////////////////////////////////
                    7257   ; // if instruction is BSET dn,<EA>
                    7258   ; /////////////////////////////////////////////////////////////////////////////////
                    7259   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
000040CC  2042      7260          move.l    D2,A0
000040CE  3010      7261          move.w    (A0),D0
000040D0  C07C F1C0 7262          and.w     #61888,D0
000040D4  0C40 01C0 7263          cmp.w     #448,D0
000040D8  6600 004C 7264          bne       DisassembleInstruction_120
                    7265   ; InstructionSize = 1;
000040DC  24BC 0000 7266          move.l    #1,(A2)
000040E0  0001      
                    7267   ; strcpyInstruction("BSET ") ;
000040E2  4879 0000 7268          pea       @m68kde~1_239.L
000040E6  74B8      
000040E8  4E93      7269          jsr       (A3)
000040EA  584F      7270          addq.w    #4,A7
                    7271   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000040EC  2042      7272          move.l    D2,A0
000040EE  3210      7273          move.w    (A0),D1
000040F0  E041      7274          asr.w     #8,D1
000040F2  E241      7275          asr.w     #1,D1
000040F4  C27C 0007 7276          and.w     #7,D1
000040F8  C2BC 0000 7277          and.l     #65535,D1
000040FC  FFFF      
000040FE  2F01      7278          move.l    D1,-(A7)
00004100  4879 0000 7279          pea       @m68kde~1_236.L
00004104  74A6      
00004106  2F0C      7280          move.l    A4,-(A7)
00004108  4E95      7281          jsr       (A5)
0000410A  DEFC 000C 7282          add.w     #12,A7
                    7283   ; strcatInstruction(TempString) ;
0000410E  2F0C      7284          move.l    A4,-(A7)
00004110  4EB8 0CE0 7285          jsr       _strcatInstruction
00004114  584F      7286          addq.w    #4,A7
                    7287   ; Decode6BitEA(OpCode,0,0,0) ;
00004116  42A7      7288          clr.l     -(A7)
00004118  42A7      7289          clr.l     -(A7)
0000411A  42A7      7290          clr.l     -(A7)
0000411C  2F02      7291          move.l    D2,-(A7)
0000411E  4EB8 311E 7292          jsr       _Decode6BitEA
00004122  DEFC 0010 7293          add.w     #16,A7
                    7294   DisassembleInstruction_120:
                    7295   ; }
                    7296   ; /////////////////////////////////////////////////////////////////////////////////
                    7297   ; // if instruction is BSET #data,<EA>
                    7298   ; /////////////////////////////////////////////////////////////////////////////////
                    7299   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004126  2042      7300          move.l    D2,A0
00004128  3010      7301          move.w    (A0),D0
0000412A  C07C FFC0 7302          and.w     #65472,D0
0000412E  0C40 08C0 7303          cmp.w     #2240,D0
00004132  6600 0044 7304          bne       DisassembleInstruction_122
                    7305   ; strcpyInstruction("BSET ") ;
00004136  4879 0000 7306          pea       @m68kde~1_239.L
0000413A  74B8      
0000413C  4E93      7307          jsr       (A3)
0000413E  584F      7308          addq.w    #4,A7
                    7309   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004140  2042      7310          move.l    D2,A0
00004142  3228 0002 7311          move.w    2(A0),D1
00004146  48C1      7312          ext.l     D1
00004148  2F01      7313          move.l    D1,-(A7)
0000414A  4879 0000 7314          pea       @m68kde~1_237.L
0000414E  74AC      
00004150  2F0C      7315          move.l    A4,-(A7)
00004152  4E95      7316          jsr       (A5)
00004154  DEFC 000C 7317          add.w     #12,A7
                    7318   ; InstructionSize = 2 ;
00004158  24BC 0000 7319          move.l    #2,(A2)
0000415C  0002      
                    7320   ; strcatInstruction(TempString) ;
0000415E  2F0C      7321          move.l    A4,-(A7)
00004160  4EB8 0CE0 7322          jsr       _strcatInstruction
00004164  584F      7323          addq.w    #4,A7
                    7324   ; Decode6BitEA(OpCode,0,1,0) ;
00004166  42A7      7325          clr.l     -(A7)
00004168  4878 0001 7326          pea       1
0000416C  42A7      7327          clr.l     -(A7)
0000416E  2F02      7328          move.l    D2,-(A7)
00004170  4EB8 311E 7329          jsr       _Decode6BitEA
00004174  DEFC 0010 7330          add.w     #16,A7
                    7331   DisassembleInstruction_122:
                    7332   ; }
                    7333   ; /////////////////////////////////////////////////////////////////////////////////
                    7334   ; // if instruction is BTST dn,<EA>
                    7335   ; /////////////////////////////////////////////////////////////////////////////////
                    7336   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00004178  2042      7337          move.l    D2,A0
0000417A  3010      7338          move.w    (A0),D0
0000417C  C07C F1C0 7339          and.w     #61888,D0
00004180  0C40 0100 7340          cmp.w     #256,D0
00004184  6600 004C 7341          bne       DisassembleInstruction_124
                    7342   ; InstructionSize = 1;
00004188  24BC 0000 7343          move.l    #1,(A2)
0000418C  0001      
                    7344   ; strcpyInstruction("BTST ") ;
0000418E  4879 0000 7345          pea       @m68kde~1_240.L
00004192  74BE      
00004194  4E93      7346          jsr       (A3)
00004196  584F      7347          addq.w    #4,A7
                    7348   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004198  2042      7349          move.l    D2,A0
0000419A  3210      7350          move.w    (A0),D1
0000419C  E041      7351          asr.w     #8,D1
0000419E  E241      7352          asr.w     #1,D1
000041A0  C27C 0007 7353          and.w     #7,D1
000041A4  C2BC 0000 7354          and.l     #65535,D1
000041A8  FFFF      
000041AA  2F01      7355          move.l    D1,-(A7)
000041AC  4879 0000 7356          pea       @m68kde~1_236.L
000041B0  74A6      
000041B2  2F0C      7357          move.l    A4,-(A7)
000041B4  4E95      7358          jsr       (A5)
000041B6  DEFC 000C 7359          add.w     #12,A7
                    7360   ; strcatInstruction(TempString) ;
000041BA  2F0C      7361          move.l    A4,-(A7)
000041BC  4EB8 0CE0 7362          jsr       _strcatInstruction
000041C0  584F      7363          addq.w    #4,A7
                    7364   ; Decode6BitEA(OpCode,0,0,0) ;
000041C2  42A7      7365          clr.l     -(A7)
000041C4  42A7      7366          clr.l     -(A7)
000041C6  42A7      7367          clr.l     -(A7)
000041C8  2F02      7368          move.l    D2,-(A7)
000041CA  4EB8 311E 7369          jsr       _Decode6BitEA
000041CE  DEFC 0010 7370          add.w     #16,A7
                    7371   DisassembleInstruction_124:
                    7372   ; }
                    7373   ; /////////////////////////////////////////////////////////////////////////////////
                    7374   ; // if instruction is BTST #data,<EA>
                    7375   ; /////////////////////////////////////////////////////////////////////////////////
                    7376   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000041D2  2042      7377          move.l    D2,A0
000041D4  3010      7378          move.w    (A0),D0
000041D6  C07C FFC0 7379          and.w     #65472,D0
000041DA  0C40 0800 7380          cmp.w     #2048,D0
000041DE  6600 0044 7381          bne       DisassembleInstruction_126
                    7382   ; strcpyInstruction("BTST ") ;
000041E2  4879 0000 7383          pea       @m68kde~1_240.L
000041E6  74BE      
000041E8  4E93      7384          jsr       (A3)
000041EA  584F      7385          addq.w    #4,A7
                    7386   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000041EC  2042      7387          move.l    D2,A0
000041EE  3228 0002 7388          move.w    2(A0),D1
000041F2  48C1      7389          ext.l     D1
000041F4  2F01      7390          move.l    D1,-(A7)
000041F6  4879 0000 7391          pea       @m68kde~1_237.L
000041FA  74AC      
000041FC  2F0C      7392          move.l    A4,-(A7)
000041FE  4E95      7393          jsr       (A5)
00004200  DEFC 000C 7394          add.w     #12,A7
                    7395   ; InstructionSize = 2 ;
00004204  24BC 0000 7396          move.l    #2,(A2)
00004208  0002      
                    7397   ; strcatInstruction(TempString) ;
0000420A  2F0C      7398          move.l    A4,-(A7)
0000420C  4EB8 0CE0 7399          jsr       _strcatInstruction
00004210  584F      7400          addq.w    #4,A7
                    7401   ; Decode6BitEA(OpCode,0,1,0) ;
00004212  42A7      7402          clr.l     -(A7)
00004214  4878 0001 7403          pea       1
00004218  42A7      7404          clr.l     -(A7)
0000421A  2F02      7405          move.l    D2,-(A7)
0000421C  4EB8 311E 7406          jsr       _Decode6BitEA
00004220  DEFC 0010 7407          add.w     #16,A7
                    7408   DisassembleInstruction_126:
                    7409   ; }
                    7410   ; /////////////////////////////////////////////////////////////////////////////////
                    7411   ; // if instruction is CHK.W <EA>,DN
                    7412   ; /////////////////////////////////////////////////////////////////////////////////
                    7413   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004224  2042      7414          move.l    D2,A0
00004226  3010      7415          move.w    (A0),D0
00004228  C07C F1C0 7416          and.w     #61888,D0
0000422C  0C40 4180 7417          cmp.w     #16768,D0
00004230  6600 004C 7418          bne       DisassembleInstruction_128
                    7419   ; InstructionSize = 1;
00004234  24BC 0000 7420          move.l    #1,(A2)
00004238  0001      
                    7421   ; strcpyInstruction("CHK ") ;
0000423A  4879 0000 7422          pea       @m68kde~1_241.L
0000423E  74C4      
00004240  4E93      7423          jsr       (A3)
00004242  584F      7424          addq.w    #4,A7
                    7425   ; Decode6BitEA(OpCode,0,0,0) ;
00004244  42A7      7426          clr.l     -(A7)
00004246  42A7      7427          clr.l     -(A7)
00004248  42A7      7428          clr.l     -(A7)
0000424A  2F02      7429          move.l    D2,-(A7)
0000424C  4EB8 311E 7430          jsr       _Decode6BitEA
00004250  DEFC 0010 7431          add.w     #16,A7
                    7432   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004254  2042      7433          move.l    D2,A0
00004256  3210      7434          move.w    (A0),D1
00004258  E041      7435          asr.w     #8,D1
0000425A  E241      7436          asr.w     #1,D1
0000425C  C27C 0007 7437          and.w     #7,D1
00004260  C2BC 0000 7438          and.l     #65535,D1
00004264  FFFF      
00004266  2F01      7439          move.l    D1,-(A7)
00004268  4879 0000 7440          pea       @m68kde~1_242.L
0000426C  74CA      
0000426E  2F0C      7441          move.l    A4,-(A7)
00004270  4E95      7442          jsr       (A5)
00004272  DEFC 000C 7443          add.w     #12,A7
                    7444   ; strcatInstruction(TempString) ;
00004276  2F0C      7445          move.l    A4,-(A7)
00004278  4EB8 0CE0 7446          jsr       _strcatInstruction
0000427C  584F      7447          addq.w    #4,A7
                    7448   DisassembleInstruction_128:
                    7449   ; }
                    7450   ; /////////////////////////////////////////////////////////////////////////////////
                    7451   ; // if instruction is CLR <EA>
                    7452   ; /////////////////////////////////////////////////////////////////////////////////
                    7453   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
0000427E  2042      7454          move.l    D2,A0
00004280  3010      7455          move.w    (A0),D0
00004282  C07C FF00 7456          and.w     #65280,D0
00004286  0C40 4200 7457          cmp.w     #16896,D0
0000428A  6600 0034 7458          bne       DisassembleInstruction_130
                    7459   ; InstructionSize = 1;
0000428E  24BC 0000 7460          move.l    #1,(A2)
00004292  0001      
                    7461   ; strcpyInstruction("CLR") ;
00004294  4879 0000 7462          pea       @m68kde~1_243.L
00004298  74D0      
0000429A  4E93      7463          jsr       (A3)
0000429C  584F      7464          addq.w    #4,A7
                    7465   ; Decode2BitOperandSize(*OpCode) ;
0000429E  2042      7466          move.l    D2,A0
000042A0  3210      7467          move.w    (A0),D1
000042A2  C2BC 0000 7468          and.l     #65535,D1
000042A6  FFFF      
000042A8  2F01      7469          move.l    D1,-(A7)
000042AA  4EB8 2E8A 7470          jsr       _Decode2BitOperandSize
000042AE  584F      7471          addq.w    #4,A7
                    7472   ; Decode6BitEA(OpCode,0,0,0) ;
000042B0  42A7      7473          clr.l     -(A7)
000042B2  42A7      7474          clr.l     -(A7)
000042B4  42A7      7475          clr.l     -(A7)
000042B6  2F02      7476          move.l    D2,-(A7)
000042B8  4EB8 311E 7477          jsr       _Decode6BitEA
000042BC  DEFC 0010 7478          add.w     #16,A7
                    7479   DisassembleInstruction_130:
                    7480   ; }
                    7481   ; /////////////////////////////////////////////////////////////////////////////////
                    7482   ; // if instruction is CMP, CMPA
                    7483   ; /////////////////////////////////////////////////////////////////////////////////
                    7484   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000042C0  2042      7485          move.l    D2,A0
000042C2  3010      7486          move.w    (A0),D0
000042C4  C07C F000 7487          and.w     #61440,D0
000042C8  0C40 B000 7488          cmp.w     #45056,D0
000042CC  6600 008C 7489          bne       DisassembleInstruction_135
                    7490   ; {
                    7491   ; InstructionSize = 1;
000042D0  24BC 0000 7492          move.l    #1,(A2)
000042D4  0001      
                    7493   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000042D6  2042      7494          move.l    D2,A0
000042D8  3010      7495          move.w    (A0),D0
000042DA  EC40      7496          asr.w     #6,D0
000042DC  C07C 0007 7497          and.w     #7,D0
000042E0  3600      7498          move.w    D0,D3
                    7499   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000042E2  0C43 0003 7500          cmp.w     #3,D3
000042E6  6708      7501          beq.s     DisassembleInstruction_136
000042E8  0C43 0007 7502          cmp.w     #7,D3
000042EC  6600 005A 7503          bne       DisassembleInstruction_134
                    7504   DisassembleInstruction_136:
                    7505   ; if(OpMode == (unsigned short int)(0x0003))
000042F0  0C43 0003 7506          cmp.w     #3,D3
000042F4  660C      7507          bne.s     DisassembleInstruction_137
                    7508   ; strcpyInstruction("CMPA.W ") ;
000042F6  4879 0000 7509          pea       @m68kde~1_244.L
000042FA  74D4      
000042FC  4E93      7510          jsr       (A3)
000042FE  584F      7511          addq.w    #4,A7
00004300  600A      7512          bra.s     DisassembleInstruction_138
                    7513   DisassembleInstruction_137:
                    7514   ; else
                    7515   ; strcpyInstruction("CMPA.L ") ;
00004302  4879 0000 7516          pea       @m68kde~1_245.L
00004306  74DC      
00004308  4E93      7517          jsr       (A3)
0000430A  584F      7518          addq.w    #4,A7
                    7519   DisassembleInstruction_138:
                    7520   ; Decode6BitEA(OpCode,0,0,0) ;
0000430C  42A7      7521          clr.l     -(A7)
0000430E  42A7      7522          clr.l     -(A7)
00004310  42A7      7523          clr.l     -(A7)
00004312  2F02      7524          move.l    D2,-(A7)
00004314  4EB8 311E 7525          jsr       _Decode6BitEA
00004318  DEFC 0010 7526          add.w     #16,A7
                    7527   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
0000431C  2042      7528          move.l    D2,A0
0000431E  3210      7529          move.w    (A0),D1
00004320  E041      7530          asr.w     #8,D1
00004322  E241      7531          asr.w     #1,D1
00004324  C27C 0007 7532          and.w     #7,D1
00004328  C2BC 0000 7533          and.l     #65535,D1
0000432C  FFFF      
0000432E  2F01      7534          move.l    D1,-(A7)
00004330  4879 0000 7535          pea       @m68kde~1_246.L
00004334  74E4      
00004336  2F0C      7536          move.l    A4,-(A7)
00004338  4E95      7537          jsr       (A5)
0000433A  DEFC 000C 7538          add.w     #12,A7
                    7539   ; strcatInstruction(TempString) ;
0000433E  2F0C      7540          move.l    A4,-(A7)
00004340  4EB8 0CE0 7541          jsr       _strcatInstruction
00004344  584F      7542          addq.w    #4,A7
00004346  6012      7543          bra.s     DisassembleInstruction_135
                    7544   DisassembleInstruction_134:
                    7545   ; }
                    7546   ; else {
                    7547   ; strcpyInstruction("CMP") ;
00004348  4879 0000 7548          pea       @m68kde~1_247.L
0000434C  74EA      
0000434E  4E93      7549          jsr       (A3)
00004350  584F      7550          addq.w    #4,A7
                    7551   ; Decode3BitOperandMode(OpCode) ;
00004352  2F02      7552          move.l    D2,-(A7)
00004354  4EB8 3546 7553          jsr       _Decode3BitOperandMode
00004358  584F      7554          addq.w    #4,A7
                    7555   DisassembleInstruction_135:
                    7556   ; }
                    7557   ; }
                    7558   ; /////////////////////////////////////////////////////////////////////////////////
                    7559   ; // if instruction is CMPM
                    7560   ; /////////////////////////////////////////////////////////////////////////////////
                    7561   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
0000435A  2042      7562          move.l    D2,A0
0000435C  3010      7563          move.w    (A0),D0
0000435E  C07C F138 7564          and.w     #61752,D0
00004362  0C40 B108 7565          cmp.w     #45320,D0
00004366  6600 007A 7566          bne       DisassembleInstruction_141
                    7567   ; {
                    7568   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000436A  2042      7569          move.l    D2,A0
0000436C  3010      7570          move.w    (A0),D0
0000436E  EC40      7571          asr.w     #6,D0
00004370  C07C 0003 7572          and.w     #3,D0
00004374  3600      7573          move.w    D0,D3
                    7574   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004376  0C43 0000 7575          cmp.w     #0,D3
0000437A  6500 0066 7576          blo       DisassembleInstruction_141
0000437E  0C43 0002 7577          cmp.w     #2,D3
00004382  6200 005E 7578          bhi       DisassembleInstruction_141
                    7579   ; {
                    7580   ; InstructionSize = 1;
00004386  24BC 0000 7581          move.l    #1,(A2)
0000438A  0001      
                    7582   ; strcpyInstruction("CMPM") ;
0000438C  4879 0000 7583          pea       @m68kde~1_248.L
00004390  74EE      
00004392  4E93      7584          jsr       (A3)
00004394  584F      7585          addq.w    #4,A7
                    7586   ; Decode2BitOperandSize(*OpCode) ;
00004396  2042      7587          move.l    D2,A0
00004398  3210      7588          move.w    (A0),D1
0000439A  C2BC 0000 7589          and.l     #65535,D1
0000439E  FFFF      
000043A0  2F01      7590          move.l    D1,-(A7)
000043A2  4EB8 2E8A 7591          jsr       _Decode2BitOperandSize
000043A6  584F      7592          addq.w    #4,A7
                    7593   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000043A8  2042      7594          move.l    D2,A0
000043AA  3210      7595          move.w    (A0),D1
000043AC  E041      7596          asr.w     #8,D1
000043AE  E241      7597          asr.w     #1,D1
000043B0  C27C 0007 7598          and.w     #7,D1
000043B4  C2BC 0000 7599          and.l     #65535,D1
000043B8  FFFF      
000043BA  2F01      7600          move.l    D1,-(A7)
000043BC  2042      7601          move.l    D2,A0
000043BE  3210      7602          move.w    (A0),D1
000043C0  C27C 0007 7603          and.w     #7,D1
000043C4  C2BC 0000 7604          and.l     #65535,D1
000043C8  FFFF      
000043CA  2F01      7605          move.l    D1,-(A7)
000043CC  4879 0000 7606          pea       @m68kde~1_249.L
000043D0  74F4      
000043D2  2F0C      7607          move.l    A4,-(A7)
000043D4  4E95      7608          jsr       (A5)
000043D6  DEFC 0010 7609          add.w     #16,A7
                    7610   ; strcatInstruction(TempString) ;
000043DA  2F0C      7611          move.l    A4,-(A7)
000043DC  4EB8 0CE0 7612          jsr       _strcatInstruction
000043E0  584F      7613          addq.w    #4,A7
                    7614   DisassembleInstruction_141:
                    7615   ; }
                    7616   ; }
                    7617   ; /////////////////////////////////////////////////////////////////////////////////
                    7618   ; // if instruction is DBCC
                    7619   ; /////////////////////////////////////////////////////////////////////////////////
                    7620   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000043E2  2042      7621          move.l    D2,A0
000043E4  3010      7622          move.w    (A0),D0
000043E6  C07C F0F8 7623          and.w     #61688,D0
000043EA  0C40 50C8 7624          cmp.w     #20680,D0
000043EE  6600 0084 7625          bne       DisassembleInstruction_143
                    7626   ; {
                    7627   ; InstructionSize = 2;
000043F2  24BC 0000 7628          move.l    #2,(A2)
000043F6  0002      
                    7629   ; strcpy(Instruction,"DB") ;
000043F8  4879 0000 7630          pea       @m68kde~1_250.L
000043FC  7502      
000043FE  4879 0803 7631          pea       _Instruction.L
00004402  04E2      
00004404  4EB9 0000 7632          jsr       _strcpy
00004408  55D4      
0000440A  504F      7633          addq.w    #8,A7
                    7634   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000440C  2042      7635          move.l    D2,A0
0000440E  3010      7636          move.w    (A0),D0
00004410  E040      7637          asr.w     #8,D0
00004412  C07C 000F 7638          and.w     #15,D0
00004416  1D40 FFE9 7639          move.b    D0,-23(A6)
                    7640   ; DecodeBranchCondition(Condition) ;
0000441A  122E FFE9 7641          move.b    -23(A6),D1
0000441E  C27C 00FF 7642          and.w     #255,D1
00004422  C2BC 0000 7643          and.l     #65535,D1
00004426  FFFF      
00004428  2F01      7644          move.l    D1,-(A7)
0000442A  4EB8 35DC 7645          jsr       _DecodeBranchCondition
0000442E  584F      7646          addq.w    #4,A7
                    7647   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004430  2202      7648          move.l    D2,D1
00004432  2042      7649          move.l    D2,A0
00004434  2F00      7650          move.l    D0,-(A7)
00004436  3028 0002 7651          move.w    2(A0),D0
0000443A  48C0      7652          ext.l     D0
0000443C  D280      7653          add.l     D0,D1
0000443E  201F      7654          move.l    (A7)+,D0
00004440  5481      7655          addq.l    #2,D1
00004442  2F01      7656          move.l    D1,-(A7)
00004444  2042      7657          move.l    D2,A0
00004446  3228 0002 7658          move.w    2(A0),D1
0000444A  48C1      7659          ext.l     D1
0000444C  2F01      7660          move.l    D1,-(A7)
0000444E  2042      7661          move.l    D2,A0
00004450  3210      7662          move.w    (A0),D1
00004452  C27C 0007 7663          and.w     #7,D1
00004456  C2BC 0000 7664          and.l     #65535,D1
0000445A  FFFF      
0000445C  2F01      7665          move.l    D1,-(A7)
0000445E  4879 0000 7666          pea       @m68kde~1_251.L
00004462  7506      
00004464  2F0C      7667          move.l    A4,-(A7)
00004466  4E95      7668          jsr       (A5)
00004468  DEFC 0014 7669          add.w     #20,A7
                    7670   ; strcatInstruction(TempString) ;
0000446C  2F0C      7671          move.l    A4,-(A7)
0000446E  4EB8 0CE0 7672          jsr       _strcatInstruction
00004472  584F      7673          addq.w    #4,A7
                    7674   DisassembleInstruction_143:
                    7675   ; }
                    7676   ; /////////////////////////////////////////////////////////////////////////////////
                    7677   ; // if instruction is DIVS
                    7678   ; /////////////////////////////////////////////////////////////////////////////////
                    7679   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004474  2042      7680          move.l    D2,A0
00004476  3010      7681          move.w    (A0),D0
00004478  C07C F1C0 7682          and.w     #61888,D0
0000447C  0C40 81C0 7683          cmp.w     #33216,D0
00004480  6600 004A 7684          bne       DisassembleInstruction_145
                    7685   ; {
                    7686   ; InstructionSize = 1;
00004484  24BC 0000 7687          move.l    #1,(A2)
00004488  0001      
                    7688   ; strcpy(Instruction,"DIVS ") ;
0000448A  4879 0000 7689          pea       @m68kde~1_252.L
0000448E  751E      
00004490  4879 0803 7690          pea       _Instruction.L
00004494  04E2      
00004496  4EB9 0000 7691          jsr       _strcpy
0000449A  55D4      
0000449C  504F      7692          addq.w    #8,A7
                    7693   ; Decode6BitEA(OpCode,0,0,0) ;
0000449E  42A7      7694          clr.l     -(A7)
000044A0  42A7      7695          clr.l     -(A7)
000044A2  42A7      7696          clr.l     -(A7)
000044A4  2F02      7697          move.l    D2,-(A7)
000044A6  4EB8 311E 7698          jsr       _Decode6BitEA
000044AA  DEFC 0010 7699          add.w     #16,A7
                    7700   ; strcatInstruction(",") ;
000044AE  4879 0000 7701          pea       @m68kde~1_187.L
000044B2  737E      
000044B4  4EB8 0CE0 7702          jsr       _strcatInstruction
000044B8  584F      7703          addq.w    #4,A7
                    7704   ; Decode3BitDataRegister(*OpCode) ;
000044BA  2042      7705          move.l    D2,A0
000044BC  3210      7706          move.w    (A0),D1
000044BE  C2BC 0000 7707          and.l     #65535,D1
000044C2  FFFF      
000044C4  2F01      7708          move.l    D1,-(A7)
000044C6  4EB8 2EE6 7709          jsr       _Decode3BitDataRegister
000044CA  584F      7710          addq.w    #4,A7
                    7711   DisassembleInstruction_145:
                    7712   ; }
                    7713   ; /////////////////////////////////////////////////////////////////////////////////
                    7714   ; // if instruction is DIVU
                    7715   ; /////////////////////////////////////////////////////////////////////////////////
                    7716   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000044CC  2042      7717          move.l    D2,A0
000044CE  3010      7718          move.w    (A0),D0
000044D0  C07C F1C0 7719          and.w     #61888,D0
000044D4  0C40 80C0 7720          cmp.w     #32960,D0
000044D8  6600 004A 7721          bne       DisassembleInstruction_147
                    7722   ; {
                    7723   ; InstructionSize = 1;
000044DC  24BC 0000 7724          move.l    #1,(A2)
000044E0  0001      
                    7725   ; strcpy(Instruction,"DIVU ") ;
000044E2  4879 0000 7726          pea       @m68kde~1_253.L
000044E6  7524      
000044E8  4879 0803 7727          pea       _Instruction.L
000044EC  04E2      
000044EE  4EB9 0000 7728          jsr       _strcpy
000044F2  55D4      
000044F4  504F      7729          addq.w    #8,A7
                    7730   ; Decode6BitEA(OpCode,0,0,0) ;
000044F6  42A7      7731          clr.l     -(A7)
000044F8  42A7      7732          clr.l     -(A7)
000044FA  42A7      7733          clr.l     -(A7)
000044FC  2F02      7734          move.l    D2,-(A7)
000044FE  4EB8 311E 7735          jsr       _Decode6BitEA
00004502  DEFC 0010 7736          add.w     #16,A7
                    7737   ; strcatInstruction(",") ;
00004506  4879 0000 7738          pea       @m68kde~1_187.L
0000450A  737E      
0000450C  4EB8 0CE0 7739          jsr       _strcatInstruction
00004510  584F      7740          addq.w    #4,A7
                    7741   ; Decode3BitDataRegister(*OpCode) ;
00004512  2042      7742          move.l    D2,A0
00004514  3210      7743          move.w    (A0),D1
00004516  C2BC 0000 7744          and.l     #65535,D1
0000451A  FFFF      
0000451C  2F01      7745          move.l    D1,-(A7)
0000451E  4EB8 2EE6 7746          jsr       _Decode3BitDataRegister
00004522  584F      7747          addq.w    #4,A7
                    7748   DisassembleInstruction_147:
                    7749   ; }
                    7750   ; /////////////////////////////////////////////////////////////////////////////////
                    7751   ; // if instruction is EOR
                    7752   ; /////////////////////////////////////////////////////////////////////////////////
                    7753   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004524  2042      7754          move.l    D2,A0
00004526  3010      7755          move.w    (A0),D0
00004528  C07C F000 7756          and.w     #61440,D0
0000452C  0C40 B000 7757          cmp.w     #45056,D0
00004530  6600 004A 7758          bne       DisassembleInstruction_151
                    7759   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004534  2042      7760          move.l    D2,A0
00004536  3010      7761          move.w    (A0),D0
00004538  EC40      7762          asr.w     #6,D0
0000453A  C07C 0007 7763          and.w     #7,D0
0000453E  3600      7764          move.w    D0,D3
                    7765   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004540  2042      7766          move.l    D2,A0
00004542  3010      7767          move.w    (A0),D0
00004544  E640      7768          asr.w     #3,D0
00004546  C07C 0007 7769          and.w     #7,D0
0000454A  3D40 FFEC 7770          move.w    D0,-20(A6)
                    7771   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
0000454E  0C43 0004 7772          cmp.w     #4,D3
00004552  6528      7773          blo.s     DisassembleInstruction_151
00004554  0C43 0006 7774          cmp.w     #6,D3
00004558  6222      7775          bhi.s     DisassembleInstruction_151
0000455A  302E FFEC 7776          move.w    -20(A6),D0
0000455E  0C40 0001 7777          cmp.w     #1,D0
00004562  6718      7778          beq.s     DisassembleInstruction_151
                    7779   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7780   ; (EAMode != (unsigned short int)(0x0001)))
                    7781   ; {
                    7782   ; InstructionSize = 1;
00004564  24BC 0000 7783          move.l    #1,(A2)
00004568  0001      
                    7784   ; strcpyInstruction("EOR") ;
0000456A  4879 0000 7785          pea       @m68kde~1_254.L
0000456E  752A      
00004570  4E93      7786          jsr       (A3)
00004572  584F      7787          addq.w    #4,A7
                    7788   ; Decode3BitOperandMode(OpCode);
00004574  2F02      7789          move.l    D2,-(A7)
00004576  4EB8 3546 7790          jsr       _Decode3BitOperandMode
0000457A  584F      7791          addq.w    #4,A7
                    7792   DisassembleInstruction_151:
                    7793   ; }
                    7794   ; }
                    7795   ; /////////////////////////////////////////////////////////////////////////////////
                    7796   ; // if instruction is EOR to CCR
                    7797   ; /////////////////////////////////////////////////////////////////////////////////
                    7798   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000457C  2042      7799          move.l    D2,A0
0000457E  3010      7800          move.w    (A0),D0
00004580  0C40 0A3C 7801          cmp.w     #2620,D0
00004584  662C      7802          bne.s     DisassembleInstruction_153
                    7803   ; InstructionSize = 1;
00004586  24BC 0000 7804          move.l    #1,(A2)
0000458A  0001      
                    7805   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000458C  2042      7806          move.l    D2,A0
0000458E  3228 0002 7807          move.w    2(A0),D1
00004592  C27C 00FF 7808          and.w     #255,D1
00004596  C2BC 0000 7809          and.l     #65535,D1
0000459A  FFFF      
0000459C  2F01      7810          move.l    D1,-(A7)
0000459E  4879 0000 7811          pea       @m68kde~1_255.L
000045A2  752E      
000045A4  4879 0803 7812          pea       _Instruction.L
000045A8  04E2      
000045AA  4E95      7813          jsr       (A5)
000045AC  DEFC 000C 7814          add.w     #12,A7
                    7815   ; InstructionSize += 1;
000045B0  5292      7816          addq.l    #1,(A2)
                    7817   DisassembleInstruction_153:
                    7818   ; }
                    7819   ; /////////////////////////////////////////////////////////////////////////////////
                    7820   ; // if instruction is EORI #data,SR
                    7821   ; /////////////////////////////////////////////////////////////////////////////////
                    7822   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000045B2  2042      7823          move.l    D2,A0
000045B4  3010      7824          move.w    (A0),D0
000045B6  0C40 0A7C 7825          cmp.w     #2684,D0
000045BA  6622      7826          bne.s     DisassembleInstruction_155
                    7827   ; InstructionSize = 2;
000045BC  24BC 0000 7828          move.l    #2,(A2)
000045C0  0002      
                    7829   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000045C2  2042      7830          move.l    D2,A0
000045C4  3228 0002 7831          move.w    2(A0),D1
000045C8  48C1      7832          ext.l     D1
000045CA  2F01      7833          move.l    D1,-(A7)
000045CC  4879 0000 7834          pea       @m68kde~1_256.L
000045D0  753E      
000045D2  4879 0803 7835          pea       _Instruction.L
000045D6  04E2      
000045D8  4E95      7836          jsr       (A5)
000045DA  DEFC 000C 7837          add.w     #12,A7
                    7838   DisassembleInstruction_155:
                    7839   ; }
                    7840   ; /////////////////////////////////////////////////////////////////////////////////
                    7841   ; // if instruction is EXG
                    7842   ; /////////////////////////////////////////////////////////////////////////////////
                    7843   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000045DE  2042      7844          move.l    D2,A0
000045E0  3010      7845          move.w    (A0),D0
000045E2  C07C F100 7846          and.w     #61696,D0
000045E6  0C40 C100 7847          cmp.w     #49408,D0
000045EA  6600 00E0 7848          bne       DisassembleInstruction_163
                    7849   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000045EE  2042      7850          move.l    D2,A0
000045F0  3010      7851          move.w    (A0),D0
000045F2  E040      7852          asr.w     #8,D0
000045F4  E240      7853          asr.w     #1,D0
000045F6  C07C 0007 7854          and.w     #7,D0
000045FA  3D40 FFF0 7855          move.w    D0,-16(A6)
                    7856   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
000045FE  2042      7857          move.l    D2,A0
00004600  3010      7858          move.w    (A0),D0
00004602  C07C 0007 7859          and.w     #7,D0
00004606  3D40 FFF2 7860          move.w    D0,-14(A6)
                    7861   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000460A  2042      7862          move.l    D2,A0
0000460C  3010      7863          move.w    (A0),D0
0000460E  E640      7864          asr.w     #3,D0
00004610  C07C 001F 7865          and.w     #31,D0
00004614  3D40 FFF4 7866          move.w    D0,-12(A6)
                    7867   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004618  302E FFF4 7868          move.w    -12(A6),D0
0000461C  0C40 0008 7869          cmp.w     #8,D0
00004620  6634      7870          bne.s     DisassembleInstruction_159
                    7871   ; InstructionSize = 1;
00004622  24BC 0000 7872          move.l    #1,(A2)
00004626  0001      
                    7873   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004628  322E FFF2 7874          move.w    -14(A6),D1
0000462C  C2BC 0000 7875          and.l     #65535,D1
00004630  FFFF      
00004632  2F01      7876          move.l    D1,-(A7)
00004634  322E FFF0 7877          move.w    -16(A6),D1
00004638  C2BC 0000 7878          and.l     #65535,D1
0000463C  FFFF      
0000463E  2F01      7879          move.l    D1,-(A7)
00004640  4879 0000 7880          pea       @m68kde~1_257.L
00004644  754C      
00004646  4879 0803 7881          pea       _Instruction.L
0000464A  04E2      
0000464C  4E95      7882          jsr       (A5)
0000464E  DEFC 0010 7883          add.w     #16,A7
00004652  6000 0078 7884          bra       DisassembleInstruction_163
                    7885   DisassembleInstruction_159:
                    7886   ; }
                    7887   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004656  302E FFF4 7888          move.w    -12(A6),D0
0000465A  0C40 0009 7889          cmp.w     #9,D0
0000465E  6632      7890          bne.s     DisassembleInstruction_161
                    7891   ; InstructionSize = 1;
00004660  24BC 0000 7892          move.l    #1,(A2)
00004664  0001      
                    7893   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004666  322E FFF2 7894          move.w    -14(A6),D1
0000466A  C2BC 0000 7895          and.l     #65535,D1
0000466E  FFFF      
00004670  2F01      7896          move.l    D1,-(A7)
00004672  322E FFF0 7897          move.w    -16(A6),D1
00004676  C2BC 0000 7898          and.l     #65535,D1
0000467A  FFFF      
0000467C  2F01      7899          move.l    D1,-(A7)
0000467E  4879 0000 7900          pea       @m68kde~1_258.L
00004682  7558      
00004684  4879 0803 7901          pea       _Instruction.L
00004688  04E2      
0000468A  4E95      7902          jsr       (A5)
0000468C  DEFC 0010 7903          add.w     #16,A7
00004690  603A      7904          bra.s     DisassembleInstruction_163
                    7905   DisassembleInstruction_161:
                    7906   ; }
                    7907   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004692  302E FFF4 7908          move.w    -12(A6),D0
00004696  0C40 0011 7909          cmp.w     #17,D0
0000469A  6630      7910          bne.s     DisassembleInstruction_163
                    7911   ; InstructionSize = 1;
0000469C  24BC 0000 7912          move.l    #1,(A2)
000046A0  0001      
                    7913   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000046A2  322E FFF2 7914          move.w    -14(A6),D1
000046A6  C2BC 0000 7915          and.l     #65535,D1
000046AA  FFFF      
000046AC  2F01      7916          move.l    D1,-(A7)
000046AE  322E FFF0 7917          move.w    -16(A6),D1
000046B2  C2BC 0000 7918          and.l     #65535,D1
000046B6  FFFF      
000046B8  2F01      7919          move.l    D1,-(A7)
000046BA  4879 0000 7920          pea       @m68kde~1_259.L
000046BE  7564      
000046C0  4879 0803 7921          pea       _Instruction.L
000046C4  04E2      
000046C6  4E95      7922          jsr       (A5)
000046C8  DEFC 0010 7923          add.w     #16,A7
                    7924   DisassembleInstruction_163:
                    7925   ; }
                    7926   ; }
                    7927   ; /////////////////////////////////////////////////////////////////////////////////
                    7928   ; // if instruction is EXT
                    7929   ; /////////////////////////////////////////////////////////////////////////////////
                    7930   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000046CC  2042      7931          move.l    D2,A0
000046CE  3010      7932          move.w    (A0),D0
000046D0  C07C FE38 7933          and.w     #65080,D0
000046D4  0C40 4800 7934          cmp.w     #18432,D0
000046D8  6600 0054 7935          bne       DisassembleInstruction_165
                    7936   ; {
                    7937   ; InstructionSize = 1;
000046DC  24BC 0000 7938          move.l    #1,(A2)
000046E0  0001      
                    7939   ; strcpy(Instruction,"EXT") ;
000046E2  4879 0000 7940          pea       @m68kde~1_260.L
000046E6  7570      
000046E8  4879 0803 7941          pea       _Instruction.L
000046EC  04E2      
000046EE  4EB9 0000 7942          jsr       _strcpy
000046F2  55D4      
000046F4  504F      7943          addq.w    #8,A7
                    7944   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000046F6  2042      7945          move.l    D2,A0
000046F8  3010      7946          move.w    (A0),D0
000046FA  C07C 00C0 7947          and.w     #192,D0
000046FE  0C40 00C0 7948          cmp.w     #192,D0
00004702  660E      7949          bne.s     DisassembleInstruction_167
                    7950   ; strcatInstruction(".L ") ;
00004704  4879 0000 7951          pea       @m68kde~1_171.L
00004708  7334      
0000470A  4EB8 0CE0 7952          jsr       _strcatInstruction
0000470E  584F      7953          addq.w    #4,A7
00004710  600C      7954          bra.s     DisassembleInstruction_168
                    7955   DisassembleInstruction_167:
                    7956   ; else
                    7957   ; strcatInstruction(".W ") ;
00004712  4879 0000 7958          pea       @m68kde~1_170.L
00004716  7330      
00004718  4EB8 0CE0 7959          jsr       _strcatInstruction
0000471C  584F      7960          addq.w    #4,A7
                    7961   DisassembleInstruction_168:
                    7962   ; Decode6BitEA(OpCode,0,0,0) ;
0000471E  42A7      7963          clr.l     -(A7)
00004720  42A7      7964          clr.l     -(A7)
00004722  42A7      7965          clr.l     -(A7)
00004724  2F02      7966          move.l    D2,-(A7)
00004726  4EB8 311E 7967          jsr       _Decode6BitEA
0000472A  DEFC 0010 7968          add.w     #16,A7
                    7969   DisassembleInstruction_165:
                    7970   ; }
                    7971   ; /////////////////////////////////////////////////////////////////////////////////
                    7972   ; // if instruction is ILLEGAL $4afc
                    7973   ; /////////////////////////////////////////////////////////////////////////////////
                    7974   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
0000472E  2042      7975          move.l    D2,A0
00004730  3010      7976          move.w    (A0),D0
00004732  0C40 4AFC 7977          cmp.w     #19196,D0
00004736  661A      7978          bne.s     DisassembleInstruction_169
                    7979   ; InstructionSize = 1;
00004738  24BC 0000 7980          move.l    #1,(A2)
0000473C  0001      
                    7981   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
0000473E  4879 0000 7982          pea       @m68kde~1_261.L
00004742  7574      
00004744  4879 0803 7983          pea       _Instruction.L
00004748  04E2      
0000474A  4EB9 0000 7984          jsr       _strcpy
0000474E  55D4      
00004750  504F      7985          addq.w    #8,A7
                    7986   DisassembleInstruction_169:
                    7987   ; }
                    7988   ; /////////////////////////////////////////////////////////////////////////////////
                    7989   ; // if instruction is JMP
                    7990   ; /////////////////////////////////////////////////////////////////////////////////
                    7991   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004752  2042      7992          move.l    D2,A0
00004754  3010      7993          move.w    (A0),D0
00004756  C07C FFC0 7994          and.w     #65472,D0
0000475A  0C40 4EC0 7995          cmp.w     #20160,D0
0000475E  662A      7996          bne.s     DisassembleInstruction_171
                    7997   ; {
                    7998   ; InstructionSize = 1;
00004760  24BC 0000 7999          move.l    #1,(A2)
00004764  0001      
                    8000   ; strcpy(Instruction,"JMP ") ;
00004766  4879 0000 8001          pea       @m68kde~1_262.L
0000476A  7584      
0000476C  4879 0803 8002          pea       _Instruction.L
00004770  04E2      
00004772  4EB9 0000 8003          jsr       _strcpy
00004776  55D4      
00004778  504F      8004          addq.w    #8,A7
                    8005   ; Decode6BitEA(OpCode,0,0,0) ;
0000477A  42A7      8006          clr.l     -(A7)
0000477C  42A7      8007          clr.l     -(A7)
0000477E  42A7      8008          clr.l     -(A7)
00004780  2F02      8009          move.l    D2,-(A7)
00004782  4EB8 311E 8010          jsr       _Decode6BitEA
00004786  DEFC 0010 8011          add.w     #16,A7
                    8012   DisassembleInstruction_171:
                    8013   ; }
                    8014   ; /////////////////////////////////////////////////////////////////////////////////
                    8015   ; // if instruction is JSR
                    8016   ; /////////////////////////////////////////////////////////////////////////////////
                    8017   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000478A  2042      8018          move.l    D2,A0
0000478C  3010      8019          move.w    (A0),D0
0000478E  C07C FFC0 8020          and.w     #65472,D0
00004792  0C40 4E80 8021          cmp.w     #20096,D0
00004796  662A      8022          bne.s     DisassembleInstruction_173
                    8023   ; {
                    8024   ; InstructionSize = 1;
00004798  24BC 0000 8025          move.l    #1,(A2)
0000479C  0001      
                    8026   ; strcpy(Instruction,"JSR ") ;
0000479E  4879 0000 8027          pea       @m68kde~1_263.L
000047A2  758A      
000047A4  4879 0803 8028          pea       _Instruction.L
000047A8  04E2      
000047AA  4EB9 0000 8029          jsr       _strcpy
000047AE  55D4      
000047B0  504F      8030          addq.w    #8,A7
                    8031   ; Decode6BitEA(OpCode,0,0,0) ;
000047B2  42A7      8032          clr.l     -(A7)
000047B4  42A7      8033          clr.l     -(A7)
000047B6  42A7      8034          clr.l     -(A7)
000047B8  2F02      8035          move.l    D2,-(A7)
000047BA  4EB8 311E 8036          jsr       _Decode6BitEA
000047BE  DEFC 0010 8037          add.w     #16,A7
                    8038   DisassembleInstruction_173:
                    8039   ; }
                    8040   ; /////////////////////////////////////////////////////////////////////////////////
                    8041   ; // if instruction is LEA
                    8042   ; /////////////////////////////////////////////////////////////////////////////////
                    8043   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000047C2  2042      8044          move.l    D2,A0
000047C4  3010      8045          move.w    (A0),D0
000047C6  C07C F1C0 8046          and.w     #61888,D0
000047CA  0C40 41C0 8047          cmp.w     #16832,D0
000047CE  6600 0056 8048          bne       DisassembleInstruction_175
                    8049   ; {
                    8050   ; InstructionSize = 1;
000047D2  24BC 0000 8051          move.l    #1,(A2)
000047D6  0001      
                    8052   ; strcpy(Instruction,"LEA ") ;
000047D8  4879 0000 8053          pea       @m68kde~1_264.L
000047DC  7590      
000047DE  4879 0803 8054          pea       _Instruction.L
000047E2  04E2      
000047E4  4EB9 0000 8055          jsr       _strcpy
000047E8  55D4      
000047EA  504F      8056          addq.w    #8,A7
                    8057   ; Decode6BitEA(OpCode,0,0,0) ;
000047EC  42A7      8058          clr.l     -(A7)
000047EE  42A7      8059          clr.l     -(A7)
000047F0  42A7      8060          clr.l     -(A7)
000047F2  2F02      8061          move.l    D2,-(A7)
000047F4  4EB8 311E 8062          jsr       _Decode6BitEA
000047F8  DEFC 0010 8063          add.w     #16,A7
                    8064   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
000047FC  2042      8065          move.l    D2,A0
000047FE  3210      8066          move.w    (A0),D1
00004800  E041      8067          asr.w     #8,D1
00004802  E241      8068          asr.w     #1,D1
00004804  C27C 0007 8069          and.w     #7,D1
00004808  C2BC 0000 8070          and.l     #65535,D1
0000480C  FFFF      
0000480E  2F01      8071          move.l    D1,-(A7)
00004810  4879 0000 8072          pea       @m68kde~1_246.L
00004814  74E4      
00004816  2F0C      8073          move.l    A4,-(A7)
00004818  4E95      8074          jsr       (A5)
0000481A  DEFC 000C 8075          add.w     #12,A7
                    8076   ; strcatInstruction(TempString);
0000481E  2F0C      8077          move.l    A4,-(A7)
00004820  4EB8 0CE0 8078          jsr       _strcatInstruction
00004824  584F      8079          addq.w    #4,A7
                    8080   DisassembleInstruction_175:
                    8081   ; }
                    8082   ; /////////////////////////////////////////////////////////////////////////////////
                    8083   ; // if instruction is LINK.W
                    8084   ; /////////////////////////////////////////////////////////////////////////////////
                    8085   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004826  2042      8086          move.l    D2,A0
00004828  3010      8087          move.w    (A0),D0
0000482A  C07C FFF8 8088          and.w     #65528,D0
0000482E  0C40 4E50 8089          cmp.w     #20048,D0
00004832  6600 0052 8090          bne       DisassembleInstruction_177
                    8091   ; {
                    8092   ; InstructionSize = 1;
00004836  24BC 0000 8093          move.l    #1,(A2)
0000483A  0001      
                    8094   ; strcpy(Instruction,"LINK ") ;
0000483C  4879 0000 8095          pea       @m68kde~1_265.L
00004840  7596      
00004842  4879 0803 8096          pea       _Instruction.L
00004846  04E2      
00004848  4EB9 0000 8097          jsr       _strcpy
0000484C  55D4      
0000484E  504F      8098          addq.w    #8,A7
                    8099   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004850  2042      8100          move.l    D2,A0
00004852  3228 0002 8101          move.w    2(A0),D1
00004856  48C1      8102          ext.l     D1
00004858  2F01      8103          move.l    D1,-(A7)
0000485A  2042      8104          move.l    D2,A0
0000485C  3210      8105          move.w    (A0),D1
0000485E  C27C 0007 8106          and.w     #7,D1
00004862  C2BC 0000 8107          and.l     #65535,D1
00004866  FFFF      
00004868  2F01      8108          move.l    D1,-(A7)
0000486A  4879 0000 8109          pea       @m68kde~1_266.L
0000486E  759C      
00004870  2F0C      8110          move.l    A4,-(A7)
00004872  4E95      8111          jsr       (A5)
00004874  DEFC 0010 8112          add.w     #16,A7
                    8113   ; InstructionSize = 2 ;
00004878  24BC 0000 8114          move.l    #2,(A2)
0000487C  0002      
                    8115   ; strcatInstruction(TempString);
0000487E  2F0C      8116          move.l    A4,-(A7)
00004880  4EB8 0CE0 8117          jsr       _strcatInstruction
00004884  584F      8118          addq.w    #4,A7
                    8119   DisassembleInstruction_177:
                    8120   ; }
                    8121   ; /////////////////////////////////////////////////////////////////////////////////
                    8122   ; // if instruction is MOVE, MOVEA
                    8123   ; /////////////////////////////////////////////////////////////////////////////////
                    8124   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004886  2042      8125          move.l    D2,A0
00004888  3010      8126          move.w    (A0),D0
0000488A  C07C C000 8127          and.w     #49152,D0
0000488E  6600 00F0 8128          bne       DisassembleInstruction_193
                    8129   ; {
                    8130   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004892  2042      8131          move.l    D2,A0
00004894  3010      8132          move.w    (A0),D0
00004896  C07C 3000 8133          and.w     #12288,D0
0000489A  E048      8134          lsr.w     #8,D0
0000489C  E848      8135          lsr.w     #4,D0
0000489E  3D40 FFE2 8136          move.w    D0,-30(A6)
                    8137   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
000048A2  2042      8138          move.l    D2,A0
000048A4  3010      8139          move.w    (A0),D0
000048A6  E640      8140          asr.w     #3,D0
000048A8  C07C 0007 8141          and.w     #7,D0
000048AC  3600      8142          move.w    D0,D3
                    8143   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000048AE  2042      8144          move.l    D2,A0
000048B0  3010      8145          move.w    (A0),D0
000048B2  C07C 0007 8146          and.w     #7,D0
000048B6  3D40 FFF6 8147          move.w    D0,-10(A6)
                    8148   ; DataSize = 0 ;
000048BA  7E00      8149          moveq     #0,D7
                    8150   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8151   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
000048BC  0C43 0005 8152          cmp.w     #5,D3
000048C0  6706      8153          beq.s     DisassembleInstruction_183
000048C2  0C43 0006 8154          cmp.w     #6,D3
000048C6  6602      8155          bne.s     DisassembleInstruction_181
                    8156   DisassembleInstruction_183:
                    8157   ; DataSize = 1;  // source operands has 1 word after EA
000048C8  7E01      8158          moveq     #1,D7
                    8159   DisassembleInstruction_181:
                    8160   ; // if source addressing mode is a 16 or 32 bit address
                    8161   ; if((OpMode == (unsigned short int)(0x0007))) {
000048CA  0C43 0007 8162          cmp.w     #7,D3
000048CE  660C      8163          bne.s     DisassembleInstruction_187
                    8164   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000048D0  302E FFF6 8165          move.w    -10(A6),D0
000048D4  6604      8166          bne.s     DisassembleInstruction_186
                    8167   ; DataSize = 1 ;
000048D6  7E01      8168          moveq     #1,D7
000048D8  6002      8169          bra.s     DisassembleInstruction_187
                    8170   DisassembleInstruction_186:
                    8171   ; else
                    8172   ; DataSize = 2 ;
000048DA  7E02      8173          moveq     #2,D7
                    8174   DisassembleInstruction_187:
                    8175   ; }
                    8176   ; // if source addressing mode is # then figure out size
                    8177   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
000048DC  0C43 0007 8178          cmp.w     #7,D3
000048E0  6624      8179          bne.s     DisassembleInstruction_191
000048E2  302E FFF6 8180          move.w    -10(A6),D0
000048E6  0C40 0004 8181          cmp.w     #4,D0
000048EA  661A      8182          bne.s     DisassembleInstruction_191
                    8183   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
000048EC  302E FFE2 8184          move.w    -30(A6),D0
000048F0  0C40 0001 8185          cmp.w     #1,D0
000048F4  670A      8186          beq.s     DisassembleInstruction_192
000048F6  302E FFE2 8187          move.w    -30(A6),D0
000048FA  0C40 0003 8188          cmp.w     #3,D0
000048FE  6604      8189          bne.s     DisassembleInstruction_190
                    8190   DisassembleInstruction_192:
                    8191   ; DataSize = 1;
00004900  7E01      8192          moveq     #1,D7
00004902  6002      8193          bra.s     DisassembleInstruction_191
                    8194   DisassembleInstruction_190:
                    8195   ; else
                    8196   ; DataSize = 2 ;
00004904  7E02      8197          moveq     #2,D7
                    8198   DisassembleInstruction_191:
                    8199   ; //printf("DataSize = %d",DataSize) ;
                    8200   ; }
                    8201   ; if(Size != 0)
00004906  302E FFE2 8202          move.w    -30(A6),D0
0000490A  6700 0074 8203          beq       DisassembleInstruction_193
                    8204   ; {
                    8205   ; InstructionSize = 1;
0000490E  24BC 0000 8206          move.l    #1,(A2)
00004912  0001      
                    8207   ; if(Size == 1)
00004914  302E FFE2 8208          move.w    -30(A6),D0
00004918  0C40 0001 8209          cmp.w     #1,D0
0000491C  660C      8210          bne.s     DisassembleInstruction_195
                    8211   ; strcpyInstruction("MOVE.B ") ;
0000491E  4879 0000 8212          pea       @m68kde~1_267.L
00004922  75A4      
00004924  4E93      8213          jsr       (A3)
00004926  584F      8214          addq.w    #4,A7
00004928  6020      8215          bra.s     DisassembleInstruction_198
                    8216   DisassembleInstruction_195:
                    8217   ; else if(Size == 2)
0000492A  302E FFE2 8218          move.w    -30(A6),D0
0000492E  0C40 0002 8219          cmp.w     #2,D0
00004932  660C      8220          bne.s     DisassembleInstruction_197
                    8221   ; strcpyInstruction("MOVE.L ") ;
00004934  4879 0000 8222          pea       @m68kde~1_268.L
00004938  75AC      
0000493A  4E93      8223          jsr       (A3)
0000493C  584F      8224          addq.w    #4,A7
0000493E  600A      8225          bra.s     DisassembleInstruction_198
                    8226   DisassembleInstruction_197:
                    8227   ; else
                    8228   ; strcpyInstruction("MOVE.W ") ;
00004940  4879 0000 8229          pea       @m68kde~1_269.L
00004944  75B4      
00004946  4E93      8230          jsr       (A3)
00004948  584F      8231          addq.w    #4,A7
                    8232   DisassembleInstruction_198:
                    8233   ; Decode6BitEA(OpCode,0,0,1) ;
0000494A  4878 0001 8234          pea       1
0000494E  42A7      8235          clr.l     -(A7)
00004950  42A7      8236          clr.l     -(A7)
00004952  2F02      8237          move.l    D2,-(A7)
00004954  4EB8 311E 8238          jsr       _Decode6BitEA
00004958  DEFC 0010 8239          add.w     #16,A7
                    8240   ; strcatInstruction(",") ;
0000495C  4879 0000 8241          pea       @m68kde~1_187.L
00004960  737E      
00004962  4EB8 0CE0 8242          jsr       _strcatInstruction
00004966  584F      8243          addq.w    #4,A7
                    8244   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8245   ; // but subtract 1 to make the maths correct in the called function
                    8246   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004968  42A7      8247          clr.l     -(A7)
0000496A  CEBC 0000 8248          and.l     #65535,D7
0000496E  FFFF      
00004970  2F07      8249          move.l    D7,-(A7)
00004972  4878 0002 8250          pea       2
00004976  2F02      8251          move.l    D2,-(A7)
00004978  4EB8 311E 8252          jsr       _Decode6BitEA
0000497C  DEFC 0010 8253          add.w     #16,A7
                    8254   DisassembleInstruction_193:
                    8255   ; }
                    8256   ; }
                    8257   ; /////////////////////////////////////////////////////////////////////////////////
                    8258   ; // if instruction is MOVE <EA>,CCR
                    8259   ; /////////////////////////////////////////////////////////////////////////////////
                    8260   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004980  2042      8261          move.l    D2,A0
00004982  3010      8262          move.w    (A0),D0
00004984  C07C FFC0 8263          and.w     #65472,D0
00004988  0C40 44C0 8264          cmp.w     #17600,D0
0000498C  6636      8265          bne.s     DisassembleInstruction_199
                    8266   ; {
                    8267   ; InstructionSize = 1;
0000498E  24BC 0000 8268          move.l    #1,(A2)
00004992  0001      
                    8269   ; strcpy(Instruction,"MOVE ") ;
00004994  4879 0000 8270          pea       @m68kde~1_270.L
00004998  75BC      
0000499A  4879 0803 8271          pea       _Instruction.L
0000499E  04E2      
000049A0  4EB9 0000 8272          jsr       _strcpy
000049A4  55D4      
000049A6  504F      8273          addq.w    #8,A7
                    8274   ; Decode6BitEA(OpCode,0,0,0) ;
000049A8  42A7      8275          clr.l     -(A7)
000049AA  42A7      8276          clr.l     -(A7)
000049AC  42A7      8277          clr.l     -(A7)
000049AE  2F02      8278          move.l    D2,-(A7)
000049B0  4EB8 311E 8279          jsr       _Decode6BitEA
000049B4  DEFC 0010 8280          add.w     #16,A7
                    8281   ; strcatInstruction(",CCR") ;
000049B8  4879 0000 8282          pea       @m68kde~1_271.L
000049BC  75C2      
000049BE  4EB8 0CE0 8283          jsr       _strcatInstruction
000049C2  584F      8284          addq.w    #4,A7
                    8285   DisassembleInstruction_199:
                    8286   ; }
                    8287   ; /////////////////////////////////////////////////////////////////////////////////
                    8288   ; // if instruction is MOVE SR,<EA>
                    8289   ; /////////////////////////////////////////////////////////////////////////////////
                    8290   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
000049C4  2042      8291          move.l    D2,A0
000049C6  3010      8292          move.w    (A0),D0
000049C8  C07C FFC0 8293          and.w     #65472,D0
000049CC  0C40 40C0 8294          cmp.w     #16576,D0
000049D0  662A      8295          bne.s     DisassembleInstruction_201
                    8296   ; {
                    8297   ; InstructionSize = 1;
000049D2  24BC 0000 8298          move.l    #1,(A2)
000049D6  0001      
                    8299   ; strcpy(Instruction,"MOVE SR,") ;
000049D8  4879 0000 8300          pea       @m68kde~1_272.L
000049DC  75C8      
000049DE  4879 0803 8301          pea       _Instruction.L
000049E2  04E2      
000049E4  4EB9 0000 8302          jsr       _strcpy
000049E8  55D4      
000049EA  504F      8303          addq.w    #8,A7
                    8304   ; Decode6BitEA(OpCode,0,0,0) ;
000049EC  42A7      8305          clr.l     -(A7)
000049EE  42A7      8306          clr.l     -(A7)
000049F0  42A7      8307          clr.l     -(A7)
000049F2  2F02      8308          move.l    D2,-(A7)
000049F4  4EB8 311E 8309          jsr       _Decode6BitEA
000049F8  DEFC 0010 8310          add.w     #16,A7
                    8311   DisassembleInstruction_201:
                    8312   ; }
                    8313   ; /////////////////////////////////////////////////////////////////////////////////
                    8314   ; // if instruction is MOVE <EA>,SR
                    8315   ; /////////////////////////////////////////////////////////////////////////////////
                    8316   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
000049FC  2042      8317          move.l    D2,A0
000049FE  3010      8318          move.w    (A0),D0
00004A00  C07C FFC0 8319          and.w     #65472,D0
00004A04  0C40 46C0 8320          cmp.w     #18112,D0
00004A08  6636      8321          bne.s     DisassembleInstruction_203
                    8322   ; {
                    8323   ; InstructionSize = 1;
00004A0A  24BC 0000 8324          move.l    #1,(A2)
00004A0E  0001      
                    8325   ; strcpy(Instruction,"MOVE ") ;
00004A10  4879 0000 8326          pea       @m68kde~1_270.L
00004A14  75BC      
00004A16  4879 0803 8327          pea       _Instruction.L
00004A1A  04E2      
00004A1C  4EB9 0000 8328          jsr       _strcpy
00004A20  55D4      
00004A22  504F      8329          addq.w    #8,A7
                    8330   ; Decode6BitEA(OpCode,0,0,0) ;
00004A24  42A7      8331          clr.l     -(A7)
00004A26  42A7      8332          clr.l     -(A7)
00004A28  42A7      8333          clr.l     -(A7)
00004A2A  2F02      8334          move.l    D2,-(A7)
00004A2C  4EB8 311E 8335          jsr       _Decode6BitEA
00004A30  DEFC 0010 8336          add.w     #16,A7
                    8337   ; strcatInstruction(",SR") ;
00004A34  4879 0000 8338          pea       @m68kde~1_273.L
00004A38  75D2      
00004A3A  4EB8 0CE0 8339          jsr       _strcatInstruction
00004A3E  584F      8340          addq.w    #4,A7
                    8341   DisassembleInstruction_203:
                    8342   ; }
                    8343   ; /////////////////////////////////////////////////////////////////////////////////
                    8344   ; // if instruction is MOVE USP,An
                    8345   ; /////////////////////////////////////////////////////////////////////////////////
                    8346   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004A40  2042      8347          move.l    D2,A0
00004A42  3010      8348          move.w    (A0),D0
00004A44  C07C FFF0 8349          and.w     #65520,D0
00004A48  0C40 4E60 8350          cmp.w     #20064,D0
00004A4C  6600 0060 8351          bne       DisassembleInstruction_208
                    8352   ; {
                    8353   ; InstructionSize = 1;
00004A50  24BC 0000 8354          move.l    #1,(A2)
00004A54  0001      
                    8355   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004A56  2042      8356          move.l    D2,A0
00004A58  3010      8357          move.w    (A0),D0
00004A5A  C07C 0007 8358          and.w     #7,D0
00004A5E  3D40 FFEA 8359          move.w    D0,-22(A6)
                    8360   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004A62  2042      8361          move.l    D2,A0
00004A64  3010      8362          move.w    (A0),D0
00004A66  C07C 0008 8363          and.w     #8,D0
00004A6A  0C40 0008 8364          cmp.w     #8,D0
00004A6E  6620      8365          bne.s     DisassembleInstruction_207
                    8366   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004A70  322E FFEA 8367          move.w    -22(A6),D1
00004A74  C2BC 0000 8368          and.l     #65535,D1
00004A78  FFFF      
00004A7A  2F01      8369          move.l    D1,-(A7)
00004A7C  4879 0000 8370          pea       @m68kde~1_274.L
00004A80  75D6      
00004A82  4879 0803 8371          pea       _Instruction.L
00004A86  04E2      
00004A88  4E95      8372          jsr       (A5)
00004A8A  DEFC 000C 8373          add.w     #12,A7
00004A8E  601E      8374          bra.s     DisassembleInstruction_208
                    8375   DisassembleInstruction_207:
                    8376   ; else
                    8377   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004A90  322E FFEA 8378          move.w    -22(A6),D1
00004A94  C2BC 0000 8379          and.l     #65535,D1
00004A98  FFFF      
00004A9A  2F01      8380          move.l    D1,-(A7)
00004A9C  4879 0000 8381          pea       @m68kde~1_275.L
00004AA0  75E4      
00004AA2  4879 0803 8382          pea       _Instruction.L
00004AA6  04E2      
00004AA8  4E95      8383          jsr       (A5)
00004AAA  DEFC 000C 8384          add.w     #12,A7
                    8385   DisassembleInstruction_208:
                    8386   ; }
                    8387   ; /////////////////////////////////////////////////////////////////////////////////
                    8388   ; // if instruction is MOVEM
                    8389   ; /////////////////////////////////////////////////////////////////////////////////
                    8390   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004AAE  2042      8391          move.l    D2,A0
00004AB0  3010      8392          move.w    (A0),D0
00004AB2  C07C FB80 8393          and.w     #64384,D0
00004AB6  0C40 4880 8394          cmp.w     #18560,D0
00004ABA  6600 01FC 8395          bne       DisassembleInstruction_230
                    8396   ; {
                    8397   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004ABE  2042      8398          move.l    D2,A0
00004AC0  3010      8399          move.w    (A0),D0
00004AC2  E640      8400          asr.w     #3,D0
00004AC4  C07C 0007 8401          and.w     #7,D0
00004AC8  3600      8402          move.w    D0,D3
                    8403   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004ACA  4A43      8404          tst.w     D3
00004ACC  6700 01EA 8405          beq       DisassembleInstruction_230
00004AD0  0C43 0001 8406          cmp.w     #1,D3
00004AD4  6700 01E2 8407          beq       DisassembleInstruction_230
00004AD8  4A43      8408          tst.w     D3
00004ADA  6700 01DC 8409          beq       DisassembleInstruction_230
                    8410   ; (OpMode != (unsigned short int)(0x1)) &&
                    8411   ; (OpMode != (unsigned short int)(0x0)))
                    8412   ; {
                    8413   ; InstructionSize = 1;
00004ADE  24BC 0000 8414          move.l    #1,(A2)
00004AE2  0001      
                    8415   ; strcpy(Instruction,"MOVEM") ;
00004AE4  4879 0000 8416          pea       @m68kde~1_276.L
00004AE8  75F2      
00004AEA  4879 0803 8417          pea       _Instruction.L
00004AEE  04E2      
00004AF0  4EB9 0000 8418          jsr       _strcpy
00004AF4  55D4      
00004AF6  504F      8419          addq.w    #8,A7
                    8420   ; InstructionSize ++ ;
00004AF8  5292      8421          addq.l    #1,(A2)
                    8422   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004AFA  2042      8423          move.l    D2,A0
00004AFC  3010      8424          move.w    (A0),D0
00004AFE  C07C 0040 8425          and.w     #64,D0
00004B02  660E      8426          bne.s     DisassembleInstruction_213
                    8427   ; strcatInstruction(".W ") ;
00004B04  4879 0000 8428          pea       @m68kde~1_170.L
00004B08  7330      
00004B0A  4EB8 0CE0 8429          jsr       _strcatInstruction
00004B0E  584F      8430          addq.w    #4,A7
00004B10  600C      8431          bra.s     DisassembleInstruction_214
                    8432   DisassembleInstruction_213:
                    8433   ; else
                    8434   ; strcatInstruction(".L ") ;
00004B12  4879 0000 8435          pea       @m68kde~1_171.L
00004B16  7334      
00004B18  4EB8 0CE0 8436          jsr       _strcatInstruction
00004B1C  584F      8437          addq.w    #4,A7
                    8438   DisassembleInstruction_214:
                    8439   ; // movem  reg,-(An) if bit 10 = 0
                    8440   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004B1E  2042      8441          move.l    D2,A0
00004B20  3010      8442          move.w    (A0),D0
00004B22  C07C 0400 8443          and.w     #1024,D0
00004B26  6600 00D2 8444          bne       DisassembleInstruction_215
                    8445   ; {
                    8446   ; Mask = 0x8000 ;                     // bit 15 = 1
00004B2A  3D7C 8000 8447          move.w    #32768,-2(A6)
00004B2E  FFFE      
                    8448   ; DoneSlash = 0 ;
00004B30  4246      8449          clr.w     D6
                    8450   ; for(i = 0; i < 16; i ++)    {
00004B32  4284      8451          clr.l     D4
                    8452   DisassembleInstruction_217:
00004B34  0C84 0000 8453          cmp.l     #16,D4
00004B38  0010      
00004B3A  6C00 009E 8454          bge       DisassembleInstruction_219
                    8455   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004B3E  4879 0000 8456          pea       @m68kde~1_33.L
00004B42  63FC      
00004B44  4EB9 0000 8457          jsr       _printf
00004B48  57A6      
00004B4A  584F      8458          addq.w    #4,A7
                    8459   ; if((OpCode[1] & Mask) == Mask)    {
00004B4C  2042      8460          move.l    D2,A0
00004B4E  3028 0002 8461          move.w    2(A0),D0
00004B52  C06E FFFE 8462          and.w     -2(A6),D0
00004B56  B06E FFFE 8463          cmp.w     -2(A6),D0
00004B5A  6600 006E 8464          bne       DisassembleInstruction_220
                    8465   ; if(i < 8 )  {
00004B5E  0C84 0000 8466          cmp.l     #8,D4
00004B62  0008      
00004B64  6C2C      8467          bge.s     DisassembleInstruction_222
                    8468   ; if(DoneSlash == 0)  {
00004B66  4A46      8469          tst.w     D6
00004B68  6614      8470          bne.s     DisassembleInstruction_224
                    8471   ; sprintf(TempString, "D%d", i) ;
00004B6A  2F04      8472          move.l    D4,-(A7)
00004B6C  4879 0000 8473          pea       @m68kde~1_277.L
00004B70  75F8      
00004B72  2F0C      8474          move.l    A4,-(A7)
00004B74  4E95      8475          jsr       (A5)
00004B76  DEFC 000C 8476          add.w     #12,A7
                    8477   ; DoneSlash = 1;
00004B7A  7C01      8478          moveq     #1,D6
00004B7C  6010      8479          bra.s     DisassembleInstruction_225
                    8480   DisassembleInstruction_224:
                    8481   ; }
                    8482   ; else
                    8483   ; sprintf(TempString, "/D%d", i) ;
00004B7E  2F04      8484          move.l    D4,-(A7)
00004B80  4879 0000 8485          pea       @m68kde~1_278.L
00004B84  75FC      
00004B86  2F0C      8486          move.l    A4,-(A7)
00004B88  4E95      8487          jsr       (A5)
00004B8A  DEFC 000C 8488          add.w     #12,A7
                    8489   DisassembleInstruction_225:
00004B8E  6000 0032 8490          bra       DisassembleInstruction_227
                    8491   DisassembleInstruction_222:
                    8492   ; }
                    8493   ; else   {
                    8494   ; if(DoneSlash == 0)  {
00004B92  4A46      8495          tst.w     D6
00004B94  6618      8496          bne.s     DisassembleInstruction_226
                    8497   ; sprintf(TempString, "A%d", i-8) ;
00004B96  2204      8498          move.l    D4,D1
00004B98  5181      8499          subq.l    #8,D1
00004B9A  2F01      8500          move.l    D1,-(A7)
00004B9C  4879 0000 8501          pea       @m68kde~1_279.L
00004BA0  7602      
00004BA2  2F0C      8502          move.l    A4,-(A7)
00004BA4  4E95      8503          jsr       (A5)
00004BA6  DEFC 000C 8504          add.w     #12,A7
                    8505   ; DoneSlash = 1;
00004BAA  7C01      8506          moveq     #1,D6
00004BAC  6014      8507          bra.s     DisassembleInstruction_227
                    8508   DisassembleInstruction_226:
                    8509   ; }
                    8510   ; else
                    8511   ; sprintf(TempString, "/A%d", i-8) ;
00004BAE  2204      8512          move.l    D4,D1
00004BB0  5181      8513          subq.l    #8,D1
00004BB2  2F01      8514          move.l    D1,-(A7)
00004BB4  4879 0000 8515          pea       @m68kde~1_280.L
00004BB8  7606      
00004BBA  2F0C      8516          move.l    A4,-(A7)
00004BBC  4E95      8517          jsr       (A5)
00004BBE  DEFC 000C 8518          add.w     #12,A7
                    8519   DisassembleInstruction_227:
                    8520   ; }
                    8521   ; strcatInstruction(TempString) ;
00004BC2  2F0C      8522          move.l    A4,-(A7)
00004BC4  4EB8 0CE0 8523          jsr       _strcatInstruction
00004BC8  584F      8524          addq.w    #4,A7
                    8525   DisassembleInstruction_220:
                    8526   ; }
                    8527   ; Mask = Mask >> 1 ;
00004BCA  302E FFFE 8528          move.w    -2(A6),D0
00004BCE  E240      8529          asr.w     #1,D0
00004BD0  3D40 FFFE 8530          move.w    D0,-2(A6)
00004BD4  5284      8531          addq.l    #1,D4
00004BD6  6000 FF5C 8532          bra       DisassembleInstruction_217
                    8533   DisassembleInstruction_219:
                    8534   ; }
                    8535   ; strcatInstruction(",") ;
00004BDA  4879 0000 8536          pea       @m68kde~1_187.L
00004BDE  737E      
00004BE0  4EB8 0CE0 8537          jsr       _strcatInstruction
00004BE4  584F      8538          addq.w    #4,A7
                    8539   ; Decode6BitEA(OpCode,0,0,0) ;
00004BE6  42A7      8540          clr.l     -(A7)
00004BE8  42A7      8541          clr.l     -(A7)
00004BEA  42A7      8542          clr.l     -(A7)
00004BEC  2F02      8543          move.l    D2,-(A7)
00004BEE  4EB8 311E 8544          jsr       _Decode6BitEA
00004BF2  DEFC 0010 8545          add.w     #16,A7
00004BF6  6000 00C0 8546          bra       DisassembleInstruction_230
                    8547   DisassembleInstruction_215:
                    8548   ; }
                    8549   ; //movem  (An)+,reg
                    8550   ; else    {
                    8551   ; Decode6BitEA(OpCode,0,0,0) ;
00004BFA  42A7      8552          clr.l     -(A7)
00004BFC  42A7      8553          clr.l     -(A7)
00004BFE  42A7      8554          clr.l     -(A7)
00004C00  2F02      8555          move.l    D2,-(A7)
00004C02  4EB8 311E 8556          jsr       _Decode6BitEA
00004C06  DEFC 0010 8557          add.w     #16,A7
                    8558   ; strcatInstruction(",") ;
00004C0A  4879 0000 8559          pea       @m68kde~1_187.L
00004C0E  737E      
00004C10  4EB8 0CE0 8560          jsr       _strcatInstruction
00004C14  584F      8561          addq.w    #4,A7
                    8562   ; Mask = 0x0001 ;                     // bit 0 = 1
00004C16  3D7C 0001 8563          move.w    #1,-2(A6)
00004C1A  FFFE      
                    8564   ; DoneSlash = 0 ;
00004C1C  4246      8565          clr.w     D6
                    8566   ; for(i = 0; i < 16 ; i ++)    {
00004C1E  4284      8567          clr.l     D4
                    8568   DisassembleInstruction_228:
00004C20  0C84 0000 8569          cmp.l     #16,D4
00004C24  0010      
00004C26  6C00 0090 8570          bge       DisassembleInstruction_230
                    8571   ; if((OpCode[1] & Mask) == Mask)    {
00004C2A  2042      8572          move.l    D2,A0
00004C2C  3028 0002 8573          move.w    2(A0),D0
00004C30  C06E FFFE 8574          and.w     -2(A6),D0
00004C34  B06E FFFE 8575          cmp.w     -2(A6),D0
00004C38  6600 006E 8576          bne       DisassembleInstruction_231
                    8577   ; if(i < 8)   {       // data registers in bits 7-0
00004C3C  0C84 0000 8578          cmp.l     #8,D4
00004C40  0008      
00004C42  6C2C      8579          bge.s     DisassembleInstruction_233
                    8580   ; if(DoneSlash == 0)  {
00004C44  4A46      8581          tst.w     D6
00004C46  6614      8582          bne.s     DisassembleInstruction_235
                    8583   ; sprintf(TempString, "D%d", i) ;
00004C48  2F04      8584          move.l    D4,-(A7)
00004C4A  4879 0000 8585          pea       @m68kde~1_277.L
00004C4E  75F8      
00004C50  2F0C      8586          move.l    A4,-(A7)
00004C52  4E95      8587          jsr       (A5)
00004C54  DEFC 000C 8588          add.w     #12,A7
                    8589   ; DoneSlash = 1;
00004C58  7C01      8590          moveq     #1,D6
00004C5A  6010      8591          bra.s     DisassembleInstruction_236
                    8592   DisassembleInstruction_235:
                    8593   ; }
                    8594   ; else
                    8595   ; sprintf(TempString, "/D%d", i) ;
00004C5C  2F04      8596          move.l    D4,-(A7)
00004C5E  4879 0000 8597          pea       @m68kde~1_278.L
00004C62  75FC      
00004C64  2F0C      8598          move.l    A4,-(A7)
00004C66  4E95      8599          jsr       (A5)
00004C68  DEFC 000C 8600          add.w     #12,A7
                    8601   DisassembleInstruction_236:
00004C6C  6000 0032 8602          bra       DisassembleInstruction_238
                    8603   DisassembleInstruction_233:
                    8604   ; }
                    8605   ; else    {
                    8606   ; if(DoneSlash == 0)  {
00004C70  4A46      8607          tst.w     D6
00004C72  6618      8608          bne.s     DisassembleInstruction_237
                    8609   ; sprintf(TempString, "A%d", i-8) ;
00004C74  2204      8610          move.l    D4,D1
00004C76  5181      8611          subq.l    #8,D1
00004C78  2F01      8612          move.l    D1,-(A7)
00004C7A  4879 0000 8613          pea       @m68kde~1_279.L
00004C7E  7602      
00004C80  2F0C      8614          move.l    A4,-(A7)
00004C82  4E95      8615          jsr       (A5)
00004C84  DEFC 000C 8616          add.w     #12,A7
                    8617   ; DoneSlash = 1;
00004C88  7C01      8618          moveq     #1,D6
00004C8A  6014      8619          bra.s     DisassembleInstruction_238
                    8620   DisassembleInstruction_237:
                    8621   ; }
                    8622   ; else
                    8623   ; sprintf(TempString, "/A%d", i-8) ;
00004C8C  2204      8624          move.l    D4,D1
00004C8E  5181      8625          subq.l    #8,D1
00004C90  2F01      8626          move.l    D1,-(A7)
00004C92  4879 0000 8627          pea       @m68kde~1_280.L
00004C96  7606      
00004C98  2F0C      8628          move.l    A4,-(A7)
00004C9A  4E95      8629          jsr       (A5)
00004C9C  DEFC 000C 8630          add.w     #12,A7
                    8631   DisassembleInstruction_238:
                    8632   ; }
                    8633   ; strcatInstruction(TempString) ;
00004CA0  2F0C      8634          move.l    A4,-(A7)
00004CA2  4EB8 0CE0 8635          jsr       _strcatInstruction
00004CA6  584F      8636          addq.w    #4,A7
                    8637   DisassembleInstruction_231:
                    8638   ; }
                    8639   ; Mask = Mask << 1 ;
00004CA8  302E FFFE 8640          move.w    -2(A6),D0
00004CAC  E340      8641          asl.w     #1,D0
00004CAE  3D40 FFFE 8642          move.w    D0,-2(A6)
00004CB2  5284      8643          addq.l    #1,D4
00004CB4  6000 FF6A 8644          bra       DisassembleInstruction_228
                    8645   DisassembleInstruction_230:
                    8646   ; }
                    8647   ; }
                    8648   ; }
                    8649   ; }
                    8650   ; /////////////////////////////////////////////////////////////////////////////////
                    8651   ; // if instruction is MOVEP
                    8652   ; /////////////////////////////////////////////////////////////////////////////////
                    8653   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004CB8  2042      8654          move.l    D2,A0
00004CBA  3010      8655          move.w    (A0),D0
00004CBC  C07C F038 8656          and.w     #61496,D0
00004CC0  0C40 0008 8657          cmp.w     #8,D0
00004CC4  6600 0112 8658          bne       DisassembleInstruction_247
                    8659   ; {
                    8660   ; InstructionSize = 1;
00004CC8  24BC 0000 8661          move.l    #1,(A2)
00004CCC  0001      
                    8662   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004CCE  2042      8663          move.l    D2,A0
00004CD0  3010      8664          move.w    (A0),D0
00004CD2  E040      8665          asr.w     #8,D0
00004CD4  E240      8666          asr.w     #1,D0
00004CD6  C07C 0007 8667          and.w     #7,D0
00004CDA  3A00      8668          move.w    D0,D5
                    8669   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004CDC  2042      8670          move.l    D2,A0
00004CDE  3010      8671          move.w    (A0),D0
00004CE0  C07C 0007 8672          and.w     #7,D0
00004CE4  3D40 FFF8 8673          move.w    D0,-8(A6)
                    8674   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004CE8  2042      8675          move.l    D2,A0
00004CEA  3010      8676          move.w    (A0),D0
00004CEC  EC40      8677          asr.w     #6,D0
00004CEE  C07C 0007 8678          and.w     #7,D0
00004CF2  3600      8679          move.w    D0,D3
                    8680   ; InstructionSize++ ;
00004CF4  5292      8681          addq.l    #1,(A2)
                    8682   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004CF6  0C43 0004 8683          cmp.w     #4,D3
00004CFA  6634      8684          bne.s     DisassembleInstruction_241
                    8685   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004CFC  CABC 0000 8686          and.l     #65535,D5
00004D00  FFFF      
00004D02  2F05      8687          move.l    D5,-(A7)
00004D04  322E FFF8 8688          move.w    -8(A6),D1
00004D08  C2BC 0000 8689          and.l     #65535,D1
00004D0C  FFFF      
00004D0E  2F01      8690          move.l    D1,-(A7)
00004D10  2042      8691          move.l    D2,A0
00004D12  3228 0002 8692          move.w    2(A0),D1
00004D16  48C1      8693          ext.l     D1
00004D18  2F01      8694          move.l    D1,-(A7)
00004D1A  4879 0000 8695          pea       @m68kde~1_281.L
00004D1E  760C      
00004D20  4879 0803 8696          pea       _Instruction.L
00004D24  04E2      
00004D26  4E95      8697          jsr       (A5)
00004D28  DEFC 0014 8698          add.w     #20,A7
00004D2C  6000 00AA 8699          bra       DisassembleInstruction_247
                    8700   DisassembleInstruction_241:
                    8701   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004D30  0C43 0005 8702          cmp.w     #5,D3
00004D34  6634      8703          bne.s     DisassembleInstruction_243
                    8704   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004D36  CABC 0000 8705          and.l     #65535,D5
00004D3A  FFFF      
00004D3C  2F05      8706          move.l    D5,-(A7)
00004D3E  322E FFF8 8707          move.w    -8(A6),D1
00004D42  C2BC 0000 8708          and.l     #65535,D1
00004D46  FFFF      
00004D48  2F01      8709          move.l    D1,-(A7)
00004D4A  2042      8710          move.l    D2,A0
00004D4C  3228 0002 8711          move.w    2(A0),D1
00004D50  48C1      8712          ext.l     D1
00004D52  2F01      8713          move.l    D1,-(A7)
00004D54  4879 0000 8714          pea       @m68kde~1_282.L
00004D58  7622      
00004D5A  4879 0803 8715          pea       _Instruction.L
00004D5E  04E2      
00004D60  4E95      8716          jsr       (A5)
00004D62  DEFC 0014 8717          add.w     #20,A7
00004D66  6000 0070 8718          bra       DisassembleInstruction_247
                    8719   DisassembleInstruction_243:
                    8720   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004D6A  0C43 0006 8721          cmp.w     #6,D3
00004D6E  6632      8722          bne.s     DisassembleInstruction_245
                    8723   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004D70  322E FFF8 8724          move.w    -8(A6),D1
00004D74  C2BC 0000 8725          and.l     #65535,D1
00004D78  FFFF      
00004D7A  2F01      8726          move.l    D1,-(A7)
00004D7C  2042      8727          move.l    D2,A0
00004D7E  3228 0002 8728          move.w    2(A0),D1
00004D82  48C1      8729          ext.l     D1
00004D84  2F01      8730          move.l    D1,-(A7)
00004D86  CABC 0000 8731          and.l     #65535,D5
00004D8A  FFFF      
00004D8C  2F05      8732          move.l    D5,-(A7)
00004D8E  4879 0000 8733          pea       @m68kde~1_283.L
00004D92  7638      
00004D94  4879 0803 8734          pea       _Instruction.L
00004D98  04E2      
00004D9A  4E95      8735          jsr       (A5)
00004D9C  DEFC 0014 8736          add.w     #20,A7
00004DA0  6036      8737          bra.s     DisassembleInstruction_247
                    8738   DisassembleInstruction_245:
                    8739   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004DA2  0C43 0007 8740          cmp.w     #7,D3
00004DA6  6630      8741          bne.s     DisassembleInstruction_247
                    8742   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004DA8  322E FFF8 8743          move.w    -8(A6),D1
00004DAC  C2BC 0000 8744          and.l     #65535,D1
00004DB0  FFFF      
00004DB2  2F01      8745          move.l    D1,-(A7)
00004DB4  2042      8746          move.l    D2,A0
00004DB6  3228 0002 8747          move.w    2(A0),D1
00004DBA  48C1      8748          ext.l     D1
00004DBC  2F01      8749          move.l    D1,-(A7)
00004DBE  CABC 0000 8750          and.l     #65535,D5
00004DC2  FFFF      
00004DC4  2F05      8751          move.l    D5,-(A7)
00004DC6  4879 0000 8752          pea       @m68kde~1_284.L
00004DCA  764E      
00004DCC  4879 0803 8753          pea       _Instruction.L
00004DD0  04E2      
00004DD2  4E95      8754          jsr       (A5)
00004DD4  DEFC 0014 8755          add.w     #20,A7
                    8756   DisassembleInstruction_247:
                    8757   ; }
                    8758   ; /////////////////////////////////////////////////////////////////////////////////
                    8759   ; // if instruction is MOVEQ
                    8760   ; /////////////////////////////////////////////////////////////////////////////////
                    8761   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004DD8  2042      8762          move.l    D2,A0
00004DDA  3010      8763          move.w    (A0),D0
00004DDC  C07C F100 8764          and.w     #61696,D0
00004DE0  0C40 7000 8765          cmp.w     #28672,D0
00004DE4  6600 0040 8766          bne       DisassembleInstruction_249
                    8767   ; {
                    8768   ; InstructionSize = 1;
00004DE8  24BC 0000 8769          move.l    #1,(A2)
00004DEC  0001      
                    8770   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004DEE  2042      8771          move.l    D2,A0
00004DF0  3010      8772          move.w    (A0),D0
00004DF2  E040      8773          asr.w     #8,D0
00004DF4  E240      8774          asr.w     #1,D0
00004DF6  C07C 0007 8775          and.w     #7,D0
00004DFA  3A00      8776          move.w    D0,D5
                    8777   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004DFC  CABC 0000 8778          and.l     #65535,D5
00004E00  FFFF      
00004E02  2F05      8779          move.l    D5,-(A7)
00004E04  2042      8780          move.l    D2,A0
00004E06  3210      8781          move.w    (A0),D1
00004E08  C27C 00FF 8782          and.w     #255,D1
00004E0C  C2BC 0000 8783          and.l     #65535,D1
00004E10  FFFF      
00004E12  2F01      8784          move.l    D1,-(A7)
00004E14  4879 0000 8785          pea       @m68kde~1_285.L
00004E18  7664      
00004E1A  4879 0803 8786          pea       _Instruction.L
00004E1E  04E2      
00004E20  4E95      8787          jsr       (A5)
00004E22  DEFC 0010 8788          add.w     #16,A7
                    8789   DisassembleInstruction_249:
                    8790   ; }
                    8791   ; /////////////////////////////////////////////////////////////////////////////////
                    8792   ; // if instruction is MULS.W
                    8793   ; /////////////////////////////////////////////////////////////////////////////////
                    8794   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004E26  2042      8795          move.l    D2,A0
00004E28  3010      8796          move.w    (A0),D0
00004E2A  C07C F1C0 8797          and.w     #61888,D0
00004E2E  0C40 C1C0 8798          cmp.w     #49600,D0
00004E32  6600 004E 8799          bne       DisassembleInstruction_251
                    8800   ; {
                    8801   ; InstructionSize = 1;
00004E36  24BC 0000 8802          move.l    #1,(A2)
00004E3A  0001      
                    8803   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E3C  2042      8804          move.l    D2,A0
00004E3E  3010      8805          move.w    (A0),D0
00004E40  E040      8806          asr.w     #8,D0
00004E42  E240      8807          asr.w     #1,D0
00004E44  C07C 0007 8808          and.w     #7,D0
00004E48  3A00      8809          move.w    D0,D5
                    8810   ; strcpyInstruction("MULS ");
00004E4A  4879 0000 8811          pea       @m68kde~1_286.L
00004E4E  7674      
00004E50  4E93      8812          jsr       (A3)
00004E52  584F      8813          addq.w    #4,A7
                    8814   ; Decode6BitEA(OpCode,0,0,0) ;
00004E54  42A7      8815          clr.l     -(A7)
00004E56  42A7      8816          clr.l     -(A7)
00004E58  42A7      8817          clr.l     -(A7)
00004E5A  2F02      8818          move.l    D2,-(A7)
00004E5C  4EB8 311E 8819          jsr       _Decode6BitEA
00004E60  DEFC 0010 8820          add.w     #16,A7
                    8821   ; sprintf(TempString, ",D%d", DataRegister) ;
00004E64  CABC 0000 8822          and.l     #65535,D5
00004E68  FFFF      
00004E6A  2F05      8823          move.l    D5,-(A7)
00004E6C  4879 0000 8824          pea       @m68kde~1_242.L
00004E70  74CA      
00004E72  2F0C      8825          move.l    A4,-(A7)
00004E74  4E95      8826          jsr       (A5)
00004E76  DEFC 000C 8827          add.w     #12,A7
                    8828   ; strcatInstruction(TempString);
00004E7A  2F0C      8829          move.l    A4,-(A7)
00004E7C  4EB8 0CE0 8830          jsr       _strcatInstruction
00004E80  584F      8831          addq.w    #4,A7
                    8832   DisassembleInstruction_251:
                    8833   ; }
                    8834   ; /////////////////////////////////////////////////////////////////////////////////
                    8835   ; // if instruction is MULU.W
                    8836   ; /////////////////////////////////////////////////////////////////////////////////
                    8837   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004E82  2042      8838          move.l    D2,A0
00004E84  3010      8839          move.w    (A0),D0
00004E86  C07C F1C0 8840          and.w     #61888,D0
00004E8A  0C40 C0C0 8841          cmp.w     #49344,D0
00004E8E  6600 004E 8842          bne       DisassembleInstruction_253
                    8843   ; {
                    8844   ; InstructionSize = 1;
00004E92  24BC 0000 8845          move.l    #1,(A2)
00004E96  0001      
                    8846   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E98  2042      8847          move.l    D2,A0
00004E9A  3010      8848          move.w    (A0),D0
00004E9C  E040      8849          asr.w     #8,D0
00004E9E  E240      8850          asr.w     #1,D0
00004EA0  C07C 0007 8851          and.w     #7,D0
00004EA4  3A00      8852          move.w    D0,D5
                    8853   ; strcpyInstruction("MULU ");
00004EA6  4879 0000 8854          pea       @m68kde~1_287.L
00004EAA  767A      
00004EAC  4E93      8855          jsr       (A3)
00004EAE  584F      8856          addq.w    #4,A7
                    8857   ; Decode6BitEA(OpCode,0,0,0) ;
00004EB0  42A7      8858          clr.l     -(A7)
00004EB2  42A7      8859          clr.l     -(A7)
00004EB4  42A7      8860          clr.l     -(A7)
00004EB6  2F02      8861          move.l    D2,-(A7)
00004EB8  4EB8 311E 8862          jsr       _Decode6BitEA
00004EBC  DEFC 0010 8863          add.w     #16,A7
                    8864   ; sprintf(TempString, ",D%d", DataRegister) ;
00004EC0  CABC 0000 8865          and.l     #65535,D5
00004EC4  FFFF      
00004EC6  2F05      8866          move.l    D5,-(A7)
00004EC8  4879 0000 8867          pea       @m68kde~1_242.L
00004ECC  74CA      
00004ECE  2F0C      8868          move.l    A4,-(A7)
00004ED0  4E95      8869          jsr       (A5)
00004ED2  DEFC 000C 8870          add.w     #12,A7
                    8871   ; strcatInstruction(TempString);
00004ED6  2F0C      8872          move.l    A4,-(A7)
00004ED8  4EB8 0CE0 8873          jsr       _strcatInstruction
00004EDC  584F      8874          addq.w    #4,A7
                    8875   DisassembleInstruction_253:
                    8876   ; }
                    8877   ; /////////////////////////////////////////////////////////////////////////////////
                    8878   ; // if instruction is NBCD <EA>
                    8879   ; /////////////////////////////////////////////////////////////////////////////////
                    8880   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004EDE  2042      8881          move.l    D2,A0
00004EE0  3010      8882          move.w    (A0),D0
00004EE2  C07C FFC0 8883          and.w     #65472,D0
00004EE6  0C40 4800 8884          cmp.w     #18432,D0
00004EEA  6620      8885          bne.s     DisassembleInstruction_255
                    8886   ; {
                    8887   ; InstructionSize = 1;
00004EEC  24BC 0000 8888          move.l    #1,(A2)
00004EF0  0001      
                    8889   ; strcpyInstruction("NBCD ");
00004EF2  4879 0000 8890          pea       @m68kde~1_288.L
00004EF6  7680      
00004EF8  4E93      8891          jsr       (A3)
00004EFA  584F      8892          addq.w    #4,A7
                    8893   ; Decode6BitEA(OpCode,0,0,0);
00004EFC  42A7      8894          clr.l     -(A7)
00004EFE  42A7      8895          clr.l     -(A7)
00004F00  42A7      8896          clr.l     -(A7)
00004F02  2F02      8897          move.l    D2,-(A7)
00004F04  4EB8 311E 8898          jsr       _Decode6BitEA
00004F08  DEFC 0010 8899          add.w     #16,A7
                    8900   DisassembleInstruction_255:
                    8901   ; }
                    8902   ; /////////////////////////////////////////////////////////////////////////////////
                    8903   ; // if instruction is NEG <EA>
                    8904   ; /////////////////////////////////////////////////////////////////////////////////
                    8905   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004F0C  2042      8906          move.l    D2,A0
00004F0E  3010      8907          move.w    (A0),D0
00004F10  C07C FF00 8908          and.w     #65280,D0
00004F14  0C40 4400 8909          cmp.w     #17408,D0
00004F18  6600 0046 8910          bne       DisassembleInstruction_259
                    8911   ; {
                    8912   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F1C  2042      8913          move.l    D2,A0
00004F1E  3010      8914          move.w    (A0),D0
00004F20  EC40      8915          asr.w     #6,D0
00004F22  C07C 0003 8916          and.w     #3,D0
00004F26  0C40 0003 8917          cmp.w     #3,D0
00004F2A  6700 0034 8918          beq       DisassembleInstruction_259
                    8919   ; {
                    8920   ; InstructionSize = 1;
00004F2E  24BC 0000 8921          move.l    #1,(A2)
00004F32  0001      
                    8922   ; strcpyInstruction("NEG");
00004F34  4879 0000 8923          pea       @m68kde~1_289.L
00004F38  7686      
00004F3A  4E93      8924          jsr       (A3)
00004F3C  584F      8925          addq.w    #4,A7
                    8926   ; Decode2BitOperandSize(*OpCode) ;
00004F3E  2042      8927          move.l    D2,A0
00004F40  3210      8928          move.w    (A0),D1
00004F42  C2BC 0000 8929          and.l     #65535,D1
00004F46  FFFF      
00004F48  2F01      8930          move.l    D1,-(A7)
00004F4A  4EB8 2E8A 8931          jsr       _Decode2BitOperandSize
00004F4E  584F      8932          addq.w    #4,A7
                    8933   ; Decode6BitEA(OpCode,0,0,0);
00004F50  42A7      8934          clr.l     -(A7)
00004F52  42A7      8935          clr.l     -(A7)
00004F54  42A7      8936          clr.l     -(A7)
00004F56  2F02      8937          move.l    D2,-(A7)
00004F58  4EB8 311E 8938          jsr       _Decode6BitEA
00004F5C  DEFC 0010 8939          add.w     #16,A7
                    8940   DisassembleInstruction_259:
                    8941   ; }
                    8942   ; }
                    8943   ; /////////////////////////////////////////////////////////////////////////////////
                    8944   ; // if instruction is NEGX <EA>
                    8945   ; /////////////////////////////////////////////////////////////////////////////////
                    8946   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004F60  2042      8947          move.l    D2,A0
00004F62  3010      8948          move.w    (A0),D0
00004F64  C07C FF00 8949          and.w     #65280,D0
00004F68  0C40 4000 8950          cmp.w     #16384,D0
00004F6C  6600 0046 8951          bne       DisassembleInstruction_263
                    8952   ; {
                    8953   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F70  2042      8954          move.l    D2,A0
00004F72  3010      8955          move.w    (A0),D0
00004F74  EC40      8956          asr.w     #6,D0
00004F76  C07C 0003 8957          and.w     #3,D0
00004F7A  0C40 0003 8958          cmp.w     #3,D0
00004F7E  6700 0034 8959          beq       DisassembleInstruction_263
                    8960   ; {
                    8961   ; InstructionSize = 1;
00004F82  24BC 0000 8962          move.l    #1,(A2)
00004F86  0001      
                    8963   ; strcpyInstruction("NEGX");
00004F88  4879 0000 8964          pea       @m68kde~1_290.L
00004F8C  768A      
00004F8E  4E93      8965          jsr       (A3)
00004F90  584F      8966          addq.w    #4,A7
                    8967   ; Decode2BitOperandSize(*OpCode) ;
00004F92  2042      8968          move.l    D2,A0
00004F94  3210      8969          move.w    (A0),D1
00004F96  C2BC 0000 8970          and.l     #65535,D1
00004F9A  FFFF      
00004F9C  2F01      8971          move.l    D1,-(A7)
00004F9E  4EB8 2E8A 8972          jsr       _Decode2BitOperandSize
00004FA2  584F      8973          addq.w    #4,A7
                    8974   ; Decode6BitEA(OpCode,0,0,0);
00004FA4  42A7      8975          clr.l     -(A7)
00004FA6  42A7      8976          clr.l     -(A7)
00004FA8  42A7      8977          clr.l     -(A7)
00004FAA  2F02      8978          move.l    D2,-(A7)
00004FAC  4EB8 311E 8979          jsr       _Decode6BitEA
00004FB0  DEFC 0010 8980          add.w     #16,A7
                    8981   DisassembleInstruction_263:
                    8982   ; }
                    8983   ; }
                    8984   ; /////////////////////////////////////////////////////////////////////////////////
                    8985   ; // if instruction is NOP
                    8986   ; /////////////////////////////////////////////////////////////////////////////////
                    8987   ; if(*OpCode == (unsigned short int)(0x4E71))
00004FB4  2042      8988          move.l    D2,A0
00004FB6  3010      8989          move.w    (A0),D0
00004FB8  0C40 4E71 8990          cmp.w     #20081,D0
00004FBC  6610      8991          bne.s     DisassembleInstruction_265
                    8992   ; {
                    8993   ; InstructionSize = 1;
00004FBE  24BC 0000 8994          move.l    #1,(A2)
00004FC2  0001      
                    8995   ; strcpyInstruction("NOP");
00004FC4  4879 0000 8996          pea       @m68kde~1_291.L
00004FC8  7690      
00004FCA  4E93      8997          jsr       (A3)
00004FCC  584F      8998          addq.w    #4,A7
                    8999   DisassembleInstruction_265:
                    9000   ; }
                    9001   ; /////////////////////////////////////////////////////////////////////////////////
                    9002   ; // if instruction is NOT <EA>
                    9003   ; /////////////////////////////////////////////////////////////////////////////////
                    9004   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004FCE  2042      9005          move.l    D2,A0
00004FD0  3010      9006          move.w    (A0),D0
00004FD2  C07C FF00 9007          and.w     #65280,D0
00004FD6  0C40 4600 9008          cmp.w     #17920,D0
00004FDA  6600 0046 9009          bne       DisassembleInstruction_269
                    9010   ; {
                    9011   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004FDE  2042      9012          move.l    D2,A0
00004FE0  3010      9013          move.w    (A0),D0
00004FE2  EC40      9014          asr.w     #6,D0
00004FE4  C07C 0003 9015          and.w     #3,D0
00004FE8  0C40 0003 9016          cmp.w     #3,D0
00004FEC  6700 0034 9017          beq       DisassembleInstruction_269
                    9018   ; {
                    9019   ; InstructionSize = 1;
00004FF0  24BC 0000 9020          move.l    #1,(A2)
00004FF4  0001      
                    9021   ; strcpyInstruction("NOT");
00004FF6  4879 0000 9022          pea       @m68kde~1_292.L
00004FFA  7694      
00004FFC  4E93      9023          jsr       (A3)
00004FFE  584F      9024          addq.w    #4,A7
                    9025   ; Decode2BitOperandSize(*OpCode) ;
00005000  2042      9026          move.l    D2,A0
00005002  3210      9027          move.w    (A0),D1
00005004  C2BC 0000 9028          and.l     #65535,D1
00005008  FFFF      
0000500A  2F01      9029          move.l    D1,-(A7)
0000500C  4EB8 2E8A 9030          jsr       _Decode2BitOperandSize
00005010  584F      9031          addq.w    #4,A7
                    9032   ; Decode6BitEA(OpCode,0,0,0);
00005012  42A7      9033          clr.l     -(A7)
00005014  42A7      9034          clr.l     -(A7)
00005016  42A7      9035          clr.l     -(A7)
00005018  2F02      9036          move.l    D2,-(A7)
0000501A  4EB8 311E 9037          jsr       _Decode6BitEA
0000501E  DEFC 0010 9038          add.w     #16,A7
                    9039   DisassembleInstruction_269:
                    9040   ; }
                    9041   ; }
                    9042   ; /////////////////////////////////////////////////////////////////////////////////
                    9043   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9044   ; /////////////////////////////////////////////////////////////////////////////////
                    9045   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005022  2042      9046          move.l    D2,A0
00005024  3010      9047          move.w    (A0),D0
00005026  C07C F000 9048          and.w     #61440,D0
0000502A  0C40 8000 9049          cmp.w     #32768,D0
0000502E  6600 0038 9050          bne       DisassembleInstruction_273
                    9051   ; {
                    9052   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00005032  2042      9053          move.l    D2,A0
00005034  3010      9054          move.w    (A0),D0
00005036  EC40      9055          asr.w     #6,D0
00005038  C07C 0007 9056          and.w     #7,D0
0000503C  3600      9057          move.w    D0,D3
                    9058   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
0000503E  0C43 0002 9059          cmp.w     #2,D3
00005042  630C      9060          bls.s     DisassembleInstruction_275
00005044  0C43 0004 9061          cmp.w     #4,D3
00005048  651E      9062          blo.s     DisassembleInstruction_273
0000504A  0C43 0006 9063          cmp.w     #6,D3
0000504E  6218      9064          bhi.s     DisassembleInstruction_273
                    9065   DisassembleInstruction_275:
                    9066   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9067   ; {
                    9068   ; InstructionSize = 1;
00005050  24BC 0000 9069          move.l    #1,(A2)
00005054  0001      
                    9070   ; strcpyInstruction("OR") ;
00005056  4879 0000 9071          pea       @m68kde~1_293.L
0000505A  7698      
0000505C  4E93      9072          jsr       (A3)
0000505E  584F      9073          addq.w    #4,A7
                    9074   ; Decode3BitOperandMode(OpCode) ;
00005060  2F02      9075          move.l    D2,-(A7)
00005062  4EB8 3546 9076          jsr       _Decode3BitOperandMode
00005066  584F      9077          addq.w    #4,A7
                    9078   DisassembleInstruction_273:
                    9079   ; }
                    9080   ; }
                    9081   ; /////////////////////////////////////////////////////////////////////////////////
                    9082   ; // if instruction is ORI to CCR
                    9083   ; /////////////////////////////////////////////////////////////////////////////////
                    9084   ; if(*OpCode == (unsigned short int)(0x003C))   {
00005068  2042      9085          move.l    D2,A0
0000506A  3010      9086          move.w    (A0),D0
0000506C  0C40 003C 9087          cmp.w     #60,D0
00005070  662A      9088          bne.s     DisassembleInstruction_276
                    9089   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005072  2042      9090          move.l    D2,A0
00005074  3228 0002 9091          move.w    2(A0),D1
00005078  C27C 00FF 9092          and.w     #255,D1
0000507C  C2BC 0000 9093          and.l     #65535,D1
00005080  FFFF      
00005082  2F01      9094          move.l    D1,-(A7)
00005084  4879 0000 9095          pea       @m68kde~1_294.L
00005088  769C      
0000508A  4879 0803 9096          pea       _Instruction.L
0000508E  04E2      
00005090  4E95      9097          jsr       (A5)
00005092  DEFC 000C 9098          add.w     #12,A7
                    9099   ; InstructionSize = 2;
00005096  24BC 0000 9100          move.l    #2,(A2)
0000509A  0002      
                    9101   DisassembleInstruction_276:
                    9102   ; }
                    9103   ; /////////////////////////////////////////////////////////////////////////////////
                    9104   ; // if instruction is ORI #data,SR
                    9105   ; /////////////////////////////////////////////////////////////////////////////////
                    9106   ; if(*OpCode  == (unsigned short int)(0x007c))
0000509C  2042      9107          move.l    D2,A0
0000509E  3010      9108          move.w    (A0),D0
000050A0  0C40 007C 9109          cmp.w     #124,D0
000050A4  6622      9110          bne.s     DisassembleInstruction_278
                    9111   ; {
                    9112   ; InstructionSize = 2;
000050A6  24BC 0000 9113          move.l    #2,(A2)
000050AA  0002      
                    9114   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
000050AC  2042      9115          move.l    D2,A0
000050AE  3228 0002 9116          move.w    2(A0),D1
000050B2  48C1      9117          ext.l     D1
000050B4  2F01      9118          move.l    D1,-(A7)
000050B6  4879 0000 9119          pea       @m68kde~1_295.L
000050BA  76AA      
000050BC  4879 0803 9120          pea       _Instruction.L
000050C0  04E2      
000050C2  4E95      9121          jsr       (A5)
000050C4  DEFC 000C 9122          add.w     #12,A7
                    9123   DisassembleInstruction_278:
                    9124   ; }
                    9125   ; /////////////////////////////////////////////////////////////////////////////////
                    9126   ; // if instruction is PEA
                    9127   ; /////////////////////////////////////////////////////////////////////////////////
                    9128   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
000050C8  2042      9129          move.l    D2,A0
000050CA  3010      9130          move.w    (A0),D0
000050CC  C07C FFC0 9131          and.w     #65472,D0
000050D0  0C40 4840 9132          cmp.w     #18496,D0
000050D4  6620      9133          bne.s     DisassembleInstruction_280
                    9134   ; {
                    9135   ; InstructionSize = 1;
000050D6  24BC 0000 9136          move.l    #1,(A2)
000050DA  0001      
                    9137   ; strcpyInstruction("PEA ");
000050DC  4879 0000 9138          pea       @m68kde~1_296.L
000050E0  76B8      
000050E2  4E93      9139          jsr       (A3)
000050E4  584F      9140          addq.w    #4,A7
                    9141   ; Decode6BitEA(OpCode,0,0,0);
000050E6  42A7      9142          clr.l     -(A7)
000050E8  42A7      9143          clr.l     -(A7)
000050EA  42A7      9144          clr.l     -(A7)
000050EC  2F02      9145          move.l    D2,-(A7)
000050EE  4EB8 311E 9146          jsr       _Decode6BitEA
000050F2  DEFC 0010 9147          add.w     #16,A7
                    9148   DisassembleInstruction_280:
                    9149   ; }
                    9150   ; /////////////////////////////////////////////////////////////////////////////////
                    9151   ; // if instruction is reset
                    9152   ; /////////////////////////////////////////////////////////////////////////////////
                    9153   ; if(*OpCode  == (unsigned short int)(0x4E70))
000050F6  2042      9154          move.l    D2,A0
000050F8  3010      9155          move.w    (A0),D0
000050FA  0C40 4E70 9156          cmp.w     #20080,D0
000050FE  6616      9157          bne.s     DisassembleInstruction_282
                    9158   ; {
                    9159   ; InstructionSize = 1;
00005100  24BC 0000 9160          move.l    #1,(A2)
00005104  0001      
                    9161   ; sprintf(Instruction, "RESET");
00005106  4879 0000 9162          pea       @m68kde~1_297.L
0000510A  76BE      
0000510C  4879 0803 9163          pea       _Instruction.L
00005110  04E2      
00005112  4E95      9164          jsr       (A5)
00005114  504F      9165          addq.w    #8,A7
                    9166   DisassembleInstruction_282:
                    9167   ; }
                    9168   ; /////////////////////////////////////////////////////////////////////////////////
                    9169   ; // if instruction is RTE
                    9170   ; /////////////////////////////////////////////////////////////////////////////////
                    9171   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005116  2042      9172          move.l    D2,A0
00005118  3010      9173          move.w    (A0),D0
0000511A  0C40 4E73 9174          cmp.w     #20083,D0
0000511E  6616      9175          bne.s     DisassembleInstruction_284
                    9176   ; {
                    9177   ; InstructionSize = 1;
00005120  24BC 0000 9178          move.l    #1,(A2)
00005124  0001      
                    9179   ; sprintf(Instruction, "RTE");
00005126  4879 0000 9180          pea       @m68kde~1_298.L
0000512A  76C4      
0000512C  4879 0803 9181          pea       _Instruction.L
00005130  04E2      
00005132  4E95      9182          jsr       (A5)
00005134  504F      9183          addq.w    #8,A7
                    9184   DisassembleInstruction_284:
                    9185   ; }
                    9186   ; /////////////////////////////////////////////////////////////////////////////////
                    9187   ; // if instruction is RTR
                    9188   ; /////////////////////////////////////////////////////////////////////////////////
                    9189   ; if(*OpCode == (unsigned short int)(0x4E77))
00005136  2042      9190          move.l    D2,A0
00005138  3010      9191          move.w    (A0),D0
0000513A  0C40 4E77 9192          cmp.w     #20087,D0
0000513E  6610      9193          bne.s     DisassembleInstruction_286
                    9194   ; {
                    9195   ; InstructionSize = 1;
00005140  24BC 0000 9196          move.l    #1,(A2)
00005144  0001      
                    9197   ; strcpyInstruction("RTR");
00005146  4879 0000 9198          pea       @m68kde~1_299.L
0000514A  76C8      
0000514C  4E93      9199          jsr       (A3)
0000514E  584F      9200          addq.w    #4,A7
                    9201   DisassembleInstruction_286:
                    9202   ; }
                    9203   ; /////////////////////////////////////////////////////////////////////////////////
                    9204   ; // if instruction is RTS
                    9205   ; /////////////////////////////////////////////////////////////////////////////////
                    9206   ; if(*OpCode == (unsigned short int)(0x4E75))
00005150  2042      9207          move.l    D2,A0
00005152  3010      9208          move.w    (A0),D0
00005154  0C40 4E75 9209          cmp.w     #20085,D0
00005158  6610      9210          bne.s     DisassembleInstruction_288
                    9211   ; {
                    9212   ; InstructionSize = 1;
0000515A  24BC 0000 9213          move.l    #1,(A2)
0000515E  0001      
                    9214   ; strcpyInstruction("RTS");
00005160  4879 0000 9215          pea       @m68kde~1_300.L
00005164  76CC      
00005166  4E93      9216          jsr       (A3)
00005168  584F      9217          addq.w    #4,A7
                    9218   DisassembleInstruction_288:
                    9219   ; }
                    9220   ; /////////////////////////////////////////////////////////////////////////////////
                    9221   ; // if instruction is STOP
                    9222   ; /////////////////////////////////////////////////////////////////////////////////
                    9223   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000516A  2042      9224          move.l    D2,A0
0000516C  3010      9225          move.w    (A0),D0
0000516E  0C40 4E72 9226          cmp.w     #20082,D0
00005172  6622      9227          bne.s     DisassembleInstruction_290
                    9228   ; {
                    9229   ; InstructionSize = 2;
00005174  24BC 0000 9230          move.l    #2,(A2)
00005178  0002      
                    9231   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000517A  2042      9232          move.l    D2,A0
0000517C  3228 0002 9233          move.w    2(A0),D1
00005180  48C1      9234          ext.l     D1
00005182  2F01      9235          move.l    D1,-(A7)
00005184  4879 0000 9236          pea       @m68kde~1_301.L
00005188  76D0      
0000518A  4879 0803 9237          pea       _Instruction.L
0000518E  04E2      
00005190  4E95      9238          jsr       (A5)
00005192  DEFC 000C 9239          add.w     #12,A7
                    9240   DisassembleInstruction_290:
                    9241   ; }
                    9242   ; /////////////////////////////////////////////////////////////////////////////////
                    9243   ; // if instruction is SBCD
                    9244   ; /////////////////////////////////////////////////////////////////////////////////
                    9245   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005196  2042      9246          move.l    D2,A0
00005198  3010      9247          move.w    (A0),D0
0000519A  C07C F1F0 9248          and.w     #61936,D0
0000519E  0C40 8100 9249          cmp.w     #33024,D0
000051A2  6600 0092 9250          bne       DisassembleInstruction_295
                    9251   ; {
                    9252   ; InstructionSize = 1;
000051A6  24BC 0000 9253          move.l    #1,(A2)
000051AA  0001      
                    9254   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000051AC  2042      9255          move.l    D2,A0
000051AE  3010      9256          move.w    (A0),D0
000051B0  E040      9257          asr.w     #8,D0
000051B2  E240      9258          asr.w     #1,D0
000051B4  C07C 0007 9259          and.w     #7,D0
000051B8  3D40 FFE0 9260          move.w    D0,-32(A6)
                    9261   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000051BC  2042      9262          move.l    D2,A0
000051BE  3010      9263          move.w    (A0),D0
000051C0  C07C 0007 9264          and.w     #7,D0
000051C4  3D40 FFDE 9265          move.w    D0,-34(A6)
                    9266   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000051C8  2042      9267          move.l    D2,A0
000051CA  3010      9268          move.w    (A0),D0
000051CC  E640      9269          asr.w     #3,D0
000051CE  48C0      9270          ext.l     D0
000051D0  C0BC 0000 9271          and.l     #1,D0
000051D4  0001      
000051D6  2D40 FFE4 9272          move.l    D0,-28(A6)
                    9273   ; if(Mode == 0)
000051DA  202E FFE4 9274          move.l    -28(A6),D0
000051DE  662C      9275          bne.s     DisassembleInstruction_294
                    9276   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000051E0  322E FFE0 9277          move.w    -32(A6),D1
000051E4  C2BC 0000 9278          and.l     #65535,D1
000051E8  FFFF      
000051EA  2F01      9279          move.l    D1,-(A7)
000051EC  322E FFDE 9280          move.w    -34(A6),D1
000051F0  C2BC 0000 9281          and.l     #65535,D1
000051F4  FFFF      
000051F6  2F01      9282          move.l    D1,-(A7)
000051F8  4879 0000 9283          pea       @m68kde~1_302.L
000051FC  76DA      
000051FE  4879 0803 9284          pea       _Instruction.L
00005202  04E2      
00005204  4E95      9285          jsr       (A5)
00005206  DEFC 0010 9286          add.w     #16,A7
0000520A  602A      9287          bra.s     DisassembleInstruction_295
                    9288   DisassembleInstruction_294:
                    9289   ; else
                    9290   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000520C  322E FFE0 9291          move.w    -32(A6),D1
00005210  C2BC 0000 9292          and.l     #65535,D1
00005214  FFFF      
00005216  2F01      9293          move.l    D1,-(A7)
00005218  322E FFDE 9294          move.w    -34(A6),D1
0000521C  C2BC 0000 9295          and.l     #65535,D1
00005220  FFFF      
00005222  2F01      9296          move.l    D1,-(A7)
00005224  4879 0000 9297          pea       @m68kde~1_303.L
00005228  76E8      
0000522A  4879 0803 9298          pea       _Instruction.L
0000522E  04E2      
00005230  4E95      9299          jsr       (A5)
00005232  DEFC 0010 9300          add.w     #16,A7
                    9301   DisassembleInstruction_295:
                    9302   ; }
                    9303   ; /////////////////////////////////////////////////////////////////////////////////
                    9304   ; // if instruction is Scc
                    9305   ; /////////////////////////////////////////////////////////////////////////////////
                    9306   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005236  2042      9307          move.l    D2,A0
00005238  3010      9308          move.w    (A0),D0
0000523A  C07C F0C0 9309          and.w     #61632,D0
0000523E  0C40 50C0 9310          cmp.w     #20672,D0
00005242  6600 0060 9311          bne       DisassembleInstruction_298
                    9312   ; {
                    9313   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005246  2042      9314          move.l    D2,A0
00005248  3010      9315          move.w    (A0),D0
0000524A  E640      9316          asr.w     #3,D0
0000524C  C07C 0007 9317          and.w     #7,D0
00005250  3D40 FFEC 9318          move.w    D0,-20(A6)
                    9319   ; if(EAMode != (unsigned short int)(0x0001))
00005254  302E FFEC 9320          move.w    -20(A6),D0
00005258  0C40 0001 9321          cmp.w     #1,D0
0000525C  6700 0046 9322          beq       DisassembleInstruction_298
                    9323   ; {
                    9324   ; InstructionSize = 1;
00005260  24BC 0000 9325          move.l    #1,(A2)
00005264  0001      
                    9326   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005266  2042      9327          move.l    D2,A0
00005268  3010      9328          move.w    (A0),D0
0000526A  E040      9329          asr.w     #8,D0
0000526C  C07C 000F 9330          and.w     #15,D0
00005270  1D40 FFE9 9331          move.b    D0,-23(A6)
                    9332   ; strcpyInstruction("S") ;
00005274  4879 0000 9333          pea       @m68kde~1_304.L
00005278  76FC      
0000527A  4E93      9334          jsr       (A3)
0000527C  584F      9335          addq.w    #4,A7
                    9336   ; DecodeBranchCondition(Condition) ;
0000527E  122E FFE9 9337          move.b    -23(A6),D1
00005282  C27C 00FF 9338          and.w     #255,D1
00005286  C2BC 0000 9339          and.l     #65535,D1
0000528A  FFFF      
0000528C  2F01      9340          move.l    D1,-(A7)
0000528E  4EB8 35DC 9341          jsr       _DecodeBranchCondition
00005292  584F      9342          addq.w    #4,A7
                    9343   ; Decode6BitEA(OpCode,0,0,0);
00005294  42A7      9344          clr.l     -(A7)
00005296  42A7      9345          clr.l     -(A7)
00005298  42A7      9346          clr.l     -(A7)
0000529A  2F02      9347          move.l    D2,-(A7)
0000529C  4EB8 311E 9348          jsr       _Decode6BitEA
000052A0  DEFC 0010 9349          add.w     #16,A7
                    9350   DisassembleInstruction_298:
                    9351   ; }
                    9352   ; }
                    9353   ; /////////////////////////////////////////////////////////////////////////////////
                    9354   ; // if instruction is SUB or SUBA
                    9355   ; /////////////////////////////////////////////////////////////////////////////////
                    9356   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000052A4  2042      9357          move.l    D2,A0
000052A6  3010      9358          move.w    (A0),D0
000052A8  C07C F000 9359          and.w     #61440,D0
000052AC  0C40 9000 9360          cmp.w     #36864,D0
000052B0  6600 008C 9361          bne       DisassembleInstruction_303
                    9362   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000052B4  2042      9363          move.l    D2,A0
000052B6  3010      9364          move.w    (A0),D0
000052B8  EC40      9365          asr.w     #6,D0
000052BA  C07C 0007 9366          and.w     #7,D0
000052BE  3600      9367          move.w    D0,D3
                    9368   ; InstructionSize = 1;
000052C0  24BC 0000 9369          move.l    #1,(A2)
000052C4  0001      
                    9370   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000052C6  0C43 0003 9371          cmp.w     #3,D3
000052CA  6708      9372          beq.s     DisassembleInstruction_304
000052CC  0C43 0007 9373          cmp.w     #7,D3
000052D0  6600 005A 9374          bne       DisassembleInstruction_302
                    9375   DisassembleInstruction_304:
                    9376   ; {
                    9377   ; if(OpMode == (unsigned short int)(0x0003))
000052D4  0C43 0003 9378          cmp.w     #3,D3
000052D8  660C      9379          bne.s     DisassembleInstruction_305
                    9380   ; strcpyInstruction("SUBA.W ") ;
000052DA  4879 0000 9381          pea       @m68kde~1_305.L
000052DE  76FE      
000052E0  4E93      9382          jsr       (A3)
000052E2  584F      9383          addq.w    #4,A7
000052E4  600A      9384          bra.s     DisassembleInstruction_306
                    9385   DisassembleInstruction_305:
                    9386   ; else
                    9387   ; strcpyInstruction("SUBA.L ") ;
000052E6  4879 0000 9388          pea       @m68kde~1_306.L
000052EA  7706      
000052EC  4E93      9389          jsr       (A3)
000052EE  584F      9390          addq.w    #4,A7
                    9391   DisassembleInstruction_306:
                    9392   ; Decode6BitEA(OpCode,0,0,0)  ;
000052F0  42A7      9393          clr.l     -(A7)
000052F2  42A7      9394          clr.l     -(A7)
000052F4  42A7      9395          clr.l     -(A7)
000052F6  2F02      9396          move.l    D2,-(A7)
000052F8  4EB8 311E 9397          jsr       _Decode6BitEA
000052FC  DEFC 0010 9398          add.w     #16,A7
                    9399   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00005300  2042      9400          move.l    D2,A0
00005302  3210      9401          move.w    (A0),D1
00005304  E041      9402          asr.w     #8,D1
00005306  E241      9403          asr.w     #1,D1
00005308  C27C 0007 9404          and.w     #7,D1
0000530C  C2BC 0000 9405          and.l     #65535,D1
00005310  FFFF      
00005312  2F01      9406          move.l    D1,-(A7)
00005314  4879 0000 9407          pea       @m68kde~1_209.L
00005318  73FA      
0000531A  2F0C      9408          move.l    A4,-(A7)
0000531C  4E95      9409          jsr       (A5)
0000531E  DEFC 000C 9410          add.w     #12,A7
                    9411   ; strcatInstruction(TempString) ;
00005322  2F0C      9412          move.l    A4,-(A7)
00005324  4EB8 0CE0 9413          jsr       _strcatInstruction
00005328  584F      9414          addq.w    #4,A7
0000532A  6012      9415          bra.s     DisassembleInstruction_303
                    9416   DisassembleInstruction_302:
                    9417   ; }
                    9418   ; else {
                    9419   ; strcpyInstruction("SUB") ;
0000532C  4879 0000 9420          pea       @m68kde~1_307.L
00005330  770E      
00005332  4E93      9421          jsr       (A3)
00005334  584F      9422          addq.w    #4,A7
                    9423   ; Decode3BitOperandMode(OpCode) ;
00005336  2F02      9424          move.l    D2,-(A7)
00005338  4EB8 3546 9425          jsr       _Decode3BitOperandMode
0000533C  584F      9426          addq.w    #4,A7
                    9427   DisassembleInstruction_303:
                    9428   ; }
                    9429   ; }
                    9430   ; /////////////////////////////////////////////////////////////////////////////////
                    9431   ; // if instruction is SUBQ
                    9432   ; /////////////////////////////////////////////////////////////////////////////////
                    9433   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
0000533E  2042      9434          move.l    D2,A0
00005340  3010      9435          move.w    (A0),D0
00005342  C07C F100 9436          and.w     #61696,D0
00005346  0C40 5100 9437          cmp.w     #20736,D0
0000534A  6600 0072 9438          bne       DisassembleInstruction_309
                    9439   ; {
                    9440   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000534E  2042      9441          move.l    D2,A0
00005350  3010      9442          move.w    (A0),D0
00005352  EC40      9443          asr.w     #6,D0
00005354  C07C 0003 9444          and.w     #3,D0
00005358  3600      9445          move.w    D0,D3
                    9446   ; if(OpMode <= (unsigned short int)(0x0002))
0000535A  0C43 0002 9447          cmp.w     #2,D3
0000535E  6200 005E 9448          bhi       DisassembleInstruction_309
                    9449   ; {
                    9450   ; InstructionSize = 1;
00005362  24BC 0000 9451          move.l    #1,(A2)
00005366  0001      
                    9452   ; strcpyInstruction("SUBQ") ;
00005368  4879 0000 9453          pea       @m68kde~1_308.L
0000536C  7712      
0000536E  4E93      9454          jsr       (A3)
00005370  584F      9455          addq.w    #4,A7
                    9456   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005372  2042      9457          move.l    D2,A0
00005374  3210      9458          move.w    (A0),D1
00005376  C2BC 0000 9459          and.l     #65535,D1
0000537A  FFFF      
0000537C  2F01      9460          move.l    D1,-(A7)
0000537E  4EB8 2E8A 9461          jsr       _Decode2BitOperandSize
00005382  584F      9462          addq.w    #4,A7
                    9463   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005384  2042      9464          move.l    D2,A0
00005386  3210      9465          move.w    (A0),D1
00005388  E041      9466          asr.w     #8,D1
0000538A  E241      9467          asr.w     #1,D1
0000538C  C27C 0007 9468          and.w     #7,D1
00005390  C2BC 0000 9469          and.l     #65535,D1
00005394  FFFF      
00005396  2F01      9470          move.l    D1,-(A7)
00005398  4879 0000 9471          pea       @m68kde~1_219.L
0000539C  743A      
0000539E  2F0C      9472          move.l    A4,-(A7)
000053A0  4E95      9473          jsr       (A5)
000053A2  DEFC 000C 9474          add.w     #12,A7
                    9475   ; strcatInstruction(TempString) ;
000053A6  2F0C      9476          move.l    A4,-(A7)
000053A8  4EB8 0CE0 9477          jsr       _strcatInstruction
000053AC  584F      9478          addq.w    #4,A7
                    9479   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000053AE  42A7      9480          clr.l     -(A7)
000053B0  42A7      9481          clr.l     -(A7)
000053B2  42A7      9482          clr.l     -(A7)
000053B4  2F02      9483          move.l    D2,-(A7)
000053B6  4EB8 311E 9484          jsr       _Decode6BitEA
000053BA  DEFC 0010 9485          add.w     #16,A7
                    9486   DisassembleInstruction_309:
                    9487   ; }
                    9488   ; }
                    9489   ; /////////////////////////////////////////////////////////////////////////////////
                    9490   ; // if instruction is SUBX
                    9491   ; /////////////////////////////////////////////////////////////////////////////////
                    9492   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000053BE  2042      9493          move.l    D2,A0
000053C0  3010      9494          move.w    (A0),D0
000053C2  C07C F130 9495          and.w     #61744,D0
000053C6  0C40 9100 9496          cmp.w     #37120,D0
000053CA  6600 00A4 9497          bne       DisassembleInstruction_313
                    9498   ; {
                    9499   ; InstructionSize = 1;
000053CE  24BC 0000 9500          move.l    #1,(A2)
000053D2  0001      
                    9501   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000053D4  2042      9502          move.l    D2,A0
000053D6  3010      9503          move.w    (A0),D0
000053D8  EC40      9504          asr.w     #6,D0
000053DA  C07C 0003 9505          and.w     #3,D0
000053DE  3600      9506          move.w    D0,D3
                    9507   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000053E0  0C43 0003 9508          cmp.w     #3,D3
000053E4  6700 008A 9509          beq       DisassembleInstruction_313
                    9510   ; {
                    9511   ; strcpyInstruction("SUBX") ;
000053E8  4879 0000 9512          pea       @m68kde~1_309.L
000053EC  7718      
000053EE  4E93      9513          jsr       (A3)
000053F0  584F      9514          addq.w    #4,A7
                    9515   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000053F2  2042      9516          move.l    D2,A0
000053F4  3210      9517          move.w    (A0),D1
000053F6  C2BC 0000 9518          and.l     #65535,D1
000053FA  FFFF      
000053FC  2F01      9519          move.l    D1,-(A7)
000053FE  4EB8 2E8A 9520          jsr       _Decode2BitOperandSize
00005402  584F      9521          addq.w    #4,A7
                    9522   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005404  2042      9523          move.l    D2,A0
00005406  3010      9524          move.w    (A0),D0
00005408  C07C 0008 9525          and.w     #8,D0
0000540C  6600 0030 9526          bne       DisassembleInstruction_315
                    9527   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005410  2042      9528          move.l    D2,A0
00005412  3210      9529          move.w    (A0),D1
00005414  E041      9530          asr.w     #8,D1
00005416  E241      9531          asr.w     #1,D1
00005418  C27C 0007 9532          and.w     #7,D1
0000541C  48C1      9533          ext.l     D1
0000541E  2F01      9534          move.l    D1,-(A7)
00005420  2042      9535          move.l    D2,A0
00005422  3210      9536          move.w    (A0),D1
00005424  C27C 0007 9537          and.w     #7,D1
00005428  48C1      9538          ext.l     D1
0000542A  2F01      9539          move.l    D1,-(A7)
0000542C  4879 0000 9540          pea       @m68kde~1_310.L
00005430  771E      
00005432  2F0C      9541          move.l    A4,-(A7)
00005434  4E95      9542          jsr       (A5)
00005436  DEFC 0010 9543          add.w     #16,A7
0000543A  6000 002C 9544          bra       DisassembleInstruction_316
                    9545   DisassembleInstruction_315:
                    9546   ; else        // -(ax),-(ay) mode used
                    9547   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000543E  2042      9548          move.l    D2,A0
00005440  3210      9549          move.w    (A0),D1
00005442  E041      9550          asr.w     #8,D1
00005444  E241      9551          asr.w     #1,D1
00005446  C27C 0007 9552          and.w     #7,D1
0000544A  48C1      9553          ext.l     D1
0000544C  2F01      9554          move.l    D1,-(A7)
0000544E  2042      9555          move.l    D2,A0
00005450  3210      9556          move.w    (A0),D1
00005452  C27C 0007 9557          and.w     #7,D1
00005456  48C1      9558          ext.l     D1
00005458  2F01      9559          move.l    D1,-(A7)
0000545A  4879 0000 9560          pea       @m68kde~1_311.L
0000545E  7728      
00005460  2F0C      9561          move.l    A4,-(A7)
00005462  4E95      9562          jsr       (A5)
00005464  DEFC 0010 9563          add.w     #16,A7
                    9564   DisassembleInstruction_316:
                    9565   ; strcatInstruction(TempString) ;
00005468  2F0C      9566          move.l    A4,-(A7)
0000546A  4EB8 0CE0 9567          jsr       _strcatInstruction
0000546E  584F      9568          addq.w    #4,A7
                    9569   DisassembleInstruction_313:
                    9570   ; }
                    9571   ; }
                    9572   ; /////////////////////////////////////////////////////////////////////////////////
                    9573   ; // if instruction is SWAP
                    9574   ; /////////////////////////////////////////////////////////////////////////////////
                    9575   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005470  2042      9576          move.l    D2,A0
00005472  3010      9577          move.w    (A0),D0
00005474  C07C FFF8 9578          and.w     #65528,D0
00005478  0C40 4840 9579          cmp.w     #18496,D0
0000547C  662A      9580          bne.s     DisassembleInstruction_317
                    9581   ; {
                    9582   ; InstructionSize = 1;
0000547E  24BC 0000 9583          move.l    #1,(A2)
00005482  0001      
                    9584   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005484  2042      9585          move.l    D2,A0
00005486  3010      9586          move.w    (A0),D0
00005488  C07C 0007 9587          and.w     #7,D0
0000548C  3A00      9588          move.w    D0,D5
                    9589   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
0000548E  CABC 0000 9590          and.l     #65535,D5
00005492  FFFF      
00005494  2F05      9591          move.l    D5,-(A7)
00005496  4879 0000 9592          pea       @m68kde~1_312.L
0000549A  7738      
0000549C  4879 0803 9593          pea       _Instruction.L
000054A0  04E2      
000054A2  4E95      9594          jsr       (A5)
000054A4  DEFC 000C 9595          add.w     #12,A7
                    9596   DisassembleInstruction_317:
                    9597   ; }
                    9598   ; /////////////////////////////////////////////////////////////////////////////////
                    9599   ; // if instruction is TAS
                    9600   ; /////////////////////////////////////////////////////////////////////////////////
                    9601   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000054A8  2042      9602          move.l    D2,A0
000054AA  3010      9603          move.w    (A0),D0
000054AC  C07C FFC0 9604          and.w     #65472,D0
000054B0  0C40 4AC0 9605          cmp.w     #19136,D0
000054B4  662A      9606          bne.s     DisassembleInstruction_321
                    9607   ; {
                    9608   ; if(*OpCode != (unsigned short int)(0x4AFC))
000054B6  2042      9609          move.l    D2,A0
000054B8  3010      9610          move.w    (A0),D0
000054BA  0C40 4AFC 9611          cmp.w     #19196,D0
000054BE  6720      9612          beq.s     DisassembleInstruction_321
                    9613   ; {
                    9614   ; InstructionSize = 1;
000054C0  24BC 0000 9615          move.l    #1,(A2)
000054C4  0001      
                    9616   ; strcpyInstruction("TAS ") ;
000054C6  4879 0000 9617          pea       @m68kde~1_313.L
000054CA  7742      
000054CC  4E93      9618          jsr       (A3)
000054CE  584F      9619          addq.w    #4,A7
                    9620   ; Decode6BitEA(OpCode,0,0,0) ;
000054D0  42A7      9621          clr.l     -(A7)
000054D2  42A7      9622          clr.l     -(A7)
000054D4  42A7      9623          clr.l     -(A7)
000054D6  2F02      9624          move.l    D2,-(A7)
000054D8  4EB8 311E 9625          jsr       _Decode6BitEA
000054DC  DEFC 0010 9626          add.w     #16,A7
                    9627   DisassembleInstruction_321:
                    9628   ; }
                    9629   ; }
                    9630   ; /////////////////////////////////////////////////////////////////////////////////
                    9631   ; // if instruction is TRAP
                    9632   ; /////////////////////////////////////////////////////////////////////////////////
                    9633   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000054E0  2042      9634          move.l    D2,A0
000054E2  3010      9635          move.w    (A0),D0
000054E4  C07C FFF0 9636          and.w     #65520,D0
000054E8  0C40 4E40 9637          cmp.w     #20032,D0
000054EC  6622      9638          bne.s     DisassembleInstruction_323
                    9639   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
000054EE  2042      9640          move.l    D2,A0
000054F0  3210      9641          move.w    (A0),D1
000054F2  C27C 000F 9642          and.w     #15,D1
000054F6  C2BC 0000 9643          and.l     #65535,D1
000054FA  FFFF      
000054FC  2F01      9644          move.l    D1,-(A7)
000054FE  4879 0000 9645          pea       @m68kde~1_314.L
00005502  7748      
00005504  4879 0803 9646          pea       _Instruction.L
00005508  04E2      
0000550A  4E95      9647          jsr       (A5)
0000550C  DEFC 000C 9648          add.w     #12,A7
                    9649   DisassembleInstruction_323:
                    9650   ; }
                    9651   ; /////////////////////////////////////////////////////////////////////////////////
                    9652   ; // if instruction is TRAPV
                    9653   ; /////////////////////////////////////////////////////////////////////////////////
                    9654   ; if(*OpCode == (unsigned short int)(0x4E76))
00005510  2042      9655          move.l    D2,A0
00005512  3010      9656          move.w    (A0),D0
00005514  0C40 4E76 9657          cmp.w     #20086,D0
00005518  6610      9658          bne.s     DisassembleInstruction_325
                    9659   ; {
                    9660   ; InstructionSize = 1;
0000551A  24BC 0000 9661          move.l    #1,(A2)
0000551E  0001      
                    9662   ; strcpyInstruction("TRAPV") ;
00005520  4879 0000 9663          pea       @m68kde~1_315.L
00005524  7752      
00005526  4E93      9664          jsr       (A3)
00005528  584F      9665          addq.w    #4,A7
                    9666   DisassembleInstruction_325:
                    9667   ; }
                    9668   ; /////////////////////////////////////////////////////////////////////////////////
                    9669   ; // if instruction is TST
                    9670   ; /////////////////////////////////////////////////////////////////////////////////
                    9671   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
0000552A  2042      9672          move.l    D2,A0
0000552C  3010      9673          move.w    (A0),D0
0000552E  C07C FF00 9674          and.w     #65280,D0
00005532  0C40 4A00 9675          cmp.w     #18944,D0
00005536  6600 005A 9676          bne       DisassembleInstruction_329
                    9677   ; {
                    9678   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000553A  2042      9679          move.l    D2,A0
0000553C  3010      9680          move.w    (A0),D0
0000553E  EC40      9681          asr.w     #6,D0
00005540  C07C 0003 9682          and.w     #3,D0
00005544  3D40 FFE2 9683          move.w    D0,-30(A6)
                    9684   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005548  2042      9685          move.l    D2,A0
0000554A  3010      9686          move.w    (A0),D0
0000554C  0C40 4AFC 9687          cmp.w     #19196,D0
00005550  6700 0040 9688          beq       DisassembleInstruction_329
00005554  302E FFE2 9689          move.w    -30(A6),D0
00005558  0C40 0003 9690          cmp.w     #3,D0
0000555C  6700 0034 9691          beq       DisassembleInstruction_329
                    9692   ; InstructionSize = 1;
00005560  24BC 0000 9693          move.l    #1,(A2)
00005564  0001      
                    9694   ; strcpyInstruction("TST") ;
00005566  4879 0000 9695          pea       @m68kde~1_316.L
0000556A  7758      
0000556C  4E93      9696          jsr       (A3)
0000556E  584F      9697          addq.w    #4,A7
                    9698   ; Decode2BitOperandSize(*OpCode) ;
00005570  2042      9699          move.l    D2,A0
00005572  3210      9700          move.w    (A0),D1
00005574  C2BC 0000 9701          and.l     #65535,D1
00005578  FFFF      
0000557A  2F01      9702          move.l    D1,-(A7)
0000557C  4EB8 2E8A 9703          jsr       _Decode2BitOperandSize
00005580  584F      9704          addq.w    #4,A7
                    9705   ; Decode6BitEA(OpCode,0,0,0) ;
00005582  42A7      9706          clr.l     -(A7)
00005584  42A7      9707          clr.l     -(A7)
00005586  42A7      9708          clr.l     -(A7)
00005588  2F02      9709          move.l    D2,-(A7)
0000558A  4EB8 311E 9710          jsr       _Decode6BitEA
0000558E  DEFC 0010 9711          add.w     #16,A7
                    9712   DisassembleInstruction_329:
                    9713   ; }
                    9714   ; }
                    9715   ; /////////////////////////////////////////////////////////////////////////////////
                    9716   ; // if instruction is UNLK
                    9717   ; //////////////////////////////////////////////////////////
                    9718   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005592  2042      9719          move.l    D2,A0
00005594  3010      9720          move.w    (A0),D0
00005596  C07C FFF8 9721          and.w     #65528,D0
0000559A  0C40 4E58 9722          cmp.w     #20056,D0
0000559E  6628      9723          bne.s     DisassembleInstruction_331
                    9724   ; {
                    9725   ; InstructionSize = 1;
000055A0  24BC 0000 9726          move.l    #1,(A2)
000055A4  0001      
                    9727   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000055A6  2042      9728          move.l    D2,A0
000055A8  3210      9729          move.w    (A0),D1
000055AA  C27C 0007 9730          and.w     #7,D1
000055AE  C2BC 0000 9731          and.l     #65535,D1
000055B2  FFFF      
000055B4  2F01      9732          move.l    D1,-(A7)
000055B6  4879 0000 9733          pea       @m68kde~1_317.L
000055BA  775C      
000055BC  4879 0803 9734          pea       _Instruction.L
000055C0  04E2      
000055C2  4E95      9735          jsr       (A5)
000055C4  DEFC 000C 9736          add.w     #12,A7
                    9737   DisassembleInstruction_331:
                    9738   ; }
                    9739   ; FormatInstruction() ;
000055C8  4EB8 2DF8 9740          jsr       _FormatInstruction
000055CC  4CDF 3CFC 9741          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000055D0  4E5E      9742          unlk      A6
000055D2  4E75      9743          rts
                    9744   ; }
                    9745   _strcpy:
000055D4  206F 0004 9746          move.l    (4,A7),A0
000055D8  226F 0008 9747          move.l    (8,A7),A1
000055DC  2008      9748          move.l    A0,D0
                    9749   strcpy_1:
000055DE  10D9      9750          move.b    (A1)+,(A0)+
000055E0  66FC      9751          bne.s     strcpy_1
000055E2  4E75      9752          rts
                    9753   ULDIV:
000055E4  4E56 0000 9754          link    A6,#0
000055E8  48E7 C000 9755          movem.l D0/D1,-(A7)
000055EC  222E 0008 9756          move.l  8(A6),D1
000055F0  202E 000C 9757          move.l  12(A6),D0
000055F4  6036      9758          bra.s   ldiv_3
                    9759   LDIV:
000055F6  4E56 0000 9760          link    A6,#0
000055FA  48E7 C000 9761          movem.l D0/D1,-(A7)
000055FE  222E 0008 9762          move.l  8(A6),D1
00005602  202E 000C 9763          move.l  12(A6),D0
00005606  4A80      9764          tst.l   D0
00005608  6A0E      9765          bpl.s   ldiv_1
0000560A  4480      9766          neg.l   D0
0000560C  4A81      9767          tst.l   D1
0000560E  6A14      9768          bpl.s   ldiv_2
00005610  4481      9769          neg.l   D1
00005612  612A      9770          bsr.s   dodiv
00005614  4481      9771          neg.l   D1
00005616  6016      9772          bra.s   ldiv_4
                    9773   ldiv_1:
00005618  4A81      9774          tst.l   D1
0000561A  6A10      9775          bpl.s   ldiv_3
0000561C  4481      9776          neg.l   D1
0000561E  611E      9777          bsr.s   dodiv
00005620  4480      9778          neg.l   D0
00005622  600A      9779          bra.s   ldiv_4
                    9780   ldiv_2:
00005624  6118      9781          bsr.s   dodiv
00005626  4480      9782          neg.l   D0
00005628  4481      9783          neg.l   D1
0000562A  6002      9784          bra.s   ldiv_4
                    9785   ldiv_3:
0000562C  6110      9786          bsr.s   dodiv
                    9787   ldiv_4:
0000562E  2D40 0008 9788          move.l  D0,8(A6)
00005632  2D41 000C 9789          move.l  D1,12(A6)
00005636  4CDF 0003 9790          movem.l (A7)+,D0/D1
0000563A  4E5E      9791          unlk    A6
0000563C  4E75      9792          rts
                    9793   dodiv:
0000563E  0C81 0000 9794          cmpi.l  #$FFFF,D1
00005642  FFFF      
00005644  6236      9795          bhi.s   dodiv_2
00005646  0C80 0000 9796          cmpi.l  #$FFFF,D0
0000564A  FFFF      
0000564C  6210      9797          bhi.s   dodiv_1
0000564E  80C1      9798          divu    D1,D0
00005650  2200      9799          move.l  D0,D1
00005652  4241      9800          clr.w   D1
00005654  4841      9801          swap    D1
00005656  0280 0000 9802          andi.l  #$FFFF,D0
0000565A  FFFF      
0000565C  4E75      9803          rts
                    9804   dodiv_1:
0000565E  48A7 A000 9805          movem.w D0/D2,-(A7)
00005662  4240      9806          clr.w   D0
00005664  4840      9807          swap    D0
00005666  80C1      9808          divu    D1,D0
00005668  3400      9809          move.w  D0,D2
0000566A  301F      9810          move.w  (A7)+,D0
0000566C  80C1      9811          divu    D1,D0
0000566E  4840      9812          swap    D0
00005670  4281      9813          clr.l   D1
00005672  3200      9814          move.w  D0,D1
00005674  3002      9815          move.w  D2,D0
00005676  4840      9816          swap    D0
00005678  341F      9817          move.w  (A7)+,D2
0000567A  4E75      9818          rts
                    9819   dodiv_2:
0000567C  48E7 3800 9820          movem.l D2/D3/D4,-(A7)
00005680  2401      9821          move.l  D1,D2
00005682  4242      9822          clr.w   D2
00005684  4842      9823          swap    D2
00005686  5282      9824          addq.l  #1,D2
00005688  2600      9825          move.l  D0,D3
0000568A  2801      9826          move.l  D1,D4
0000568C  2202      9827          move.l  D2,D1
0000568E  61CE      9828          bsr.s   dodiv_1
00005690  2204      9829          move.l  D4,D1
00005692  82C2      9830          divu    D2,D1
00005694  80C1      9831          divu    D1,D0
00005696  0280 0000 9832          andi.l  #$FFFF,D0
0000569A  FFFF      
                    9833   dodiv_3:
0000569C  2204      9834          move.l  D4,D1
0000569E  2404      9835          move.l  D4,D2
000056A0  4842      9836          swap    D2
000056A2  C2C0      9837          mulu    D0,D1
000056A4  C4C0      9838          mulu    D0,D2
000056A6  4842      9839          swap    D2
000056A8  D282      9840          add.l   D2,D1
000056AA  9283      9841          sub.l   D3,D1
000056AC  620A      9842          bhi.s   dodiv_4
000056AE  4481      9843          neg.l   D1
000056B0  B881      9844          cmp.l   D1,D4
000056B2  6208      9845          bhi.s   dodiv_5
000056B4  5280      9846          addq.l  #1,D0
000056B6  60E4      9847          bra.s   dodiv_3
                    9848   dodiv_4:
000056B8  5380      9849          subq.l  #1,D0
000056BA  60E0      9850          bra.s   dodiv_3
                    9851   dodiv_5:
000056BC  4CDF 001C 9852          movem.l (A7)+,D2/D3/D4
000056C0  4E75      9853          rts
                    9854   _putch:
000056C2  4E56 0000 9855          link      A6,#0
000056C6  2F02      9856          move.l    D2,-(A7)
000056C8  242E 0008 9857          move.l    8(A6),D2
000056CC  0C82 0000 9858          cmp.l     #10,D2
000056D0  000A      
000056D2  660A      9859          bne.s     putch_1
000056D4  4878 000D 9860          pea       13
000056D8  4EB8 0B50 9861          jsr       __putch
000056DC  584F      9862          addq.w    #4,A7
                    9863   putch_1:
000056DE  2F02      9864          move.l    D2,-(A7)
000056E0  4EB8 0B50 9865          jsr       __putch
000056E4  584F      9866          addq.w    #4,A7
000056E6  2002      9867          move.l    D2,D0
000056E8  241F      9868          move.l    (A7)+,D2
000056EA  4E5E      9869          unlk      A6
000056EC  4E75      9870          rts
                    9871   _getch:
000056EE  2F02      9872          move.l    D2,-(A7)
000056F0  2439 0803 9873          move.l    __ungetbuf.L,D2
000056F4  00C0      
000056F6  2039 0803 9874          move.l    __ungetbuf.L,D0
000056FA  00C0      
000056FC  0C80 FFFF 9875          cmp.l     #-1,D0
00005700  FFFF      
00005702  670C      9876          beq.s     getch_1
00005704  23FC FFFF 9877          move.l    #-1,__ungetbuf.L
00005708  FFFF 0803 
0000570C  00C0      
0000570E  6010      9878          bra.s     getch_3
                    9879   getch_1:
00005710  4EB8 0B7C 9880          jsr       __getch
00005714  2400      9881          move.l    D0,D2
00005716  0C80 0000 9882          cmp.l     #13,D0
0000571A  000D      
0000571C  6602      9883          bne.s     getch_3
0000571E  740A      9884          moveq     #10,D2
                    9885   getch_3:
00005720  2002      9886          move.l    D2,D0
00005722  241F      9887          move.l    (A7)+,D2
00005724  4E75      9888          rts
                    9889   _tolower:
00005726  202F 0004 9890          move.l    4(A7),D0
0000572A  0C80 0000 9891          cmp.l     #'A',D0
0000572E  0041      
00005730  6D0E      9892          blt.s     tolower_1
00005732  0C80 0000 9893          cmp.l     #'Z',D0
00005736  005A      
00005738  6E06      9894          bgt.s     tolower_1
0000573A  0680 0000 9895          add.l     #$20,D0
0000573E  0020      
                    9896   tolower_1:
00005740  4E75      9897          rts
                    9898   _sprintf:
00005742  4E56 FFFC 9899          link      A6,#-4
00005746  2F02      9900          move.l    D2,-(A7)
00005748  41EE 000C 9901          lea       12(A6),A0
0000574C  5848      9902          addq.w    #4,A0
0000574E  2408      9903          move.l    A0,D2
00005750  2F02      9904          move.l    D2,-(A7)
00005752  2F2E 000C 9905          move.l    12(A6),-(A7)
00005756  2F2E 0008 9906          move.l    8(A6),-(A7)
0000575A  4EB9 0000 9907          jsr       _doprint
0000575E  587C      
00005760  DEFC 000C 9908          add.w     #12,A7
00005764  2D40 FFFC 9909          move.l    D0,-4(A6)
00005768  4282      9910          clr.l     D2
0000576A  202E FFFC 9911          move.l    -4(A6),D0
0000576E  241F      9912          move.l    (A7)+,D2
00005770  4E5E      9913          unlk      A6
00005772  4E75      9914          rts
                    9915   _strcat:
00005774  206F 0004 9916          move.l    (4,A7),A0
00005778  226F 0008 9917          move.l    (8,A7),A1
0000577C  2008      9918          move.l    A0,D0
                    9919   strcat_1:
0000577E  4A18      9920          tst.b     (A0)+
00005780  66FC      9921          bne.s     strcat_1
00005782  5388      9922          subq.l    #1,A0
                    9923   strcat_2:
00005784  10D9      9924          move.b    (A1)+,(A0)+
00005786  66FC      9925          bne.s     strcat_2
00005788  4E75      9926          rts
                    9927   _toupper:
0000578A  202F 0004 9928          move.l    4(A7),D0
0000578E  0C80 0000 9929          cmp.l     #'a',D0
00005792  0061      
00005794  6D0E      9930          blt.s     toupper_1
00005796  0C80 0000 9931          cmp.l     #'z',D0
0000579A  007A      
0000579C  6E06      9932          bgt.s     toupper_1
0000579E  0480 0000 9933          sub.l     #$20,D0
000057A2  0020      
                    9934   toupper_1:
000057A4  4E75      9935          rts
                    9936   _printf:
000057A6  4E56 FFFC 9937          link      A6,#-4
000057AA  2F02      9938          move.l    D2,-(A7)
000057AC  41EE 0008 9939          lea       8(A6),A0
000057B0  5848      9940          addq.w    #4,A0
000057B2  2408      9941          move.l    A0,D2
000057B4  2F02      9942          move.l    D2,-(A7)
000057B6  2F2E 0008 9943          move.l    8(A6),-(A7)
000057BA  42A7      9944          clr.l     -(A7)
000057BC  4EB9 0000 9945          jsr       _doprint
000057C0  587C      
000057C2  DEFC 000C 9946          add.w     #12,A7
000057C6  2D40 FFFC 9947          move.l    D0,-4(A6)
000057CA  4282      9948          clr.l     D2
000057CC  202E FFFC 9949          move.l    -4(A6),D0
000057D0  241F      9950          move.l    (A7)+,D2
000057D2  4E5E      9951          unlk      A6
000057D4  4E75      9952          rts
                    9953   @doprint_copy:
000057D6  4E56 0000 9954          link      A6,#0
000057DA  206E 0008 9955          move.l    8(A6),A0
000057DE  4A90      9956          tst.l     (A0)
000057E0  6710      9957          beq.s     @doprint_copy_1
000057E2  202E 000C 9958          move.l    12(A6),D0
000057E6  206E 0008 9959          move.l    8(A6),A0
000057EA  2250      9960          move.l    (A0),A1
000057EC  5290      9961          addq.l    #1,(A0)
000057EE  1280      9962          move.b    D0,(A1)
000057F0  600A      9963          bra.s     @doprint_copy_2
                    9964   @doprint_copy_1:
000057F2  2F2E 000C 9965          move.l    12(A6),-(A7)
000057F6  4EB8 56C2 9966          jsr       _putch
000057FA  584F      9967          addq.w    #4,A7
                    9968   @doprint_copy_2:
000057FC  4E5E      9969          unlk      A6
000057FE  4E75      9970          rts
                    9971   @doprint_getval:
00005800  4E56 0000 9972          link      A6,#0
00005804  48E7 3000 9973          movem.l   D2/D3,-(A7)
00005808  262E 0008 9974          move.l    8(A6),D3
0000580C  4282      9975          clr.l     D2
0000580E  2043      9976          move.l    D3,A0
00005810  2050      9977          move.l    (A0),A0
00005812  1010      9978          move.b    (A0),D0
00005814  0C00 002A 9979          cmp.b     #42,D0
00005818  6612      9980          bne.s     @doprint_getval_1
0000581A  206E 000C 9981          move.l    12(A6),A0
0000581E  2250      9982          move.l    (A0),A1
00005820  5890      9983          addq.l    #4,(A0)
00005822  2411      9984          move.l    (A1),D2
00005824  2043      9985          move.l    D3,A0
00005826  5290      9986          addq.l    #1,(A0)
00005828  6000 0048 9987          bra       @doprint_getval_5
                    9988   @doprint_getval_1:
0000582C  7001      9989          moveq     #1,D0
0000582E  2043      9990          move.l    D3,A0
00005830  2050      9991          move.l    (A0),A0
00005832  1210      9992          move.b    (A0),D1
00005834  4881      9993          ext.w     D1
00005836  48C1      9994          ext.l     D1
00005838  D081      9995          add.l     D1,D0
0000583A  41F9 0000 9996          lea       __ctype.L,A0
0000583E  778A      
00005840  1030 0800 9997          move.b    0(A0,D0.L),D0
00005844  C03C 0004 9998          and.b     #4,D0
00005848  6728      9999          beq.s     @doprint_getval_5
0000584A  2F02      10000          move.l    D2,-(A7)
0000584C  4878 000A 10001          pea       10
00005850  4EB9 0000 10002          jsr       LMUL
00005854  6018      
00005856  2017      10003          move.l    (A7),D0
00005858  504F      10004          addq.w    #8,A7
0000585A  2043      10005          move.l    D3,A0
0000585C  2250      10006          move.l    (A0),A1
0000585E  5290      10007          addq.l    #1,(A0)
00005860  1211      10008          move.b    (A1),D1
00005862  4881      10009          ext.w     D1
00005864  48C1      10010          ext.l     D1
00005866  D081      10011          add.l     D1,D0
00005868  0480 0000 10012          sub.l     #48,D0
0000586C  0030      
0000586E  2400      10013          move.l    D0,D2
00005870  60BA      10014          bra       @doprint_getval_1
                    10015   @doprint_getval_5:
00005872  2002      10016          move.l    D2,D0
00005874  4CDF 000C 10017          movem.l   (A7)+,D2/D3
00005878  4E5E      10018          unlk      A6
0000587A  4E75      10019          rts
                    10020   _doprint:
0000587C  4E56 FFCC 10021          link      A6,#-52
00005880  48E7 3F3C 10022          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005884  45EE 0008 10023          lea       8(A6),A2
00005888  47F8 57D6 10024          lea       @doprint_copy.L,A3
0000588C  49F9 0000 10025          lea       _ultoa.L,A4
00005890  5FA4      
00005892  4286      10026          clr.l     D6
                    10027   doprint_1:
00005894  206E 000C 10028          move.l    12(A6),A0
00005898  4A10      10029          tst.b     (A0)
0000589A  6700 05EA 10030          beq       doprint_3
0000589E  206E 000C 10031          move.l    12(A6),A0
000058A2  1010      10032          move.b    (A0),D0
000058A4  0C00 0025 10033          cmp.b     #37,D0
000058A8  671C      10034          beq.s     doprint_4
000058AA  206E 000C 10035          move.l    12(A6),A0
000058AE  52AE 000C 10036          addq.l    #1,12(A6)
000058B2  1210      10037          move.b    (A0),D1
000058B4  4881      10038          ext.w     D1
000058B6  48C1      10039          ext.l     D1
000058B8  2F01      10040          move.l    D1,-(A7)
000058BA  2F0A      10041          move.l    A2,-(A7)
000058BC  4E93      10042          jsr       (A3)
000058BE  504F      10043          addq.w    #8,A7
000058C0  5286      10044          addq.l    #1,D6
000058C2  6000 05BE 10045          bra       doprint_2
                    10046   doprint_4:
000058C6  52AE 000C 10047          addq.l    #1,12(A6)
000058CA  422E FFD3 10048          clr.b     -45(A6)
000058CE  422E FFD2 10049          clr.b     -46(A6)
000058D2  422E FFD0 10050          clr.b     -48(A6)
000058D6  422E FFCF 10051          clr.b     -49(A6)
000058DA  422E FFCE 10052          clr.b     -50(A6)
000058DE  422E FFCD 10053          clr.b     -51(A6)
000058E2  42AE FFFC 10054          clr.l     -4(A6)
000058E6  7AFF      10055          moveq     #-1,D5
000058E8  41EE FFDC 10056          lea       -36(A6),A0
000058EC  2608      10057          move.l    A0,D3
000058EE  2408      10058          move.l    A0,D2
                    10059   doprint_6:
000058F0  206E 000C 10060          move.l    12(A6),A0
000058F4  1010      10061          move.b    (A0),D0
000058F6  4880      10062          ext.w     D0
000058F8  48C0      10063          ext.l     D0
000058FA  0C80 0000 10064          cmp.l     #43,D0
000058FE  002B      
00005900  6730      10065          beq.s     doprint_12
00005902  6E18      10066          bgt.s     doprint_15
00005904  0C80 0000 10067          cmp.l     #35,D0
00005908  0023      
0000590A  6700 003E 10068          beq       doprint_14
0000590E  6E00 0046 10069          bgt       doprint_9
00005912  0C80 0000 10070          cmp.l     #32,D0
00005916  0020      
00005918  6724      10071          beq.s     doprint_13
0000591A  603A      10072          bra.s     doprint_9
                    10073   doprint_15:
0000591C  0C80 0000 10074          cmp.l     #45,D0
00005920  002D      
00005922  6702      10075          beq.s     doprint_11
00005924  6030      10076          bra.s     doprint_9
                    10077   doprint_11:
00005926  1D7C 0001 10078          move.b    #1,-51(A6)
0000592A  FFCD      
0000592C  52AE 000C 10079          addq.l    #1,12(A6)
00005930  6026      10080          bra.s     doprint_7
                    10081   doprint_12:
00005932  1D7C 0001 10082          move.b    #1,-50(A6)
00005936  FFCE      
00005938  52AE 000C 10083          addq.l    #1,12(A6)
0000593C  601A      10084          bra.s     doprint_7
                    10085   doprint_13:
0000593E  1D7C 0001 10086          move.b    #1,-49(A6)
00005942  FFCF      
00005944  52AE 000C 10087          addq.l    #1,12(A6)
00005948  600E      10088          bra.s     doprint_7
                    10089   doprint_14:
0000594A  1D7C 0001 10090          move.b    #1,-48(A6)
0000594E  FFD0      
00005950  52AE 000C 10091          addq.l    #1,12(A6)
00005954  6002      10092          bra.s     doprint_7
                    10093   doprint_9:
00005956  6002      10094          bra.s     doprint_8
                    10095   doprint_7:
00005958  6096      10096          bra       doprint_6
                    10097   doprint_8:
0000595A  206E 000C 10098          move.l    12(A6),A0
0000595E  1010      10099          move.b    (A0),D0
00005960  0C00 0030 10100          cmp.b     #48,D0
00005964  660A      10101          bne.s     doprint_16
00005966  52AE 000C 10102          addq.l    #1,12(A6)
0000596A  1D7C 0001 10103          move.b    #1,-46(A6)
0000596E  FFD2      
                    10104   doprint_16:
00005970  486E 0010 10105          pea       16(A6)
00005974  486E 000C 10106          pea       12(A6)
00005978  4EB8 5800 10107          jsr       @doprint_getval
0000597C  504F      10108          addq.w    #8,A7
0000597E  2A40      10109          move.l    D0,A5
00005980  206E 000C 10110          move.l    12(A6),A0
00005984  1010      10111          move.b    (A0),D0
00005986  0C00 002E 10112          cmp.b     #46,D0
0000598A  6614      10113          bne.s     doprint_18
0000598C  52AE 000C 10114          addq.l    #1,12(A6)
00005990  486E 0010 10115          pea       16(A6)
00005994  486E 000C 10116          pea       12(A6)
00005998  4EB8 5800 10117          jsr       @doprint_getval
0000599C  504F      10118          addq.w    #8,A7
0000599E  2A00      10119          move.l    D0,D5
                    10120   doprint_18:
000059A0  206E 000C 10121          move.l    12(A6),A0
000059A4  1010      10122          move.b    (A0),D0
000059A6  0C00 006C 10123          cmp.b     #108,D0
000059AA  660A      10124          bne.s     doprint_20
000059AC  52AE 000C 10125          addq.l    #1,12(A6)
000059B0  1D7C 0001 10126          move.b    #1,-45(A6)
000059B4  FFD3      
                    10127   doprint_20:
000059B6  206E 000C 10128          move.l    12(A6),A0
000059BA  1010      10129          move.b    (A0),D0
000059BC  4880      10130          ext.w     D0
000059BE  48C0      10131          ext.l     D0
000059C0  0C80 0000 10132          cmp.l     #111,D0
000059C4  006F      
000059C6  6700 00D8 10133          beq       doprint_27
000059CA  6E34      10134          bgt.s     doprint_33
000059CC  0C80 0000 10135          cmp.l     #100,D0
000059D0  0064      
000059D2  6700 0054 10136          beq       doprint_24
000059D6  6E1C      10137          bgt.s     doprint_34
000059D8  0C80 0000 10138          cmp.l     #99,D0
000059DC  0063      
000059DE  6700 0130 10139          beq       doprint_30
000059E2  6E00 0174 10140          bgt       doprint_22
000059E6  0C80 0000 10141          cmp.l     #88,D0
000059EA  0058      
000059EC  6700 00EA 10142          beq       doprint_28
000059F0  6000 0166 10143          bra       doprint_22
                    10144   doprint_34:
000059F4  0C80 0000 10145          cmp.l     #105,D0
000059F8  0069      
000059FA  672C      10146          beq.s     doprint_24
000059FC  6000 015A 10147          bra       doprint_22
                    10148   doprint_33:
00005A00  0C80 0000 10149          cmp.l     #117,D0
00005A04  0075      
00005A06  6700 0060 10150          beq       doprint_26
00005A0A  6E0E      10151          bgt.s     doprint_35
00005A0C  0C80 0000 10152          cmp.l     #115,D0
00005A10  0073      
00005A12  6700 0124 10153          beq       doprint_31
00005A16  6000 0140 10154          bra       doprint_22
                    10155   doprint_35:
00005A1A  0C80 0000 10156          cmp.l     #120,D0
00005A1E  0078      
00005A20  6700 00B6 10157          beq       doprint_28
00005A24  6000 0132 10158          bra       doprint_22
                    10159   doprint_24:
00005A28  4A2E FFD3 10160          tst.b     -45(A6)
00005A2C  671C      10161          beq.s     doprint_36
00005A2E  4878 000A 10162          pea       10
00005A32  2F03      10163          move.l    D3,-(A7)
00005A34  206E 0010 10164          move.l    16(A6),A0
00005A38  58AE 0010 10165          addq.l    #4,16(A6)
00005A3C  2F10      10166          move.l    (A0),-(A7)
00005A3E  4EB9 0000 10167          jsr       _ltoa
00005A42  5F20      
00005A44  DEFC 000C 10168          add.w     #12,A7
00005A48  601A      10169          bra.s     doprint_37
                    10170   doprint_36:
00005A4A  4878 000A 10171          pea       10
00005A4E  2F03      10172          move.l    D3,-(A7)
00005A50  206E 0010 10173          move.l    16(A6),A0
00005A54  58AE 0010 10174          addq.l    #4,16(A6)
00005A58  2F10      10175          move.l    (A0),-(A7)
00005A5A  4EB9 0000 10176          jsr       _ltoa
00005A5E  5F20      
00005A60  DEFC 000C 10177          add.w     #12,A7
                    10178   doprint_37:
00005A64  6000 0100 10179          bra       doprint_23
                    10180   doprint_26:
00005A68  4A2E FFD3 10181          tst.b     -45(A6)
00005A6C  6718      10182          beq.s     doprint_38
00005A6E  4878 000A 10183          pea       10
00005A72  2F03      10184          move.l    D3,-(A7)
00005A74  206E 0010 10185          move.l    16(A6),A0
00005A78  58AE 0010 10186          addq.l    #4,16(A6)
00005A7C  2F10      10187          move.l    (A0),-(A7)
00005A7E  4E94      10188          jsr       (A4)
00005A80  DEFC 000C 10189          add.w     #12,A7
00005A84  6016      10190          bra.s     doprint_39
                    10191   doprint_38:
00005A86  4878 000A 10192          pea       10
00005A8A  2F03      10193          move.l    D3,-(A7)
00005A8C  206E 0010 10194          move.l    16(A6),A0
00005A90  58AE 0010 10195          addq.l    #4,16(A6)
00005A94  2F10      10196          move.l    (A0),-(A7)
00005A96  4E94      10197          jsr       (A4)
00005A98  DEFC 000C 10198          add.w     #12,A7
                    10199   doprint_39:
00005A9C  6000 00C8 10200          bra       doprint_23
                    10201   doprint_27:
00005AA0  4A2E FFD3 10202          tst.b     -45(A6)
00005AA4  6718      10203          beq.s     doprint_40
00005AA6  4878 0008 10204          pea       8
00005AAA  2F03      10205          move.l    D3,-(A7)
00005AAC  206E 0010 10206          move.l    16(A6),A0
00005AB0  58AE 0010 10207          addq.l    #4,16(A6)
00005AB4  2F10      10208          move.l    (A0),-(A7)
00005AB6  4E94      10209          jsr       (A4)
00005AB8  DEFC 000C 10210          add.w     #12,A7
00005ABC  6016      10211          bra.s     doprint_41
                    10212   doprint_40:
00005ABE  4878 0008 10213          pea       8
00005AC2  2F03      10214          move.l    D3,-(A7)
00005AC4  206E 0010 10215          move.l    16(A6),A0
00005AC8  58AE 0010 10216          addq.l    #4,16(A6)
00005ACC  2F10      10217          move.l    (A0),-(A7)
00005ACE  4E94      10218          jsr       (A4)
00005AD0  DEFC 000C 10219          add.w     #12,A7
                    10220   doprint_41:
00005AD4  6000 0090 10221          bra       doprint_23
                    10222   doprint_28:
00005AD8  4A2E FFD3 10223          tst.b     -45(A6)
00005ADC  6718      10224          beq.s     doprint_42
00005ADE  4878 0010 10225          pea       16
00005AE2  2F03      10226          move.l    D3,-(A7)
00005AE4  206E 0010 10227          move.l    16(A6),A0
00005AE8  58AE 0010 10228          addq.l    #4,16(A6)
00005AEC  2F10      10229          move.l    (A0),-(A7)
00005AEE  4E94      10230          jsr       (A4)
00005AF0  DEFC 000C 10231          add.w     #12,A7
00005AF4  6016      10232          bra.s     doprint_43
                    10233   doprint_42:
00005AF6  4878 0010 10234          pea       16
00005AFA  2F03      10235          move.l    D3,-(A7)
00005AFC  206E 0010 10236          move.l    16(A6),A0
00005B00  58AE 0010 10237          addq.l    #4,16(A6)
00005B04  2F10      10238          move.l    (A0),-(A7)
00005B06  4E94      10239          jsr       (A4)
00005B08  DEFC 000C 10240          add.w     #12,A7
                    10241   doprint_43:
00005B0C  6000 0058 10242          bra       doprint_23
                    10243   doprint_30:
00005B10  206E 0010 10244          move.l    16(A6),A0
00005B14  58AE 0010 10245          addq.l    #4,16(A6)
00005B18  2010      10246          move.l    (A0),D0
00005B1A  2042      10247          move.l    D2,A0
00005B1C  5282      10248          addq.l    #1,D2
00005B1E  1080      10249          move.b    D0,(A0)
00005B20  2042      10250          move.l    D2,A0
00005B22  4210      10251          clr.b     (A0)
00005B24  200D      10252          move.l    A5,D0
00005B26  6704      10253          beq.s     doprint_44
00005B28  200D      10254          move.l    A5,D0
00005B2A  6006      10255          bra.s     doprint_45
                    10256   doprint_44:
00005B2C  7001      10257          moveq     #1,D0
00005B2E  4880      10258          ext.w     D0
00005B30  48C0      10259          ext.l     D0
                    10260   doprint_45:
00005B32  2A00      10261          move.l    D0,D5
00005B34  6000 0030 10262          bra       doprint_23
                    10263   doprint_31:
00005B38  206E 0010 10264          move.l    16(A6),A0
00005B3C  58AE 0010 10265          addq.l    #4,16(A6)
00005B40  2610      10266          move.l    (A0),D3
00005B42  0C85 FFFF 10267          cmp.l     #-1,D5
00005B46  FFFF      
00005B48  660C      10268          bne.s     doprint_46
00005B4A  2F03      10269          move.l    D3,-(A7)
00005B4C  4EB9 0000 10270          jsr       _strlen
00005B50  60A6      
00005B52  584F      10271          addq.w    #4,A7
00005B54  2A00      10272          move.l    D0,D5
                    10273   doprint_46:
00005B56  600E      10274          bra.s     doprint_23
                    10275   doprint_22:
00005B58  206E 000C 10276          move.l    12(A6),A0
00005B5C  2242      10277          move.l    D2,A1
00005B5E  5282      10278          addq.l    #1,D2
00005B60  1290      10279          move.b    (A0),(A1)
00005B62  2042      10280          move.l    D2,A0
00005B64  4210      10281          clr.b     (A0)
                    10282   doprint_23:
00005B66  2F03      10283          move.l    D3,-(A7)
00005B68  4EB9 0000 10284          jsr       _strlen
00005B6C  60A6      
00005B6E  584F      10285          addq.w    #4,A7
00005B70  1800      10286          move.b    D0,D4
00005B72  206E 000C 10287          move.l    12(A6),A0
00005B76  1010      10288          move.b    (A0),D0
00005B78  0C00 0073 10289          cmp.b     #115,D0
00005B7C  661C      10290          bne.s     doprint_48
00005B7E  0C85 0000 10291          cmp.l     #0,D5
00005B82  0000      
00005B84  6D14      10292          blt.s     doprint_48
00005B86  4884      10293          ext.w     D4
00005B88  48C4      10294          ext.l     D4
00005B8A  B885      10295          cmp.l     D5,D4
00005B8C  6F04      10296          ble.s     doprint_50
00005B8E  2005      10297          move.l    D5,D0
00005B90  6006      10298          bra.s     doprint_51
                    10299   doprint_50:
00005B92  1004      10300          move.b    D4,D0
00005B94  4880      10301          ext.w     D0
00005B96  48C0      10302          ext.l     D0
                    10303   doprint_51:
00005B98  1800      10304          move.b    D0,D4
                    10305   doprint_48:
00005B9A  206E 000C 10306          move.l    12(A6),A0
00005B9E  1010      10307          move.b    (A0),D0
00005BA0  0C00 0058 10308          cmp.b     #88,D0
00005BA4  6600 0026 10309          bne       doprint_56
00005BA8  41EE FFDC 10310          lea       -36(A6),A0
00005BAC  2408      10311          move.l    A0,D2
                    10312   doprint_54:
00005BAE  2042      10313          move.l    D2,A0
00005BB0  4A10      10314          tst.b     (A0)
00005BB2  6718      10315          beq.s     doprint_56
00005BB4  2042      10316          move.l    D2,A0
00005BB6  1210      10317          move.b    (A0),D1
00005BB8  4881      10318          ext.w     D1
00005BBA  48C1      10319          ext.l     D1
00005BBC  2F01      10320          move.l    D1,-(A7)
00005BBE  4EB8 578A 10321          jsr       _toupper
00005BC2  584F      10322          addq.w    #4,A7
00005BC4  2042      10323          move.l    D2,A0
00005BC6  1080      10324          move.b    D0,(A0)
00005BC8  5282      10325          addq.l    #1,D2
00005BCA  60E2      10326          bra       doprint_54
                    10327   doprint_56:
00005BCC  7E00      10328          moveq     #0,D7
00005BCE  41EE FFD4 10329          lea       -44(A6),A0
00005BD2  2408      10330          move.l    A0,D2
00005BD4  206E 000C 10331          move.l    12(A6),A0
00005BD8  1010      10332          move.b    (A0),D0
00005BDA  0C00 0064 10333          cmp.b     #100,D0
00005BDE  670E      10334          beq.s     doprint_59
00005BE0  206E 000C 10335          move.l    12(A6),A0
00005BE4  1010      10336          move.b    (A0),D0
00005BE6  0C00 0069 10337          cmp.b     #105,D0
00005BEA  6600 0068 10338          bne       doprint_65
                    10339   doprint_59:
00005BEE  102E FFCE 10340          move.b    -50(A6),D0
00005BF2  4880      10341          ext.w     D0
00005BF4  48C0      10342          ext.l     D0
00005BF6  4A80      10343          tst.l     D0
00005BF8  660C      10344          bne.s     doprint_62
00005BFA  2043      10345          move.l    D3,A0
00005BFC  1010      10346          move.b    (A0),D0
00005BFE  0C00 002D 10347          cmp.b     #45,D0
00005C02  6600 0028 10348          bne       doprint_60
                    10349   doprint_62:
00005C06  2043      10350          move.l    D3,A0
00005C08  1010      10351          move.b    (A0),D0
00005C0A  0C00 002D 10352          cmp.b     #45,D0
00005C0E  660E      10353          bne.s     doprint_63
00005C10  2043      10354          move.l    D3,A0
00005C12  5283      10355          addq.l    #1,D3
00005C14  2242      10356          move.l    D2,A1
00005C16  5282      10357          addq.l    #1,D2
00005C18  1290      10358          move.b    (A0),(A1)
00005C1A  5304      10359          subq.b    #1,D4
00005C1C  6008      10360          bra.s     doprint_64
                    10361   doprint_63:
00005C1E  2042      10362          move.l    D2,A0
00005C20  5282      10363          addq.l    #1,D2
00005C22  10BC 002B 10364          move.b    #43,(A0)
                    10365   doprint_64:
00005C26  5287      10366          addq.l    #1,D7
00005C28  6000 002A 10367          bra       doprint_65
                    10368   doprint_60:
00005C2C  4A2E FFCF 10369          tst.b     -49(A6)
00005C30  6722      10370          beq.s     doprint_65
00005C32  2043      10371          move.l    D3,A0
00005C34  1010      10372          move.b    (A0),D0
00005C36  0C00 002D 10373          cmp.b     #45,D0
00005C3A  660E      10374          bne.s     doprint_67
00005C3C  2043      10375          move.l    D3,A0
00005C3E  5283      10376          addq.l    #1,D3
00005C40  2242      10377          move.l    D2,A1
00005C42  5282      10378          addq.l    #1,D2
00005C44  1290      10379          move.b    (A0),(A1)
00005C46  5304      10380          subq.b    #1,D4
00005C48  6008      10381          bra.s     doprint_68
                    10382   doprint_67:
00005C4A  2042      10383          move.l    D2,A0
00005C4C  5282      10384          addq.l    #1,D2
00005C4E  10BC 0020 10385          move.b    #32,(A0)
                    10386   doprint_68:
00005C52  5287      10387          addq.l    #1,D7
                    10388   doprint_65:
00005C54  4A2E FFD0 10389          tst.b     -48(A6)
00005C58  6700 005A 10390          beq       doprint_77
00005C5C  206E 000C 10391          move.l    12(A6),A0
00005C60  1010      10392          move.b    (A0),D0
00005C62  4880      10393          ext.w     D0
00005C64  48C0      10394          ext.l     D0
00005C66  0C80 0000 10395          cmp.l     #111,D0
00005C6A  006F      
00005C6C  671A      10396          beq.s     doprint_73
00005C6E  6E0C      10397          bgt.s     doprint_76
00005C70  0C80 0000 10398          cmp.l     #88,D0
00005C74  0058      
00005C76  6710      10399          beq.s     doprint_73
00005C78  6000 003A 10400          bra       doprint_77
                    10401   doprint_76:
00005C7C  0C80 0000 10402          cmp.l     #120,D0
00005C80  0078      
00005C82  6704      10403          beq.s     doprint_73
00005C84  6000 002E 10404          bra       doprint_77
                    10405   doprint_73:
00005C88  2042      10406          move.l    D2,A0
00005C8A  5282      10407          addq.l    #1,D2
00005C8C  10BC 0030 10408          move.b    #48,(A0)
00005C90  5287      10409          addq.l    #1,D7
00005C92  206E 000C 10410          move.l    12(A6),A0
00005C96  1010      10411          move.b    (A0),D0
00005C98  0C00 0078 10412          cmp.b     #120,D0
00005C9C  670C      10413          beq.s     doprint_79
00005C9E  206E 000C 10414          move.l    12(A6),A0
00005CA2  1010      10415          move.b    (A0),D0
00005CA4  0C00 0058 10416          cmp.b     #88,D0
00005CA8  660A      10417          bne.s     doprint_77
                    10418   doprint_79:
00005CAA  2042      10419          move.l    D2,A0
00005CAC  5282      10420          addq.l    #1,D2
00005CAE  10BC 0078 10421          move.b    #120,(A0)
00005CB2  5287      10422          addq.l    #1,D7
                    10423   doprint_77:
00005CB4  2042      10424          move.l    D2,A0
00005CB6  4210      10425          clr.b     (A0)
00005CB8  206E 000C 10426          move.l    12(A6),A0
00005CBC  1010      10427          move.b    (A0),D0
00005CBE  4880      10428          ext.w     D0
00005CC0  48C0      10429          ext.l     D0
00005CC2  0C80 0000 10430          cmp.l     #105,D0
00005CC6  0069      
00005CC8  6700 0076 10431          beq       doprint_82
00005CCC  6E42      10432          bgt.s     doprint_93
00005CCE  0C80 0000 10433          cmp.l     #99,D0
00005CD2  0063      
00005CD4  6700 0084 10434          beq       doprint_96
00005CD8  6E1C      10435          bgt.s     doprint_94
00005CDA  0C80 0000 10436          cmp.l     #88,D0
00005CDE  0058      
00005CE0  6700 005E 10437          beq       doprint_82
00005CE4  6E00 0184 10438          bgt       doprint_80
00005CE8  0C80 0000 10439          cmp.l     #69,D0
00005CEC  0045      
00005CEE  6700 0050 10440          beq       doprint_82
00005CF2  6000 0176 10441          bra       doprint_80
                    10442   doprint_94:
00005CF6  0C80 0000 10443          cmp.l     #101,D0
00005CFA  0065      
00005CFC  6700 0042 10444          beq       doprint_82
00005D00  6E00 0168 10445          bgt       doprint_80
00005D04  0C80 0000 10446          cmp.l     #100,D0
00005D08  0064      
00005D0A  6734      10447          beq.s     doprint_82
00005D0C  6000 015C 10448          bra       doprint_80
                    10449   doprint_93:
00005D10  0C80 0000 10450          cmp.l     #117,D0
00005D14  0075      
00005D16  6728      10451          beq.s     doprint_82
00005D18  6E1A      10452          bgt.s     doprint_95
00005D1A  0C80 0000 10453          cmp.l     #115,D0
00005D1E  0073      
00005D20  6700 0038 10454          beq       doprint_96
00005D24  6E00 0144 10455          bgt       doprint_80
00005D28  0C80 0000 10456          cmp.l     #111,D0
00005D2C  006F      
00005D2E  6710      10457          beq.s     doprint_82
00005D30  6000 0138 10458          bra       doprint_80
                    10459   doprint_95:
00005D34  0C80 0000 10460          cmp.l     #120,D0
00005D38  0078      
00005D3A  6704      10461          beq.s     doprint_82
00005D3C  6000 012C 10462          bra       doprint_80
                    10463   doprint_82:
00005D40  4A2E FFD2 10464          tst.b     -46(A6)
00005D44  6714      10465          beq.s     doprint_96
00005D46  4A2E FFCD 10466          tst.b     -51(A6)
00005D4A  660E      10467          bne.s     doprint_96
00005D4C  200D      10468          move.l    A5,D0
00005D4E  9087      10469          sub.l     D7,D0
00005D50  4884      10470          ext.w     D4
00005D52  48C4      10471          ext.l     D4
00005D54  9084      10472          sub.l     D4,D0
00005D56  2D40 FFFC 10473          move.l    D0,-4(A6)
                    10474   doprint_96:
00005D5A  202E FFFC 10475          move.l    -4(A6),D0
00005D5E  0C80 0000 10476          cmp.l     #0,D0
00005D62  0000      
00005D64  6C04      10477          bge.s     doprint_98
00005D66  42AE FFFC 10478          clr.l     -4(A6)
                    10479   doprint_98:
00005D6A  4A2E FFCD 10480          tst.b     -51(A6)
00005D6E  6600 0030 10481          bne       doprint_104
00005D72  1004      10482          move.b    D4,D0
00005D74  4880      10483          ext.w     D0
00005D76  48C0      10484          ext.l     D0
00005D78  D0AE FFFC 10485          add.l     -4(A6),D0
00005D7C  D087      10486          add.l     D7,D0
00005D7E  1D40 FFD1 10487          move.b    D0,-47(A6)
                    10488   doprint_102:
00005D82  102E FFD1 10489          move.b    -47(A6),D0
00005D86  4880      10490          ext.w     D0
00005D88  48C0      10491          ext.l     D0
00005D8A  220D      10492          move.l    A5,D1
00005D8C  534D      10493          subq.w    #1,A5
00005D8E  B081      10494          cmp.l     D1,D0
00005D90  6C0E      10495          bge.s     doprint_104
00005D92  4878 0020 10496          pea       32
00005D96  2F0A      10497          move.l    A2,-(A7)
00005D98  4E93      10498          jsr       (A3)
00005D9A  504F      10499          addq.w    #8,A7
00005D9C  5286      10500          addq.l    #1,D6
00005D9E  60E2      10501          bra       doprint_102
                    10502   doprint_104:
00005DA0  41EE FFD4 10503          lea       -44(A6),A0
00005DA4  2408      10504          move.l    A0,D2
                    10505   doprint_105:
00005DA6  2042      10506          move.l    D2,A0
00005DA8  4A10      10507          tst.b     (A0)
00005DAA  6716      10508          beq.s     doprint_107
00005DAC  2042      10509          move.l    D2,A0
00005DAE  5282      10510          addq.l    #1,D2
00005DB0  1210      10511          move.b    (A0),D1
00005DB2  4881      10512          ext.w     D1
00005DB4  48C1      10513          ext.l     D1
00005DB6  2F01      10514          move.l    D1,-(A7)
00005DB8  2F0A      10515          move.l    A2,-(A7)
00005DBA  4E93      10516          jsr       (A3)
00005DBC  504F      10517          addq.w    #8,A7
00005DBE  5286      10518          addq.l    #1,D6
00005DC0  60E4      10519          bra       doprint_105
                    10520   doprint_107:
00005DC2  202E FFFC 10521          move.l    -4(A6),D0
00005DC6  1D40 FFD1 10522          move.b    D0,-47(A6)
                    10523   doprint_108:
00005DCA  102E FFD1 10524          move.b    -47(A6),D0
00005DCE  532E FFD1 10525          subq.b    #1,-47(A6)
00005DD2  4A00      10526          tst.b     D0
00005DD4  670E      10527          beq.s     doprint_110
00005DD6  4878 0030 10528          pea       48
00005DDA  2F0A      10529          move.l    A2,-(A7)
00005DDC  4E93      10530          jsr       (A3)
00005DDE  504F      10531          addq.w    #8,A7
00005DE0  5286      10532          addq.l    #1,D6
00005DE2  60E6      10533          bra       doprint_108
                    10534   doprint_110:
00005DE4  2043      10535          move.l    D3,A0
00005DE6  4A10      10536          tst.b     (A0)
00005DE8  6700 0048 10537          beq       doprint_113
00005DEC  206E 000C 10538          move.l    12(A6),A0
00005DF0  1010      10539          move.b    (A0),D0
00005DF2  4880      10540          ext.w     D0
00005DF4  48C0      10541          ext.l     D0
00005DF6  0C80 0000 10542          cmp.l     #115,D0
00005DFA  0073      
00005DFC  670C      10543          beq.s     doprint_116
00005DFE  6E18      10544          bgt.s     doprint_119
00005E00  0C80 0000 10545          cmp.l     #99,D0
00005E04  0063      
00005E06  6702      10546          beq.s     doprint_116
00005E08  600E      10547          bra.s     doprint_119
                    10548   doprint_116:
00005E0A  2005      10549          move.l    D5,D0
00005E0C  5385      10550          subq.l    #1,D5
00005E0E  0C80 0000 10551          cmp.l     #0,D0
00005E12  0000      
00005E14  6E02      10552          bgt.s     doprint_119
00005E16  6016      10553          bra.s     doprint_115
                    10554   doprint_119:
00005E18  2043      10555          move.l    D3,A0
00005E1A  5283      10556          addq.l    #1,D3
00005E1C  1210      10557          move.b    (A0),D1
00005E1E  4881      10558          ext.w     D1
00005E20  48C1      10559          ext.l     D1
00005E22  2F01      10560          move.l    D1,-(A7)
00005E24  2F0A      10561          move.l    A2,-(A7)
00005E26  4E93      10562          jsr       (A3)
00005E28  504F      10563          addq.w    #8,A7
00005E2A  5286      10564          addq.l    #1,D6
00005E2C  6002      10565          bra.s     doprint_112
                    10566   doprint_115:
00005E2E  6002      10567          bra.s     doprint_113
                    10568   doprint_112:
00005E30  60B2      10569          bra       doprint_110
                    10570   doprint_113:
00005E32  4A2E FFCD 10571          tst.b     -51(A6)
00005E36  6700 0030 10572          beq       doprint_125
00005E3A  1004      10573          move.b    D4,D0
00005E3C  4880      10574          ext.w     D0
00005E3E  48C0      10575          ext.l     D0
00005E40  D0AE FFFC 10576          add.l     -4(A6),D0
00005E44  D087      10577          add.l     D7,D0
00005E46  1D40 FFD1 10578          move.b    D0,-47(A6)
                    10579   doprint_123:
00005E4A  102E FFD1 10580          move.b    -47(A6),D0
00005E4E  4880      10581          ext.w     D0
00005E50  48C0      10582          ext.l     D0
00005E52  220D      10583          move.l    A5,D1
00005E54  534D      10584          subq.w    #1,A5
00005E56  B081      10585          cmp.l     D1,D0
00005E58  6C0E      10586          bge.s     doprint_125
00005E5A  4878 0020 10587          pea       32
00005E5E  2F0A      10588          move.l    A2,-(A7)
00005E60  4E93      10589          jsr       (A3)
00005E62  504F      10590          addq.w    #8,A7
00005E64  5386      10591          subq.l    #1,D6
00005E66  60E2      10592          bra       doprint_123
                    10593   doprint_125:
00005E68  6014      10594          bra.s     doprint_81
                    10595   doprint_80:
00005E6A  206E 000C 10596          move.l    12(A6),A0
00005E6E  1210      10597          move.b    (A0),D1
00005E70  4881      10598          ext.w     D1
00005E72  48C1      10599          ext.l     D1
00005E74  2F01      10600          move.l    D1,-(A7)
00005E76  2F0A      10601          move.l    A2,-(A7)
00005E78  4E93      10602          jsr       (A3)
00005E7A  504F      10603          addq.w    #8,A7
00005E7C  5286      10604          addq.l    #1,D6
                    10605   doprint_81:
00005E7E  52AE 000C 10606          addq.l    #1,12(A6)
                    10607   doprint_2:
00005E82  6000 FA10 10608          bra       doprint_1
                    10609   doprint_3:
00005E86  4A92      10610          tst.l     (A2)
00005E88  6710      10611          beq.s     doprint_126
00005E8A  4201      10612          clr.b     D1
00005E8C  C2BC 0000 10613          and.l     #255,D1
00005E90  00FF      
00005E92  2F01      10614          move.l    D1,-(A7)
00005E94  2F0A      10615          move.l    A2,-(A7)
00005E96  4E93      10616          jsr       (A3)
00005E98  504F      10617          addq.w    #8,A7
                    10618   doprint_126:
00005E9A  2006      10619          move.l    D6,D0
00005E9C  4CDF 3CFC 10620          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005EA0  4E5E      10621          unlk      A6
00005EA2  4E75      10622          rts
                    10623   @itoa_convert:
00005EA4  4E56 0000 10624          link      A6,#0
00005EA8  48E7 3C00 10625          movem.l   D2/D3/D4/D5,-(A7)
00005EAC  242E 0008 10626          move.l    8(A6),D2
00005EB0  262E 0010 10627          move.l    16(A6),D3
00005EB4  2A2E 000C 10628          move.l    12(A6),D5
00005EB8  2F05      10629          move.l    D5,-(A7)
00005EBA  2F03      10630          move.l    D3,-(A7)
00005EBC  4EB8 55E4 10631          jsr       ULDIV
00005EC0  202F 0004 10632          move.l    4(A7),D0
00005EC4  504F      10633          addq.w    #8,A7
00005EC6  2800      10634          move.l    D0,D4
00005EC8  BA83      10635          cmp.l     D3,D5
00005ECA  651C      10636          blo.s     @itoa_convert_1
00005ECC  2F03      10637          move.l    D3,-(A7)
00005ECE  2F05      10638          move.l    D5,-(A7)
00005ED0  2F03      10639          move.l    D3,-(A7)
00005ED2  4EB8 55E4 10640          jsr       ULDIV
00005ED6  2217      10641          move.l    (A7),D1
00005ED8  504F      10642          addq.w    #8,A7
00005EDA  2F01      10643          move.l    D1,-(A7)
00005EDC  2F02      10644          move.l    D2,-(A7)
00005EDE  4EB8 5EA4 10645          jsr       @itoa_convert
00005EE2  DEFC 000C 10646          add.w     #12,A7
00005EE6  2400      10647          move.l    D0,D2
                    10648   @itoa_convert_1:
00005EE8  0C84 0000 10649          cmp.l     #9,D4
00005EEC  0009      
00005EEE  6E0E      10650          bgt.s     @itoa_convert_3
00005EF0  2004      10651          move.l    D4,D0
00005EF2  7230      10652          moveq     #48,D1
00005EF4  C2BC 0000 10653          and.l     #255,D1
00005EF8  00FF      
00005EFA  D081      10654          add.l     D1,D0
00005EFC  6012      10655          bra.s     @itoa_convert_4
                    10656   @itoa_convert_3:
00005EFE  2004      10657          move.l    D4,D0
00005F00  7261      10658          moveq     #97,D1
00005F02  C2BC 0000 10659          and.l     #255,D1
00005F06  00FF      
00005F08  D081      10660          add.l     D1,D0
00005F0A  0480 0000 10661          sub.l     #10,D0
00005F0E  000A      
                    10662   @itoa_convert_4:
00005F10  2042      10663          move.l    D2,A0
00005F12  1080      10664          move.b    D0,(A0)
00005F14  2002      10665          move.l    D2,D0
00005F16  5280      10666          addq.l    #1,D0
00005F18  4CDF 003C 10667          movem.l   (A7)+,D2/D3/D4/D5
00005F1C  4E5E      10668          unlk      A6
00005F1E  4E75      10669          rts
                    10670   _ltoa:
00005F20  4E56 0000 10671          link      A6,#0
00005F24  48E7 3C00 10672          movem.l   D2/D3/D4/D5,-(A7)
00005F28  242E 0008 10673          move.l    8(A6),D2
00005F2C  262E 000C 10674          move.l    12(A6),D3
00005F30  2A2E 0010 10675          move.l    16(A6),D5
00005F34  2803      10676          move.l    D3,D4
00005F36  0C85 0000 10677          cmp.l     #2,D5
00005F3A  0002      
00005F3C  6D08      10678          blt.s     ltoa_3
00005F3E  0C85 0000 10679          cmp.l     #36,D5
00005F42  0024      
00005F44  6F06      10680          ble.s     ltoa_1
                    10681   ltoa_3:
00005F46  2003      10682          move.l    D3,D0
00005F48  6000 0052 10683          bra       ltoa_4
                    10684   ltoa_1:
00005F4C  0C85 0000 10685          cmp.l     #10,D5
00005F50  000A      
00005F52  6600 0032 10686          bne       ltoa_5
00005F56  0C82 0000 10687          cmp.l     #0,D2
00005F5A  0000      
00005F5C  6C28      10688          bge.s     ltoa_5
00005F5E  2002      10689          move.l    D2,D0
00005F60  4480      10690          neg.l     D0
00005F62  2400      10691          move.l    D0,D2
00005F64  0C82 0000 10692          cmp.l     #0,D2
00005F68  0000      
00005F6A  6C12      10693          bge.s     ltoa_7
00005F6C  4879 0000 10694          pea       @itoa_1.L
00005F70  777E      
00005F72  2F03      10695          move.l    D3,-(A7)
00005F74  4EB8 55D4 10696          jsr       _strcpy
00005F78  504F      10697          addq.w    #8,A7
00005F7A  2003      10698          move.l    D3,D0
00005F7C  601E      10699          bra.s     ltoa_4
                    10700   ltoa_7:
00005F7E  2044      10701          move.l    D4,A0
00005F80  5284      10702          addq.l    #1,D4
00005F82  10BC 002D 10703          move.b    #45,(A0)
                    10704   ltoa_5:
00005F86  2F05      10705          move.l    D5,-(A7)
00005F88  2F02      10706          move.l    D2,-(A7)
00005F8A  2F04      10707          move.l    D4,-(A7)
00005F8C  4EB8 5EA4 10708          jsr       @itoa_convert
00005F90  DEFC 000C 10709          add.w     #12,A7
00005F94  2800      10710          move.l    D0,D4
00005F96  2044      10711          move.l    D4,A0
00005F98  4210      10712          clr.b     (A0)
00005F9A  2003      10713          move.l    D3,D0
                    10714   ltoa_4:
00005F9C  4CDF 003C 10715          movem.l   (A7)+,D2/D3/D4/D5
00005FA0  4E5E      10716          unlk      A6
00005FA2  4E75      10717          rts
                    10718   _ultoa:
00005FA4  4E56 0000 10719          link      A6,#0
00005FA8  48E7 3800 10720          movem.l   D2/D3/D4,-(A7)
00005FAC  262E 0010 10721          move.l    16(A6),D3
00005FB0  282E 000C 10722          move.l    12(A6),D4
00005FB4  2404      10723          move.l    D4,D2
00005FB6  0C83 0000 10724          cmp.l     #2,D3
00005FBA  0002      
00005FBC  6D08      10725          blt.s     ultoa_3
00005FBE  0C83 0000 10726          cmp.l     #36,D3
00005FC2  0024      
00005FC4  6F04      10727          ble.s     ultoa_1
                    10728   ultoa_3:
00005FC6  2004      10729          move.l    D4,D0
00005FC8  6018      10730          bra.s     ultoa_4
                    10731   ultoa_1:
00005FCA  2F03      10732          move.l    D3,-(A7)
00005FCC  2F2E 0008 10733          move.l    8(A6),-(A7)
00005FD0  2F02      10734          move.l    D2,-(A7)
00005FD2  4EB8 5EA4 10735          jsr       @itoa_convert
00005FD6  DEFC 000C 10736          add.w     #12,A7
00005FDA  2400      10737          move.l    D0,D2
00005FDC  2042      10738          move.l    D2,A0
00005FDE  4210      10739          clr.b     (A0)
00005FE0  2004      10740          move.l    D4,D0
                    10741   ultoa_4:
00005FE2  4CDF 001C 10742          movem.l   (A7)+,D2/D3/D4
00005FE6  4E5E      10743          unlk      A6
00005FE8  4E75      10744          rts
                    10745   _itoa:
00005FEA  4E56 0000 10746          link      A6,#0
00005FEE  2F2E 0010 10747          move.l    16(A6),-(A7)
00005FF2  2F2E 000C 10748          move.l    12(A6),-(A7)
00005FF6  2F2E 0008 10749          move.l    8(A6),-(A7)
00005FFA  4EB8 5F20 10750          jsr       _ltoa
00005FFE  DEFC 000C 10751          add.w     #12,A7
00006002  4E5E      10752          unlk      A6
00006004  4E75      10753          rts
                    10754   ULMUL:
00006006  4E56 0000 10755          link    A6,#0
0000600A  48E7 C000 10756          movem.l D0/D1,-(A7)
0000600E  222E 0008 10757          move.l  8(A6),D1
00006012  202E 000C 10758          move.l  12(A6),D0
00006016  602C      10759          bra.s   lmul_3
                    10760   LMUL:
00006018  4E56 0000 10761          link    A6,#0
0000601C  48E7 C000 10762          movem.l D0/D1,-(A7)
00006020  222E 0008 10763          move.l  8(A6),D1
00006024  202E 000C 10764          move.l  12(A6),D0
00006028  4A80      10765          tst.l   D0
0000602A  6A0A      10766          bpl.s   lmul_1
0000602C  4480      10767          neg.l   D0
0000602E  4A81      10768          tst.l   D1
00006030  6A0A      10769          bpl.s   lmul_2
00006032  4481      10770          neg.l   D1
00006034  600E      10771          bra.s   lmul_3
                    10772   lmul_1:
00006036  4A81      10773          tst.l   D1
00006038  6A0A      10774          bpl.s   lmul_3
0000603A  4481      10775          neg.l   D1
                    10776   lmul_2:
0000603C  6114      10777          bsr.s   domul
0000603E  4481      10778          neg.l   D1
00006040  4080      10779          negx.l  D0
00006042  6002      10780          bra.s   lmul_4
                    10781   lmul_3:
00006044  610C      10782          bsr.s   domul
                    10783   lmul_4:
00006046  2D41 0008 10784          move.l  D1,8(A6)
0000604A  4CDF 0003 10785          movem.l (A7)+,D0/D1
0000604E  4E5E      10786          unlk    A6
00006050  4E75      10787          rts
                    10788   domul:
00006052  0C81 0000 10789          cmpi.l  #$FFFF,D1
00006056  FFFF      
00006058  620C      10790          bhi.s   domul_1
0000605A  0C80 0000 10791          cmpi.l  #$FFFF,D0
0000605E  FFFF      
00006060  620E      10792          bhi.s   domul_2
00006062  C2C0      10793          mulu    D0,D1
00006064  4E75      10794          rts
                    10795   domul_1:
00006066  0C80 0000 10796          cmpi.l  #$FFFF,D0
0000606A  FFFF      
0000606C  6218      10797          bhi.s   domul_4
0000606E  6002      10798          bra.s   domul_3
                    10799   domul_2
00006070  C141      10800          exg     D0,D1
                    10801   domul_3:
00006072  2F02      10802          move.l  D2,-(A7)
00006074  2401      10803          move.l  D1,D2
00006076  4842      10804          swap    D2
00006078  C2C0      10805          mulu    D0,D1
0000607A  C4C0      10806          mulu    D0,D2
0000607C  4842      10807          swap    D2
0000607E  4242      10808          clr.w   D2
00006080  D282      10809          add.l   D2,D1
00006082  241F      10810          move.l  (A7)+,D2
00006084  4E75      10811          rts
                    10812   domul_4:
00006086  48E7 3000 10813          movem.l D2/D3,-(A7)
0000608A  2401      10814          move.l  D1,D2
0000608C  2601      10815          move.l  D1,D3
0000608E  C2C0      10816          mulu    D0,D1
00006090  4842      10817          swap    D2
00006092  C4C0      10818          mulu    D0,D2
00006094  4840      10819          swap    D0
00006096  C6C0      10820          mulu    D0,D3
00006098  D483      10821          add.l   D3,D2
0000609A  4842      10822          swap    D2
0000609C  4242      10823          clr.w   D2
0000609E  D282      10824          add.l   D2,D1
000060A0  4CDF 000C 10825          movem.l (A7)+,D2/D3
000060A4  4E75      10826          rts
                    10827   _strlen:
000060A6  206F 0004 10828          move.l    (4,A7),A0
000060AA  2248      10829          move.l    A0,A1
                    10830   strlen_1:
000060AC  4A19      10831          tst.b     (A1)+
000060AE  66FC      10832          bne       strlen_1
000060B0  2009      10833          move.l    A1,D0
000060B2  9088      10834          sub.l     A0,D0
000060B4  5380      10835          subq.l    #1,D0
000060B6  4E75      10836          rts
                    10837          section   const
                    10838   
                    10839   @m68kde~1_1:
000060B8  0D0A 00   10840          dc.b      13,10,0
                    10841   @m68kde~1_2:
000060BC  0D53 7769 10842          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000060C0  7463 6865 
000060C4  7320 5357 
000060C8  5B        
000060C9  372D 305D 10843          dc.b      55,45,48,93,32,61,32,0
000060CD  203D 2000 
                    10844   @m68kde~1_3:
000060D2  3000      10845          dc.b      48,0
                    10846   @m68kde~1_4:
000060D4  3100      10847          dc.b      49,0
                    10848   @m68kde~1_5:
000060D6  0D0A 456E 10849          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000060DA  7465 7220 
000060DE  5374 6172 
000060E2  74        
000060E3  2041 6464 10850          dc.b      32,65,100,100,114,101,115,115,58,32,0
000060E7  7265 7373 
000060EB  3A20 00   
                    10851   @m68kde~1_6:
000060EE  0D0A 3C45 10852          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
000060F2  5343 3E20 
000060F6  3D20 4162 
000060FA  6F72      
000060FC  742C 2053 10853          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00006100  5041 4345 
00006104  2074 6F20 
00006108  436F      
0000610A  6E74 696E 10854          dc.b      110,116,105,110,117,101,0
0000610E  7565 00   
                    10855   @m68kde~1_7:
00006112  0D0A 2530 10856          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006116  3858 2020 
0000611A  2530 3458 
0000611E  2020 20   
00006121  2020 2020 10857          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006125  2020 2020 
00006129  2020 2020 
0000612D  2020 20   
00006130  2020 2020 10858          dc.b      32,32,32,32,32,32,37,115,0
00006134  2020 2573 
00006138  00        
                    10859   @m68kde~1_8:
0000613A  0D0A 2530 10860          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000613E  3858 2020 
00006142  2530 3458 
00006146  2025 30   
00006149  3458 2020 10861          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
0000614D  2020 2020 
00006151  2020 2020 
00006155  2020 20   
00006158  2020 2020 10862          dc.b      32,32,32,32,32,32,37,115,0
0000615C  2020 2573 
00006160  00        
                    10863   @m68kde~1_9:
00006162  0D0A 2530 10864          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006166  3858 2020 
0000616A  2530 3458 
0000616E  2025 30   
00006171  3458 2025 10865          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006175  3034 5820 
00006179  2020 2020 
0000617D  2020 20   
00006180  2020 2020 10866          dc.b      32,32,32,32,32,32,37,115,0
00006184  2020 2573 
00006188  00        
                    10867   @m68kde~1_10:
0000618A  0D0A 2530 10868          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000618E  3858 2020 
00006192  2530 3458 
00006196  2025 30   
00006199  3458 2025 10869          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
0000619D  3034 5820 
000061A1  2530 3458 
000061A5  2020 20   
000061A8  2020 2020 10870          dc.b      32,32,32,32,32,32,37,115,0
000061AC  2020 2573 
000061B0  00        
                    10871   @m68kde~1_11:
000061B2  0D0A 2530 10872          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000061B6  3858 2020 
000061BA  2530 3458 
000061BE  2025 30   
000061C1  3458 2025 10873          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
000061C5  3034 5820 
000061C9  2530 3458 
000061CD  2025 30   
000061D0  3458 2020 10874          dc.b      52,88,32,32,32,32,37,115,0
000061D4  2020 2573 
000061D8  00        
                    10875   @m68kde~1_12:
000061DA  0D0A 4475 10876          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000061DE  6D70 204D 
000061E2  656D 6F72 
000061E6  79        
000061E7  2042 6C6F 10877          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000061EB  636B 3A20 
000061EF  3C45 5343 
000061F3  3E20      
000061F5  746F 2041 10878          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000061F9  626F 7274 
000061FD  2C20 3C53 
00006201  50        
00006202  4143 453E 10879          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006206  2074 6F20 
0000620A  436F 6E74 
0000620E  69        
0000620F  6E75 6500 10880          dc.b      110,117,101,0
                    10881   @m68kde~1_13:
00006214  0D0A 2530 10882          dc.b      13,10,37,48,56,120,32,0
00006218  3878 2000 
                    10883   @m68kde~1_14:
0000621C  2530 3258 10884          dc.b      37,48,50,88,0
00006220  00        
                    10885   @m68kde~1_15:
00006222  2020 00   10886          dc.b      32,32,0
                    10887   @m68kde~1_16:
00006226  0D0A 4669 10888          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000622A  6C6C 204D 
0000622E  656D 6F72 
00006232  79        
00006233  2042 6C6F 10889          dc.b      32,66,108,111,99,107,0
00006237  636B 00   
                    10890   @m68kde~1_17:
0000623A  0D0A 456E 10891          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0000623E  7465 7220 
00006242  456E 6420 
00006246  41        
00006247  6464 7265 10892          dc.b      100,100,114,101,115,115,58,32,0
0000624B  7373 3A20 
0000624F  00        
                    10893   @m68kde~1_18:
00006250  0D0A 456E 10894          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006254  7465 7220 
00006258  4669 6C6C 
0000625C  20        
0000625D  4461 7461 10895          dc.b      68,97,116,97,58,32,0
00006261  3A20 00   
                    10896   @m68kde~1_19:
00006264  0D0A 4669 10897          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006268  6C6C 696E 
0000626C  6720 4164 
00006270  64        
00006271  7265 7373 10898          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006275  6573 205B 
00006279  2425 3038 
0000627D  58        
0000627E  202D 2024 10899          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006282  2530 3858 
00006286  5D20 7769 
0000628A  7468      
0000628C  2024 2530 10900          dc.b      32,36,37,48,50,88,0
00006290  3258 00   
                    10901   @m68kde~1_20:
00006294  0D0A 5573 10902          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006298  6520 4879 
0000629C  7065 7254 
000062A0  65        
000062A1  726D 696E 10903          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000062A5  616C 2074 
000062A9  6F20 5365 
000062AD  6E64 2054 10904          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000062B1  6578 7420 
000062B5  4669 6C65 
000062B9  2028 2E68 10905          dc.b      32,40,46,104,101,120,41,13,10,0
000062BD  6578 290D 
000062C1  0A00      
                    10906   @m68kde~1_21:
000062C4  0D0A 4C6F 10907          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000062C8  6164 2046 
000062CC  6169 6C65 
000062D0  64        
000062D1  2061 7420 10908          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000062D5  4164 6472 
000062D9  6573 7320 
000062DD  3D        
000062DE  205B 2425 10909          dc.b      32,91,36,37,48,56,88,93,13,10,0
000062E2  3038 585D 
000062E6  0D0A 00   
                    10910   @m68kde~1_22:
000062EA  0D0A 5375 10911          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
000062EE  6363 6573 
000062F2  733A 2044 
000062F6  6F        
000062F7  776E 6C6F 10912          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
000062FB  6164 6564 
000062FF  2025 6420 
00006303  6279 7465 10913          dc.b      98,121,116,101,115,13,10,0
00006307  730D 0A00 
                    10914   @m68kde~1_23:
0000630C  0D0A 4578 10915          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006310  616D 696E 
00006314  6520 616E 
00006318  64        
00006319  2043 6861 10916          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000631D  6E67 6520 
00006321  4D65 6D6F 
00006325  72        
00006326  7900      10917          dc.b      121,0
                    10918   @m68kde~1_24:
00006328  0D0A 3C45 10919          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000632C  5343 3E20 
00006330  746F 2053 
00006334  746F      
00006336  702C 203C 10920          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000633A  5350 4143 
0000633E  453E 2074 
00006342  6F20      
00006344  4164 7661 10921          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006348  6E63 652C 
0000634C  2027 2D27 
00006350  2074      
00006352  6F20 476F 10922          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006356  2042 6163 
0000635A  6B2C 203C 
0000635E  4441      
00006360  5441 3E20 10923          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00006364  746F 2063 
00006368  6861 6E67 
0000636C  65        
0000636D  00        10924          dc.b      0
                    10925   @m68kde~1_25:
0000636E  0D0A 456E 10926          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00006372  7465 7220 
00006376  4164 6472 
0000637A  65        
0000637B  7373 3A20 10927          dc.b      115,115,58,32,0
0000637F  00        
                    10928   @m68kde~1_26:
00006380  0D0A 5B25 10929          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00006384  3038 785D 
00006388  203A 2025 
0000638C  3032 78   
0000638F  2020 00   10930          dc.b      32,32,0
                    10931   @m68kde~1_27:
00006392  0D0A 5761 10932          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00006396  726E 696E 
0000639A  6720 4368 
0000639E  61        
0000639F  6E67 6520 10933          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000063A3  4661 696C 
000063A7  6564 3A20 
000063AB  57        
000063AC  726F 7465 10934          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000063B0  205B 2530 
000063B4  3278 5D2C 
000063B8  20        
000063B9  5265 6164 10935          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000063BD  205B 2530 
000063C1  3278 5D00 
                    10936   @m68kde~1_28:
000063C6  0D0A 4C6F 10937          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000063CA  6164 696E 
000063CE  6720 5072 
000063D2  6F        
000063D3  6772 616D 10938          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000063D7  2046 726F 
000063DB  6D20 5350 
000063DF  49        
000063E0  2046 6C61 10939          dc.b      32,70,108,97,115,104,46,46,46,46,0
000063E4  7368 2E2E 
000063E8  2E2E 00   
                    10940   @m68kde~1_29:
000063EC  2425 3038 10941          dc.b      36,37,48,56,88,32,32,0
000063F0  5820 2000 
                    10942   @m68kde~1_30:
000063F4  2000      10943          dc.b      32,0
                    10944   @m68kde~1_31:
000063F6  2E00      10945          dc.b      46,0
                    10946   @m68kde~1_32:
000063F8  2563 00   10947          dc.b      37,99,0
                    10948   @m68kde~1_33:
000063FC  00        10949          dc.b      0
                    10950   @m68kde~1_34:
000063FE  0D0A 0D0A 10951          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006402  2044 3020 
00006406  3D20 2425 
0000640A  3038 58   
0000640D  2020 4130 10952          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006411  203D 2024 
00006415  2530 3858 
00006419  00        
                    10953   @m68kde~1_35:
0000641A  0D0A 2044 10954          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
0000641E  3120 3D20 
00006422  2425 3038 
00006426  5820 20   
00006429  4131 203D 10955          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000642D  2024 2530 
00006431  3858 00   
                    10956   @m68kde~1_36:
00006434  0D0A 2044 10957          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006438  3220 3D20 
0000643C  2425 3038 
00006440  5820 20   
00006443  4132 203D 10958          dc.b      65,50,32,61,32,36,37,48,56,88,0
00006447  2024 2530 
0000644B  3858 00   
                    10959   @m68kde~1_37:
0000644E  0D0A 2044 10960          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006452  3320 3D20 
00006456  2425 3038 
0000645A  5820 20   
0000645D  4133 203D 10961          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006461  2024 2530 
00006465  3858 00   
                    10962   @m68kde~1_38:
00006468  0D0A 2044 10963          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000646C  3420 3D20 
00006470  2425 3038 
00006474  5820 20   
00006477  4134 203D 10964          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000647B  2024 2530 
0000647F  3858 00   
                    10965   @m68kde~1_39:
00006482  0D0A 2044 10966          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00006486  3520 3D20 
0000648A  2425 3038 
0000648E  5820 20   
00006491  4135 203D 10967          dc.b      65,53,32,61,32,36,37,48,56,88,0
00006495  2024 2530 
00006499  3858 00   
                    10968   @m68kde~1_40:
0000649C  0D0A 2044 10969          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000064A0  3620 3D20 
000064A4  2425 3038 
000064A8  5820 20   
000064AB  4136 203D 10970          dc.b      65,54,32,61,32,36,37,48,56,88,0
000064AF  2024 2530 
000064B3  3858 00   
                    10971   @m68kde~1_41:
000064B6  0D0A 2044 10972          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000064BA  3720 3D20 
000064BE  2425 3038 
000064C2  5820 20   
000064C5  4137 203D 10973          dc.b      65,55,32,61,32,36,37,48,56,88,0
000064C9  2024 2530 
000064CD  3858 00   
                    10974   @m68kde~1_42:
000064D0  0D0A 0D0A 10975          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000064D4  5553 5020 
000064D8  3D20 2425 
000064DC  3038 58   
000064DF  2020 2841 10976          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000064E3  3729 2055 
000064E7  7365 7220 
000064EB  5350      
000064ED  00        10977          dc.b      0
                    10978   @m68kde~1_43:
000064EE  0D0A 5353 10979          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000064F2  5020 3D20 
000064F6  2425 3038 
000064FA  5820 20   
000064FD  2841 3729 10980          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006501  2053 7570 
00006505  6572 7669 
00006509  73        
0000650A  6F72 2053 10981          dc.b      111,114,32,83,80,0
0000650E  5000      
                    10982   @m68kde~1_44:
00006510  0D0A 2053 10983          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00006514  5220 3D20 
00006518  2425 3034 
0000651C  5820 20   
0000651F  2000      10984          dc.b      32,0
                    10985   @m68kde~1_45:
00006522  2020 205B 10986          dc.b      32,32,32,91,0
00006526  00        
                    10987   @m68kde~1_46:
00006528  0D0A 2050 10988          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000652C  4320 3D20 
00006530  2425 3038 
00006534  5820 20   
00006537  00        10989          dc.b      0
                    10990   @m68kde~1_47:
00006538  2573 00   10991          dc.b      37,115,0
                    10992   @m68kde~1_48:
0000653C  5B42 5245 10993          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00006540  414B 504F 
00006544  494E 545D 
00006548  00        
                    10994   @m68kde~1_49:
0000654A  0D0A 5750 10995          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000654E  2564 203D 
00006552  2025 7300 
                    10996   @m68kde~1_50:
00006556  0D0A 0D0A 10997          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000655A  0D0A 0D0A 
0000655E  0D0A 0D0A 
00006562  5369 6E   
00006565  676C 6520 10998          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006569  5374 6570 
0000656D  2020 3A5B 
00006571  4F        
00006572  4E5D 00   10999          dc.b      78,93,0
                    11000   @m68kde~1_51:
00006576  0D0A 4272 11001          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000657A  6561 6B20 
0000657E  506F 696E 
00006582  74        
00006583  7320 3A5B 11002          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006587  4469 7361 
0000658B  626C 6564 
0000658F  5D        
00006590  00        11003          dc.b      0
                    11004   @m68kde~1_52:
00006592  0D0A 5072 11005          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006596  6573 7320 
0000659A  3C53 5041 
0000659E  4345      
000065A0  3E20 746F 11006          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000065A4  2045 7865 
000065A8  6375 7465 
000065AC  20        
000065AD  4E65 7874 11007          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000065B1  2049 6E73 
000065B5  7472 7563 
000065B9  7469 6F6E 11008          dc.b      116,105,111,110,0
000065BD  00        
                    11009   @m68kde~1_53:
000065BE  0D0A 5072 11010          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000065C2  6573 7320 
000065C6  3C45 5343 
000065CA  3E20      
000065CC  746F 2052 11011          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000065D0  6573 756D 
000065D4  6520 5072 
000065D8  6F67 7261 11012          dc.b      111,103,114,97,109,0
000065DC  6D00      
                    11013   @m68kde~1_54:
000065DE  0D0A 496C 11014          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000065E2  6C65 6761 
000065E6  6C20 4461 
000065EA  74        
000065EB  6120 5265 11015          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
000065EF  6769 7374 
000065F3  6572 203A 
000065F7  20        
000065F8  5573 6520 11016          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000065FC  4430 2D44 
00006600  372E 2E2E 
00006604  2E2E      
00006606  0D0A 00   11017          dc.b      13,10,0
                    11018   @m68kde~1_55:
0000660A  0D0A 4425 11019          dc.b      13,10,68,37,99,32,61,32,0
0000660E  6320 3D20 
00006612  00        
                    11020   @m68kde~1_56:
00006614  0D0A 496C 11021          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006618  6C65 6761 
0000661C  6C20 4164 
00006620  64        
00006621  7265 7373 11022          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00006625  2052 6567 
00006629  6973 7465 
0000662D  7220 3A20 11023          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00006631  5573 6520 
00006635  4130 2D41 
00006639  372E      
0000663B  2E2E 2E2E 11024          dc.b      46,46,46,46,13,10,0
0000663F  0D0A 00   
                    11025   @m68kde~1_57:
00006642  0D0A 4125 11026          dc.b      13,10,65,37,99,32,61,32,0
00006646  6320 3D20 
0000664A  00        
                    11027   @m68kde~1_58:
0000664C  0D0A 5573 11028          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006650  6572 2053 
00006654  5020 3D20 
00006658  00        
                    11029   @m68kde~1_59:
0000665A  0D0A 496C 11030          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000665E  6C65 6761 
00006662  6C20 5265 
00006666  67        
00006667  6973 7465 11031          dc.b      105,115,116,101,114,46,46,46,46,0
0000666B  722E 2E2E 
0000666F  2E00      
                    11032   @m68kde~1_60:
00006672  0D0A 5379 11033          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006676  7374 656D 
0000667A  2053 5020 
0000667E  3D        
0000667F  2000      11034          dc.b      32,0
                    11035   @m68kde~1_61:
00006682  0D0A 5043 11036          dc.b      13,10,80,67,32,61,32,0
00006686  203D 2000 
                    11037   @m68kde~1_62:
0000668A  0D0A 5352 11038          dc.b      13,10,83,82,32,61,32,0
0000668E  203D 2000 
                    11039   @m68kde~1_63:
00006692  0D0A 496C 11040          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006696  6C65 6761 
0000669A  6C20 5265 
0000669E  67        
0000669F  6973 7465 11041          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000066A3  723A 2055 
000066A7  7365 2041 
000066AB  30        
000066AC  2D41 372C 11042          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000066B0  2044 302D 
000066B4  4437 2C20 
000066B8  5353 50   
000066BB  2C20 5553 11043          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000066BF  502C 2050 
000066C3  4320 6F72 
000066C7  2053      
000066C9  520D 0A00 11044          dc.b      82,13,10,0
                    11045   @m68kde~1_64:
000066CE  0D0A 0D0A 11046          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000066D2  4E75 6D20 
000066D6  2020 2020 
000066DA  4164      
000066DC  6472 6573 11047          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000066E0  7320 2020 
000066E4  2020 2049 
000066E8  6E        
000066E9  7374 7275 11048          dc.b      115,116,114,117,99,116,105,111,110,0
000066ED  6374 696F 
000066F1  6E00      
                    11049   @m68kde~1_65:
000066F4  0D0A 2D2D 11050          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000066F8  2D20 2020 
000066FC  2020 2D2D 
00006700  2D2D 2D   
00006703  2D2D 2D2D 11051          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006707  2020 2020 
0000670B  2D2D 2D2D 
0000670F  2D2D 2D   
00006712  2D2D 2D2D 11052          dc.b      45,45,45,45,0
00006716  00        
                    11053   @m68kde~1_66:
00006718  0D0A 4E6F 11054          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000671C  2042 7265 
00006720  616B 506F 
00006724  69        
00006725  6E74 7320 11055          dc.b      110,116,115,32,83,101,116,0
00006729  5365 7400 
                    11056   @m68kde~1_67:
0000672E  0D0A 2533 11057          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006732  6420 2020 
00006736  2020 2425 
0000673A  3038 78   
0000673D  00        11058          dc.b      0
                    11059   @m68kde~1_68:
0000673E  2020 2020 11060          dc.b      32,32,32,32,37,115,0
00006742  2573 00   
                    11061   @m68kde~1_69:
00006746  0D0A 4E75 11062          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
0000674A  6D20 2020 
0000674E  2020 4164 
00006752  6472      
00006754  6573 7300 11063          dc.b      101,115,115,0
                    11064   @m68kde~1_70:
00006758  0D0A 2D2D 11065          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000675C  2D20 2020 
00006760  2020 2D2D 
00006764  2D2D 2D   
00006767  2D2D 2D2D 11066          dc.b      45,45,45,45,0
0000676B  00        
                    11067   @m68kde~1_71:
0000676C  0D0A 4E6F 11068          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00006770  2057 6174 
00006774  6368 506F 
00006778  69        
00006779  6E74 7320 11069          dc.b      110,116,115,32,83,101,116,0
0000677D  5365 7400 
                    11070   @m68kde~1_72:
00006782  0D0A 456E 11071          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00006786  7465 7220 
0000678A  4272 6561 
0000678E  6B        
0000678F  2050 6F69 11072          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006793  6E74 204E 
00006797  756D 6265 
0000679B  72        
0000679C  3A20 00   11073          dc.b      58,32,0
                    11074   @m68kde~1_73:
000067A0  0D0A 496C 11075          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000067A4  6C65 6761 
000067A8  6C20 5261 
000067AC  6E        
000067AD  6765 203A 11076          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000067B1  2055 7365 
000067B5  2030 202D 
000067B9  2037      
000067BB  00        11077          dc.b      0
                    11078   @m68kde~1_74:
000067BC  0D0A 4272 11079          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067C0  6561 6B20 
000067C4  506F 696E 
000067C8  74        
000067C9  2043 6C65 11080          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000067CD  6172 6564 
000067D1  2E2E 2E2E 
000067D5  2E        
000067D6  0D0A 00   11081          dc.b      13,10,0
                    11082   @m68kde~1_75:
000067DA  0D0A 4272 11083          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067DE  6561 6B20 
000067E2  506F 696E 
000067E6  74        
000067E7  2077 6173 11084          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
000067EB  6E27 7420 
000067EF  5365 742E 
000067F3  2E        
000067F4  2E2E 2E00 11085          dc.b      46,46,46,0
                    11086   @m68kde~1_76:
000067F8  0D0A 456E 11087          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000067FC  7465 7220 
00006800  5761 7463 
00006804  68        
00006805  2050 6F69 11088          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006809  6E74 204E 
0000680D  756D 6265 
00006811  72        
00006812  3A20 00   11089          dc.b      58,32,0
                    11090   @m68kde~1_77:
00006816  0D0A 5761 11091          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000681A  7463 6820 
0000681E  506F 696E 
00006822  74        
00006823  2043 6C65 11092          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006827  6172 6564 
0000682B  2E2E 2E2E 
0000682F  2E        
00006830  0D0A 00   11093          dc.b      13,10,0
                    11094   @m68kde~1_78:
00006834  0D0A 5761 11095          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006838  7463 6820 
0000683C  506F 696E 
00006840  74        
00006841  2057 6173 11096          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006845  206E 6F74 
00006849  2053 6574 
0000684D  2E        
0000684E  2E2E 2E2E 11097          dc.b      46,46,46,46,0
00006852  00        
                    11098   @m68kde~1_79:
00006854  0D0A 4E6F 11099          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006858  2046 5245 
0000685C  4520 4272 
00006860  6561      
00006862  6B20 506F 11100          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006866  696E 7473 
0000686A  2E2E 2E2E 
0000686E  2E        
0000686F  00        11101          dc.b      0
                    11102   @m68kde~1_80:
00006870  0D0A 4272 11103          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006874  6561 6B20 
00006878  506F 696E 
0000687C  74        
0000687D  2041 6464 11104          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006881  7265 7373 
00006885  3A20 00   
                    11105   @m68kde~1_81:
00006888  0D0A 4572 11106          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000688C  726F 7220 
00006890  3A20 4272 
00006894  65        
00006895  616B 2050 11107          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006899  6F69 6E74 
0000689D  7320 4341 
000068A1  4E        
000068A2  4E4F 5420 11108          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000068A6  6265 2073 
000068AA  6574 2061 
000068AE  74        
000068AF  204F 4444 11109          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000068B3  2061 6464 
000068B7  7265 7373 
000068BB  65        
000068BC  7300      11110          dc.b      115,0
                    11111   @m68kde~1_82:
000068BE  0D0A 4572 11112          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000068C2  726F 7220 
000068C6  3A20 4272 
000068CA  65        
000068CB  616B 2050 11113          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000068CF  6F69 6E74 
000068D3  7320 4341 
000068D7  4E        
000068D8  4E4F 5420 11114          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000068DC  6265 2073 
000068E0  6574 2066 
000068E4  6F        
000068E5  7220 524F 11115          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
000068E9  4D20 696E 
000068ED  2052 616E 
000068F1  67        
000068F2  6520 3A20 11116          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000068F6  5B24 302D 
000068FA  2430 3030 
000068FE  3037 46   
00006901  4646 5D00 11117          dc.b      70,70,93,0
                    11118   @m68kde~1_83:
00006906  0D0A 4572 11119          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000690A  726F 723A 
0000690E  2042 7265 
00006912  61        
00006913  6B20 506F 11120          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006917  696E 7420 
0000691B  416C 7265 
0000691F  6164 7920 11121          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006923  4578 6973 
00006927  7473 2061 
0000692B  74        
0000692C  2041 6464 11122          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006930  7265 7373 
00006934  203A 2025 
00006938  30        
00006939  3878 0D0A 11123          dc.b      56,120,13,10,0
0000693D  00        
                    11124   @m68kde~1_84:
0000693E  0D0A 4272 11125          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006942  6561 6B20 
00006946  506F 696E 
0000694A  74        
0000694B  2053 6574 11126          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000694F  2061 7420 
00006953  4164 6472 
00006957  65        
00006958  7373 3A20 11127          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
0000695C  5B24 2530 
00006960  3878 5D2C 
00006964  2049      
00006966  6E73 7472 11128          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
0000696A  7563 7469 
0000696E  6F6E 203D 
00006972  2025 7300 11129          dc.b      32,37,115,0
                    11130   @m68kde~1_85:
00006976  0D0A 4E6F 11131          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
0000697A  2046 5245 
0000697E  4520 5761 
00006982  7463      
00006984  6820 506F 11132          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006988  696E 7473 
0000698C  2E2E 2E2E 
00006990  2E        
00006991  00        11133          dc.b      0
                    11134   @m68kde~1_86:
00006992  0D0A 5761 11135          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006996  7463 6820 
0000699A  506F 696E 
0000699E  74        
0000699F  2041 6464 11136          dc.b      32,65,100,100,114,101,115,115,58,32,0
000069A3  7265 7373 
000069A7  3A20 00   
                    11137   @m68kde~1_87:
000069AA  0D0A 4572 11138          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000069AE  726F 723A 
000069B2  2057 6174 
000069B6  63        
000069B7  6820 506F 11139          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000069BB  696E 7420 
000069BF  416C 7265 
000069C3  6164 7920 11140          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000069C7  5365 7420 
000069CB  6174 2041 
000069CF  64        
000069D0  6472 6573 11141          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000069D4  7320 3A20 
000069D8  2530 3878 
000069DC  0D        
000069DD  0A00      11142          dc.b      10,0
                    11143   @m68kde~1_88:
000069E0  0D0A 5761 11144          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069E4  7463 6820 
000069E8  506F 696E 
000069EC  74        
000069ED  2053 6574 11145          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000069F1  2061 7420 
000069F5  4164 6472 
000069F9  65        
000069FA  7373 3A20 11146          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000069FE  5B24 2530 
00006A02  3878 5D00 
                    11147   @m68kde~1_89:
00006A06  0D0A 0D0A 11148          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006A0A  0D0A 0D0A 
00006A0E  4042 5245 
00006A12  414B 50   
00006A15  4F49 4E54 11149          dc.b      79,73,78,84,0
00006A19  00        
                    11150   @m68kde~1_90:
00006A1A  0D0A 5369 11151          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006A1E  6E67 6C65 
00006A22  2053 7465 
00006A26  70        
00006A27  203A 205B 11152          dc.b      32,58,32,91,79,78,93,0
00006A2B  4F4E 5D00 
                    11153   @m68kde~1_91:
00006A30  0D0A 4272 11154          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006A34  6561 6B50 
00006A38  6F69 6E74 
00006A3C  73        
00006A3D  203A 205B 11155          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006A41  456E 6162 
00006A45  6C65 645D 
00006A49  00        
                    11156   @m68kde~1_92:
00006A4A  0D0A 5072 11157          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006A4E  6573 7320 
00006A52  3C45 5343 
00006A56  3E20      
00006A58  746F 2052 11158          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006A5C  6573 756D 
00006A60  6520 5573 
00006A64  6572 2050 11159          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006A68  726F 6772 
00006A6C  616D 0D0A 
00006A70  00        
                    11160   @m68kde~1_93:
00006A72  0D0A 556E 11161          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006A76  6B6E 6F77 
00006A7A  6E20 436F 
00006A7E  6D        
00006A7F  6D61 6E64 11162          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006A83  2E2E 2E2E 
00006A87  2E0D 0A00 
                    11163   @m68kde~1_94:
00006A8C  0D0A 5072 11164          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006A90  6F67 7261 
00006A94  6D20 456E 
00006A98  64        
00006A99  6564 2028 11165          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006A9D  5452 4150 
00006AA1  2023 3135 
00006AA5  292E      
00006AA7  2E2E 2E00 11166          dc.b      46,46,46,0
                    11167   @m68kde~1_95:
00006AAC  0D0A 4B69 11168          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006AB0  6C6C 2041 
00006AB4  6C6C 2042 
00006AB8  72        
00006AB9  6561 6B20 11169          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006ABD  506F 696E 
00006AC1  7473 2E2E 
00006AC5  2E        
00006AC6  2879 2F6E 11170          dc.b      40,121,47,110,41,63,0
00006ACA  293F 00   
                    11171   @m68kde~1_96:
00006ACE  0D0A 4B69 11172          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006AD2  6C6C 2041 
00006AD6  6C6C 2057 
00006ADA  61        
00006ADB  7463 6820 11173          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006ADF  506F 696E 
00006AE3  7473 2E2E 
00006AE7  2E        
00006AE8  2879 2F6E 11174          dc.b      40,121,47,110,41,63,0
00006AEC  293F 00   
                    11175   @m68kde~1_97:
00006AF0  0D0A 2D2D 11176          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006AF4  2D2D 2D2D 
00006AF8  2D2D 2D2D 
00006AFC  2D2D 2D   
00006AFF  2D2D 2D2D 11177          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B03  2D2D 2D2D 
00006B07  2D2D 2D2D 
00006B0B  2D2D 2D   
00006B0E  2D2D 2D2D 11178          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B12  2D2D 2D2D 
00006B16  2D2D 2D2D 
00006B1A  2D2D 2D   
00006B1D  2D2D 2D2D 11179          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B21  2D2D 2D2D 
00006B25  2D2D 2D2D 
00006B29  2D2D 2D   
00006B2C  2D2D 2D2D 11180          dc.b      45,45,45,45,45,45,0
00006B30  2D2D 00   
                    11181   @m68kde~1_98:
00006B34  0D0A 2020 11182          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006B38  4465 6275 
00006B3C  6767 6572 
00006B40  20        
00006B41  436F 6D6D 11183          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006B45  616E 6420 
00006B49  5375 6D6D 
00006B4D  6172 7900 11184          dc.b      97,114,121,0
                    11185   @m68kde~1_99:
00006B52  0D0A 2020 11186          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006B56  2E28 7265 
00006B5A  6729 2020 
00006B5E  2020      
00006B60  2020 202D 11187          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006B64  2043 6861 
00006B68  6E67 6520 
00006B6C  5265      
00006B6E  6769 7374 11188          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006B72  6572 733A 
00006B76  2065 2E67 
00006B7A  2041 302D 11189          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006B7E  4137 2C44 
00006B82  302D 4437 
00006B86  2C50 43   
00006B89  2C53 5350 11190          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006B8D  2C55 5350 
00006B91  2C53 5200 
                    11191   @m68kde~1_100:
00006B96  0D0A 2020 11192          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006B9A  4244 2F42 
00006B9E  532F 4243 
00006BA2  2F42 4B   
00006BA5  2020 2D20 11193          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006BA9  4272 6561 
00006BAD  6B20 506F 
00006BB1  69        
00006BB2  6E74 3A20 11194          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006BB6  4469 7370 
00006BBA  6C61 792F 
00006BBE  53        
00006BBF  6574 2F43 11195          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006BC3  6C65 6172 
00006BC7  2F4B 696C 
00006BCB  6C        
00006BCC  00        11196          dc.b      0
                    11197   @m68kde~1_101:
00006BCE  0D0A 2020 11198          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006BD2  4320 2020 
00006BD6  2020 2020 
00006BDA  2020 20   
00006BDD  2020 2D20 11199          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006BE1  436F 7079 
00006BE5  2050 726F 
00006BE9  67        
00006BEA  7261 6D20 11200          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006BEE  6672 6F6D 
00006BF2  2046 6C61 
00006BF6  73        
00006BF7  6820 746F 11201          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006BFB  204D 6169 
00006BFF  6E20 4D65 
00006C03  6D        
00006C04  6F72 7900 11202          dc.b      111,114,121,0
                    11203   @m68kde~1_102:
00006C08  0D0A 2020 11204          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006C0C  4449 2020 
00006C10  2020 2020 
00006C14  2020 20   
00006C17  2020 2D20 11205          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006C1B  4469 7361 
00006C1F  7373 656D 
00006C23  62        
00006C24  6C65 2050 11206          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006C28  726F 6772 
00006C2C  616D 00   
                    11207   @m68kde~1_103:
00006C30  0D0A 2020 11208          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006C34  4455 2020 
00006C38  2020 2020 
00006C3C  2020 20   
00006C3F  2020 2D20 11209          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006C43  4475 6D70 
00006C47  204D 656D 
00006C4B  6F        
00006C4C  7279 2043 11210          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006C50  6F6E 7465 
00006C54  6E74 7320 
00006C58  746F 2053 11211          dc.b      116,111,32,83,99,114,101,101,110,0
00006C5C  6372 6565 
00006C60  6E00      
                    11212   @m68kde~1_104:
00006C62  0D0A 2020 11213          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006C66  4520 2020 
00006C6A  2020 2020 
00006C6E  2020 20   
00006C71  2020 2D20 11214          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006C75  456E 7465 
00006C79  7220 5374 
00006C7D  72        
00006C7E  696E 6720 11215          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006C82  696E 746F 
00006C86  204D 656D 
00006C8A  6F72 7900 11216          dc.b      111,114,121,0
                    11217   @m68kde~1_105:
00006C8E  0D0A 2020 11218          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006C92  4620 2020 
00006C96  2020 2020 
00006C9A  2020 20   
00006C9D  2020 2D20 11219          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006CA1  4669 6C6C 
00006CA5  204D 656D 
00006CA9  6F        
00006CAA  7279 2077 11220          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006CAE  6974 6820 
00006CB2  4461 7461 
00006CB6  00        
                    11221   @m68kde~1_106:
00006CB8  0D0A 2020 11222          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006CBC  4720 2020 
00006CC0  2020 2020 
00006CC4  2020 20   
00006CC7  2020 2D20 11223          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006CCB  476F 2050 
00006CCF  726F 6772 
00006CD3  61        
00006CD4  6D20 5374 11224          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006CD8  6172 7469 
00006CDC  6E67 2061 
00006CE0  74        
00006CE1  2041 6464 11225          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006CE5  7265 7373 
00006CE9  3A20 2425 
00006CED  30        
00006CEE  3858 00   11226          dc.b      56,88,0
                    11227   @m68kde~1_107:
00006CF2  0D0A 2020 11228          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006CF6  4C20 2020 
00006CFA  2020 2020 
00006CFE  2020 20   
00006D01  2020 2D20 11229          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006D05  4C6F 6164 
00006D09  2050 726F 
00006D0D  67        
00006D0E  7261 6D20 11230          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006D12  282E 4845 
00006D16  5820 6669 
00006D1A  6C        
00006D1B  6529 2066 11231          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006D1F  726F 6D20 
00006D23  4C61 7074 
00006D27  6F        
00006D28  7000      11232          dc.b      112,0
                    11233   @m68kde~1_108:
00006D2A  0D0A 2020 11234          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006D2E  4D20 2020 
00006D32  2020 2020 
00006D36  2020 20   
00006D39  2020 2D20 11235          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006D3D  4D65 6D6F 
00006D41  7279 2045 
00006D45  78        
00006D46  616D 696E 11236          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006D4A  6520 616E 
00006D4E  6420 4368 
00006D52  61        
00006D53  6E67 6500 11237          dc.b      110,103,101,0
                    11238   @m68kde~1_109:
00006D58  0D0A 2020 11239          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006D5C  5020 2020 
00006D60  2020 2020 
00006D64  2020 20   
00006D67  2020 2D20 11240          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006D6B  5072 6F67 
00006D6F  7261 6D20 
00006D73  46        
00006D74  6C61 7368 11241          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006D78  204D 656D 
00006D7C  6F72 7920 
00006D80  7769 7468 11242          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006D84  2055 7365 
00006D88  7220 5072 
00006D8C  6F67 7261 11243          dc.b      111,103,114,97,109,0
00006D90  6D00      
                    11244   @m68kde~1_110:
00006D92  0D0A 2020 11245          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006D96  5220 2020 
00006D9A  2020 2020 
00006D9E  2020 20   
00006DA1  2020 2D20 11246          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006DA5  4469 7370 
00006DA9  6C61 7920 
00006DAD  36        
00006DAE  3830 3030 11247          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006DB2  2052 6567 
00006DB6  6973 7465 
00006DBA  72        
00006DBB  7300      11248          dc.b      115,0
                    11249   @m68kde~1_111:
00006DBE  0D0A 2020 11250          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006DC2  5320 2020 
00006DC6  2020 2020 
00006DCA  2020 20   
00006DCD  2020 2D20 11251          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006DD1  546F 6767 
00006DD5  6C65 204F 
00006DD9  4E        
00006DDA  2F4F 4646 11252          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006DDE  2053 696E 
00006DE2  676C 6520 
00006DE6  53        
00006DE7  7465 7020 11253          dc.b      116,101,112,32,77,111,100,101,0
00006DEB  4D6F 6465 
00006DEF  00        
                    11254   @m68kde~1_112:
00006DF0  0D0A 2020 11255          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006DF4  544D 2020 
00006DF8  2020 2020 
00006DFC  2020 20   
00006DFF  2020 2D20 11256          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006E03  5465 7374 
00006E07  204D 656D 
00006E0B  6F        
00006E0C  7279 00   11257          dc.b      114,121,0
                    11258   @m68kde~1_113:
00006E10  0D0A 2020 11259          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006E14  5453 2020 
00006E18  2020 2020 
00006E1C  2020 20   
00006E1F  2020 2D20 11260          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006E23  5465 7374 
00006E27  2053 7769 
00006E2B  74        
00006E2C  6368 6573 11261          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006E30  3A20 5357 
00006E34  372D 3000 
                    11262   @m68kde~1_114:
00006E38  0D0A 2020 11263          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006E3C  5444 2020 
00006E40  2020 2020 
00006E44  2020 20   
00006E47  2020 2D20 11264          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006E4B  5465 7374 
00006E4F  2044 6973 
00006E53  70        
00006E54  6C61 7973 11265          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006E58  3A20 4C45 
00006E5C  4473 2061 
00006E60  6E        
00006E61  6420 372D 11266          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006E65  5365 676D 
00006E69  656E 7400 
                    11267   @m68kde~1_115:
00006E6E  0D0A 2020 11268          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006E72  5744 2F57 
00006E76  532F 5743 
00006E7A  2F57 4B   
00006E7D  2020 2D20 11269          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006E81  5761 7463 
00006E85  6820 506F 
00006E89  696E      
00006E8B  743A 2044 11270          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006E8F  6973 706C 
00006E93  6179 2F53 
00006E97  65        
00006E98  742F 436C 11271          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006E9C  6561 722F 
00006EA0  4B69 6C6C 
00006EA4  00        
                    11272   @m68kde~1_116:
00006EA6  0D0A 2300 11273          dc.b      13,10,35,0
                    11274   @m68kde~1_117:
00006EAA  0D0A 5072 11275          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006EAE  6F67 7261 
00006EB2  6D20 5275 
00006EB6  6E        
00006EB7  6E69 6E67 11276          dc.b      110,105,110,103,46,46,46,46,46,0
00006EBB  2E2E 2E2E 
00006EBF  2E00      
                    11277   @m68kde~1_118:
00006EC2  0D0A 5072 11278          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006EC6  6573 7320 
00006ECA  3C52 4553 
00006ECE  4554      
00006ED0  3E20 6275 11279          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006ED4  7474 6F6E 
00006ED8  203C 4B65 
00006EDC  79        
00006EDD  303E 206F 11280          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006EE1  6E20 4445 
00006EE5  3120 746F 
00006EE9  2073      
00006EEB  746F 7000 11281          dc.b      116,111,112,0
                    11282   @m68kde~1_119:
00006EF0  0D0A 4572 11283          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006EF4  726F 723A 
00006EF8  2050 7265 
00006EFC  73        
00006EFD  7320 2747 11284          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006F01  2720 6669 
00006F05  7273 7420 
00006F09  74        
00006F0A  6F20 7374 11285          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006F0E  6172 7420 
00006F12  7072 6F67 
00006F16  7261 6D00 11286          dc.b      114,97,109,0
                    11287   @m68kde~1_120:
00006F1A  0D0A 5369 11288          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F1E  6E67 6C65 
00006F22  2053 7465 
00006F26  70        
00006F27  2020 3A5B 11289          dc.b      32,32,58,91,79,78,93,0
00006F2B  4F4E 5D00 
                    11290   @m68kde~1_121:
00006F30  0D0A 5072 11291          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006F34  6573 7320 
00006F38  2747 2720 
00006F3C  74        
00006F3D  6F20 5472 11292          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006F41  6163 6520 
00006F45  5072 6F67 
00006F49  72        
00006F4A  616D 2066 11293          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006F4E  726F 6D20 
00006F52  6164 6472 
00006F56  6573 7320 11294          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006F5A  2425 582E 
00006F5E  2E2E 2E2E 
00006F62  00        
                    11295   @m68kde~1_122:
00006F64  0D0A 5075 11296          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006F68  7368 203C 
00006F6C  5245 5345 
00006F70  5420      
00006F72  4275 7474 11297          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006F76  6F6E 3E20 
00006F7A  746F 2053 
00006F7E  74        
00006F7F  6F70 2E2E 11298          dc.b      111,112,46,46,46,46,46,0
00006F83  2E2E 2E00 
                    11299   @m68kde~1_123:
00006F88  0D0A 5369 11300          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F8C  6E67 6C65 
00006F90  2053 7465 
00006F94  70        
00006F95  203A 205B 11301          dc.b      32,58,32,91,79,70,70,93,0
00006F99  4F46 465D 
00006F9D  00        
                    11302   @m68kde~1_124:
00006F9E  0D0A 4272 11303          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006FA2  6561 6B20 
00006FA6  506F 696E 
00006FAA  74        
00006FAB  7320 3A5B 11304          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006FAF  456E 6162 
00006FB3  6C65 645D 
00006FB7  00        
                    11305   @m68kde~1_125:
00006FB8  0D0A 5072 11306          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006FBC  6573 7320 
00006FC0  3C45 5343 
00006FC4  3E20      
00006FC6  746F 2052 11307          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006FCA  6573 756D 
00006FCE  6520 5573 
00006FD2  6572 2050 11308          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006FD6  726F 6772 
00006FDA  616D 2E2E 
00006FDE  2E        
00006FDF  2E2E 00   11309          dc.b      46,46,0
                    11310   @m68kde~1_126:
00006FE2  0D0A 5369 11311          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006FE6  6E67 6C65 
00006FEA  2053 7465 
00006FEE  70        
00006FEF  2020 3A5B 11312          dc.b      32,32,58,91,79,70,70,93,0
00006FF3  4F46 465D 
00006FF7  00        
                    11313   @m68kde~1_127:
00006FF8  0D0A 0D0A 11314          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006FFC  5072 6F67 
00007000  7261 6D20 
00007004  41        
00007005  424F 5254 11315          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007009  2021 2121 
0000700D  2121 210D 
00007011  0A00      
                    11316   @m68kde~1_128:
00007014  2573 0D0A 11317          dc.b      37,115,13,10,0
00007018  00        
                    11318   @m68kde~1_129:
0000701A  0D0A 0D0A 11319          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000701E  5072 6F67 
00007022  7261 6D20 
00007026  41        
00007027  424F 5254 11320          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000702B  2021 2121 
0000702F  2121 00   
                    11321   @m68kde~1_130:
00007032  0D0A 556E 11322          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007036  6861 6E64 
0000703A  6C65 6420 
0000703E  49        
0000703F  6E74 6572 11323          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007043  7275 7074 
00007047  3A20 4952 
0000704B  5125 6420 11324          dc.b      81,37,100,32,33,33,33,33,33,0
0000704F  2121 2121 
00007053  2100      
                    11325   @m68kde~1_131:
00007056  4144 4452 11326          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000705A  4553 5320 
0000705E  4552 524F 
00007062  523A 20   
00007065  3136 206F 11327          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007069  7220 3332 
0000706D  2042 6974 
00007071  2054      
00007073  7261 6E73 11328          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007077  6665 7220 
0000707B  746F 2F66 
0000707F  726F 6D20 11329          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007083  616E 204F 
00007087  4444 2041 
0000708B  64        
0000708C  6472 6573 11330          dc.b      100,114,101,115,115,46,46,46,46,0
00007090  732E 2E2E 
00007094  2E00      
                    11331   @m68kde~1_132:
00007096  556E 6861 11332          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000709A  6E64 6C65 
0000709E  6420 5472 
000070A2  6170 2021 11333          dc.b      97,112,32,33,33,33,33,33,0
000070A6  2121 2121 
000070AA  00        
                    11334   @m68kde~1_133:
000070AC  4255 5320 11335          dc.b      66,85,83,32,69,114,114,111,114,33,0
000070B0  4572 726F 
000070B4  7221 00   
                    11336   @m68kde~1_134:
000070B8  4144 4452 11337          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000070BC  4553 5320 
000070C0  4572 726F 
000070C4  7221      
000070C6  00        11338          dc.b      0
                    11339   @m68kde~1_135:
000070C8  494C 4C45 11340          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000070CC  4741 4C20 
000070D0  494E 5354 
000070D4  5255 43   
000070D7  5449 4F4E 11341          dc.b      84,73,79,78,0
000070DB  00        
                    11342   @m68kde~1_136:
000070DC  4449 5649 11343          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000070E0  4445 2042 
000070E4  5920 5A45 
000070E8  524F 00   
                    11344   @m68kde~1_137:
000070EC  2743 484B 11345          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000070F0  2720 494E 
000070F4  5354 5255 
000070F8  4354 49   
000070FB  4F4E 00   11346          dc.b      79,78,0
                    11347   @m68kde~1_138:
000070FE  5452 4150 11348          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007102  5620 494E 
00007106  5354 5255 
0000710A  4354 49   
0000710D  4F4E 00   11349          dc.b      79,78,0
                    11350   @m68kde~1_139:
00007110  5052 4956 11351          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007114  494C 4547 
00007118  4520 5649 
0000711C  4F4C 41   
0000711F  5449 4F4E 11352          dc.b      84,73,79,78,0
00007123  00        
                    11353   @m68kde~1_140:
00007124  554E 494E 11354          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007128  4954 4941 
0000712C  4C49 5345 
00007130  4420 49   
00007133  5251 00   11355          dc.b      82,81,0
                    11356   @m68kde~1_141:
00007136  5350 5552 11357          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000713A  494F 5553 
0000713E  2049 5251 
00007142  00        
                    11358   @m68kde~1_142:
00007144  0D0A 5374 11359          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007148  6172 7420 
0000714C  4164 6472 
00007150  65        
00007151  7373 2069 11360          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007155  6E20 4D65 
00007159  6D6F 7279 
0000715D  3A20 00   11361          dc.b      58,32,0
                    11362   @m68kde~1_143:
00007160  0D0A 456E 11363          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007164  7465 7220 
00007168  5374 7269 
0000716C  6E        
0000716D  6720 2845 11364          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007171  5343 2074 
00007175  6F20 656E 
00007179  64        
0000717A  2920 3A00 11365          dc.b      41,32,58,0
                    11366   @m68kde~1_144:
0000717E  4D65 6D6F 11367          dc.b      77,101,109,111,114,121,32,84,101,115,116,0
00007182  7279 2054 
00007186  6573 7400 
                    11368   @m68kde~1_145:
0000718A  0D0A 5374 11369          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000718E  6172 7420 
00007192  4164 6472 
00007196  65        
00007197  7373 3A20 11370          dc.b      115,115,58,32,0
0000719B  00        
                    11371   @m68kde~1_146:
0000719C  0D0A 456E 11372          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
000071A0  6420 4164 
000071A4  6472 6573 
000071A8  73        
000071A9  3A20 00   11373          dc.b      58,32,0
                    11374   @m68kde~1_147:
000071AC  0D0A 5772 11375          dc.b      13,10,87,114,105,116,105,110,103,10,0
000071B0  6974 696E 
000071B4  670A 00   
                    11376   @m68kde~1_148:
000071B8  5772 6974 11377          dc.b      87,114,105,116,105,110,103,0
000071BC  696E 6700 
                    11378   @m68kde~1_149:
000071C0  2300      11379          dc.b      35,0
                    11380   @m68kde~1_150:
000071C2  0D0A 5265 11381          dc.b      13,10,82,101,97,100,105,110,103,10,0
000071C6  6164 696E 
000071CA  670A 00   
                    11382   @m68kde~1_151:
000071CE  5265 6164 11383          dc.b      82,101,97,100,105,110,103,0
000071D2  696E 6700 
                    11384   @m68kde~1_152:
000071D6  0D0A 4641 11385          dc.b      13,10,70,65,73,76,69,68,33,33,33,33,33,33,0
000071DA  494C 4544 
000071DE  2121 2121 
000071E2  2121 00   
                    11386   @m68kde~1_153:
000071E6  0D0A 4661 11387          dc.b      13,10,70,97,105,108,101,100,32,97,116,32,97
000071EA  696C 6564 
000071EE  2061 7420 
000071F2  61        
000071F3  6464 7265 11388          dc.b      100,100,114,101,115,115,32,37,88,0
000071F7  7373 2025 
000071FB  5800      
                    11389   @m68kde~1_154:
000071FE  0D0A 4578 11390          dc.b      13,10,69,120,112,101,99,116,101,100,32,118,97
00007202  7065 6374 
00007206  6564 2076 
0000720A  61        
0000720B  6C75 653A 11391          dc.b      108,117,101,58,32,37,88,0
0000720F  2025 5800 
                    11392   @m68kde~1_155:
00007214  0D0A 4163 11393          dc.b      13,10,65,99,116,117,97,108,32,86,97,108,117
00007218  7475 616C 
0000721C  2056 616C 
00007220  75        
00007221  653A 2025 11394          dc.b      101,58,32,37,88,0
00007225  5800      
                    11395   @m68kde~1_156:
00007228  4661 696C 11396          dc.b      70,97,105,108,101,100,32,97,116,32,37,88,0
0000722C  6564 2061 
00007230  7420 2558 
00007234  00        
                    11397   @m68kde~1_157:
00007236  573A 2558 11398          dc.b      87,58,37,88,32,82,58,37,88,0
0000723A  2052 3A25 
0000723E  5800      
                    11399   @m68kde~1_158:
00007240  4D65 6D6F 11400          dc.b      77,101,109,111,114,121,32,84,101,115,116,32
00007244  7279 2054 
00007248  6573 7420 
0000724C  5375 6363 11401          dc.b      83,117,99,99,101,115,115,102,117,108,0
00007250  6573 7366 
00007254  756C 00   
                    11402   @m68kde~1_159:
00007258  0D0A 4D65 11403          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
0000725C  6D6F 7279 
00007260  2054 6573 
00007264  74        
00007265  2053 7563 11404          dc.b      32,83,117,99,99,101,115,115,102,117,108,0
00007269  6365 7373 
0000726D  6675 6C00 
                    11405   @m68kde~1_160:
00007272  0D0A 496E 11406          dc.b      13,10,73,110,118,97,108,105,100,32,65,100,100
00007276  7661 6C69 
0000727A  6420 4164 
0000727E  64        
0000727F  7265 7373 11407          dc.b      114,101,115,115,58,32,69,110,100,32,109,117
00007283  3A20 456E 
00007287  6420 6D75 
0000728B  7374 2062 11408          dc.b      115,116,32,98,101,32,103,114,101,97,116,101
0000728F  6520 6772 
00007293  6561 7465 
00007297  7220 7468 11409          dc.b      114,32,116,104,97,110,32,83,116,97,114,116,0
0000729B  616E 2053 
0000729F  7461 7274 
000072A3  00        
                    11410   @m68kde~1_161:
000072A4  496E 7661 11411          dc.b      73,110,118,97,108,105,100,32,65,100,100,114
000072A8  6C69 6420 
000072AC  4164 6472 
000072B0  6573 7300 11412          dc.b      101,115,115,0
                    11413   @m68kde~1_162:
000072B4  4445 312D 11414          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000072B8  3638 6B20 
000072BC  4275 6720 
000072C0  5631      
000072C2  2E37 3700 11415          dc.b      46,55,55,0
                    11416   @m68kde~1_163:
000072C6  436F 7079 11417          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000072CA  7269 6768 
000072CE  7420 2843 
000072D2  2920 504A 11418          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000072D6  2044 6176 
000072DA  6965 7320 
000072DE  3230      
000072E0  3136 00   11419          dc.b      49,54,0
                    11420   @m68kde~1_164:
000072E4  0D0A 5275 11421          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000072E8  6E6E 696E 
000072EC  672E 2E2E 
000072F0  2E        
000072F1  2E00      11422          dc.b      46,0
                    11423   @m68kde~1_165:
000072F4  5275 6E6E 11424          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000072F8  696E 672E 
000072FC  2E2E 2E2E 
00007300  00        
                    11425   @m68kde~1_166:
00007302  4A2E 4C61 11426          dc.b      74,46,76,97,119,32,32,32,52,56,55,49,56,49,53
00007306  7720 2020 
0000730A  3438 3731 
0000730E  3831 35   
00007311  3000      11427          dc.b      48,0
                    11428   @m68kde~1_167:
00007314  472E 5768 11429          dc.b      71,46,87,104,121,116,101,32,52,53,54,56,56,49
00007318  7974 6520 
0000731C  3435 3638 
00007320  3831      
00007322  3538 00   11430          dc.b      53,56,0
                    11431   @m68kde~1_168:
00007326  0D0A 2573 11432          dc.b      13,10,37,115,0
0000732A  00        
                    11433   @m68kde~1_169:
0000732C  2E42 2000 11434          dc.b      46,66,32,0
                    11435   @m68kde~1_170:
00007330  2E57 2000 11436          dc.b      46,87,32,0
                    11437   @m68kde~1_171:
00007334  2E4C 2000 11438          dc.b      46,76,32,0
                    11439   @m68kde~1_172:
00007338  2324 2558 11440          dc.b      35,36,37,88,0
0000733C  00        
                    11441   @m68kde~1_173:
0000733E  2800      11442          dc.b      40,0
                    11443   @m68kde~1_174:
00007340  2900      11444          dc.b      41,0
                    11445   @m68kde~1_175:
00007342  292B 00   11446          dc.b      41,43,0
                    11447   @m68kde~1_176:
00007346  2D28 00   11448          dc.b      45,40,0
                    11449   @m68kde~1_177:
0000734A  2564 2841 11450          dc.b      37,100,40,65,37,100,41,0
0000734E  2564 2900 
                    11451   @m68kde~1_178:
00007352  2564 2841 11452          dc.b      37,100,40,65,37,100,44,0
00007356  2564 2C00 
                    11453   @m68kde~1_179:
0000735A  4400      11454          dc.b      68,0
                    11455   @m68kde~1_180:
0000735C  4100      11456          dc.b      65,0
                    11457   @m68kde~1_181:
0000735E  2564 00   11458          dc.b      37,100,0
                    11459   @m68kde~1_182:
00007362  2E57 2900 11460          dc.b      46,87,41,0
                    11461   @m68kde~1_183:
00007366  2E4C 2900 11462          dc.b      46,76,41,0
                    11463   @m68kde~1_184:
0000736A  2425 5800 11464          dc.b      36,37,88,0
                    11465   @m68kde~1_185:
0000736E  2564 2850 11466          dc.b      37,100,40,80,67,41,0
00007372  4329 00   
                    11467   @m68kde~1_186:
00007376  2564 2850 11468          dc.b      37,100,40,80,67,44,0
0000737A  432C 00   
                    11469   @m68kde~1_187:
0000737E  2C00      11470          dc.b      44,0
                    11471   @m68kde~1_188:
00007380  4343 00   11472          dc.b      67,67,0
                    11473   @m68kde~1_189:
00007384  4353 00   11474          dc.b      67,83,0
                    11475   @m68kde~1_190:
00007388  4551 00   11476          dc.b      69,81,0
                    11477   @m68kde~1_191:
0000738C  4745 00   11478          dc.b      71,69,0
                    11479   @m68kde~1_192:
00007390  4754 00   11480          dc.b      71,84,0
                    11481   @m68kde~1_193:
00007394  4849 00   11482          dc.b      72,73,0
                    11483   @m68kde~1_194:
00007398  4C45 00   11484          dc.b      76,69,0
                    11485   @m68kde~1_195:
0000739C  4C53 00   11486          dc.b      76,83,0
                    11487   @m68kde~1_196:
000073A0  4C54 00   11488          dc.b      76,84,0
                    11489   @m68kde~1_197:
000073A4  4D49 00   11490          dc.b      77,73,0
                    11491   @m68kde~1_198:
000073A8  4E45 00   11492          dc.b      78,69,0
                    11493   @m68kde~1_199:
000073AC  504C 00   11494          dc.b      80,76,0
                    11495   @m68kde~1_200:
000073B0  5653 00   11496          dc.b      86,83,0
                    11497   @m68kde~1_201:
000073B4  5643 00   11498          dc.b      86,67,0
                    11499   @m68kde~1_202:
000073B8  5241 00   11500          dc.b      82,65,0
                    11501   @m68kde~1_203:
000073BC  5352 00   11502          dc.b      83,82,0
                    11503   @m68kde~1_204:
000073C0  556E 6B6E 11504          dc.b      85,110,107,110,111,119,110,0
000073C4  6F77 6E00 
                    11505   @m68kde~1_205:
000073C8  4142 4344 11506          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
000073CC  2044 2564 
000073D0  2C44 2564 
000073D4  00        
                    11507   @m68kde~1_206:
000073D6  4142 4344 11508          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000073DA  202D 2841 
000073DE  2564 292C 
000073E2  2D28 41   
000073E5  2564 2900 11509          dc.b      37,100,41,0
                    11510   @m68kde~1_207:
000073EA  4144 4441 11511          dc.b      65,68,68,65,46,87,32,0
000073EE  2E57 2000 
                    11512   @m68kde~1_208:
000073F2  4144 4441 11513          dc.b      65,68,68,65,46,76,32,0
000073F6  2E4C 2000 
                    11514   @m68kde~1_209:
000073FA  2C41 2558 11515          dc.b      44,65,37,88,0
000073FE  00        
                    11516   @m68kde~1_210:
00007400  4144 4400 11517          dc.b      65,68,68,0
                    11518   @m68kde~1_211:
00007404  4144 4449 11519          dc.b      65,68,68,73,0
00007408  00        
                    11520   @m68kde~1_212:
0000740A  414E 4449 11521          dc.b      65,78,68,73,0
0000740E  00        
                    11522   @m68kde~1_213:
00007410  434D 5049 11523          dc.b      67,77,80,73,0
00007414  00        
                    11524   @m68kde~1_214:
00007416  454F 5249 11525          dc.b      69,79,82,73,0
0000741A  00        
                    11526   @m68kde~1_215:
0000741C  4F52 4900 11527          dc.b      79,82,73,0
                    11528   @m68kde~1_216:
00007420  5355 4249 11529          dc.b      83,85,66,73,0
00007424  00        
                    11530   @m68kde~1_217:
00007426  414E 4449 11531          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
0000742A  2023 2425 
0000742E  582C 5352 
00007432  00        
                    11532   @m68kde~1_218:
00007434  4144 4451 11533          dc.b      65,68,68,81,0
00007438  00        
                    11534   @m68kde~1_219:
0000743A  2325 3158 11535          dc.b      35,37,49,88,44,0
0000743E  2C00      
                    11536   @m68kde~1_220:
00007440  4144 4458 11537          dc.b      65,68,68,88,0
00007444  00        
                    11538   @m68kde~1_221:
00007446  4425 582C 11539          dc.b      68,37,88,44,68,37,88,0
0000744A  4425 5800 
                    11540   @m68kde~1_222:
0000744E  2D28 4125 11541          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00007452  5829 2C2D 
00007456  2841 2558 
0000745A  2900      
                    11542   @m68kde~1_223:
0000745C  414E 4400 11543          dc.b      65,78,68,0
                    11544   @m68kde~1_224:
00007460  414E 4449 11545          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00007464  2023 2425 
00007468  3258 2C43 
0000746C  4352 00   
                    11546   @m68kde~1_225:
00007470  4153 4C00 11547          dc.b      65,83,76,0
                    11548   @m68kde~1_226:
00007474  4153 5200 11549          dc.b      65,83,82,0
                    11550   @m68kde~1_227:
00007478  4C53 4C00 11551          dc.b      76,83,76,0
                    11552   @m68kde~1_228:
0000747C  4C53 5200 11553          dc.b      76,83,82,0
                    11554   @m68kde~1_229:
00007480  524F 4C00 11555          dc.b      82,79,76,0
                    11556   @m68kde~1_230:
00007484  524F 5200 11557          dc.b      82,79,82,0
                    11558   @m68kde~1_231:
00007488  524F 584C 11559          dc.b      82,79,88,76,0
0000748C  00        
                    11560   @m68kde~1_232:
0000748E  524F 5852 11561          dc.b      82,79,88,82,0
00007492  00        
                    11562   @m68kde~1_233:
00007494  2324 2558 11563          dc.b      35,36,37,88,44,68,37,88,0
00007498  2C44 2558 
0000749C  00        
                    11564   @m68kde~1_234:
0000749E  4200      11565          dc.b      66,0
                    11566   @m68kde~1_235:
000074A0  4243 4847 11567          dc.b      66,67,72,71,32,0
000074A4  2000      
                    11568   @m68kde~1_236:
000074A6  4425 642C 11569          dc.b      68,37,100,44,0
000074AA  00        
                    11570   @m68kde~1_237:
000074AC  2324 2558 11571          dc.b      35,36,37,88,44,0
000074B0  2C00      
                    11572   @m68kde~1_238:
000074B2  4243 4C52 11573          dc.b      66,67,76,82,32,0
000074B6  2000      
                    11574   @m68kde~1_239:
000074B8  4253 4554 11575          dc.b      66,83,69,84,32,0
000074BC  2000      
                    11576   @m68kde~1_240:
000074BE  4254 5354 11577          dc.b      66,84,83,84,32,0
000074C2  2000      
                    11578   @m68kde~1_241:
000074C4  4348 4B20 11579          dc.b      67,72,75,32,0
000074C8  00        
                    11580   @m68kde~1_242:
000074CA  2C44 2564 11581          dc.b      44,68,37,100,0
000074CE  00        
                    11582   @m68kde~1_243:
000074D0  434C 5200 11583          dc.b      67,76,82,0
                    11584   @m68kde~1_244:
000074D4  434D 5041 11585          dc.b      67,77,80,65,46,87,32,0
000074D8  2E57 2000 
                    11586   @m68kde~1_245:
000074DC  434D 5041 11587          dc.b      67,77,80,65,46,76,32,0
000074E0  2E4C 2000 
                    11588   @m68kde~1_246:
000074E4  2C41 2564 11589          dc.b      44,65,37,100,0
000074E8  00        
                    11590   @m68kde~1_247:
000074EA  434D 5000 11591          dc.b      67,77,80,0
                    11592   @m68kde~1_248:
000074EE  434D 504D 11593          dc.b      67,77,80,77,0
000074F2  00        
                    11594   @m68kde~1_249:
000074F4  2841 2564 11595          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000074F8  292B 2C28 
000074FC  4125 6429 
00007500  2B00      
                    11596   @m68kde~1_250:
00007502  4442 00   11597          dc.b      68,66,0
                    11598   @m68kde~1_251:
00007506  4425 642C 11599          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
0000750A  252B 6428 
0000750E  5043 2920 
00007512  746F      
00007514  2041 6464 11600          dc.b      32,65,100,100,114,58,36,37,88,0
00007518  723A 2425 
0000751C  5800      
                    11601   @m68kde~1_252:
0000751E  4449 5653 11602          dc.b      68,73,86,83,32,0
00007522  2000      
                    11603   @m68kde~1_253:
00007524  4449 5655 11604          dc.b      68,73,86,85,32,0
00007528  2000      
                    11605   @m68kde~1_254:
0000752A  454F 5200 11606          dc.b      69,79,82,0
                    11607   @m68kde~1_255:
0000752E  454F 5249 11608          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007532  2023 2425 
00007536  3258 2C43 
0000753A  4352 00   
                    11609   @m68kde~1_256:
0000753E  454F 5249 11610          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00007542  2023 2425 
00007546  582C 5352 
0000754A  00        
                    11611   @m68kde~1_257:
0000754C  4558 4720 11612          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007550  4425 642C 
00007554  4425 6400 
                    11613   @m68kde~1_258:
00007558  4558 4720 11614          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
0000755C  4125 642C 
00007560  4125 6400 
                    11615   @m68kde~1_259:
00007564  4558 4720 11616          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00007568  4425 642C 
0000756C  4125 6400 
                    11617   @m68kde~1_260:
00007570  4558 5400 11618          dc.b      69,88,84,0
                    11619   @m68kde~1_261:
00007574  494C 4C45 11620          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00007578  4741 4C20 
0000757C  2824 3441 
00007580  4643 29   
00007583  00        11621          dc.b      0
                    11622   @m68kde~1_262:
00007584  4A4D 5020 11623          dc.b      74,77,80,32,0
00007588  00        
                    11624   @m68kde~1_263:
0000758A  4A53 5220 11625          dc.b      74,83,82,32,0
0000758E  00        
                    11626   @m68kde~1_264:
00007590  4C45 4120 11627          dc.b      76,69,65,32,0
00007594  00        
                    11628   @m68kde~1_265:
00007596  4C49 4E4B 11629          dc.b      76,73,78,75,32,0
0000759A  2000      
                    11630   @m68kde~1_266:
0000759C  4125 642C 11631          dc.b      65,37,100,44,35,37,100,0
000075A0  2325 6400 
                    11632   @m68kde~1_267:
000075A4  4D4F 5645 11633          dc.b      77,79,86,69,46,66,32,0
000075A8  2E42 2000 
                    11634   @m68kde~1_268:
000075AC  4D4F 5645 11635          dc.b      77,79,86,69,46,76,32,0
000075B0  2E4C 2000 
                    11636   @m68kde~1_269:
000075B4  4D4F 5645 11637          dc.b      77,79,86,69,46,87,32,0
000075B8  2E57 2000 
                    11638   @m68kde~1_270:
000075BC  4D4F 5645 11639          dc.b      77,79,86,69,32,0
000075C0  2000      
                    11640   @m68kde~1_271:
000075C2  2C43 4352 11641          dc.b      44,67,67,82,0
000075C6  00        
                    11642   @m68kde~1_272:
000075C8  4D4F 5645 11643          dc.b      77,79,86,69,32,83,82,44,0
000075CC  2053 522C 
000075D0  00        
                    11644   @m68kde~1_273:
000075D2  2C53 5200 11645          dc.b      44,83,82,0
                    11646   @m68kde~1_274:
000075D6  4D4F 5645 11647          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000075DA  2055 5350 
000075DE  2C41 2564 
000075E2  00        
                    11648   @m68kde~1_275:
000075E4  4D4F 5645 11649          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000075E8  2041 2564 
000075EC  2C55 5350 
000075F0  00        
                    11650   @m68kde~1_276:
000075F2  4D4F 5645 11651          dc.b      77,79,86,69,77,0
000075F6  4D00      
                    11652   @m68kde~1_277:
000075F8  4425 6400 11653          dc.b      68,37,100,0
                    11654   @m68kde~1_278:
000075FC  2F44 2564 11655          dc.b      47,68,37,100,0
00007600  00        
                    11656   @m68kde~1_279:
00007602  4125 6400 11657          dc.b      65,37,100,0
                    11658   @m68kde~1_280:
00007606  2F41 2564 11659          dc.b      47,65,37,100,0
0000760A  00        
                    11660   @m68kde~1_281:
0000760C  4D4F 5645 11661          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007610  502E 5720 
00007614  2425 5828 
00007618  4125 64   
0000761B  292C 4425 11662          dc.b      41,44,68,37,100,0
0000761F  6400      
                    11663   @m68kde~1_282:
00007622  4D4F 5645 11664          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007626  502E 4C20 
0000762A  2425 5828 
0000762E  4125 64   
00007631  292C 4425 11665          dc.b      41,44,68,37,100,0
00007635  6400      
                    11666   @m68kde~1_283:
00007638  4D4F 5645 11667          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
0000763C  502E 5720 
00007640  4425 642C 
00007644  2425 58   
00007647  2841 2564 11668          dc.b      40,65,37,100,41,0
0000764B  2900      
                    11669   @m68kde~1_284:
0000764E  4D4F 5645 11670          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007652  502E 4C20 
00007656  4425 642C 
0000765A  2425 58   
0000765D  2841 2564 11671          dc.b      40,65,37,100,41,0
00007661  2900      
                    11672   @m68kde~1_285:
00007664  4D4F 5645 11673          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007668  5120 2324 
0000766C  2558 2C44 
00007670  2564 00   
                    11674   @m68kde~1_286:
00007674  4D55 4C53 11675          dc.b      77,85,76,83,32,0
00007678  2000      
                    11676   @m68kde~1_287:
0000767A  4D55 4C55 11677          dc.b      77,85,76,85,32,0
0000767E  2000      
                    11678   @m68kde~1_288:
00007680  4E42 4344 11679          dc.b      78,66,67,68,32,0
00007684  2000      
                    11680   @m68kde~1_289:
00007686  4E45 4700 11681          dc.b      78,69,71,0
                    11682   @m68kde~1_290:
0000768A  4E45 4758 11683          dc.b      78,69,71,88,0
0000768E  00        
                    11684   @m68kde~1_291:
00007690  4E4F 5000 11685          dc.b      78,79,80,0
                    11686   @m68kde~1_292:
00007694  4E4F 5400 11687          dc.b      78,79,84,0
                    11688   @m68kde~1_293:
00007698  4F52 00   11689          dc.b      79,82,0
                    11690   @m68kde~1_294:
0000769C  4F52 4920 11691          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000076A0  2324 2532 
000076A4  582C 4343 
000076A8  5200      
                    11692   @m68kde~1_295:
000076AA  4F52 4920 11693          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000076AE  2023 2425 
000076B2  582C 5352 
000076B6  00        
                    11694   @m68kde~1_296:
000076B8  5045 4120 11695          dc.b      80,69,65,32,0
000076BC  00        
                    11696   @m68kde~1_297:
000076BE  5245 5345 11697          dc.b      82,69,83,69,84,0
000076C2  5400      
                    11698   @m68kde~1_298:
000076C4  5254 4500 11699          dc.b      82,84,69,0
                    11700   @m68kde~1_299:
000076C8  5254 5200 11701          dc.b      82,84,82,0
                    11702   @m68kde~1_300:
000076CC  5254 5300 11703          dc.b      82,84,83,0
                    11704   @m68kde~1_301:
000076D0  5354 4F50 11705          dc.b      83,84,79,80,32,35,36,37,88,0
000076D4  2023 2425 
000076D8  5800      
                    11706   @m68kde~1_302:
000076DA  5342 4344 11707          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
000076DE  2044 2564 
000076E2  2C44 2564 
000076E6  00        
                    11708   @m68kde~1_303:
000076E8  5342 4344 11709          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000076EC  202D 2841 
000076F0  2564 292C 
000076F4  2D28 41   
000076F7  2564 2900 11710          dc.b      37,100,41,0
                    11711   @m68kde~1_304:
000076FC  5300      11712          dc.b      83,0
                    11713   @m68kde~1_305:
000076FE  5355 4241 11714          dc.b      83,85,66,65,46,87,32,0
00007702  2E57 2000 
                    11715   @m68kde~1_306:
00007706  5355 4241 11716          dc.b      83,85,66,65,46,76,32,0
0000770A  2E4C 2000 
                    11717   @m68kde~1_307:
0000770E  5355 4200 11718          dc.b      83,85,66,0
                    11719   @m68kde~1_308:
00007712  5355 4251 11720          dc.b      83,85,66,81,0
00007716  00        
                    11721   @m68kde~1_309:
00007718  5355 4258 11722          dc.b      83,85,66,88,0
0000771C  00        
                    11723   @m68kde~1_310:
0000771E  4425 3158 11724          dc.b      68,37,49,88,44,68,37,49,88,0
00007722  2C44 2531 
00007726  5800      
                    11725   @m68kde~1_311:
00007728  2D28 4125 11726          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
0000772C  3158 292C 
00007730  2D28 4125 
00007734  3158 29   
00007737  00        11727          dc.b      0
                    11728   @m68kde~1_312:
00007738  5357 4150 11729          dc.b      83,87,65,80,32,68,37,100,0
0000773C  2044 2564 
00007740  00        
                    11730   @m68kde~1_313:
00007742  5441 5320 11731          dc.b      84,65,83,32,0
00007746  00        
                    11732   @m68kde~1_314:
00007748  5452 4150 11733          dc.b      84,82,65,80,32,35,37,100,0
0000774C  2023 2564 
00007750  00        
                    11734   @m68kde~1_315:
00007752  5452 4150 11735          dc.b      84,82,65,80,86,0
00007756  5600      
                    11736   @m68kde~1_316:
00007758  5453 5400 11737          dc.b      84,83,84,0
                    11738   @m68kde~1_317:
0000775C  554E 4C4B 11739          dc.b      85,78,76,75,32,65,37,100,0
00007760  2041 2564 
00007764  00        
                    11740   MemoryTest_progressBarStringRead:
00007766  00        11741          dc.b      0
00007767            11742          ds.b      23
                    11743   @itoa_1:
0000777E  2D32 3134 11744          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007782  3734 3833 
00007786  3634 3800 
                    11745   __ctype:
0000778A  0040 4040 11746          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0000778E  4040 4040 
00007792  4040 5050 
00007796  5050 50   
00007799  4040 4040 11747          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
0000779D  4040 4040 
000077A1  4040 4040 
000077A5  4040 40   
000077A8  4040 40D0 11748          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
000077AC  A0A0 A0A0 
000077B0  A0A0 A0A0 
000077B4  A0A0 A0A0 11749          dc.b      160,160,160,160,160,160,160,140,140,140,140
000077B8  A0A0 A08C 
000077BC  8C8C 8C   
000077BF  8C8C 8C8C 11750          dc.b      140,140,140,140,140,140,160,160,160,160,160
000077C3  8C8C A0A0 
000077C7  A0A0 A0   
000077CA  A0A0 8A8A 11751          dc.b      160,160,138,138,138,138,138,138,130,130,130
000077CE  8A8A 8A8A 
000077D2  8282 82   
000077D5  8282 8282 11752          dc.b      130,130,130,130,130,130,130,130,130,130,130
000077D9  8282 8282 
000077DD  8282 82   
000077E0  8282 8282 11753          dc.b      130,130,130,130,130,130,160,160,160,160,160
000077E4  8282 A0A0 
000077E8  A0A0 A0   
000077EB  A089 8989 11754          dc.b      160,137,137,137,137,137,137,129,129,129,129
000077EF  8989 8981 
000077F3  8181 81   
000077F6  8181 8181 11755          dc.b      129,129,129,129,129,129,129,129,129,129,129
000077FA  8181 8181 
000077FE  8181 81   
00007801  8181 8181 11756          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00007805  81A0 A0A0 
00007809  A040 0000 
0000780D  00        
0000780E  0000 0000 11757          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007812  0000 0000 
00007816  0000 0000 
0000781A  0000 0000 
0000781E  0000 0000 
00007822  0000      
00007824  0000 0000 11758          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007828  0000 0000 
0000782C  0000 0000 
00007830  0000 0000 
00007834  0000 0000 
00007838  0000      
0000783A  0000 0000 11759          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000783E  0000 0000 
00007842  0000 0000 
00007846  0000 0000 
0000784A  0000 0000 
0000784E  0000      
00007850  0000 0000 11760          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007854  0000 0000 
00007858  0000 0000 
0000785C  0000 0000 
00007860  0000 0000 
00007864  0000      
00007866  0000 0000 11761          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000786A  0000 0000 
0000786E  0000 0000 
00007872  0000 0000 
00007876  0000 0000 
0000787A  0000      
0000787C  0000 0000 11762          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00007880  0000 0000 
00007884  0000 0000 
00007888  0000 00   
                    11763          section   data
0000788C            11764                   align
          0000 788C 11765   DataStart       equ       *
                    11766   
                    11767   *********************************************************************************************************
                    11768   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11769   * to ram as part of the CStart routine in this file
                    11770   *********************************************************************************************************
                    11771   
                    11772   MemoryTest_progressBarStringWrite:
0000788C  00        11773          dc.b      0
0000788D            11774          ds.b      23
                    11775          section   bss
000078A4            11776                   align
          0000 78A4 11777   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11778   
                    11779   *********************************************************************************************************
                    11780   * Section for Uninitialised Data held in ROM as constants
                    11781   *********************************************************************************************************
                    11782   
08030000            11783                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0018 11784   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11785   
                    11786   
08030000            11787   bss             org       bss
                    11788   
                    11789   *********************************************************************************************************
                    11790   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11791   * install the exception handler using the C function InstallExceptionHandler()
                    11792   *********************************************************************************************************
                    11793   
                    11794   
                    11795   
08030000            11796   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            11797   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            11798   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            11799   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            11800   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            11801   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            11802   VCheck           ds.l    1      ditto
0803001C            11803   VTrapV           ds.l    1      ditto
08030020            11804   VPrivilege       ds.l    1      ditto
08030024            11805   VTrace           ds.l    1
08030028            11806   VLine1010emul    ds.l    1
0803002C            11807   VLine1111emul    ds.l    1
08030030            11808   VUnassigned1     ds.l    1
08030034            11809   VUnassigned2     ds.l    1
08030038            11810   VUnassigned3     ds.l    1
0803003C            11811   VUninit_IRQ      ds.l    1
08030040            11812   VUnassigned4     ds.l    1
08030044            11813   VUnassigned5     ds.l    1
08030048            11814   VUnassigned6     ds.l    1
0803004C            11815   VUnassigned7     ds.l    1
08030050            11816   VUnassigned8     ds.l    1
08030054            11817   VUnassigned9     ds.l    1
08030058            11818   VUnassigned10    ds.l    1
0803005C            11819   VUnassigned11    ds.l    1
08030060            11820   VSpuriousIRQ     ds.l    1
                    11821   
                    11822   * Interrupt handlers Vector 25-31
08030064            11823   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            11824   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            11825   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            11826   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            11827   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            11828   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            11829   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11830   
                    11831   * Trap Handler vectors 32-47
08030080            11832   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            11833   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            11834   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            11835   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            11836   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            11837   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            11838   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            11839   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            11840   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            11841   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            11842   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            11843   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            11844   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            11845   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            11846   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            11847   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11848   
                    11849   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11850   
                    11851   ***********************************************************************************************************
                    11852   * Other Variables
                    11853   ***********************************************************************************************************
                    11854   *__DebugA5       ds.l    1
                    11855   *__UserA5        ds.l    1
                    11856   
                    11857   ***********************************************************************************************************
080300C0            11858   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            11859   __allocp:       ds.l    0       ; start of allocation units
080300C4            11860   __heap:         ds.l    0       ; pointers for malloc functions
                    11861   
                    11862   *__himem:       ds.l    himem            ; highest memory location + 1
                    11863   *__stklen:      ds.l    stklen           ; default stack size
                    11864   
                    11865   *********************************************************************************************************
                    11866   * Section for Heap
                    11867   *********************************************************************************************************
                    11868   
                    11869   _i:
080300C4            11870          ds.b      4
                    11871   _x:
080300C8            11872          ds.b      4
                    11873   _y:
080300CC            11874          ds.b      4
                    11875   _z:
080300D0            11876          ds.b      4
                    11877   _PortA_Count:
080300D4            11878          ds.b      4
                    11879   _Trace:
080300D8            11880          ds.b      4
                    11881   _GoFlag:
080300DC            11882          ds.b      4
                    11883   _Echo:
080300E0            11884          ds.b      4
                    11885   _d0:
080300E4            11886          ds.b      4
                    11887   _d1:
080300E8            11888          ds.b      4
                    11889   _d2:
080300EC            11890          ds.b      4
                    11891   _d3:
080300F0            11892          ds.b      4
                    11893   _d4:
080300F4            11894          ds.b      4
                    11895   _d5:
080300F8            11896          ds.b      4
                    11897   _d6:
080300FC            11898          ds.b      4
                    11899   _d7:
08030100            11900          ds.b      4
                    11901   _a0:
08030104            11902          ds.b      4
                    11903   _a1:
08030108            11904          ds.b      4
                    11905   _a2:
0803010C            11906          ds.b      4
                    11907   _a3:
08030110            11908          ds.b      4
                    11909   _a4:
08030114            11910          ds.b      4
                    11911   _a5:
08030118            11912          ds.b      4
                    11913   _a6:
0803011C            11914          ds.b      4
                    11915   _PC:
08030120            11916          ds.b      4
                    11917   _SSP:
08030124            11918          ds.b      4
                    11919   _USP:
08030128            11920          ds.b      4
                    11921   _SR:
0803012C            11922          ds.b      2
                    11923   _BreakPointAddress:
0803012E            11924          ds.b      32
                    11925   _BreakPointInstruction:
0803014E            11926          ds.b      16
                    11927   _BreakPointSetOrCleared:
0803015E            11928          ds.b      32
                    11929   _InstructionSize:
0803017E            11930          ds.b      4
                    11931   _WatchPointAddress:
08030182            11932          ds.b      32
                    11933   _WatchPointSetOrCleared:
080301A2            11934          ds.b      32
                    11935   _WatchPointString:
080301C2            11936          ds.b      800
                    11937   _Instruction:
080304E2            11938          ds.b      100
                    11939   _TempString:
08030546            11940          ds.b      100
                    11941          section   heap
080305AA            11942                   align
          0803 05AA 11943   bssEnd          equ *                   end of storage space for unitialised variables
                    11944   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05AA 11945   heap   equ       *
080305AA            11946                    align
          0000 0000

Assembly errors: 0
